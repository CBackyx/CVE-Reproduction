
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	200024d0 	.word	0x200024d0

K_SYSCALL_DECLARE3(K_SYSCALL_K_STACK_POP, k_stack_pop, int, struct k_stack *, stack, u32_t *, data, s32_t, timeout)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex)

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
   4:	000078c5 	.word	0x000078c5
   8:	00007931 	.word	0x00007931
   c:	000076d9 	.word	0x000076d9
  10:	000076d9 	.word	0x000076d9
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  14:	000076d9 	.word	0x000076d9
		if (fdtable[fd].obj == NULL) {
  18:	000076d9 	.word	0x000076d9
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  1c:	000076d9 	.word	0x000076d9
  20:	000076d9 	.word	0x000076d9

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE0(K_SYSCALL_Z_ERRNO, z_errno, int *)
  24:	000076d9 	.word	0x000076d9
	errno = ENFILE;
  28:	000076d9 	.word	0x000076d9
	return -1;
  2c:	000071d1 	.word	0x000071d1

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
  30:	000076d9 	.word	0x000076d9
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  34:	000076d9 	.word	0x000076d9
  38:	00007179 	.word	0x00007179
  3c:	00006e55 	.word	0x00006e55

00000040 <_irq_vector_table>:
  40:	00007885 00007885 00007885 00007885     .x...x...x...x..
  50:	00007885 00007885 00007885 00007885     .x...x...x...x..
		sys_pm_notify_power_state_exit(pm_state);
		_sys_pm_power_state_exit_post_ops(pm_state);
	}

	return pm_state;
}
  60:	00007885 00007885 00007885 00007885     .x...x...x...x..
  70:	00007885 00007885 00007885 00007885     .x...x...x...x..
  80:	00007885 00007885 00007885 00007885     .x...x...x...x..
  90:	00007885 00007885 00007885 00007885     .x...x...x...x..
  a0:	00007885 00007885 00007885 00007885     .x...x...x...x..
  b0:	00007885 00007885 00007885 00007885     .x...x...x...x..
  c0:	00007885 00007885 00007885 00007885     .x...x...x...x..
  d0:	00007885 00007885 00007885 00007885     .x...x...x...x..
  e0:	00007885 00007885 00007885 00007885     .x...x...x...x..
  f0:	00007885 00007885 00007885 00007885     .x...x...x...x..

Disassembly of section _TEXT_SECTION_NAME_2:

00000100 <__aeabi_ldivmod>:
     100:	b97b      	cbnz	r3, 122 <__aeabi_ldivmod+0x22>
     102:	b972      	cbnz	r2, 122 <__aeabi_ldivmod+0x22>
     104:	2900      	cmp	r1, #0
     106:	bfbe      	ittt	lt
     108:	2000      	movlt	r0, #0
     10a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     10e:	e006      	blt.n	11e <__aeabi_ldivmod+0x1e>
     110:	bf08      	it	eq
     112:	2800      	cmpeq	r0, #0
     114:	bf1c      	itt	ne
     116:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     11a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     11e:	f000 b857 	b.w	1d0 <__aeabi_idiv0>
     122:	f1ad 0c08 	sub.w	ip, sp, #8
     126:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     12a:	2900      	cmp	r1, #0
     12c:	db09      	blt.n	142 <CONFIG_IDLE_STACK_SIZE+0x2>
     12e:	2b00      	cmp	r3, #0
     130:	db1a      	blt.n	168 <CONFIG_IDLE_STACK_SIZE+0x28>
     132:	f000 f84f 	bl	1d4 <__udivmoddi4>
     136:	f8dd e004 	ldr.w	lr, [sp, #4]
     13a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     13e:	b004      	add	sp, #16
     140:	4770      	bx	lr
     142:	4240      	negs	r0, r0
     144:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     148:	2b00      	cmp	r3, #0
     14a:	db1b      	blt.n	184 <CONFIG_IDLE_STACK_SIZE+0x44>
     14c:	f000 f842 	bl	1d4 <__udivmoddi4>
     150:	f8dd e004 	ldr.w	lr, [sp, #4]
     154:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     158:	b004      	add	sp, #16
     15a:	4240      	negs	r0, r0
     15c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     160:	4252      	negs	r2, r2
     162:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     166:	4770      	bx	lr
     168:	4252      	negs	r2, r2
     16a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     16e:	f000 f831 	bl	1d4 <__udivmoddi4>
     172:	f8dd e004 	ldr.w	lr, [sp, #4]
     176:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     17a:	b004      	add	sp, #16
     17c:	4240      	negs	r0, r0
     17e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     182:	4770      	bx	lr
     184:	4252      	negs	r2, r2
     186:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     18a:	f000 f823 	bl	1d4 <__udivmoddi4>
     18e:	f8dd e004 	ldr.w	lr, [sp, #4]
     192:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     196:	b004      	add	sp, #16
     198:	4252      	negs	r2, r2
     19a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     19e:	4770      	bx	lr

000001a0 <__aeabi_uldivmod>:
     1a0:	b953      	cbnz	r3, 1b8 <__aeabi_uldivmod+0x18>
     1a2:	b94a      	cbnz	r2, 1b8 <__aeabi_uldivmod+0x18>
     1a4:	2900      	cmp	r1, #0
     1a6:	bf08      	it	eq
     1a8:	2800      	cmpeq	r0, #0
     1aa:	bf1c      	itt	ne
     1ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     1b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     1b4:	f000 b80c 	b.w	1d0 <__aeabi_idiv0>
     1b8:	f1ad 0c08 	sub.w	ip, sp, #8
     1bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     1c0:	f000 f808 	bl	1d4 <__udivmoddi4>
     1c4:	f8dd e004 	ldr.w	lr, [sp, #4]
     1c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     1cc:	b004      	add	sp, #16
     1ce:	4770      	bx	lr

000001d0 <__aeabi_idiv0>:
     1d0:	4770      	bx	lr
     1d2:	bf00      	nop

000001d4 <__udivmoddi4>:
     1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     1d8:	9f09      	ldr	r7, [sp, #36]	; 0x24
     1da:	4615      	mov	r5, r2
     1dc:	4604      	mov	r4, r0
     1de:	468e      	mov	lr, r1
     1e0:	461e      	mov	r6, r3
     1e2:	2b00      	cmp	r3, #0
     1e4:	f040 80cc 	bne.w	380 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x80>
     1e8:	428a      	cmp	r2, r1
     1ea:	fab2 fc82 	clz	ip, r2
     1ee:	d94c      	bls.n	28a <__udivmoddi4+0xb6>
     1f0:	f1bc 0f00 	cmp.w	ip, #0
     1f4:	d00b      	beq.n	20e <__udivmoddi4+0x3a>
     1f6:	f1cc 0820 	rsb	r8, ip, #32
     1fa:	fa01 fe0c 	lsl.w	lr, r1, ip
     1fe:	fa20 f808 	lsr.w	r8, r0, r8
     202:	fa02 f50c 	lsl.w	r5, r2, ip
     206:	ea48 0e0e 	orr.w	lr, r8, lr
     20a:	fa00 f40c 	lsl.w	r4, r0, ip
     20e:	ea4f 4915 	mov.w	r9, r5, lsr #16
     212:	fa1f f885 	uxth.w	r8, r5
     216:	fbbe faf9 	udiv	sl, lr, r9
     21a:	0c21      	lsrs	r1, r4, #16
     21c:	fb09 e31a 	mls	r3, r9, sl, lr
     220:	fb0a fb08 	mul.w	fp, sl, r8
     224:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     228:	459b      	cmp	fp, r3
     22a:	d92a      	bls.n	282 <__udivmoddi4+0xae>
     22c:	18eb      	adds	r3, r5, r3
     22e:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
     232:	d204      	bcs.n	23e <__udivmoddi4+0x6a>
     234:	459b      	cmp	fp, r3
     236:	d902      	bls.n	23e <__udivmoddi4+0x6a>
     238:	f1aa 0002 	sub.w	r0, sl, #2
     23c:	442b      	add	r3, r5
     23e:	eba3 030b 	sub.w	r3, r3, fp
     242:	b2a4      	uxth	r4, r4
     244:	fbb3 f2f9 	udiv	r2, r3, r9
     248:	fb09 3312 	mls	r3, r9, r2, r3
     24c:	fb02 f808 	mul.w	r8, r2, r8
     250:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     254:	45a0      	cmp	r8, r4
     256:	d916      	bls.n	286 <__udivmoddi4+0xb2>
     258:	192c      	adds	r4, r5, r4
     25a:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     25e:	d203      	bcs.n	268 <__udivmoddi4+0x94>
     260:	45a0      	cmp	r8, r4
     262:	d901      	bls.n	268 <__udivmoddi4+0x94>
     264:	1e93      	subs	r3, r2, #2
     266:	442c      	add	r4, r5
     268:	eba4 0408 	sub.w	r4, r4, r8
     26c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     270:	b127      	cbz	r7, 27c <__udivmoddi4+0xa8>
     272:	fa24 f40c 	lsr.w	r4, r4, ip
     276:	2300      	movs	r3, #0
     278:	603c      	str	r4, [r7, #0]
     27a:	607b      	str	r3, [r7, #4]
     27c:	4631      	mov	r1, r6
     27e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     282:	4650      	mov	r0, sl
     284:	e7db      	b.n	23e <__udivmoddi4+0x6a>
     286:	4613      	mov	r3, r2
     288:	e7ee      	b.n	268 <__udivmoddi4+0x94>
     28a:	b902      	cbnz	r2, 28e <__udivmoddi4+0xba>
     28c:	deff      	udf	#255	; 0xff
     28e:	f1bc 0f00 	cmp.w	ip, #0
     292:	d12e      	bne.n	2f2 <__udivmoddi4+0x11e>
     294:	1a8b      	subs	r3, r1, r2
     296:	2601      	movs	r6, #1
     298:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     29c:	b2aa      	uxth	r2, r5
     29e:	fbb3 f8fe 	udiv	r8, r3, lr
     2a2:	0c21      	lsrs	r1, r4, #16
     2a4:	fb0e 3318 	mls	r3, lr, r8, r3
     2a8:	fb08 f902 	mul.w	r9, r8, r2
     2ac:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     2b0:	4599      	cmp	r9, r3
     2b2:	d961      	bls.n	378 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x78>
     2b4:	18eb      	adds	r3, r5, r3
     2b6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     2ba:	d204      	bcs.n	2c6 <__udivmoddi4+0xf2>
     2bc:	4599      	cmp	r9, r3
     2be:	d902      	bls.n	2c6 <__udivmoddi4+0xf2>
     2c0:	f1a8 0002 	sub.w	r0, r8, #2
     2c4:	442b      	add	r3, r5
     2c6:	eba3 0309 	sub.w	r3, r3, r9
     2ca:	b2a4      	uxth	r4, r4
     2cc:	fbb3 f1fe 	udiv	r1, r3, lr
     2d0:	fb0e 3311 	mls	r3, lr, r1, r3
     2d4:	434a      	muls	r2, r1
     2d6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     2da:	42a2      	cmp	r2, r4
     2dc:	d94e      	bls.n	37c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x7c>
     2de:	192c      	adds	r4, r5, r4
     2e0:	f101 33ff 	add.w	r3, r1, #4294967295	; 0xffffffff
     2e4:	d203      	bcs.n	2ee <__udivmoddi4+0x11a>
     2e6:	42a2      	cmp	r2, r4
     2e8:	d901      	bls.n	2ee <__udivmoddi4+0x11a>
     2ea:	1e8b      	subs	r3, r1, #2
     2ec:	442c      	add	r4, r5
     2ee:	1aa4      	subs	r4, r4, r2
     2f0:	e7bc      	b.n	26c <__udivmoddi4+0x98>
     2f2:	f1cc 0e20 	rsb	lr, ip, #32
     2f6:	fa02 f50c 	lsl.w	r5, r2, ip
     2fa:	fa21 f90e 	lsr.w	r9, r1, lr
     2fe:	fa01 f30c 	lsl.w	r3, r1, ip
     302:	fa20 fe0e 	lsr.w	lr, r0, lr
     306:	ea4e 0303 	orr.w	r3, lr, r3
     30a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     30e:	fa00 f40c 	lsl.w	r4, r0, ip
     312:	fbb9 f1f8 	udiv	r1, r9, r8
     316:	fa1f fe85 	uxth.w	lr, r5
     31a:	fb08 9211 	mls	r2, r8, r1, r9
     31e:	0c18      	lsrs	r0, r3, #16
     320:	fb01 f60e 	mul.w	r6, r1, lr
     324:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
     328:	4296      	cmp	r6, r2
     32a:	d921      	bls.n	370 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x70>
     32c:	18aa      	adds	r2, r5, r2
     32e:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     332:	d203      	bcs.n	33c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x3c>
     334:	4296      	cmp	r6, r2
     336:	d901      	bls.n	33c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x3c>
     338:	1e88      	subs	r0, r1, #2
     33a:	442a      	add	r2, r5
     33c:	1b92      	subs	r2, r2, r6
     33e:	b29b      	uxth	r3, r3
     340:	fbb2 f9f8 	udiv	r9, r2, r8
     344:	fb08 2219 	mls	r2, r8, r9, r2
     348:	fb09 fe0e 	mul.w	lr, r9, lr
     34c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
     350:	459e      	cmp	lr, r3
     352:	d90f      	bls.n	374 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x74>
     354:	18eb      	adds	r3, r5, r3
     356:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
     35a:	d204      	bcs.n	366 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x66>
     35c:	459e      	cmp	lr, r3
     35e:	d902      	bls.n	366 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x66>
     360:	f1a9 0602 	sub.w	r6, r9, #2
     364:	442b      	add	r3, r5
     366:	eba3 030e 	sub.w	r3, r3, lr
     36a:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     36e:	e793      	b.n	298 <__udivmoddi4+0xc4>
     370:	4608      	mov	r0, r1
     372:	e7e3      	b.n	33c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x3c>
     374:	464e      	mov	r6, r9
     376:	e7f6      	b.n	366 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x66>
     378:	4640      	mov	r0, r8
     37a:	e7a4      	b.n	2c6 <__udivmoddi4+0xf2>
     37c:	460b      	mov	r3, r1
     37e:	e7b6      	b.n	2ee <__udivmoddi4+0x11a>
     380:	428b      	cmp	r3, r1
     382:	d905      	bls.n	390 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x90>
     384:	b10f      	cbz	r7, 38a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8a>
     386:	e9c7 0100 	strd	r0, r1, [r7]
     38a:	2600      	movs	r6, #0
     38c:	4630      	mov	r0, r6
     38e:	e775      	b.n	27c <__udivmoddi4+0xa8>
     390:	fab3 fc83 	clz	ip, r3
     394:	f1bc 0f00 	cmp.w	ip, #0
     398:	d10f      	bne.n	3ba <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xba>
     39a:	428b      	cmp	r3, r1
     39c:	d301      	bcc.n	3a2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa2>
     39e:	4282      	cmp	r2, r0
     3a0:	d809      	bhi.n	3b6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb6>
     3a2:	1a84      	subs	r4, r0, r2
     3a4:	eb61 0e03 	sbc.w	lr, r1, r3
     3a8:	2001      	movs	r0, #1
     3aa:	2f00      	cmp	r7, #0
     3ac:	d06a      	beq.n	484 <CONFIG_FLASH_SIZE+0x84>
     3ae:	e9c7 4e00 	strd	r4, lr, [r7]
     3b2:	2600      	movs	r6, #0
     3b4:	e762      	b.n	27c <__udivmoddi4+0xa8>
     3b6:	4660      	mov	r0, ip
     3b8:	e7f7      	b.n	3aa <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xaa>
     3ba:	f1cc 0e20 	rsb	lr, ip, #32
     3be:	fa03 f30c 	lsl.w	r3, r3, ip
     3c2:	fa22 f50e 	lsr.w	r5, r2, lr
     3c6:	fa21 f40e 	lsr.w	r4, r1, lr
     3ca:	431d      	orrs	r5, r3
     3cc:	fa01 f30c 	lsl.w	r3, r1, ip
     3d0:	fa20 f10e 	lsr.w	r1, r0, lr
     3d4:	430b      	orrs	r3, r1
     3d6:	ea4f 4a15 	mov.w	sl, r5, lsr #16
     3da:	fa00 f60c 	lsl.w	r6, r0, ip
     3de:	fbb4 f9fa 	udiv	r9, r4, sl
     3e2:	fa1f f885 	uxth.w	r8, r5
     3e6:	fb0a 4019 	mls	r0, sl, r9, r4
     3ea:	0c1c      	lsrs	r4, r3, #16
     3ec:	fb09 f108 	mul.w	r1, r9, r8
     3f0:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
     3f4:	42a1      	cmp	r1, r4
     3f6:	fa02 f20c 	lsl.w	r2, r2, ip
     3fa:	d93f      	bls.n	47c <CONFIG_FLASH_SIZE+0x7c>
     3fc:	192c      	adds	r4, r5, r4
     3fe:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     402:	d204      	bcs.n	40e <CONFIG_FLASH_SIZE+0xe>
     404:	42a1      	cmp	r1, r4
     406:	d902      	bls.n	40e <CONFIG_FLASH_SIZE+0xe>
     408:	f1a9 0002 	sub.w	r0, r9, #2
     40c:	442c      	add	r4, r5
     40e:	1a64      	subs	r4, r4, r1
     410:	b29b      	uxth	r3, r3
     412:	fbb4 f9fa 	udiv	r9, r4, sl
     416:	fb0a 4419 	mls	r4, sl, r9, r4
     41a:	fb09 f808 	mul.w	r8, r9, r8
     41e:	ea43 4104 	orr.w	r1, r3, r4, lsl #16
     422:	4588      	cmp	r8, r1
     424:	d92c      	bls.n	480 <CONFIG_FLASH_SIZE+0x80>
     426:	1869      	adds	r1, r5, r1
     428:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
     42c:	d204      	bcs.n	438 <CONFIG_FLASH_SIZE+0x38>
     42e:	4588      	cmp	r8, r1
     430:	d902      	bls.n	438 <CONFIG_FLASH_SIZE+0x38>
     432:	f1a9 0302 	sub.w	r3, r9, #2
     436:	4429      	add	r1, r5
     438:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     43c:	eba1 0108 	sub.w	r1, r1, r8
     440:	fba0 8902 	umull	r8, r9, r0, r2
     444:	4549      	cmp	r1, r9
     446:	46c2      	mov	sl, r8
     448:	464c      	mov	r4, r9
     44a:	d302      	bcc.n	452 <CONFIG_FLASH_SIZE+0x52>
     44c:	d106      	bne.n	45c <CONFIG_FLASH_SIZE+0x5c>
     44e:	4546      	cmp	r6, r8
     450:	d204      	bcs.n	45c <CONFIG_FLASH_SIZE+0x5c>
     452:	ebb8 0a02 	subs.w	sl, r8, r2
     456:	eb69 0405 	sbc.w	r4, r9, r5
     45a:	3801      	subs	r0, #1
     45c:	b197      	cbz	r7, 484 <CONFIG_FLASH_SIZE+0x84>
     45e:	ebb6 030a 	subs.w	r3, r6, sl
     462:	eb61 0604 	sbc.w	r6, r1, r4
     466:	fa06 fe0e 	lsl.w	lr, r6, lr
     46a:	fa23 f30c 	lsr.w	r3, r3, ip
     46e:	ea4e 0303 	orr.w	r3, lr, r3
     472:	fa26 f60c 	lsr.w	r6, r6, ip
     476:	e9c7 3600 	strd	r3, r6, [r7]
     47a:	e79a      	b.n	3b2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb2>
     47c:	4648      	mov	r0, r9
     47e:	e7c6      	b.n	40e <CONFIG_FLASH_SIZE+0xe>
     480:	464b      	mov	r3, r9
     482:	e7d9      	b.n	438 <CONFIG_FLASH_SIZE+0x38>
     484:	463e      	mov	r6, r7
     486:	e6f9      	b.n	27c <__udivmoddi4+0xa8>

00000488 <main>:
#include <zephyr.h>
#include <logging/log.h>
LOG_MODULE_REGISTER(main);

void main(void)
{
     488:	b507      	push	{r0, r1, r2, lr}
     48a:	4a0d      	ldr	r2, [pc, #52]	; (4c0 <main+0x38>)
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
     48c:	480d      	ldr	r0, [pc, #52]	; (4c4 <main+0x3c>)
     48e:	6813      	ldr	r3, [r2, #0]
     490:	9301      	str	r3, [sp, #4]
	/* Nothing to be done other than the selecting appropriate build
	 * config options. Everything is driven from the USB host side.
	 */
	LOG_INF("The device is put in USB mass storage mode.\n");
     492:	f04f 0100 	mov.w	r1, #0
     496:	2303      	movs	r3, #3
     498:	f363 0107 	bfi	r1, r3, #0, #8
     49c:	4b0a      	ldr	r3, [pc, #40]	; (4c8 <main+0x40>)
     49e:	1a1b      	subs	r3, r3, r0
     4a0:	08db      	lsrs	r3, r3, #3
     4a2:	9801      	ldr	r0, [sp, #4]
     4a4:	f363 118f 	bfi	r1, r3, #6, #10
     4a8:	6813      	ldr	r3, [r2, #0]
     4aa:	4298      	cmp	r0, r3
     4ac:	d001      	beq.n	4b2 <main+0x2a>
     4ae:	f00a fdb5 	bl	b01c <_StackCheckHandler>
     4b2:	4806      	ldr	r0, [pc, #24]	; (4cc <main+0x44>)
}
     4b4:	b003      	add	sp, #12
     4b6:	f85d eb04 	ldr.w	lr, [sp], #4
	LOG_INF("The device is put in USB mass storage mode.\n");
     4ba:	f002 bca5 	b.w	2e08 <log_0>
     4be:	bf00      	nop
     4c0:	200036b0 	.word	0x200036b0
     4c4:	0000b634 	.word	0x0000b634
     4c8:	0000b644 	.word	0x0000b644
     4cc:	0000b854 	.word	0x0000b854

000004d0 <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
     4d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     4d2:	68c7      	ldr	r7, [r0, #12]
     4d4:	4d0f      	ldr	r5, [pc, #60]	; (514 <get_bit_ptr+0x44>)
	u32_t *bitarray = level <= p->max_inline_level ?
     4d6:	f990 000b 	ldrsb.w	r0, [r0, #11]
{
     4da:	682c      	ldr	r4, [r5, #0]
     4dc:	9401      	str	r4, [sp, #4]
	u32_t *bitarray = level <= p->max_inline_level ?
     4de:	260c      	movs	r6, #12
     4e0:	434e      	muls	r6, r1
		&p->levels[level].bits : p->levels[level].bits_p;
     4e2:	4288      	cmp	r0, r1
     4e4:	eb07 0406 	add.w	r4, r7, r6
     4e8:	bfb8      	it	lt
     4ea:	59bc      	ldrlt	r4, [r7, r6]

	*word = &bitarray[bn / 32];
     4ec:	2a00      	cmp	r2, #0
     4ee:	4610      	mov	r0, r2
     4f0:	bfb8      	it	lt
     4f2:	f102 001f 	addlt.w	r0, r2, #31
     4f6:	1140      	asrs	r0, r0, #5
     4f8:	eb04 0180 	add.w	r1, r4, r0, lsl #2
     4fc:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
     4fe:	f002 001f 	and.w	r0, r2, #31
     502:	9a01      	ldr	r2, [sp, #4]
     504:	682b      	ldr	r3, [r5, #0]
     506:	429a      	cmp	r2, r3
     508:	d001      	beq.n	50e <get_bit_ptr+0x3e>
     50a:	f00a fd87 	bl	b01c <_StackCheckHandler>
     50e:	b003      	add	sp, #12
     510:	bdf0      	pop	{r4, r5, r6, r7, pc}
     512:	bf00      	nop
     514:	200036b0 	.word	0x200036b0

00000518 <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     518:	b513      	push	{r0, r1, r4, lr}
     51a:	4c0a      	ldr	r4, [pc, #40]	; (544 <set_free_bit+0x2c>)
     51c:	6823      	ldr	r3, [r4, #0]
     51e:	9301      	str	r3, [sp, #4]
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     520:	466b      	mov	r3, sp
     522:	f7ff ffd5 	bl	4d0 <get_bit_ptr>

	*word |= (1<<bit);
     526:	9a00      	ldr	r2, [sp, #0]
     528:	2301      	movs	r3, #1
     52a:	fa03 f000 	lsl.w	r0, r3, r0
     52e:	6813      	ldr	r3, [r2, #0]
     530:	4303      	orrs	r3, r0
     532:	6013      	str	r3, [r2, #0]
}
     534:	9a01      	ldr	r2, [sp, #4]
     536:	6823      	ldr	r3, [r4, #0]
     538:	429a      	cmp	r2, r3
     53a:	d001      	beq.n	540 <set_free_bit+0x28>
     53c:	f00a fd6e 	bl	b01c <_StackCheckHandler>
     540:	b002      	add	sp, #8
     542:	bd10      	pop	{r4, pc}
     544:	200036b0 	.word	0x200036b0

00000548 <clear_free_bit>:

static void clear_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     548:	b513      	push	{r0, r1, r4, lr}
     54a:	4c0b      	ldr	r4, [pc, #44]	; (578 <clear_free_bit+0x30>)
     54c:	6823      	ldr	r3, [r4, #0]
     54e:	9301      	str	r3, [sp, #4]
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     550:	466b      	mov	r3, sp
     552:	f7ff ffbd 	bl	4d0 <get_bit_ptr>

	*word &= ~(1<<bit);
     556:	9a00      	ldr	r2, [sp, #0]
     558:	2301      	movs	r3, #1
     55a:	fa03 f000 	lsl.w	r0, r3, r0
     55e:	6813      	ldr	r3, [r2, #0]
     560:	ea23 0300 	bic.w	r3, r3, r0
     564:	6013      	str	r3, [r2, #0]
}
     566:	9a01      	ldr	r2, [sp, #4]
     568:	6823      	ldr	r3, [r4, #0]
     56a:	429a      	cmp	r2, r3
     56c:	d001      	beq.n	572 <clear_free_bit+0x2a>
     56e:	f00a fd55 	bl	b01c <_StackCheckHandler>
     572:	b002      	add	sp, #8
     574:	bd10      	pop	{r4, pc}
     576:	bf00      	nop
     578:	200036b0 	.word	0x200036b0

0000057c <block_fits>:
	return p->n_max * p->max_sz;
}

static bool block_fits(struct sys_mem_pool_base *p,
		       int lvl, int bn, size_t *lsizes)
{
     57c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     57e:	4e12      	ldr	r6, [pc, #72]	; (5c8 <block_fits+0x4c>)
	u8_t *parent, *block_end;
	size_t parent_sz;

	block_end = (u8_t *)block_ptr(p, lsizes[lvl], bn) + lsizes[lvl];
     580:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
{
     584:	6834      	ldr	r4, [r6, #0]
     586:	9401      	str	r4, [sp, #4]
	block_end = (u8_t *)block_ptr(p, lsizes[lvl], bn) + lsizes[lvl];
     588:	6804      	ldr	r4, [r0, #0]
     58a:	fb02 5505 	mla	r5, r2, r5, r5
     58e:	008f      	lsls	r7, r1, #2
     590:	4425      	add	r5, r4

	if (lvl == 0) {
     592:	b969      	cbnz	r1, 5b0 <block_fits+0x34>
	return p->n_max * p->max_sz;
     594:	8902      	ldrh	r2, [r0, #8]
     596:	6843      	ldr	r3, [r0, #4]
     598:	4353      	muls	r3, r2
	} else {
		parent_sz = lsizes[lvl - 1];
		parent = block_ptr(p, lsizes[lvl - 1], bn / 4);
	}

	return block_end <= (parent + parent_sz);
     59a:	441c      	add	r4, r3
}
     59c:	9a01      	ldr	r2, [sp, #4]
     59e:	6833      	ldr	r3, [r6, #0]
     5a0:	42a5      	cmp	r5, r4
     5a2:	bf8c      	ite	hi
     5a4:	2000      	movhi	r0, #0
     5a6:	2001      	movls	r0, #1
     5a8:	429a      	cmp	r2, r3
     5aa:	d00b      	beq.n	5c4 <block_fits+0x48>
     5ac:	f00a fd36 	bl	b01c <_StackCheckHandler>
		parent_sz = lsizes[lvl - 1];
     5b0:	443b      	add	r3, r7
		parent = block_ptr(p, lsizes[lvl - 1], bn / 4);
     5b2:	2a00      	cmp	r2, #0
		parent_sz = lsizes[lvl - 1];
     5b4:	f853 3c04 	ldr.w	r3, [r3, #-4]
		parent = block_ptr(p, lsizes[lvl - 1], bn / 4);
     5b8:	bfb8      	it	lt
     5ba:	3203      	addlt	r2, #3
     5bc:	1092      	asrs	r2, r2, #2
	return (u8_t *)p->buf + lsz * block;
     5be:	fb03 4402 	mla	r4, r3, r2, r4
     5c2:	e7ea      	b.n	59a <block_fits+0x1e>
}
     5c4:	b003      	add	sp, #12
     5c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5c8:	200036b0 	.word	0x200036b0

000005cc <pool_irq_lock.isra.2.part.3>:
 * For user mode compatible sys_mem_pool pools, a semaphore is used at the API
 * level since using that does not introduce latency issues like locking
 * interrupts does.
 */

static inline int pool_irq_lock(struct sys_mem_pool_base *p)
     5cc:	b507      	push	{r0, r1, r2, lr}
     5ce:	4b0a      	ldr	r3, [pc, #40]	; (5f8 <pool_irq_lock.isra.2.part.3+0x2c>)
     5d0:	681a      	ldr	r2, [r3, #0]
     5d2:	9201      	str	r2, [sp, #4]
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     5d4:	f04f 0220 	mov.w	r2, #32
     5d8:	f3ef 8011 	mrs	r0, BASEPRI
     5dc:	f382 8811 	msr	BASEPRI, r2
     5e0:	f3bf 8f6f 	isb	sy
	if (p->flags & SYS_MEM_POOL_KERNEL) {
		return irq_lock();
	} else {
		return 0;
	}
}
     5e4:	9a01      	ldr	r2, [sp, #4]
     5e6:	681b      	ldr	r3, [r3, #0]
     5e8:	429a      	cmp	r2, r3
     5ea:	d001      	beq.n	5f0 <pool_irq_lock.isra.2.part.3+0x24>
     5ec:	f00a fd16 	bl	b01c <_StackCheckHandler>
     5f0:	b003      	add	sp, #12
     5f2:	f85d fb04 	ldr.w	pc, [sp], #4
     5f6:	bf00      	nop
     5f8:	200036b0 	.word	0x200036b0

000005fc <pool_irq_unlock.isra.4>:

static inline void pool_irq_unlock(struct sys_mem_pool_base *p, int key)
     5fc:	b507      	push	{r0, r1, r2, lr}
     5fe:	4b09      	ldr	r3, [pc, #36]	; (624 <pool_irq_unlock.isra.4+0x28>)
     600:	681a      	ldr	r2, [r3, #0]
     602:	9201      	str	r2, [sp, #4]
{
	if (p->flags & SYS_MEM_POOL_KERNEL) {
     604:	07c2      	lsls	r2, r0, #31
     606:	d503      	bpl.n	610 <pool_irq_unlock.isra.4+0x14>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     608:	f381 8811 	msr	BASEPRI, r1
     60c:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}
}
     610:	9a01      	ldr	r2, [sp, #4]
     612:	681b      	ldr	r3, [r3, #0]
     614:	429a      	cmp	r2, r3
     616:	d001      	beq.n	61c <pool_irq_unlock.isra.4+0x20>
     618:	f00a fd00 	bl	b01c <_StackCheckHandler>
     61c:	b003      	add	sp, #12
     61e:	f85d fb04 	ldr.w	pc, [sp], #4
     622:	bf00      	nop
     624:	200036b0 	.word	0x200036b0

00000628 <z_sys_mem_pool_base_init>:
{
     628:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
     62c:	4e28      	ldr	r6, [pc, #160]	; (6d0 <z_sys_mem_pool_base_init+0xa8>)
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     62e:	8907      	ldrh	r7, [r0, #8]
{
     630:	6833      	ldr	r3, [r6, #0]
     632:	9301      	str	r3, [sp, #4]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     634:	6843      	ldr	r3, [r0, #4]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
     636:	6805      	ldr	r5, [r0, #0]
	for (i = 0; i < p->n_levels; i++) {
     638:	f890 c00a 	ldrb.w	ip, [r0, #10]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     63c:	435f      	muls	r7, r3
	p->max_inline_level = -1;
     63e:	22ff      	movs	r2, #255	; 0xff
{
     640:	4604      	mov	r4, r0
	p->max_inline_level = -1;
     642:	72c2      	strb	r2, [r0, #11]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
     644:	443d      	add	r5, r7
	for (i = 0; i < p->n_levels; i++) {
     646:	2000      	movs	r0, #0
		sys_dlist_init(&p->levels[i].free_list);
     648:	f04f 0e0c 	mov.w	lr, #12
	for (i = 0; i < p->n_levels; i++) {
     64c:	4584      	cmp	ip, r0
     64e:	dc09      	bgt.n	664 <z_sys_mem_pool_base_init+0x3c>
	for (i = 0; i < p->n_max; i++) {
     650:	2500      	movs	r5, #0
     652:	8923      	ldrh	r3, [r4, #8]
     654:	42ab      	cmp	r3, r5
     656:	dc25      	bgt.n	6a4 <z_sys_mem_pool_base_init+0x7c>
}
     658:	9a01      	ldr	r2, [sp, #4]
     65a:	6833      	ldr	r3, [r6, #0]
     65c:	429a      	cmp	r2, r3
     65e:	d034      	beq.n	6ca <z_sys_mem_pool_base_init+0xa2>
     660:	f00a fcdc 	bl	b01c <_StackCheckHandler>
		sys_dlist_init(&p->levels[i].free_list);
     664:	f8d4 900c 	ldr.w	r9, [r4, #12]
		int nblocks = buflen / sz;
     668:	fbb7 f1f3 	udiv	r1, r7, r3
		sys_dlist_init(&p->levels[i].free_list);
     66c:	fb0e f800 	mul.w	r8, lr, r0
     670:	eb09 0208 	add.w	r2, r9, r8
     674:	f102 0a04 	add.w	sl, r2, #4
		if (nblocks < 32) {
     678:	291f      	cmp	r1, #31
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
     67a:	e9c2 aa01 	strd	sl, sl, [r2, #4]
     67e:	dc06      	bgt.n	68e <z_sys_mem_pool_base_init+0x66>
			p->max_inline_level = i;
     680:	72e0      	strb	r0, [r4, #11]
		sz = _ALIGN4(sz / 4);
     682:	089b      	lsrs	r3, r3, #2
     684:	3303      	adds	r3, #3
     686:	f023 0303 	bic.w	r3, r3, #3
	for (i = 0; i < p->n_levels; i++) {
     68a:	3001      	adds	r0, #1
     68c:	e7de      	b.n	64c <z_sys_mem_pool_base_init+0x24>
			bits += (nblocks + 31)/32;
     68e:	f111 021f 	adds.w	r2, r1, #31
     692:	bf48      	it	mi
     694:	f101 023e 	addmi.w	r2, r1, #62	; 0x3e
     698:	1152      	asrs	r2, r2, #5
			p->levels[i].bits_p = bits;
     69a:	f849 5008 	str.w	r5, [r9, r8]
			bits += (nblocks + 31)/32;
     69e:	eb05 0582 	add.w	r5, r5, r2, lsl #2
     6a2:	e7ee      	b.n	682 <z_sys_mem_pool_base_init+0x5a>
	return (u8_t *)p->buf + lsz * block;
     6a4:	6862      	ldr	r2, [r4, #4]
		sys_dlist_append(&p->levels[0].free_list, block);
     6a6:	68e3      	ldr	r3, [r4, #12]
	return (u8_t *)p->buf + lsz * block;
     6a8:	6820      	ldr	r0, [r4, #0]
     6aa:	436a      	muls	r2, r5
     6ac:	1881      	adds	r1, r0, r2
		sys_dlist_append(&p->levels[0].free_list, block);
     6ae:	1d1f      	adds	r7, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
     6b0:	5087      	str	r7, [r0, r2]
	node->prev = list->tail;
     6b2:	689a      	ldr	r2, [r3, #8]
     6b4:	604a      	str	r2, [r1, #4]

	list->tail->next = node;
     6b6:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
     6b8:	4620      	mov	r0, r4
     6ba:	6011      	str	r1, [r2, #0]
	list->tail = node;
     6bc:	6099      	str	r1, [r3, #8]
     6be:	462a      	mov	r2, r5
     6c0:	2100      	movs	r1, #0
     6c2:	f7ff ff29 	bl	518 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
     6c6:	3501      	adds	r5, #1
     6c8:	e7c3      	b.n	652 <z_sys_mem_pool_base_init+0x2a>
}
     6ca:	b002      	add	sp, #8
     6cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     6d0:	200036b0 	.word	0x200036b0

000006d4 <z_sys_mem_pool_block_alloc>:
	return block;
}

int z_sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
     6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     6d8:	b08b      	sub	sp, #44	; 0x2c
     6da:	af00      	add	r7, sp, #0
     6dc:	e9c7 3200 	strd	r3, r2, [r7]
     6e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
     6e2:	617b      	str	r3, [r7, #20]
     6e4:	4b5f      	ldr	r3, [pc, #380]	; (864 <CONFIG_ISR_STACK_SIZE+0x64>)
	int i, from_l, alloc_l = -1;
	unsigned int key;
	void *data = NULL;
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
     6e6:	7a85      	ldrb	r5, [r0, #10]
{
     6e8:	681b      	ldr	r3, [r3, #0]
     6ea:	627b      	str	r3, [r7, #36]	; 0x24
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
     6ec:	00ab      	lsls	r3, r5, #2
     6ee:	3307      	adds	r3, #7
     6f0:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
     6f4:	ebad 0d03 	sub.w	sp, sp, r3
     6f8:	46e9      	mov	r9, sp
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = p->max_sz;
     6fa:	464a      	mov	r2, r9
     6fc:	6843      	ldr	r3, [r0, #4]
     6fe:	f842 3904 	str.w	r3, [r2], #-4
{
     702:	4604      	mov	r4, r0
	for (i = 0; i < p->n_levels; i++) {
     704:	2000      	movs	r0, #0
     706:	4285      	cmp	r5, r0
     708:	f100 36ff 	add.w	r6, r0, #4294967295	; 0xffffffff
     70c:	dd0a      	ble.n	724 <z_sys_mem_pool_block_alloc+0x50>
		if (i > 0) {
     70e:	b128      	cbz	r0, 71c <z_sys_mem_pool_block_alloc+0x48>
			lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     710:	6813      	ldr	r3, [r2, #0]
     712:	089b      	lsrs	r3, r3, #2
     714:	3303      	adds	r3, #3
     716:	f023 0303 	bic.w	r3, r3, #3
     71a:	6053      	str	r3, [r2, #4]
		}

		if (lsizes[i] < size) {
     71c:	f852 3f04 	ldr.w	r3, [r2, #4]!
     720:	428b      	cmp	r3, r1
     722:	d207      	bcs.n	734 <z_sys_mem_pool_block_alloc+0x60>
		}

		alloc_l = i;
	}

	if (alloc_l < 0) {
     724:	1c73      	adds	r3, r6, #1
     726:	d107      	bne.n	738 <z_sys_mem_pool_block_alloc+0x64>
		*data_p = NULL;
     728:	697a      	ldr	r2, [r7, #20]
     72a:	2300      	movs	r3, #0
     72c:	6013      	str	r3, [r2, #0]
	pool_irq_unlock(p, key);

	*data_p = data;

	if (data == NULL) {
		return -ENOMEM;
     72e:	f06f 000b 	mvn.w	r0, #11
     732:	e03f      	b.n	7b4 <z_sys_mem_pool_block_alloc+0xe0>
	for (i = 0; i < p->n_levels; i++) {
     734:	3001      	adds	r0, #1
     736:	e7e6      	b.n	706 <z_sys_mem_pool_block_alloc+0x32>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
     738:	7c20      	ldrb	r0, [r4, #16]
     73a:	f010 0001 	ands.w	r0, r0, #1
     73e:	d001      	beq.n	744 <z_sys_mem_pool_block_alloc+0x70>
     740:	f7ff ff44 	bl	5cc <pool_irq_lock.isra.2.part.3>
     744:	68e2      	ldr	r2, [r4, #12]
	key = pool_irq_lock(p);
     746:	61f8      	str	r0, [r7, #28]
	for (i = alloc_l; i >= 0; i--) {
     748:	230c      	movs	r3, #12
     74a:	fb03 2306 	mla	r3, r3, r6, r2
	block = sys_dlist_get(&p->levels[l].free_list);
     74e:	46b2      	mov	sl, r6
	return list->head == list;
     750:	461a      	mov	r2, r3
     752:	f852 5f04 	ldr.w	r5, [r2, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
     756:	4295      	cmp	r5, r2
     758:	d076      	beq.n	848 <CONFIG_ISR_STACK_SIZE+0x48>
	node->prev->next = node->next;
     75a:	e9d5 3100 	ldrd	r3, r1, [r5]
     75e:	600b      	str	r3, [r1, #0]
	node->next->prev = node->prev;
     760:	6059      	str	r1, [r3, #4]
	node->next = NULL;
     762:	2300      	movs	r3, #0
	node->prev = NULL;
     764:	e9c5 3300 	strd	r3, r3, [r5]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
     768:	6823      	ldr	r3, [r4, #0]
		data = block_alloc(p, i, lsizes[i]);
     76a:	f859 202a 	ldr.w	r2, [r9, sl, lsl #2]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
     76e:	1aeb      	subs	r3, r5, r3
		clear_free_bit(p, l, block_num(p, block, lsz));
     770:	4651      	mov	r1, sl
     772:	fb93 f2f2 	sdiv	r2, r3, r2
     776:	4620      	mov	r0, r4
     778:	f7ff fee6 	bl	548 <clear_free_bit>
		if (data != NULL) {
     77c:	eb09 038a 	add.w	r3, r9, sl, lsl #2
     780:	f10a 0801 	add.w	r8, sl, #1
     784:	61bb      	str	r3, [r7, #24]
			for (from_l = i; from_l < alloc_l; from_l++) {
     786:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     78a:	42b3      	cmp	r3, r6
     78c:	db19      	blt.n	7c2 <z_sys_mem_pool_block_alloc+0xee>
	pool_irq_unlock(p, key);
     78e:	69f9      	ldr	r1, [r7, #28]
     790:	7c20      	ldrb	r0, [r4, #16]
     792:	f7ff ff33 	bl	5fc <pool_irq_unlock.isra.4>
	*data_p = data;
     796:	697b      	ldr	r3, [r7, #20]
     798:	601d      	str	r5, [r3, #0]
	if (data == NULL) {
     79a:	2d00      	cmp	r5, #0
     79c:	d0c7      	beq.n	72e <z_sys_mem_pool_block_alloc+0x5a>
	}

	*level_p = alloc_l;
     79e:	687b      	ldr	r3, [r7, #4]
     7a0:	601e      	str	r6, [r3, #0]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
     7a2:	6823      	ldr	r3, [r4, #0]
     7a4:	1aed      	subs	r5, r5, r3
     7a6:	f859 3026 	ldr.w	r3, [r9, r6, lsl #2]
     7aa:	fb95 f5f3 	sdiv	r5, r5, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
     7ae:	683b      	ldr	r3, [r7, #0]

	return 0;
     7b0:	2000      	movs	r0, #0
	*block_p = block_num(p, data, lsizes[alloc_l]);
     7b2:	601d      	str	r5, [r3, #0]
}
     7b4:	4b2b      	ldr	r3, [pc, #172]	; (864 <CONFIG_ISR_STACK_SIZE+0x64>)
     7b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     7b8:	681b      	ldr	r3, [r3, #0]
     7ba:	429a      	cmp	r2, r3
     7bc:	d04e      	beq.n	85c <CONFIG_ISR_STACK_SIZE+0x5c>
     7be:	f00a fc2d 	bl	b01c <_StackCheckHandler>
	bn = block_num(p, block, lsizes[l]);
     7c2:	69bb      	ldr	r3, [r7, #24]
     7c4:	f853 2b04 	ldr.w	r2, [r3], #4
     7c8:	61bb      	str	r3, [r7, #24]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
     7ca:	6823      	ldr	r3, [r4, #0]
     7cc:	1aeb      	subs	r3, r5, r3
     7ce:	fb93 f3f2 	sdiv	r3, r3, r2
		int lbn = 4*bn + i;
     7d2:	009b      	lsls	r3, r3, #2
     7d4:	60fb      	str	r3, [r7, #12]
     7d6:	230c      	movs	r3, #12
     7d8:	fb03 f308 	mul.w	r3, r3, r8
     7dc:	613b      	str	r3, [r7, #16]
	for (i = 1; i < 4; i++) {
     7de:	f04f 0a01 	mov.w	sl, #1
		int lbn = 4*bn + i;
     7e2:	68fb      	ldr	r3, [r7, #12]
     7e4:	eb0a 0b03 	add.w	fp, sl, r3
		int lsz = lsizes[l + 1];
     7e8:	69bb      	ldr	r3, [r7, #24]
		set_free_bit(p, l + 1, lbn);
     7ea:	465a      	mov	r2, fp
		int lsz = lsizes[l + 1];
     7ec:	681b      	ldr	r3, [r3, #0]
     7ee:	60bb      	str	r3, [r7, #8]
		set_free_bit(p, l + 1, lbn);
     7f0:	4641      	mov	r1, r8
     7f2:	4620      	mov	r0, r4
     7f4:	f7ff fe90 	bl	518 <set_free_bit>
		if (block_fits(p, l + 1, lbn, lsizes)) {
     7f8:	464b      	mov	r3, r9
     7fa:	465a      	mov	r2, fp
     7fc:	4641      	mov	r1, r8
     7fe:	4620      	mov	r0, r4
     800:	f7ff febc 	bl	57c <block_fits>
     804:	b168      	cbz	r0, 822 <CONFIG_ISR_STACK_SIZE+0x22>
		void *block2 = (lsz * i) + (char *)block;
     806:	68bb      	ldr	r3, [r7, #8]
			sys_dlist_append(&p->levels[l + 1].free_list, block2);
     808:	6938      	ldr	r0, [r7, #16]
		void *block2 = (lsz * i) + (char *)block;
     80a:	fb0a f203 	mul.w	r2, sl, r3
			sys_dlist_append(&p->levels[l + 1].free_list, block2);
     80e:	68e3      	ldr	r3, [r4, #12]
     810:	4403      	add	r3, r0
		void *block2 = (lsz * i) + (char *)block;
     812:	18a9      	adds	r1, r5, r2
			sys_dlist_append(&p->levels[l + 1].free_list, block2);
     814:	1d18      	adds	r0, r3, #4
	node->next = list;
     816:	50a8      	str	r0, [r5, r2]
	node->prev = list->tail;
     818:	689a      	ldr	r2, [r3, #8]
     81a:	604a      	str	r2, [r1, #4]
	list->tail->next = node;
     81c:	689a      	ldr	r2, [r3, #8]
     81e:	6011      	str	r1, [r2, #0]
	list->tail = node;
     820:	6099      	str	r1, [r3, #8]
	for (i = 1; i < 4; i++) {
     822:	f10a 0a01 	add.w	sl, sl, #1
     826:	f1ba 0f04 	cmp.w	sl, #4
     82a:	d1da      	bne.n	7e2 <z_sys_mem_pool_block_alloc+0x10e>
				pool_irq_unlock(p, key);
     82c:	7c20      	ldrb	r0, [r4, #16]
     82e:	69f9      	ldr	r1, [r7, #28]
     830:	f7ff fee4 	bl	5fc <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
     834:	7c20      	ldrb	r0, [r4, #16]
     836:	f010 0001 	ands.w	r0, r0, #1
     83a:	d001      	beq.n	840 <CONFIG_ISR_STACK_SIZE+0x40>
     83c:	f7ff fec6 	bl	5cc <pool_irq_lock.isra.2.part.3>
				key = pool_irq_lock(p);
     840:	61f8      	str	r0, [r7, #28]
     842:	f108 0801 	add.w	r8, r8, #1
     846:	e79e      	b.n	786 <z_sys_mem_pool_block_alloc+0xb2>
	for (i = alloc_l; i >= 0; i--) {
     848:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
     84c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
     850:	f1a3 030c 	sub.w	r3, r3, #12
     854:	f47f af7c 	bne.w	750 <z_sys_mem_pool_block_alloc+0x7c>
     858:	2500      	movs	r5, #0
     85a:	e798      	b.n	78e <z_sys_mem_pool_block_alloc+0xba>
}
     85c:	372c      	adds	r7, #44	; 0x2c
     85e:	46bd      	mov	sp, r7
     860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     864:	200036b0 	.word	0x200036b0

00000868 <z_sys_mem_pool_block_free>:

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
     868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     86c:	4e54      	ldr	r6, [pc, #336]	; (9c0 <z_sys_mem_pool_block_free+0x158>)
     86e:	b087      	sub	sp, #28
     870:	af00      	add	r7, sp, #0
     872:	6833      	ldr	r3, [r6, #0]
     874:	617b      	str	r3, [r7, #20]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
     876:	7a83      	ldrb	r3, [r0, #10]
     878:	607e      	str	r6, [r7, #4]
     87a:	009b      	lsls	r3, r3, #2
     87c:	3307      	adds	r3, #7
     87e:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
     882:	ebad 0d03 	sub.w	sp, sp, r3
     886:	46ea      	mov	sl, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
     888:	6843      	ldr	r3, [r0, #4]
     88a:	f8ca 3000 	str.w	r3, [sl]
{
     88e:	4605      	mov	r5, r0
	for (i = 1; i <= level; i++) {
     890:	4654      	mov	r4, sl
     892:	2001      	movs	r0, #1
     894:	4281      	cmp	r1, r0
     896:	d217      	bcs.n	8c8 <z_sys_mem_pool_block_free+0x60>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
     898:	7c28      	ldrb	r0, [r5, #16]
     89a:	f010 0001 	ands.w	r0, r0, #1
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
     89e:	460e      	mov	r6, r1
     8a0:	4690      	mov	r8, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
     8a2:	d001      	beq.n	8a8 <z_sys_mem_pool_block_free+0x40>
     8a4:	f7ff fe92 	bl	5cc <pool_irq_lock.isra.2.part.3>
	unsigned int key = pool_irq_lock(p);
     8a8:	4604      	mov	r4, r0
	while (level >= 0) {
     8aa:	2e00      	cmp	r6, #0
     8ac:	da15      	bge.n	8da <z_sys_mem_pool_block_free+0x72>
	return -1;
     8ae:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	pool_irq_unlock(p, key);
     8b2:	4621      	mov	r1, r4
     8b4:	7c28      	ldrb	r0, [r5, #16]
     8b6:	f7ff fea1 	bl	5fc <pool_irq_unlock.isra.4>
}
     8ba:	687b      	ldr	r3, [r7, #4]
     8bc:	697a      	ldr	r2, [r7, #20]
     8be:	681b      	ldr	r3, [r3, #0]
     8c0:	429a      	cmp	r2, r3
     8c2:	d079      	beq.n	9b8 <z_sys_mem_pool_block_free+0x150>
     8c4:	f00a fbaa 	bl	b01c <_StackCheckHandler>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     8c8:	6823      	ldr	r3, [r4, #0]
     8ca:	089b      	lsrs	r3, r3, #2
     8cc:	3303      	adds	r3, #3
     8ce:	f023 0303 	bic.w	r3, r3, #3
     8d2:	f844 3f04 	str.w	r3, [r4, #4]!
	for (i = 1; i <= level; i++) {
     8d6:	3001      	adds	r0, #1
     8d8:	e7dc      	b.n	894 <z_sys_mem_pool_block_free+0x2c>
		int i, lsz = lsizes[level];
     8da:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
     8de:	60fb      	str	r3, [r7, #12]
	return (u8_t *)p->buf + lsz * block;
     8e0:	fb03 fb08 	mul.w	fp, r3, r8
     8e4:	682b      	ldr	r3, [r5, #0]
     8e6:	60bb      	str	r3, [r7, #8]
		set_free_bit(p, level, bn);
     8e8:	4642      	mov	r2, r8
     8ea:	4631      	mov	r1, r6
     8ec:	4628      	mov	r0, r5
	return (u8_t *)p->buf + lsz * block;
     8ee:	eb03 090b 	add.w	r9, r3, fp
		set_free_bit(p, level, bn);
     8f2:	f7ff fe11 	bl	518 <set_free_bit>
		sys_dlist_append(&p->levels[level].free_list, block);
     8f6:	68ea      	ldr	r2, [r5, #12]
     8f8:	230c      	movs	r3, #12
     8fa:	fb03 2206 	mla	r2, r3, r6, r2
	node->next = list;
     8fe:	68bb      	ldr	r3, [r7, #8]
     900:	1d11      	adds	r1, r2, #4
     902:	f843 100b 	str.w	r1, [r3, fp]
	node->prev = list->tail;
     906:	6893      	ldr	r3, [r2, #8]
     908:	f8c9 3004 	str.w	r3, [r9, #4]
	list->tail->next = node;
     90c:	6893      	ldr	r3, [r2, #8]
     90e:	f8c3 9000 	str.w	r9, [r3]
	list->tail = node;
     912:	f8c2 9008 	str.w	r9, [r2, #8]
		pool_irq_unlock(p, key);
     916:	7c28      	ldrb	r0, [r5, #16]
     918:	4621      	mov	r1, r4
     91a:	f7ff fe6f 	bl	5fc <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
     91e:	7c28      	ldrb	r0, [r5, #16]
     920:	f010 0001 	ands.w	r0, r0, #1
     924:	d001      	beq.n	92a <z_sys_mem_pool_block_free+0xc2>
     926:	f7ff fe51 	bl	5cc <pool_irq_lock.isra.2.part.3>
		key = pool_irq_lock(p);
     92a:	4604      	mov	r4, r0
		if (level == 0 || partner_bits(p, level, bn) != 0xf) {
     92c:	2e00      	cmp	r6, #0
     92e:	d0c0      	beq.n	8b2 <z_sys_mem_pool_block_free+0x4a>
	int bit = get_bit_ptr(p, level, bn, &word);
     930:	f107 0310 	add.w	r3, r7, #16
     934:	4642      	mov	r2, r8
     936:	4631      	mov	r1, r6
     938:	4628      	mov	r0, r5
     93a:	f7ff fdc9 	bl	4d0 <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
     93e:	693a      	ldr	r2, [r7, #16]
     940:	2800      	cmp	r0, #0
     942:	bfb8      	it	lt
     944:	3003      	addlt	r0, #3
     946:	f020 0303 	bic.w	r3, r0, #3
     94a:	6810      	ldr	r0, [r2, #0]
     94c:	40d8      	lsrs	r0, r3
     94e:	f000 000f 	and.w	r0, r0, #15
		if (level == 0 || partner_bits(p, level, bn) != 0xf) {
     952:	280f      	cmp	r0, #15
     954:	d1ad      	bne.n	8b2 <z_sys_mem_pool_block_free+0x4a>
			int b = (bn & ~3) + i;
     956:	f028 0303 	bic.w	r3, r8, #3
		for (i = 0; i < 4; i++) {
     95a:	f04f 0b00 	mov.w	fp, #0
			int b = (bn & ~3) + i;
     95e:	60bb      	str	r3, [r7, #8]
     960:	68bb      	ldr	r3, [r7, #8]
     962:	eb03 090b 	add.w	r9, r3, fp
			if (block_fits(p, level, b, lsizes)) {
     966:	464a      	mov	r2, r9
     968:	4653      	mov	r3, sl
     96a:	4631      	mov	r1, r6
     96c:	4628      	mov	r0, r5
     96e:	f7ff fe05 	bl	57c <block_fits>
     972:	b198      	cbz	r0, 99c <z_sys_mem_pool_block_free+0x134>
				clear_free_bit(p, level, b);
     974:	464a      	mov	r2, r9
     976:	4631      	mov	r1, r6
     978:	4628      	mov	r0, r5
     97a:	f7ff fde5 	bl	548 <clear_free_bit>
	return (u8_t *)p->buf + lsz * block;
     97e:	68fb      	ldr	r3, [r7, #12]
     980:	fb03 f909 	mul.w	r9, r3, r9
     984:	682b      	ldr	r3, [r5, #0]
     986:	eb03 0209 	add.w	r2, r3, r9
	node->prev->next = node->next;
     98a:	f853 1009 	ldr.w	r1, [r3, r9]
     98e:	6850      	ldr	r0, [r2, #4]
     990:	6001      	str	r1, [r0, #0]
	node->next->prev = node->prev;
     992:	6048      	str	r0, [r1, #4]
	node->next = NULL;
     994:	2100      	movs	r1, #0
     996:	f843 1009 	str.w	r1, [r3, r9]
	node->prev = NULL;
     99a:	6051      	str	r1, [r2, #4]
		for (i = 0; i < 4; i++) {
     99c:	f10b 0b01 	add.w	fp, fp, #1
     9a0:	f1bb 0f04 	cmp.w	fp, #4
     9a4:	d1dc      	bne.n	960 <z_sys_mem_pool_block_free+0xf8>
		bn = bn / 4;
     9a6:	f1b8 0f00 	cmp.w	r8, #0
     9aa:	bfb8      	it	lt
     9ac:	f108 0803 	addlt.w	r8, r8, #3
		level = level - 1;
     9b0:	3e01      	subs	r6, #1
		bn = bn / 4;
     9b2:	ea4f 08a8 	mov.w	r8, r8, asr #2
     9b6:	e778      	b.n	8aa <z_sys_mem_pool_block_free+0x42>
}
     9b8:	371c      	adds	r7, #28
     9ba:	46bd      	mov	sp, r7
     9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     9c0:	200036b0 	.word	0x200036b0

000009c4 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
     9c4:	b507      	push	{r0, r1, r2, lr}
     9c6:	4604      	mov	r4, r0
     9c8:	4608      	mov	r0, r1
     9ca:	4611      	mov	r1, r2
     9cc:	4a04      	ldr	r2, [pc, #16]	; (9e0 <z_thread_entry+0x1c>)
     9ce:	6812      	ldr	r2, [r2, #0]
     9d0:	9201      	str	r2, [sp, #4]
	entry(p1, p2, p3);
     9d2:	461a      	mov	r2, r3
     9d4:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
     9d6:	f00a f8a3 	bl	ab20 <z_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
     9da:	f006 ff21 	bl	7820 <z_impl_k_thread_abort>
	/*
	 * Compiler can't tell that k_thread_abort() won't return and issues a
	 * warning unless we tell it that control never gets this far.
	 */

	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
     9de:	bf00      	nop
     9e0:	200036b0 	.word	0x200036b0

000009e4 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
     9e4:	b513      	push	{r0, r1, r4, lr}
     9e6:	4b10      	ldr	r3, [pc, #64]	; (a28 <z_work_q_main+0x44>)
     9e8:	681b      	ldr	r3, [r3, #0]
     9ea:	9301      	str	r3, [sp, #4]
     9ec:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
     9ee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     9f2:	4620      	mov	r0, r4
     9f4:	f009 fac4 	bl	9f80 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
     9f8:	4603      	mov	r3, r0
     9fa:	2800      	cmp	r0, #0
     9fc:	d0f7      	beq.n	9ee <z_work_q_main+0xa>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
     9fe:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
     a00:	6842      	ldr	r2, [r0, #4]
     a02:	f3bf 8f5b 	dmb	ish
     a06:	e853 1f00 	ldrex	r1, [r3]
     a0a:	f021 0c01 	bic.w	ip, r1, #1
     a0e:	e843 ce00 	strex	lr, ip, [r3]
     a12:	f1be 0f00 	cmp.w	lr, #0
     a16:	d1f6      	bne.n	a06 <z_work_q_main+0x22>
     a18:	f3bf 8f5b 	dmb	ish

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
     a1c:	07cb      	lsls	r3, r1, #31
     a1e:	d500      	bpl.n	a22 <z_work_q_main+0x3e>
					      K_WORK_STATE_PENDING)) {
			handler(work);
     a20:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
     a22:	f009 ff97 	bl	a954 <z_impl_k_yield>
     a26:	e7e2      	b.n	9ee <z_work_q_main+0xa>
     a28:	200036b0 	.word	0x200036b0

00000a2c <z_arch_printk_char_out>:
 *
 * @return 0
 */
/* LCOV_EXCL_START */
 __attribute__((weak)) int z_arch_printk_char_out(int c)
{
     a2c:	b507      	push	{r0, r1, r2, lr}
     a2e:	4b07      	ldr	r3, [pc, #28]	; (a4c <z_arch_printk_char_out+0x20>)
     a30:	681a      	ldr	r2, [r3, #0]
     a32:	9201      	str	r2, [sp, #4]
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
     a34:	9a01      	ldr	r2, [sp, #4]
     a36:	681b      	ldr	r3, [r3, #0]
     a38:	429a      	cmp	r2, r3
     a3a:	f04f 0000 	mov.w	r0, #0
     a3e:	d001      	beq.n	a44 <z_arch_printk_char_out+0x18>
     a40:	f00a faec 	bl	b01c <_StackCheckHandler>
     a44:	b003      	add	sp, #12
     a46:	f85d fb04 	ldr.w	pc, [sp], #4
     a4a:	bf00      	nop
     a4c:	200036b0 	.word	0x200036b0

00000a50 <print_err>:
{
	return _char_out;
}

static void print_err(out_func_t out, void *ctx)
{
     a50:	b573      	push	{r0, r1, r4, r5, r6, lr}
     a52:	4e0b      	ldr	r6, [pc, #44]	; (a80 <print_err+0x30>)
     a54:	4604      	mov	r4, r0
     a56:	6833      	ldr	r3, [r6, #0]
     a58:	9301      	str	r3, [sp, #4]
     a5a:	460d      	mov	r5, r1
	out('E', ctx);
     a5c:	2045      	movs	r0, #69	; 0x45
     a5e:	47a0      	blx	r4
	out('R', ctx);
     a60:	4629      	mov	r1, r5
     a62:	2052      	movs	r0, #82	; 0x52
     a64:	47a0      	blx	r4
	out('R', ctx);
     a66:	9a01      	ldr	r2, [sp, #4]
     a68:	6833      	ldr	r3, [r6, #0]
     a6a:	429a      	cmp	r2, r3
     a6c:	d001      	beq.n	a72 <print_err+0x22>
     a6e:	f00a fad5 	bl	b01c <_StackCheckHandler>
     a72:	4629      	mov	r1, r5
     a74:	2052      	movs	r0, #82	; 0x52
     a76:	4623      	mov	r3, r4
}
     a78:	b002      	add	sp, #8
     a7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
     a7e:	4718      	bx	r3
     a80:	200036b0 	.word	0x200036b0

00000a84 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
     a84:	b507      	push	{r0, r1, r2, lr}
     a86:	4a09      	ldr	r2, [pc, #36]	; (aac <char_out+0x28>)
     a88:	6813      	ldr	r3, [r2, #0]
     a8a:	9301      	str	r3, [sp, #4]
	struct out_context *ctx = ctx_p;

	ctx->count++;
     a8c:	680b      	ldr	r3, [r1, #0]
     a8e:	3301      	adds	r3, #1
     a90:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     a92:	9901      	ldr	r1, [sp, #4]
     a94:	6813      	ldr	r3, [r2, #0]
     a96:	4299      	cmp	r1, r3
     a98:	d001      	beq.n	a9e <char_out+0x1a>
     a9a:	f00a fabf 	bl	b01c <_StackCheckHandler>
     a9e:	4b04      	ldr	r3, [pc, #16]	; (ab0 <char_out+0x2c>)
     aa0:	681b      	ldr	r3, [r3, #0]
}
     aa2:	b003      	add	sp, #12
     aa4:	f85d eb04 	ldr.w	lr, [sp], #4
	return _char_out(c);
     aa8:	4718      	bx	r3
     aaa:	bf00      	nop
     aac:	200036b0 	.word	0x200036b0
     ab0:	200036b4 	.word	0x200036b4

00000ab4 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ab8:	b087      	sub	sp, #28
     aba:	469b      	mov	fp, r3
     abc:	9c10      	ldr	r4, [sp, #64]	; 0x40
     abe:	4b2a      	ldr	r3, [pc, #168]	; (b68 <_printk_dec_ulong+0xb4>)
     ac0:	f8df a0a8 	ldr.w	sl, [pc, #168]	; b6c <_printk_dec_ulong+0xb8>
     ac4:	9302      	str	r3, [sp, #8]
     ac6:	2c01      	cmp	r4, #1
     ac8:	bfb8      	it	lt
     aca:	2401      	movlt	r4, #1
     acc:	4615      	mov	r5, r2
     ace:	f1bb 0f01 	cmp.w	fp, #1
     ad2:	681a      	ldr	r2, [r3, #0]
     ad4:	9205      	str	r2, [sp, #20]
	int found_largest_digit = 0;
	int remaining = 10; /* 10 digits max */
	int digits = 1;

	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
     ad6:	bf0c      	ite	eq
     ad8:	2230      	moveq	r2, #48	; 0x30
     ada:	2220      	movne	r2, #32
     adc:	9201      	str	r2, [sp, #4]
{
     ade:	4680      	mov	r8, r0
     ae0:	4689      	mov	r9, r1
     ae2:	9400      	str	r4, [sp, #0]
     ae4:	2601      	movs	r6, #1
     ae6:	270a      	movs	r7, #10
     ae8:	2200      	movs	r2, #0
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit != 0 || remainder > pos) {
     aea:	f10a 0401 	add.w	r4, sl, #1
     aee:	b90a      	cbnz	r2, af4 <_printk_dec_ulong+0x40>
     af0:	45aa      	cmp	sl, r5
     af2:	d223      	bcs.n	b3c <_printk_dec_ulong+0x88>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
     af4:	fbb5 f0f4 	udiv	r0, r5, r4
     af8:	4649      	mov	r1, r9
     afa:	3030      	adds	r0, #48	; 0x30
     afc:	47c0      	blx	r8
			digits++;
     afe:	3601      	adds	r6, #1
			found_largest_digit = 1;
     b00:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
     b02:	3f01      	subs	r7, #1
	while (pos >= 9) {
     b04:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
     b06:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
     b0a:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
     b0e:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
     b12:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
     b16:	d1e8      	bne.n	aea <_printk_dec_ulong+0x36>
	}
	out((int)(remainder + 48), ctx);
     b18:	4649      	mov	r1, r9
     b1a:	f105 0030 	add.w	r0, r5, #48	; 0x30
     b1e:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
     b20:	f1bb 0f03 	cmp.w	fp, #3
     b24:	d103      	bne.n	b2e <_printk_dec_ulong+0x7a>
		remaining = min_width - digits;
     b26:	9b00      	ldr	r3, [sp, #0]
     b28:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
     b2a:	2c00      	cmp	r4, #0
     b2c:	dc13      	bgt.n	b56 <_printk_dec_ulong+0xa2>
			out(' ', ctx);
		}
	}
}
     b2e:	9b02      	ldr	r3, [sp, #8]
     b30:	9a05      	ldr	r2, [sp, #20]
     b32:	681b      	ldr	r3, [r3, #0]
     b34:	429a      	cmp	r2, r3
     b36:	d013      	beq.n	b60 <_printk_dec_ulong+0xac>
     b38:	f00a fa70 	bl	b01c <_StackCheckHandler>
		} else if (remaining <= min_width
     b3c:	9b00      	ldr	r3, [sp, #0]
     b3e:	42bb      	cmp	r3, r7
     b40:	dbdf      	blt.n	b02 <_printk_dec_ulong+0x4e>
				&& padding < PAD_SPACE_AFTER) {
     b42:	f1bb 0f02 	cmp.w	fp, #2
     b46:	d8dc      	bhi.n	b02 <_printk_dec_ulong+0x4e>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     b48:	4649      	mov	r1, r9
     b4a:	9801      	ldr	r0, [sp, #4]
     b4c:	9203      	str	r2, [sp, #12]
			digits++;
     b4e:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     b50:	47c0      	blx	r8
			digits++;
     b52:	9a03      	ldr	r2, [sp, #12]
     b54:	e7d5      	b.n	b02 <_printk_dec_ulong+0x4e>
			out(' ', ctx);
     b56:	4649      	mov	r1, r9
     b58:	2020      	movs	r0, #32
     b5a:	47c0      	blx	r8
     b5c:	3c01      	subs	r4, #1
     b5e:	e7e4      	b.n	b2a <_printk_dec_ulong+0x76>
}
     b60:	b007      	add	sp, #28
     b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     b66:	bf00      	nop
     b68:	200036b0 	.word	0x200036b0
     b6c:	3b9ac9ff 	.word	0x3b9ac9ff

00000b70 <__printk_hook_install>:
{
     b70:	b507      	push	{r0, r1, r2, lr}
     b72:	4b07      	ldr	r3, [pc, #28]	; (b90 <__printk_hook_install+0x20>)
     b74:	681a      	ldr	r2, [r3, #0]
     b76:	9201      	str	r2, [sp, #4]
	_char_out = fn;
     b78:	4a06      	ldr	r2, [pc, #24]	; (b94 <__printk_hook_install+0x24>)
     b7a:	6010      	str	r0, [r2, #0]
}
     b7c:	9a01      	ldr	r2, [sp, #4]
     b7e:	681b      	ldr	r3, [r3, #0]
     b80:	429a      	cmp	r2, r3
     b82:	d001      	beq.n	b88 <__printk_hook_install+0x18>
     b84:	f00a fa4a 	bl	b01c <_StackCheckHandler>
     b88:	b003      	add	sp, #12
     b8a:	f85d fb04 	ldr.w	pc, [sp], #4
     b8e:	bf00      	nop
     b90:	200036b0 	.word	0x200036b0
     b94:	200036b4 	.word	0x200036b4

00000b98 <z_vprintk>:
{
     b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b9c:	460e      	mov	r6, r1
     b9e:	49ac      	ldr	r1, [pc, #688]	; (e50 <z_vprintk+0x2b8>)
     ba0:	b08d      	sub	sp, #52	; 0x34
     ba2:	6809      	ldr	r1, [r1, #0]
     ba4:	910b      	str	r1, [sp, #44]	; 0x2c
     ba6:	461c      	mov	r4, r3
	int long_ctr = 0;
     ba8:	f04f 0900 	mov.w	r9, #0
     bac:	1e53      	subs	r3, r2, #1
{
     bae:	4605      	mov	r5, r0
     bb0:	9303      	str	r3, [sp, #12]
	int min_width = -1;
     bb2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
     bb6:	464f      	mov	r7, r9
			might_format = 0;
     bb8:	f04f 0b00 	mov.w	fp, #0
						break;
     bbc:	e007      	b.n	bce <z_vprintk+0x36>
		if (!might_format) {
     bbe:	f1bb 0f00 	cmp.w	fp, #0
     bc2:	d112      	bne.n	bea <z_vprintk+0x52>
			if (*fmt != '%') {
     bc4:	2825      	cmp	r0, #37	; 0x25
     bc6:	f000 8133 	beq.w	e30 <z_vprintk+0x298>
				out((int)*fmt, ctx);
     bca:	4631      	mov	r1, r6
     bcc:	47a8      	blx	r5
	while (*fmt) {
     bce:	9b03      	ldr	r3, [sp, #12]
     bd0:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     bd4:	9303      	str	r3, [sp, #12]
     bd6:	2800      	cmp	r0, #0
     bd8:	d1f1      	bne.n	bbe <z_vprintk+0x26>
}
     bda:	4b9d      	ldr	r3, [pc, #628]	; (e50 <z_vprintk+0x2b8>)
     bdc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
     bde:	681b      	ldr	r3, [r3, #0]
     be0:	429a      	cmp	r2, r3
     be2:	f000 8132 	beq.w	e4a <z_vprintk+0x2b2>
     be6:	f00a fa19 	bl	b01c <_StackCheckHandler>
			switch (*fmt) {
     bea:	2864      	cmp	r0, #100	; 0x64
     bec:	d05f      	beq.n	cae <z_vprintk+0x116>
     bee:	d819      	bhi.n	c24 <z_vprintk+0x8c>
     bf0:	2839      	cmp	r0, #57	; 0x39
     bf2:	d80a      	bhi.n	c0a <z_vprintk+0x72>
     bf4:	2831      	cmp	r0, #49	; 0x31
     bf6:	d24e      	bcs.n	c96 <z_vprintk+0xfe>
     bf8:	282d      	cmp	r0, #45	; 0x2d
     bfa:	f000 8120 	beq.w	e3e <z_vprintk+0x2a6>
     bfe:	2830      	cmp	r0, #48	; 0x30
     c00:	d03d      	beq.n	c7e <z_vprintk+0xe6>
     c02:	2825      	cmp	r0, #37	; 0x25
     c04:	d107      	bne.n	c16 <z_vprintk+0x7e>
				out((int)'%', ctx);
     c06:	4631      	mov	r1, r6
     c08:	e110      	b.n	e2c <z_vprintk+0x294>
			switch (*fmt) {
     c0a:	2858      	cmp	r0, #88	; 0x58
     c0c:	f000 80a3 	beq.w	d56 <z_vprintk+0x1be>
     c10:	2863      	cmp	r0, #99	; 0x63
     c12:	f000 8108 	beq.w	e26 <z_vprintk+0x28e>
				out((int)'%', ctx);
     c16:	4631      	mov	r1, r6
     c18:	2025      	movs	r0, #37	; 0x25
     c1a:	47a8      	blx	r5
				out((int)*fmt, ctx);
     c1c:	9b03      	ldr	r3, [sp, #12]
     c1e:	4631      	mov	r1, r6
     c20:	7818      	ldrb	r0, [r3, #0]
     c22:	e103      	b.n	e2c <z_vprintk+0x294>
			switch (*fmt) {
     c24:	2870      	cmp	r0, #112	; 0x70
     c26:	f000 808d 	beq.w	d44 <z_vprintk+0x1ac>
     c2a:	d806      	bhi.n	c3a <z_vprintk+0xa2>
     c2c:	2869      	cmp	r0, #105	; 0x69
     c2e:	d03e      	beq.n	cae <z_vprintk+0x116>
     c30:	286c      	cmp	r0, #108	; 0x6c
     c32:	d039      	beq.n	ca8 <z_vprintk+0x110>
     c34:	2868      	cmp	r0, #104	; 0x68
     c36:	d0ca      	beq.n	bce <z_vprintk+0x36>
     c38:	e7ed      	b.n	c16 <z_vprintk+0x7e>
     c3a:	2875      	cmp	r0, #117	; 0x75
     c3c:	d06b      	beq.n	d16 <z_vprintk+0x17e>
     c3e:	d81a      	bhi.n	c76 <z_vprintk+0xde>
     c40:	2873      	cmp	r0, #115	; 0x73
     c42:	d1e8      	bne.n	c16 <z_vprintk+0x7e>
				char *s = va_arg(ap, char *);
     c44:	f854 bb04 	ldr.w	fp, [r4], #4
				while (*s)
     c48:	46da      	mov	sl, fp
     c4a:	4652      	mov	r2, sl
     c4c:	f81a 0b01 	ldrb.w	r0, [sl], #1
     c50:	2800      	cmp	r0, #0
     c52:	f040 80e5 	bne.w	e20 <z_vprintk+0x288>
				if (padding == PAD_SPACE_AFTER) {
     c56:	2f03      	cmp	r7, #3
     c58:	f040 80f5 	bne.w	e46 <z_vprintk+0x2ae>
					int remaining = min_width - (s - start);
     c5c:	eba2 0b0b 	sub.w	fp, r2, fp
     c60:	eba8 0b0b 	sub.w	fp, r8, fp
					while (remaining-- > 0) {
     c64:	f1bb 0f00 	cmp.w	fp, #0
     c68:	dda6      	ble.n	bb8 <z_vprintk+0x20>
						out(' ', ctx);
     c6a:	4631      	mov	r1, r6
     c6c:	2020      	movs	r0, #32
     c6e:	47a8      	blx	r5
     c70:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
     c74:	e7f6      	b.n	c64 <z_vprintk+0xcc>
			switch (*fmt) {
     c76:	2878      	cmp	r0, #120	; 0x78
     c78:	d06d      	beq.n	d56 <z_vprintk+0x1be>
     c7a:	287a      	cmp	r0, #122	; 0x7a
     c7c:	e7db      	b.n	c36 <z_vprintk+0x9e>
				if (min_width < 0 && padding == PAD_NONE) {
     c7e:	f1b8 0f00 	cmp.w	r8, #0
     c82:	da0b      	bge.n	c9c <z_vprintk+0x104>
     c84:	2f00      	cmp	r7, #0
     c86:	f000 80dc 	beq.w	e42 <z_vprintk+0x2aa>
					min_width = *fmt - '0';
     c8a:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
     c8e:	2f00      	cmp	r7, #0
     c90:	bf08      	it	eq
     c92:	2702      	moveq	r7, #2
     c94:	e79b      	b.n	bce <z_vprintk+0x36>
				if (min_width < 0) {
     c96:	f1b8 0f00 	cmp.w	r8, #0
     c9a:	dbf6      	blt.n	c8a <z_vprintk+0xf2>
					min_width = 10 * min_width + *fmt - '0';
     c9c:	220a      	movs	r2, #10
     c9e:	fb02 0808 	mla	r8, r2, r8, r0
     ca2:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
     ca6:	e7f2      	b.n	c8e <z_vprintk+0xf6>
				long_ctr++;
     ca8:	f109 0901 	add.w	r9, r9, #1
     cac:	e78f      	b.n	bce <z_vprintk+0x36>
				if (long_ctr == 0) {
     cae:	f1b9 0f00 	cmp.w	r9, #0
     cb2:	d114      	bne.n	cde <z_vprintk+0x146>
					long ld = va_arg(ap, long);
     cb4:	f854 ab04 	ldr.w	sl, [r4], #4
				if (d < 0) {
     cb8:	f1ba 0f00 	cmp.w	sl, #0
     cbc:	da06      	bge.n	ccc <z_vprintk+0x134>
					out((int)'-', ctx);
     cbe:	4631      	mov	r1, r6
     cc0:	202d      	movs	r0, #45	; 0x2d
     cc2:	47a8      	blx	r5
					d = -d;
     cc4:	f1ca 0a00 	rsb	sl, sl, #0
					min_width--;
     cc8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
     ccc:	f8cd 8000 	str.w	r8, [sp]
     cd0:	463b      	mov	r3, r7
     cd2:	4652      	mov	r2, sl
				_printk_dec_ulong(out, ctx, u, padding,
     cd4:	4631      	mov	r1, r6
     cd6:	4628      	mov	r0, r5
     cd8:	f7ff feec 	bl	ab4 <_printk_dec_ulong>
				break;
     cdc:	e76c      	b.n	bb8 <z_vprintk+0x20>
				} else if (long_ctr == 1) {
     cde:	f1b9 0f01 	cmp.w	r9, #1
     ce2:	d0e7      	beq.n	cb4 <z_vprintk+0x11c>
					long long lld = va_arg(ap, long long);
     ce4:	3407      	adds	r4, #7
     ce6:	f024 0407 	bic.w	r4, r4, #7
     cea:	e8f4 ab02 	ldrd	sl, fp, [r4], #8
					if (lld > INT32_MAX ||
     cee:	f11a 4300 	adds.w	r3, sl, #2147483648	; 0x80000000
     cf2:	9306      	str	r3, [sp, #24]
     cf4:	f14b 0300 	adc.w	r3, fp, #0
     cf8:	9307      	str	r3, [sp, #28]
     cfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
     cfe:	2300      	movs	r3, #0
     d00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     d04:	428b      	cmp	r3, r1
     d06:	bf08      	it	eq
     d08:	4282      	cmpeq	r2, r0
     d0a:	d2d5      	bcs.n	cb8 <z_vprintk+0x120>
						print_err(out, ctx);
     d0c:	4631      	mov	r1, r6
     d0e:	4628      	mov	r0, r5
     d10:	f7ff fe9e 	bl	a50 <print_err>
     d14:	e750      	b.n	bb8 <z_vprintk+0x20>
				if (long_ctr == 0) {
     d16:	f1b9 0f00 	cmp.w	r9, #0
     d1a:	d105      	bne.n	d28 <z_vprintk+0x190>
					long lu = va_arg(ap, unsigned long);
     d1c:	f854 2b04 	ldr.w	r2, [r4], #4
				_printk_dec_ulong(out, ctx, u, padding,
     d20:	f8cd 8000 	str.w	r8, [sp]
     d24:	463b      	mov	r3, r7
     d26:	e7d5      	b.n	cd4 <z_vprintk+0x13c>
				} else if (long_ctr == 1) {
     d28:	f1b9 0f01 	cmp.w	r9, #1
     d2c:	d0f6      	beq.n	d1c <z_vprintk+0x184>
					unsigned long long llu =
     d2e:	3407      	adds	r4, #7
     d30:	f024 0407 	bic.w	r4, r4, #7
     d34:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > INT32_MAX) {
     d38:	2b00      	cmp	r3, #0
     d3a:	bf08      	it	eq
     d3c:	f1b2 4f00 	cmpeq.w	r2, #2147483648	; 0x80000000
     d40:	d3ee      	bcc.n	d20 <z_vprintk+0x188>
     d42:	e7e3      	b.n	d0c <z_vprintk+0x174>
				  out('0', ctx);
     d44:	4631      	mov	r1, r6
     d46:	2030      	movs	r0, #48	; 0x30
     d48:	47a8      	blx	r5
				  out('x', ctx);
     d4a:	4631      	mov	r1, r6
     d4c:	2078      	movs	r0, #120	; 0x78
     d4e:	47a8      	blx	r5
				  min_width = 8;
     d50:	f04f 0808 	mov.w	r8, #8
				  padding = PAD_ZERO_BEFORE;
     d54:	2701      	movs	r7, #1
				if (long_ctr < 2) {
     d56:	f1b9 0f01 	cmp.w	r9, #1
     d5a:	dc26      	bgt.n	daa <z_vprintk+0x212>
					x = va_arg(ap, unsigned long);
     d5c:	f854 3b04 	ldr.w	r3, [r4], #4
     d60:	9308      	str	r3, [sp, #32]
     d62:	2300      	movs	r3, #0
	int remaining = 16; /* 16 digits max */
     d64:	2210      	movs	r2, #16
	int digits = 0;
     d66:	f04f 0a00 	mov.w	sl, #0
					x = va_arg(ap, unsigned long long);
     d6a:	9304      	str	r3, [sp, #16]
	int found_largest_digit = 0;
     d6c:	f8cd a014 	str.w	sl, [sp, #20]
	int size = sizeof(num) * 2;
     d70:	4611      	mov	r1, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
     d72:	1e4b      	subs	r3, r1, #1
     d74:	0098      	lsls	r0, r3, #2
     d76:	9302      	str	r3, [sp, #8]
     d78:	9b08      	ldr	r3, [sp, #32]
     d7a:	f1c0 0e20 	rsb	lr, r0, #32
     d7e:	f1a0 0c20 	sub.w	ip, r0, #32
     d82:	fa23 f000 	lsr.w	r0, r3, r0
     d86:	9b04      	ldr	r3, [sp, #16]
     d88:	fa03 fe0e 	lsl.w	lr, r3, lr
     d8c:	ea40 000e 	orr.w	r0, r0, lr
     d90:	fa23 fc0c 	lsr.w	ip, r3, ip
     d94:	ea40 000c 	orr.w	r0, r0, ip
		if (nibble != 0 || found_largest_digit != 0 || size == 1) {
     d98:	f010 000f 	ands.w	r0, r0, #15
     d9c:	d112      	bne.n	dc4 <z_vprintk+0x22c>
     d9e:	9b05      	ldr	r3, [sp, #20]
     da0:	b90b      	cbnz	r3, da6 <z_vprintk+0x20e>
     da2:	2901      	cmp	r1, #1
     da4:	d12c      	bne.n	e00 <z_vprintk+0x268>
			nibble += nibble > 9 ? 87 : 48;
     da6:	2130      	movs	r1, #48	; 0x30
     da8:	e010      	b.n	dcc <z_vprintk+0x234>
					x = va_arg(ap, unsigned long long);
     daa:	3407      	adds	r4, #7
     dac:	f024 0207 	bic.w	r2, r4, #7
     db0:	4614      	mov	r4, r2
     db2:	f854 3b08 	ldr.w	r3, [r4], #8
     db6:	9308      	str	r3, [sp, #32]
     db8:	6853      	ldr	r3, [r2, #4]
     dba:	e7d3      	b.n	d64 <z_vprintk+0x1cc>
			found_largest_digit = 1;
     dbc:	f8cd b014 	str.w	fp, [sp, #20]
		char nibble = (num >> ((size - 1) << 2) & 0xf);
     dc0:	9902      	ldr	r1, [sp, #8]
     dc2:	e7d6      	b.n	d72 <z_vprintk+0x1da>
			nibble += nibble > 9 ? 87 : 48;
     dc4:	2809      	cmp	r0, #9
     dc6:	bf8c      	ite	hi
     dc8:	2157      	movhi	r1, #87	; 0x57
     dca:	2130      	movls	r1, #48	; 0x30
     dcc:	4408      	add	r0, r1
			out((int)nibble, ctx);
     dce:	b240      	sxtb	r0, r0
     dd0:	4631      	mov	r1, r6
     dd2:	9205      	str	r2, [sp, #20]
     dd4:	47a8      	blx	r5
	for (; size != 0; size--) {
     dd6:	9b02      	ldr	r3, [sp, #8]
     dd8:	9a05      	ldr	r2, [sp, #20]
			digits++;
     dda:	f10a 0a01 	add.w	sl, sl, #1
	for (; size != 0; size--) {
     dde:	2b00      	cmp	r3, #0
     de0:	d1ec      	bne.n	dbc <z_vprintk+0x224>
	if (padding == PAD_SPACE_AFTER) {
     de2:	2f03      	cmp	r7, #3
     de4:	f47f aee8 	bne.w	bb8 <z_vprintk+0x20>
		remaining = min_width * 2 - digits;
     de8:	ebca 0a48 	rsb	sl, sl, r8, lsl #1
		while (remaining-- > 0) {
     dec:	f1ba 0f00 	cmp.w	sl, #0
     df0:	f77f aee2 	ble.w	bb8 <z_vprintk+0x20>
			out(' ', ctx);
     df4:	4631      	mov	r1, r6
     df6:	2020      	movs	r0, #32
     df8:	47a8      	blx	r5
     dfa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
     dfe:	e7f5      	b.n	dec <z_vprintk+0x254>
		if (remaining-- <= min_width) {
     e00:	1e53      	subs	r3, r2, #1
     e02:	4590      	cmp	r8, r2
     e04:	9309      	str	r3, [sp, #36]	; 0x24
     e06:	db04      	blt.n	e12 <z_vprintk+0x27a>
			if (padding == PAD_ZERO_BEFORE) {
     e08:	2f01      	cmp	r7, #1
     e0a:	d104      	bne.n	e16 <z_vprintk+0x27e>
				out('0', ctx);
     e0c:	4631      	mov	r1, r6
     e0e:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
     e10:	47a8      	blx	r5
					x = va_arg(ap, unsigned long);
     e12:	9a09      	ldr	r2, [sp, #36]	; 0x24
     e14:	e7d4      	b.n	dc0 <z_vprintk+0x228>
			} else if (padding == PAD_SPACE_BEFORE) {
     e16:	2f02      	cmp	r7, #2
     e18:	d1fb      	bne.n	e12 <z_vprintk+0x27a>
				out(' ', ctx);
     e1a:	4631      	mov	r1, r6
     e1c:	2020      	movs	r0, #32
     e1e:	e7f7      	b.n	e10 <z_vprintk+0x278>
					out((int)(*s++), ctx);
     e20:	4631      	mov	r1, r6
     e22:	47a8      	blx	r5
     e24:	e711      	b.n	c4a <z_vprintk+0xb2>
				out(c, ctx);
     e26:	f854 0b04 	ldr.w	r0, [r4], #4
     e2a:	4631      	mov	r1, r6
				out((int)*fmt, ctx);
     e2c:	47a8      	blx	r5
				break;
     e2e:	e6c3      	b.n	bb8 <z_vprintk+0x20>
				long_ctr = 0;
     e30:	46d9      	mov	r9, fp
				padding = PAD_NONE;
     e32:	465f      	mov	r7, fp
				min_width = -1;
     e34:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
				might_format = 1;
     e38:	f04f 0b01 	mov.w	fp, #1
     e3c:	e6c7      	b.n	bce <z_vprintk+0x36>
				padding = PAD_SPACE_AFTER;
     e3e:	2703      	movs	r7, #3
     e40:	e6c5      	b.n	bce <z_vprintk+0x36>
					padding = PAD_ZERO_BEFORE;
     e42:	2701      	movs	r7, #1
     e44:	e6c3      	b.n	bce <z_vprintk+0x36>
			might_format = 0;
     e46:	4683      	mov	fp, r0
		++fmt;
     e48:	e6c1      	b.n	bce <z_vprintk+0x36>
}
     e4a:	b00d      	add	sp, #52	; 0x34
     e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e50:	200036b0 	.word	0x200036b0

00000e54 <vprintk>:
{
     e54:	b513      	push	{r0, r1, r4, lr}
     e56:	4c09      	ldr	r4, [pc, #36]	; (e7c <vprintk+0x28>)
     e58:	6823      	ldr	r3, [r4, #0]
     e5a:	9301      	str	r3, [sp, #4]
	struct out_context ctx = { 0 };
     e5c:	2300      	movs	r3, #0
	z_vprintk(char_out, &ctx, fmt, ap);
     e5e:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     e60:	9300      	str	r3, [sp, #0]
	z_vprintk(char_out, &ctx, fmt, ap);
     e62:	4807      	ldr	r0, [pc, #28]	; (e80 <vprintk+0x2c>)
     e64:	460b      	mov	r3, r1
     e66:	4669      	mov	r1, sp
     e68:	f7ff fe96 	bl	b98 <z_vprintk>
}
     e6c:	9a01      	ldr	r2, [sp, #4]
     e6e:	6823      	ldr	r3, [r4, #0]
     e70:	429a      	cmp	r2, r3
     e72:	d001      	beq.n	e78 <vprintk+0x24>
     e74:	f00a f8d2 	bl	b01c <_StackCheckHandler>
     e78:	b002      	add	sp, #8
     e7a:	bd10      	pop	{r4, pc}
     e7c:	200036b0 	.word	0x200036b0
     e80:	00000a85 	.word	0x00000a85

00000e84 <printk>:
{
     e84:	b40f      	push	{r0, r1, r2, r3}
     e86:	b513      	push	{r0, r1, r4, lr}
     e88:	4c09      	ldr	r4, [pc, #36]	; (eb0 <printk+0x2c>)
     e8a:	a904      	add	r1, sp, #16
     e8c:	6823      	ldr	r3, [r4, #0]
     e8e:	f851 0b04 	ldr.w	r0, [r1], #4
     e92:	9301      	str	r3, [sp, #4]
	va_start(ap, fmt);
     e94:	9100      	str	r1, [sp, #0]
		vprintk(fmt, ap);
     e96:	f7ff ffdd 	bl	e54 <vprintk>
}
     e9a:	9a01      	ldr	r2, [sp, #4]
     e9c:	6823      	ldr	r3, [r4, #0]
     e9e:	429a      	cmp	r2, r3
     ea0:	d001      	beq.n	ea6 <printk+0x22>
     ea2:	f00a f8bb 	bl	b01c <_StackCheckHandler>
     ea6:	b002      	add	sp, #8
     ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     eac:	b004      	add	sp, #16
     eae:	4770      	bx	lr
     eb0:	200036b0 	.word	0x200036b0

00000eb4 <_ConfigAbsSyms>:

/* file is auto-generated, do not modify ! */

#include <toolchain.h>

GEN_ABS_SYM_BEGIN (_ConfigAbsSyms)
     eb4:	b507      	push	{r0, r1, r2, lr}
     eb6:	4b02      	ldr	r3, [pc, #8]	; (ec0 <_ConfigAbsSyms+0xc>)
     eb8:	681a      	ldr	r2, [r3, #0]
     eba:	9201      	str	r2, [sp, #4]
GEN_ABSOLUTE_SYM(CONFIG_HAS_HW_NRF_TIMER2, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_HW_NRF_TIMER3, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_HW_NRF_TIMER4, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_HW_NRF_TWI0, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_HW_NRF_TWI1, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_HW_NRF_TWIM0, 1);
     ebc:	e002      	b.n	ec4 <_ConfigAbsSyms+0x10>
     ebe:	bf00      	nop
     ec0:	200036b0 	.word	0x200036b0
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_STAT, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);

GEN_ABS_SYM_END
     ec4:	9a01      	ldr	r2, [sp, #4]
     ec6:	681b      	ldr	r3, [r3, #0]
     ec8:	429a      	cmp	r2, r3
     eca:	d001      	beq.n	ed0 <_ConfigAbsSyms+0x1c>
     ecc:	f00a f8a6 	bl	b01c <_StackCheckHandler>
     ed0:	b003      	add	sp, #12
     ed2:	f85d fb04 	ldr.w	pc, [sp], #4
     ed6:	bf00      	nop

00000ed8 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set((uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(struct device *arg)
{
     ed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
     eda:	4c14      	ldr	r4, [pc, #80]	; (f2c <nordicsemi_nrf52_init+0x54>)
     edc:	6823      	ldr	r3, [r4, #0]
     ede:	9301      	str	r3, [sp, #4]
	__asm__ volatile(
     ee0:	f04f 0320 	mov.w	r3, #32
     ee4:	f3ef 8511 	mrs	r5, BASEPRI
     ee8:	f383 8811 	msr	BASEPRI, r3
     eec:	f3bf 8f6f 	isb	sy

	ARG_UNUSED(arg);

	key = irq_lock();

	SystemInit();
     ef0:	f000 f840 	bl	f74 <SystemInit>

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     ef4:	4a0e      	ldr	r2, [pc, #56]	; (f30 <nordicsemi_nrf52_init+0x58>)
     ef6:	2301      	movs	r3, #1
     ef8:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
__STATIC_INLINE void nrf_power_dcdcen_set(bool enable)
{
    NRF_POWER->DCDCEN = (enable ?
     efc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     f00:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
static ALWAYS_INLINE void z_clearfaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     f04:	4b0b      	ldr	r3, [pc, #44]	; (f34 <nordicsemi_nrf52_init+0x5c>)
     f06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     f0a:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     f0c:	62da      	str	r2, [r3, #44]	; 0x2c
	__asm__ volatile(
     f0e:	f385 8811 	msr	BASEPRI, r5
     f12:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     f16:	9a01      	ldr	r2, [sp, #4]
     f18:	6823      	ldr	r3, [r4, #0]
     f1a:	429a      	cmp	r2, r3
     f1c:	f04f 0000 	mov.w	r0, #0
     f20:	d001      	beq.n	f26 <nordicsemi_nrf52_init+0x4e>
     f22:	f00a f87b 	bl	b01c <_StackCheckHandler>
     f26:	b003      	add	sp, #12
     f28:	bd30      	pop	{r4, r5, pc}
     f2a:	bf00      	nop
     f2c:	200036b0 	.word	0x200036b0
     f30:	4001e000 	.word	0x4001e000
     f34:	e000ed00 	.word	0xe000ed00

00000f38 <errata_103>:
    return true;
}


static bool errata_98(void)
{
     f38:	b507      	push	{r0, r1, r2, lr}
     f3a:	4b0b      	ldr	r3, [pc, #44]	; (f68 <errata_103+0x30>)
     f3c:	681a      	ldr	r2, [r3, #0]
     f3e:	9201      	str	r2, [sp, #4]
    if (*(uint32_t *)0x10000130ul == 0x8ul){
     f40:	4a0a      	ldr	r2, [pc, #40]	; (f6c <errata_103+0x34>)
     f42:	6812      	ldr	r2, [r2, #0]
     f44:	2a08      	cmp	r2, #8
        if (*(uint32_t *)0x10000134ul == 0x0ul){
     f46:	bf04      	itt	eq
     f48:	4a09      	ldreq	r2, [pc, #36]	; (f70 <errata_103+0x38>)
     f4a:	6810      	ldreq	r0, [r2, #0]
            return true;
        }
    }
    
    return false;
}
     f4c:	9a01      	ldr	r2, [sp, #4]
     f4e:	681b      	ldr	r3, [r3, #0]
        if (*(uint32_t *)0x10000134ul == 0x0ul){
     f50:	bf06      	itte	eq
     f52:	fab0 f080 	clzeq	r0, r0
     f56:	0940      	lsreq	r0, r0, #5
    return false;
     f58:	2000      	movne	r0, #0
}
     f5a:	429a      	cmp	r2, r3
     f5c:	d001      	beq.n	f62 <errata_103+0x2a>
     f5e:	f00a f85d 	bl	b01c <_StackCheckHandler>
     f62:	b003      	add	sp, #12
     f64:	f85d fb04 	ldr.w	pc, [sp], #4
     f68:	200036b0 	.word	0x200036b0
     f6c:	10000130 	.word	0x10000130
     f70:	10000134 	.word	0x10000134

00000f74 <SystemInit>:
{
     f74:	b513      	push	{r0, r1, r4, lr}
     f76:	4c62      	ldr	r4, [pc, #392]	; (1100 <SystemInit+0x18c>)
     f78:	6823      	ldr	r3, [r4, #0]
     f7a:	9301      	str	r3, [sp, #4]
        NRF_CLOCK->EVENTS_DONE = 0;
     f7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     f80:	2200      	movs	r2, #0
     f82:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
     f86:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
     f8a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
     f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     f92:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
     f96:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
     f9a:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
     f9e:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
     fa2:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
     fa6:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
     faa:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
     fae:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
     fb2:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
     fb6:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
     fba:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
     fbe:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
     fc2:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
     fc6:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
     fca:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
     fce:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
     fd2:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
     fd6:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
     fda:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
     fde:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
     fe2:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
     fe6:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
     fea:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
     fee:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
     ff2:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
     ff6:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
     ffa:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
     ffe:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    1002:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    1006:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    100a:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    100e:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    1012:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    1016:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    101a:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_98()){
    101e:	f7ff ff8b 	bl	f38 <errata_103>
    1022:	b110      	cbz	r0, 102a <SystemInit+0xb6>
        *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    1024:	4b37      	ldr	r3, [pc, #220]	; (1104 <SystemInit+0x190>)
    1026:	4a38      	ldr	r2, [pc, #224]	; (1108 <SystemInit+0x194>)
    1028:	601a      	str	r2, [r3, #0]
    if (errata_103()){
    102a:	f7ff ff85 	bl	f38 <errata_103>
    102e:	b118      	cbz	r0, 1038 <SystemInit+0xc4>
        NRF_CCM->MAXPACKETSIZE = 0xFBul;
    1030:	4b36      	ldr	r3, [pc, #216]	; (110c <SystemInit+0x198>)
    1032:	22fb      	movs	r2, #251	; 0xfb
    1034:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    if (errata_115()){
    1038:	f7ff ff7e 	bl	f38 <errata_103>
    103c:	b148      	cbz	r0, 1052 <SystemInit+0xde>
        *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    103e:	4934      	ldr	r1, [pc, #208]	; (1110 <SystemInit+0x19c>)
    1040:	4b34      	ldr	r3, [pc, #208]	; (1114 <SystemInit+0x1a0>)
    1042:	680a      	ldr	r2, [r1, #0]
    1044:	681b      	ldr	r3, [r3, #0]
    1046:	f022 020f 	bic.w	r2, r2, #15
    104a:	f003 030f 	and.w	r3, r3, #15
    104e:	4313      	orrs	r3, r2
    1050:	600b      	str	r3, [r1, #0]
    if (errata_120()){
    1052:	f7ff ff71 	bl	f38 <errata_103>
    1056:	b118      	cbz	r0, 1060 <SystemInit+0xec>
        *(volatile uint32_t *)0x40029640ul = 0x200ul;
    1058:	4b2f      	ldr	r3, [pc, #188]	; (1118 <SystemInit+0x1a4>)
    105a:	f44f 7200 	mov.w	r2, #512	; 0x200
    105e:	601a      	str	r2, [r3, #0]
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    1060:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1064:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    1068:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    106a:	bf44      	itt	mi
    106c:	f06f 0201 	mvnmi.w	r2, #1
    1070:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    1074:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    1078:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    107c:	2a00      	cmp	r2, #0
    107e:	db03      	blt.n	1088 <SystemInit+0x114>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    1080:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    1084:	2b00      	cmp	r3, #0
    1086:	da2f      	bge.n	10e8 <SystemInit+0x174>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    1088:	4b24      	ldr	r3, [pc, #144]	; (111c <SystemInit+0x1a8>)
    108a:	2201      	movs	r2, #1
    108c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    1090:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    1094:	2a00      	cmp	r2, #0
    1096:	d0fb      	beq.n	1090 <SystemInit+0x11c>
            NRF_UICR->PSELRESET[0] = 18;
    1098:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    109c:	2112      	movs	r1, #18
    109e:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    10a2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    10a6:	2a00      	cmp	r2, #0
    10a8:	d0fb      	beq.n	10a2 <SystemInit+0x12e>
            NRF_UICR->PSELRESET[1] = 18;
    10aa:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    10ae:	2212      	movs	r2, #18
    10b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    10b4:	4b19      	ldr	r3, [pc, #100]	; (111c <SystemInit+0x1a8>)
    10b6:	461a      	mov	r2, r3
    10b8:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    10bc:	2900      	cmp	r1, #0
    10be:	d0fb      	beq.n	10b8 <SystemInit+0x144>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    10c0:	2100      	movs	r1, #0
    10c2:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    10c6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    10ca:	2b00      	cmp	r3, #0
    10cc:	d0fb      	beq.n	10c6 <SystemInit+0x152>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    10ce:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    10d2:	4913      	ldr	r1, [pc, #76]	; (1120 <SystemInit+0x1ac>)
    10d4:	4b13      	ldr	r3, [pc, #76]	; (1124 <SystemInit+0x1b0>)
    10d6:	68ca      	ldr	r2, [r1, #12]
    10d8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    10dc:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    10de:	60cb      	str	r3, [r1, #12]
    10e0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    10e4:	bf00      	nop
    10e6:	e7fd      	b.n	10e4 <SystemInit+0x170>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    10e8:	4b0f      	ldr	r3, [pc, #60]	; (1128 <SystemInit+0x1b4>)
    10ea:	4a10      	ldr	r2, [pc, #64]	; (112c <SystemInit+0x1b8>)
    10ec:	601a      	str	r2, [r3, #0]
}
    10ee:	9a01      	ldr	r2, [sp, #4]
    10f0:	6823      	ldr	r3, [r4, #0]
    10f2:	429a      	cmp	r2, r3
    10f4:	d001      	beq.n	10fa <SystemInit+0x186>
    10f6:	f009 ff91 	bl	b01c <_StackCheckHandler>
    10fa:	b002      	add	sp, #8
    10fc:	bd10      	pop	{r4, pc}
    10fe:	bf00      	nop
    1100:	200036b0 	.word	0x200036b0
    1104:	4000568c 	.word	0x4000568c
    1108:	00038148 	.word	0x00038148
    110c:	4000f000 	.word	0x4000f000
    1110:	40000ee4 	.word	0x40000ee4
    1114:	10000258 	.word	0x10000258
    1118:	40029640 	.word	0x40029640
    111c:	4001e000 	.word	0x4001e000
    1120:	e000ed00 	.word	0xe000ed00
    1124:	05fa0004 	.word	0x05fa0004
    1128:	200036b8 	.word	0x200036b8
    112c:	03d09000 	.word	0x03d09000

00001130 <nrfx_isr>:
 */

#include <nrfx.h>

void nrfx_isr(void *irq_handler)
{
    1130:	b507      	push	{r0, r1, r2, lr}
    1132:	4b06      	ldr	r3, [pc, #24]	; (114c <nrfx_isr+0x1c>)
    1134:	681a      	ldr	r2, [r3, #0]
    1136:	9201      	str	r2, [sp, #4]
	((nrfx_irq_handler_t)irq_handler)();
    1138:	9a01      	ldr	r2, [sp, #4]
    113a:	681b      	ldr	r3, [r3, #0]
    113c:	429a      	cmp	r2, r3
    113e:	d001      	beq.n	1144 <nrfx_isr+0x14>
    1140:	f009 ff6c 	bl	b01c <_StackCheckHandler>
}
    1144:	b003      	add	sp, #12
    1146:	f85d eb04 	ldr.w	lr, [sp], #4
	((nrfx_irq_handler_t)irq_handler)();
    114a:	4700      	bx	r0
    114c:	200036b0 	.word	0x200036b0

00001150 <nrfx_systick_delay_ticks>:
    const uint32_t diff = NRF_SYSTICK_VAL_MASK & ((p_state->time) - nrf_systick_val_get());
    return (diff >= nrfx_systick_us_tick(us));
}

void nrfx_systick_delay_ticks(uint32_t ticks)
{
    1150:	b513      	push	{r0, r1, r4, lr}
    1152:	4b0a      	ldr	r3, [pc, #40]	; (117c <nrfx_systick_delay_ticks+0x2c>)
    SysTick->LOAD = val;
}

__STATIC_INLINE uint32_t nrf_systick_val_get(void)
{
    return SysTick->VAL;
    1154:	490a      	ldr	r1, [pc, #40]	; (1180 <nrfx_systick_delay_ticks+0x30>)
    1156:	681a      	ldr	r2, [r3, #0]
    1158:	9201      	str	r2, [sp, #4]
    115a:	688c      	ldr	r4, [r1, #8]
    NRFX_ASSERT(ticks <= NRFX_SYSTICK_TICKS_MAX);

    const uint32_t start = nrf_systick_val_get();
    while ((NRF_SYSTICK_VAL_MASK & (start - nrf_systick_val_get())) < ticks)
    115c:	461a      	mov	r2, r3
    115e:	688b      	ldr	r3, [r1, #8]
    1160:	1ae3      	subs	r3, r4, r3
    1162:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1166:	4283      	cmp	r3, r0
    1168:	d3f9      	bcc.n	115e <nrfx_systick_delay_ticks+0xe>
    {
        /* Nothing to do */
    }
}
    116a:	9901      	ldr	r1, [sp, #4]
    116c:	6813      	ldr	r3, [r2, #0]
    116e:	4299      	cmp	r1, r3
    1170:	d001      	beq.n	1176 <nrfx_systick_delay_ticks+0x26>
    1172:	f009 ff53 	bl	b01c <_StackCheckHandler>
    1176:	b002      	add	sp, #8
    1178:	bd10      	pop	{r4, pc}
    117a:	bf00      	nop
    117c:	200036b0 	.word	0x200036b0
    1180:	e000e010 	.word	0xe000e010

00001184 <nrfx_systick_delay_us>:

void nrfx_systick_delay_us(uint32_t us)
{
    1184:	b507      	push	{r0, r1, r2, lr}
    1186:	4b0a      	ldr	r3, [pc, #40]	; (11b0 <nrfx_systick_delay_us+0x2c>)
    1188:	681a      	ldr	r2, [r3, #0]
    118a:	9201      	str	r2, [sp, #4]
    NRFX_SYSTICK_ASSERT_TIMEOUT(us);
    nrfx_systick_delay_ticks(nrfx_systick_us_tick(us));
    118c:	9a01      	ldr	r2, [sp, #4]
    118e:	681b      	ldr	r3, [r3, #0]
    1190:	429a      	cmp	r2, r3
    1192:	d001      	beq.n	1198 <nrfx_systick_delay_us+0x14>
    1194:	f009 ff42 	bl	b01c <_StackCheckHandler>
    return us * ((SystemCoreClock) / NRFX_SYSTICK_US);
    1198:	4b06      	ldr	r3, [pc, #24]	; (11b4 <nrfx_systick_delay_us+0x30>)
    119a:	4a07      	ldr	r2, [pc, #28]	; (11b8 <nrfx_systick_delay_us+0x34>)
    119c:	681b      	ldr	r3, [r3, #0]
    119e:	fbb3 f3f2 	udiv	r3, r3, r2
    nrfx_systick_delay_ticks(nrfx_systick_us_tick(us));
    11a2:	4358      	muls	r0, r3
}
    11a4:	b003      	add	sp, #12
    11a6:	f85d eb04 	ldr.w	lr, [sp], #4
    nrfx_systick_delay_ticks(nrfx_systick_us_tick(us));
    11aa:	f7ff bfd1 	b.w	1150 <nrfx_systick_delay_ticks>
    11ae:	bf00      	nop
    11b0:	200036b0 	.word	0x200036b0
    11b4:	200036b8 	.word	0x200036b8
    11b8:	000f4240 	.word	0x000f4240

000011bc <nrf_usbd_task_trigger>:
/* ------------------------------------------------------------------------------------------------
 *  Interface functions definitions
 */

void nrf_usbd_task_trigger(nrf_usbd_task_t task)
{
    11bc:	b507      	push	{r0, r1, r2, lr}
    11be:	4b0b      	ldr	r3, [pc, #44]	; (11ec <nrf_usbd_task_trigger+0x30>)
    return (volatile uint32_t*)(((uint8_t *)NRF_USBD) + (uint32_t)offset);
    11c0:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
{
    11c4:	681a      	ldr	r2, [r3, #0]
    11c6:	9201      	str	r2, [sp, #4]
    return (volatile uint32_t*)(((uint8_t *)NRF_USBD) + (uint32_t)offset);
    11c8:	f500 301c 	add.w	r0, r0, #159744	; 0x27000
    *(nrf_usbd_getRegPtr((uint32_t)task)) = 1UL;
    11cc:	2201      	movs	r2, #1
    11ce:	6002      	str	r2, [r0, #0]
  __ASM volatile ("isb 0xF":::"memory");
    11d0:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    11d4:	f3bf 8f4f 	dsb	sy
    __ISB();
    __DSB();
}
    11d8:	9a01      	ldr	r2, [sp, #4]
    11da:	681b      	ldr	r3, [r3, #0]
    11dc:	429a      	cmp	r2, r3
    11de:	d001      	beq.n	11e4 <nrf_usbd_task_trigger+0x28>
    11e0:	f009 ff1c 	bl	b01c <_StackCheckHandler>
    11e4:	b003      	add	sp, #12
    11e6:	f85d fb04 	ldr.w	pc, [sp], #4
    11ea:	bf00      	nop
    11ec:	200036b0 	.word	0x200036b0

000011f0 <nrf_usbd_ep_enable_check>:
    retval = ((NRF_USBD->DTOGGLE) & USBD_DTOGGLE_VALUE_Msk) >> USBD_DTOGGLE_VALUE_Pos;
    return (nrf_usbd_dtoggle_t)retval;
}

bool nrf_usbd_ep_enable_check(uint8_t ep)
{
    11f0:	b507      	push	{r0, r1, r2, lr}
    11f2:	4b0c      	ldr	r3, [pc, #48]	; (1224 <nrf_usbd_ep_enable_check+0x34>)
    11f4:	490c      	ldr	r1, [pc, #48]	; (1228 <nrf_usbd_ep_enable_check+0x38>)
    11f6:	681a      	ldr	r2, [r3, #0]
    11f8:	9201      	str	r2, [sp, #4]
    NRFX_ASSERT(NRF_USBD_EP_VALIDATE(ep));
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);

    if (NRF_USBD_EPIN_CHECK(ep))
    11fa:	f010 0f80 	tst.w	r0, #128	; 0x80
    11fe:	f000 020f 	and.w	r2, r0, #15
    {
        return 0 != (NRF_USBD->EPINEN & (1UL << epnr));
    1202:	bf14      	ite	ne
    1204:	f8d1 0510 	ldrne.w	r0, [r1, #1296]	; 0x510
    }
    else
    {
        return 0 != (NRF_USBD->EPOUTEN & (1UL << epnr));
    1208:	f8d1 0514 	ldreq.w	r0, [r1, #1300]	; 0x514
    120c:	40d0      	lsrs	r0, r2
    }
}
    120e:	9a01      	ldr	r2, [sp, #4]
    1210:	681b      	ldr	r3, [r3, #0]
    1212:	429a      	cmp	r2, r3
        return 0 != (NRF_USBD->EPOUTEN & (1UL << epnr));
    1214:	f000 0001 	and.w	r0, r0, #1
}
    1218:	d001      	beq.n	121e <nrf_usbd_ep_enable_check+0x2e>
    121a:	f009 feff 	bl	b01c <_StackCheckHandler>
    121e:	b003      	add	sp, #12
    1220:	f85d fb04 	ldr.w	pc, [sp], #4
    1224:	200036b0 	.word	0x200036b0
    1228:	40027000 	.word	0x40027000

0000122c <nrfx_usbd_errata_type_52840_eng_b>:
{
    return nrfx_usbd_errata_type_52840();
}

static inline bool nrfx_usbd_errata_type_52840_eng_b(void)
{
    122c:	b507      	push	{r0, r1, r2, lr}
    122e:	4b0b      	ldr	r3, [pc, #44]	; (125c <nrfx_usbd_errata_type_52840_eng_b+0x30>)
    1230:	681a      	ldr	r2, [r3, #0]
    1232:	9201      	str	r2, [sp, #4]
    return (*(uint32_t *)0x10000130UL == 0x8UL);
    1234:	4a0a      	ldr	r2, [pc, #40]	; (1260 <nrfx_usbd_errata_type_52840_eng_b+0x34>)
    return (nrfx_usbd_errata_type_52840() && (*(uint32_t *)0x10000134UL >= 0x1UL));
    1236:	6812      	ldr	r2, [r2, #0]
    1238:	2a08      	cmp	r2, #8
    123a:	d10a      	bne.n	1252 <nrfx_usbd_errata_type_52840_eng_b+0x26>
    123c:	4a09      	ldr	r2, [pc, #36]	; (1264 <nrfx_usbd_errata_type_52840_eng_b+0x38>)
    123e:	6810      	ldr	r0, [r2, #0]
    1240:	3000      	adds	r0, #0
    1242:	bf18      	it	ne
    1244:	2001      	movne	r0, #1
}
    1246:	9a01      	ldr	r2, [sp, #4]
    1248:	681b      	ldr	r3, [r3, #0]
    124a:	429a      	cmp	r2, r3
    124c:	d003      	beq.n	1256 <nrfx_usbd_errata_type_52840_eng_b+0x2a>
    124e:	f009 fee5 	bl	b01c <_StackCheckHandler>
    return (nrfx_usbd_errata_type_52840() && (*(uint32_t *)0x10000134UL >= 0x1UL));
    1252:	2000      	movs	r0, #0
    1254:	e7f7      	b.n	1246 <nrfx_usbd_errata_type_52840_eng_b+0x1a>
}
    1256:	b003      	add	sp, #12
    1258:	f85d fb04 	ldr.w	pc, [sp], #4
    125c:	200036b0 	.word	0x200036b0
    1260:	10000130 	.word	0x10000130
    1264:	10000134 	.word	0x10000134

00001268 <nrfx_usbd_consumer>:
bool nrfx_usbd_consumer(
    nrfx_usbd_ep_transfer_t * p_next,
    void * p_context,
    size_t ep_size,
    size_t data_size)
{
    1268:	b573      	push	{r0, r1, r4, r5, r6, lr}
    126a:	4e10      	ldr	r6, [pc, #64]	; (12ac <nrfx_usbd_consumer+0x44>)
    126c:	680d      	ldr	r5, [r1, #0]
    126e:	6834      	ldr	r4, [r6, #0]
    1270:	9401      	str	r4, [sp, #4]
    nrfx_usbd_transfer_t * p_transfer = p_context;
    NRFX_ASSERT(ep_size >= data_size);
    NRFX_ASSERT((p_transfer->p_data.rx == NULL) ||
        nrfx_is_in_ram(p_transfer->p_data.rx));

    size_t size = p_transfer->size;
    1272:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
    1274:	429c      	cmp	r4, r3
        p_next->p_data = p_transfer->p_data;
    }
    else
    {
        p_next->size = data_size;
        p_next->p_data = p_transfer->p_data;
    1276:	bf29      	itett	cs
    1278:	e9c0 5300 	strdcs	r5, r3, [r0]
        p_next->size = 0;
    127c:	2100      	movcc	r1, #0
        size -= data_size;
    127e:	1ae4      	subcs	r4, r4, r3
        p_transfer->size = size;
        p_transfer->p_data.addr += data_size;
    1280:	18ed      	addcs	r5, r5, r3
        p_next->p_data = p_transfer->p_data;
    1282:	bf32      	itee	cc
    1284:	e9c0 5100 	strdcc	r5, r1, [r0]
        p_transfer->size = size;
    1288:	604c      	strcs	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
    128a:	600d      	strcs	r5, [r1, #0]
    }
    return (ep_size == data_size) && (size != 0);
    128c:	4293      	cmp	r3, r2
    128e:	d108      	bne.n	12a2 <nrfx_usbd_consumer+0x3a>
    1290:	1c20      	adds	r0, r4, #0
    1292:	bf18      	it	ne
    1294:	2001      	movne	r0, #1
}
    1296:	9a01      	ldr	r2, [sp, #4]
    1298:	6833      	ldr	r3, [r6, #0]
    129a:	429a      	cmp	r2, r3
    129c:	d003      	beq.n	12a6 <nrfx_usbd_consumer+0x3e>
    129e:	f009 febd 	bl	b01c <_StackCheckHandler>
    return (ep_size == data_size) && (size != 0);
    12a2:	2000      	movs	r0, #0
    12a4:	e7f7      	b.n	1296 <nrfx_usbd_consumer+0x2e>
}
    12a6:	b002      	add	sp, #8
    12a8:	bd70      	pop	{r4, r5, r6, pc}
    12aa:	bf00      	nop
    12ac:	200036b0 	.word	0x200036b0

000012b0 <nrfx_usbd_feeder_ram>:
 */
bool nrfx_usbd_feeder_ram(
    nrfx_usbd_ep_transfer_t * p_next,
    void * p_context,
    size_t ep_size)
{
    12b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    12b2:	4c0d      	ldr	r4, [pc, #52]	; (12e8 <nrfx_usbd_feeder_ram+0x38>)
    if (tx_size > ep_size)
    {
        tx_size = ep_size;
    }

    p_next->p_data = p_transfer->p_data;
    12b4:	680d      	ldr	r5, [r1, #0]
{
    12b6:	6823      	ldr	r3, [r4, #0]
    12b8:	9301      	str	r3, [sp, #4]
    size_t tx_size = p_transfer->size;
    12ba:	684b      	ldr	r3, [r1, #4]
    if (tx_size > ep_size)
    12bc:	429a      	cmp	r2, r3
    12be:	bf28      	it	cs
    12c0:	461a      	movcs	r2, r3
    p_next->size = tx_size;
    12c2:	e9c0 5200 	strd	r5, r2, [r0]

    p_transfer->size -= tx_size;
    12c6:	1a98      	subs	r0, r3, r2
    p_transfer->p_data.addr += tx_size;
    12c8:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
    12ca:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    12cc:	4413      	add	r3, r2
    12ce:	600b      	str	r3, [r1, #0]

    return (p_transfer->size != 0);
}
    12d0:	9a01      	ldr	r2, [sp, #4]
    12d2:	6823      	ldr	r3, [r4, #0]
    12d4:	3000      	adds	r0, #0
    12d6:	bf18      	it	ne
    12d8:	2001      	movne	r0, #1
    12da:	429a      	cmp	r2, r3
    12dc:	d001      	beq.n	12e2 <nrfx_usbd_feeder_ram+0x32>
    12de:	f009 fe9d 	bl	b01c <_StackCheckHandler>
    12e2:	b003      	add	sp, #12
    12e4:	bd30      	pop	{r4, r5, pc}
    12e6:	bf00      	nop
    12e8:	200036b0 	.word	0x200036b0

000012ec <nrfx_usbd_feeder_ram_zlp>:
 */
bool nrfx_usbd_feeder_ram_zlp(
    nrfx_usbd_ep_transfer_t * p_next,
    void * p_context,
    size_t ep_size)
{
    12ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
    nrfx_usbd_transfer_t * p_transfer = p_context;
    NRFX_ASSERT(nrfx_is_in_ram(p_transfer->p_data.tx));

    size_t tx_size = p_transfer->size;
    12ee:	684c      	ldr	r4, [r1, #4]
{
    12f0:	4d0e      	ldr	r5, [pc, #56]	; (132c <nrfx_usbd_feeder_ram_zlp+0x40>)
    12f2:	42a2      	cmp	r2, r4
    12f4:	682b      	ldr	r3, [r5, #0]
    12f6:	9301      	str	r3, [sp, #4]
    if (tx_size > ep_size)
    12f8:	bf28      	it	cs
    12fa:	4622      	movcs	r2, r4
    {
        tx_size = ep_size;
    }

    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    12fc:	680b      	ldr	r3, [r1, #0]
    12fe:	2a00      	cmp	r2, #0
    1300:	bf14      	ite	ne
    1302:	461e      	movne	r6, r3
    1304:	2600      	moveq	r6, #0
    p_next->size = tx_size;

    p_transfer->size -= tx_size;
    p_transfer->p_data.addr += tx_size;
    1306:	4413      	add	r3, r2
    p_next->size = tx_size;
    1308:	e9c0 6200 	strd	r6, r2, [r0]
    p_transfer->size -= tx_size;
    130c:	eba4 0402 	sub.w	r4, r4, r2
    p_transfer->p_data.addr += tx_size;
    1310:	600b      	str	r3, [r1, #0]

    return (tx_size != 0);
}
    1312:	9a01      	ldr	r2, [sp, #4]
    1314:	682b      	ldr	r3, [r5, #0]
    p_transfer->size -= tx_size;
    1316:	604c      	str	r4, [r1, #4]
}
    1318:	bf14      	ite	ne
    131a:	2001      	movne	r0, #1
    131c:	2000      	moveq	r0, #0
    131e:	429a      	cmp	r2, r3
    1320:	d001      	beq.n	1326 <nrfx_usbd_feeder_ram_zlp+0x3a>
    1322:	f009 fe7b 	bl	b01c <_StackCheckHandler>
    1326:	b002      	add	sp, #8
    1328:	bd70      	pop	{r4, r5, r6, pc}
    132a:	bf00      	nop
    132c:	200036b0 	.word	0x200036b0

00001330 <ep_state_access>:
 * It is used for internal transmission state.
 *
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    1330:	b507      	push	{r0, r1, r2, lr}
    1332:	4a0b      	ldr	r2, [pc, #44]	; (1360 <ep_state_access+0x30>)
    1334:	6813      	ldr	r3, [r2, #0]
    1336:	9301      	str	r3, [sp, #4]
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    1338:	4b0a      	ldr	r3, [pc, #40]	; (1364 <ep_state_access+0x34>)
    133a:	f010 0f80 	tst.w	r0, #128	; 0x80
    133e:	f1a3 0190 	sub.w	r1, r3, #144	; 0x90
    1342:	bf08      	it	eq
    1344:	460b      	moveq	r3, r1
        NRF_USBD_EP_NR_GET(ep));
    1346:	f000 000f 	and.w	r0, r0, #15
}
    134a:	9901      	ldr	r1, [sp, #4]
    134c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    1350:	6813      	ldr	r3, [r2, #0]
    1352:	4299      	cmp	r1, r3
    1354:	d001      	beq.n	135a <ep_state_access+0x2a>
    1356:	f009 fe61 	bl	b01c <_StackCheckHandler>
    135a:	b003      	add	sp, #12
    135c:	f85d fb04 	ldr.w	pc, [sp], #4
    1360:	200036b0 	.word	0x200036b0
    1364:	20000178 	.word	0x20000178

00001368 <ep2bit>:
 * @return Bit position related to the given endpoint number.
 *
 * @sa bit2ep
 */
static inline uint8_t ep2bit(nrfx_usbd_ep_t ep)
{
    1368:	b507      	push	{r0, r1, r2, lr}
    136a:	4b0a      	ldr	r3, [pc, #40]	; (1394 <ep2bit+0x2c>)
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return NRFX_USBD_EP_BITPOS(ep);
    136c:	b240      	sxtb	r0, r0
{
    136e:	681a      	ldr	r2, [r3, #0]
    1370:	9201      	str	r2, [sp, #4]
    return NRFX_USBD_EP_BITPOS(ep);
    1372:	2800      	cmp	r0, #0
    1374:	bfb4      	ite	lt
    1376:	2200      	movlt	r2, #0
    1378:	2210      	movge	r2, #16
    137a:	f000 000f 	and.w	r0, r0, #15
}
    137e:	4410      	add	r0, r2
    1380:	9a01      	ldr	r2, [sp, #4]
    1382:	681b      	ldr	r3, [r3, #0]
    1384:	429a      	cmp	r2, r3
    1386:	d001      	beq.n	138c <ep2bit+0x24>
    1388:	f009 fe48 	bl	b01c <_StackCheckHandler>
    138c:	b003      	add	sp, #12
    138e:	f85d fb04 	ldr.w	pc, [sp], #4
    1392:	bf00      	nop
    1394:	200036b0 	.word	0x200036b0

00001398 <usbd_dma_pending_clear>:
 *
 * Internal function to clear the flag informing about EasyDMA transfer pending.
 * This function is called always just after the finished EasyDMA transfer is detected.
 */
static inline void usbd_dma_pending_clear(void)
{
    1398:	b507      	push	{r0, r1, r2, lr}
    139a:	4b08      	ldr	r3, [pc, #32]	; (13bc <usbd_dma_pending_clear+0x24>)
    if (nrfx_usbd_errata_199())
    {
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    139c:	4908      	ldr	r1, [pc, #32]	; (13c0 <usbd_dma_pending_clear+0x28>)
{
    139e:	681a      	ldr	r2, [r3, #0]
    13a0:	9201      	str	r2, [sp, #4]
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    13a2:	2200      	movs	r2, #0
    13a4:	600a      	str	r2, [r1, #0]
    }
    m_dma_pending = false;
    13a6:	4907      	ldr	r1, [pc, #28]	; (13c4 <usbd_dma_pending_clear+0x2c>)
    13a8:	700a      	strb	r2, [r1, #0]
}
    13aa:	9a01      	ldr	r2, [sp, #4]
    13ac:	681b      	ldr	r3, [r3, #0]
    13ae:	429a      	cmp	r2, r3
    13b0:	d001      	beq.n	13b6 <usbd_dma_pending_clear+0x1e>
    13b2:	f009 fe33 	bl	b01c <_StackCheckHandler>
    13b6:	b003      	add	sp, #12
    13b8:	f85d fb04 	ldr.w	pc, [sp], #4
    13bc:	200036b0 	.word	0x200036b0
    13c0:	40027c1c 	.word	0x40027c1c
    13c4:	20001951 	.word	0x20001951

000013c8 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
    13c8:	b513      	push	{r0, r1, r4, lr}
    13ca:	4c0c      	ldr	r4, [pc, #48]	; (13fc <ev_usbreset_handler+0x34>)
    m_bus_suspend = false;
    13cc:	4a0c      	ldr	r2, [pc, #48]	; (1400 <ev_usbreset_handler+0x38>)
{
    13ce:	6823      	ldr	r3, [r4, #0]
    13d0:	9301      	str	r3, [sp, #4]
    m_bus_suspend = false;
    13d2:	2300      	movs	r3, #0
    13d4:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    13d6:	4a0b      	ldr	r2, [pc, #44]	; (1404 <ev_usbreset_handler+0x3c>)

    const nrfx_usbd_evt_t evt = {
    13d8:	9300      	str	r3, [sp, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    13da:	7013      	strb	r3, [r2, #0]
    const nrfx_usbd_evt_t evt = {
    13dc:	2301      	movs	r3, #1
    13de:	f88d 3000 	strb.w	r3, [sp]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
    13e2:	4b09      	ldr	r3, [pc, #36]	; (1408 <ev_usbreset_handler+0x40>)
    13e4:	4668      	mov	r0, sp
    13e6:	681b      	ldr	r3, [r3, #0]
    13e8:	4798      	blx	r3
}
    13ea:	9a01      	ldr	r2, [sp, #4]
    13ec:	6823      	ldr	r3, [r4, #0]
    13ee:	429a      	cmp	r2, r3
    13f0:	d001      	beq.n	13f6 <ev_usbreset_handler+0x2e>
    13f2:	f009 fe13 	bl	b01c <_StackCheckHandler>
    13f6:	b002      	add	sp, #8
    13f8:	bd10      	pop	{r4, pc}
    13fa:	bf00      	nop
    13fc:	200036b0 	.word	0x200036b0
    1400:	20001950 	.word	0x20001950
    1404:	20001953 	.word	0x20001953
    1408:	20000208 	.word	0x20000208

0000140c <ev_started_handler>:

static void ev_started_handler(void)
{
    140c:	b507      	push	{r0, r1, r2, lr}
    140e:	4b06      	ldr	r3, [pc, #24]	; (1428 <ev_started_handler+0x1c>)
    1410:	681a      	ldr	r2, [r3, #0]
    1412:	9201      	str	r2, [sp, #4]
#if NRFX_USBD_STARTED_EV_ENABLE
    // Handler not used by the stack.
    // May be used for debugging.
#endif
}
    1414:	9a01      	ldr	r2, [sp, #4]
    1416:	681b      	ldr	r3, [r3, #0]
    1418:	429a      	cmp	r2, r3
    141a:	d001      	beq.n	1420 <ev_started_handler+0x14>
    141c:	f009 fdfe 	bl	b01c <_StackCheckHandler>
    1420:	b003      	add	sp, #12
    1422:	f85d fb04 	ldr.w	pc, [sp], #4
    1426:	bf00      	nop
    1428:	200036b0 	.word	0x200036b0

0000142c <nrfx_usbd_feeder_flash>:
{
    142c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    size_t tx_size  = p_transfer->size;
    1430:	684d      	ldr	r5, [r1, #4]
{
    1432:	4e11      	ldr	r6, [pc, #68]	; (1478 <nrfx_usbd_feeder_flash+0x4c>)
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    1434:	f8df 8044 	ldr.w	r8, [pc, #68]	; 147c <nrfx_usbd_feeder_flash+0x50>
{
    1438:	6833      	ldr	r3, [r6, #0]
    143a:	9301      	str	r3, [sp, #4]
    if (tx_size > ep_size)
    143c:	4295      	cmp	r5, r2
    143e:	bf28      	it	cs
    1440:	4615      	movcs	r5, r2
{
    1442:	460c      	mov	r4, r1
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    1444:	462a      	mov	r2, r5
{
    1446:	4607      	mov	r7, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    1448:	6809      	ldr	r1, [r1, #0]
    144a:	4640      	mov	r0, r8
    144c:	f006 fc64 	bl	7d18 <memcpy>
    p_transfer->p_data.addr += tx_size;
    1450:	6823      	ldr	r3, [r4, #0]
    p_transfer->size -= tx_size;
    1452:	6860      	ldr	r0, [r4, #4]
}
    1454:	9a01      	ldr	r2, [sp, #4]
    p_next->size = tx_size;
    1456:	e9c7 8500 	strd	r8, r5, [r7]
    p_transfer->size -= tx_size;
    145a:	1b40      	subs	r0, r0, r5
    p_transfer->p_data.addr += tx_size;
    145c:	441d      	add	r5, r3
}
    145e:	6833      	ldr	r3, [r6, #0]
    p_transfer->size -= tx_size;
    1460:	6060      	str	r0, [r4, #4]
}
    1462:	3000      	adds	r0, #0
    1464:	bf18      	it	ne
    1466:	2001      	movne	r0, #1
    1468:	429a      	cmp	r2, r3
    p_transfer->p_data.addr += tx_size;
    146a:	6025      	str	r5, [r4, #0]
}
    146c:	d001      	beq.n	1472 <nrfx_usbd_feeder_flash+0x46>
    146e:	f009 fdd5 	bl	b01c <_StackCheckHandler>
    1472:	b002      	add	sp, #8
    1474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1478:	200036b0 	.word	0x200036b0
    147c:	20000210 	.word	0x20000210

00001480 <nrfx_usbd_feeder_flash_zlp>:
{
    1480:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    1484:	460d      	mov	r5, r1
    1486:	4b13      	ldr	r3, [pc, #76]	; (14d4 <nrfx_usbd_feeder_flash_zlp+0x54>)
    size_t tx_size  = p_transfer->size;
    1488:	686c      	ldr	r4, [r5, #4]
{
    148a:	6819      	ldr	r1, [r3, #0]
    148c:	9101      	str	r1, [sp, #4]
    if (tx_size > ep_size)
    148e:	4294      	cmp	r4, r2
    1490:	bf28      	it	cs
    1492:	4614      	movcs	r4, r2
{
    1494:	4606      	mov	r6, r0
    1496:	4698      	mov	r8, r3
    if (tx_size != 0)
    1498:	b1bc      	cbz	r4, 14ca <nrfx_usbd_feeder_flash_zlp+0x4a>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    149a:	4f0f      	ldr	r7, [pc, #60]	; (14d8 <nrfx_usbd_feeder_flash_zlp+0x58>)
    149c:	6829      	ldr	r1, [r5, #0]
    149e:	4622      	mov	r2, r4
    14a0:	4638      	mov	r0, r7
    14a2:	f006 fc39 	bl	7d18 <memcpy>
        p_next->p_data.tx = p_buffer;
    14a6:	6037      	str	r7, [r6, #0]
    p_transfer->size -= tx_size;
    14a8:	686b      	ldr	r3, [r5, #4]
    p_next->size = tx_size;
    14aa:	6074      	str	r4, [r6, #4]
    p_transfer->size -= tx_size;
    14ac:	1b1b      	subs	r3, r3, r4
    14ae:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
    14b0:	682b      	ldr	r3, [r5, #0]
}
    14b2:	9a01      	ldr	r2, [sp, #4]
    p_transfer->p_data.addr += tx_size;
    14b4:	4423      	add	r3, r4
    14b6:	602b      	str	r3, [r5, #0]
}
    14b8:	f8d8 3000 	ldr.w	r3, [r8]
    14bc:	1c20      	adds	r0, r4, #0
    14be:	bf18      	it	ne
    14c0:	2001      	movne	r0, #1
    14c2:	429a      	cmp	r2, r3
    14c4:	d003      	beq.n	14ce <nrfx_usbd_feeder_flash_zlp+0x4e>
    14c6:	f009 fda9 	bl	b01c <_StackCheckHandler>
        p_next->p_data.tx = NULL;
    14ca:	6004      	str	r4, [r0, #0]
    14cc:	e7ec      	b.n	14a8 <nrfx_usbd_feeder_flash_zlp+0x28>
}
    14ce:	b002      	add	sp, #8
    14d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    14d4:	200036b0 	.word	0x200036b0
    14d8:	20000210 	.word	0x20000210

000014dc <ev_sof_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }

static void ev_sof_handler(void)
{
    14dc:	b513      	push	{r0, r1, r4, lr}
    14de:	4c11      	ldr	r4, [pc, #68]	; (1524 <ev_sof_handler+0x48>)
    14e0:	6823      	ldr	r3, [r4, #0]
    14e2:	9301      	str	r3, [sp, #4]
    nrfx_usbd_evt_t evt =  {
    14e4:	2300      	movs	r3, #0
    14e6:	f88d 3000 	strb.w	r3, [sp]
        (((NRF_USBD->ISOSPLIT) & USBD_ISOSPLIT_SPLIT_Msk) >> USBD_ISOSPLIT_SPLIT_Pos);
}

uint32_t nrf_usbd_framecntr_get(void)
{
    return NRF_USBD->FRAMECNTR;
    14ea:	4b0f      	ldr	r3, [pc, #60]	; (1528 <ev_sof_handler+0x4c>)
    14ec:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    14f0:	f8ad 2002 	strh.w	r2, [sp, #2]
    size_t size_isoout = NRF_USBD->SIZE.ISOOUT;
    14f4:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    if (nrf_usbd_episoout_size_get(NRFX_USBD_EPOUT8) != NRF_USBD_EPISOOUT_NO_DATA)
    {
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    }
    m_ep_ready |= iso_ready_mask;
    14f8:	4a0c      	ldr	r2, [pc, #48]	; (152c <ev_sof_handler+0x50>)
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    14fa:	2b00      	cmp	r3, #0
    m_ep_ready |= iso_ready_mask;
    14fc:	6813      	ldr	r3, [r2, #0]
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    14fe:	bf0c      	ite	eq
    1500:	f44f 7180 	moveq.w	r1, #256	; 0x100
    1504:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    m_ep_ready |= iso_ready_mask;
    1508:	430b      	orrs	r3, r1
    150a:	6013      	str	r3, [r2, #0]

    m_event_handler(&evt);
    150c:	4b08      	ldr	r3, [pc, #32]	; (1530 <ev_sof_handler+0x54>)
    150e:	4668      	mov	r0, sp
    1510:	681b      	ldr	r3, [r3, #0]
    1512:	4798      	blx	r3
}
    1514:	9a01      	ldr	r2, [sp, #4]
    1516:	6823      	ldr	r3, [r4, #0]
    1518:	429a      	cmp	r2, r3
    151a:	d001      	beq.n	1520 <ev_sof_handler+0x44>
    151c:	f009 fd7e 	bl	b01c <_StackCheckHandler>
    1520:	b002      	add	sp, #8
    1522:	bd10      	pop	{r4, pc}
    1524:	200036b0 	.word	0x200036b0
    1528:	40027000 	.word	0x40027000
    152c:	200000e4 	.word	0x200000e4
    1530:	20000208 	.word	0x20000208

00001534 <usbd_ep_data_handler>:
 * Auxiliary internal function.
 * @param ep     Endpoint number.
 * @param bitpos Bit position for selected endpoint number.
 */
static void usbd_ep_data_handler(nrfx_usbd_ep_t ep, uint8_t bitpos)
{
    1534:	b537      	push	{r0, r1, r2, r4, r5, lr}
    1536:	4c16      	ldr	r4, [pc, #88]	; (1590 <usbd_ep_data_handler+0x5c>)
    NRFX_LOG_DEBUG("USBD event: EndpointData: %x", ep);
    /* Mark endpoint ready for next DMA access */
    m_ep_ready |= (1U << bitpos);
    1538:	4d16      	ldr	r5, [pc, #88]	; (1594 <usbd_ep_data_handler+0x60>)
{
    153a:	6823      	ldr	r3, [r4, #0]
    153c:	9301      	str	r3, [sp, #4]
    m_ep_ready |= (1U << bitpos);
    153e:	2201      	movs	r2, #1
    1540:	682b      	ldr	r3, [r5, #0]
    1542:	fa02 f101 	lsl.w	r1, r2, r1
    1546:	430b      	orrs	r3, r1
    1548:	602b      	str	r3, [r5, #0]

    if (NRF_USBD_EPIN_CHECK(ep))
    154a:	4b13      	ldr	r3, [pc, #76]	; (1598 <usbd_ep_data_handler+0x64>)
    154c:	681b      	ldr	r3, [r3, #0]
    154e:	4019      	ands	r1, r3
    1550:	0603      	lsls	r3, r0, #24
    1552:	d511      	bpl.n	1578 <usbd_ep_data_handler+0x44>
    {
        /* IN endpoint (Device -> Host) */
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    1554:	b951      	cbnz	r1, 156c <usbd_ep_data_handler+0x38>
        {
            NRFX_LOG_DEBUG("USBD event: EndpointData: In finished");
            /* No more data to be send - transmission finished */
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    1556:	2306      	movs	r3, #6
    1558:	f88d 3000 	strb.w	r3, [sp]
    155c:	f88d 0002 	strb.w	r0, [sp, #2]
    1560:	f88d 1003 	strb.w	r1, [sp, #3]
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
        {
            NRFX_LOG_DEBUG("USBD event: EndpointData: Out waiting");
            /* No buffer prepared - send event to the application */
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
            m_event_handler(&evt);
    1564:	4b0d      	ldr	r3, [pc, #52]	; (159c <usbd_ep_data_handler+0x68>)
    1566:	4668      	mov	r0, sp
    1568:	681b      	ldr	r3, [r3, #0]
    156a:	4798      	blx	r3
        }
    }
}
    156c:	9a01      	ldr	r2, [sp, #4]
    156e:	6823      	ldr	r3, [r4, #0]
    1570:	429a      	cmp	r2, r3
    1572:	d00b      	beq.n	158c <usbd_ep_data_handler+0x58>
    1574:	f009 fd52 	bl	b01c <_StackCheckHandler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    1578:	2900      	cmp	r1, #0
    157a:	d1f7      	bne.n	156c <usbd_ep_data_handler+0x38>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
    157c:	2306      	movs	r3, #6
    157e:	f88d 3000 	strb.w	r3, [sp]
    1582:	f88d 0002 	strb.w	r0, [sp, #2]
    1586:	f88d 2003 	strb.w	r2, [sp, #3]
    158a:	e7eb      	b.n	1564 <usbd_ep_data_handler+0x30>
}
    158c:	b003      	add	sp, #12
    158e:	bd30      	pop	{r4, r5, pc}
    1590:	200036b0 	.word	0x200036b0
    1594:	200000e4 	.word	0x200000e4
    1598:	20000074 	.word	0x20000074
    159c:	20000208 	.word	0x20000208

000015a0 <ev_setup_data_handler>:

static void ev_setup_data_handler(void)
{
    15a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    15a2:	4d0a      	ldr	r5, [pc, #40]	; (15cc <ev_setup_data_handler+0x2c>)
    15a4:	682b      	ldr	r3, [r5, #0]
    15a6:	9301      	str	r3, [sp, #4]
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    15a8:	4b09      	ldr	r3, [pc, #36]	; (15d0 <ev_setup_data_handler+0x30>)
    15aa:	781c      	ldrb	r4, [r3, #0]
    15ac:	4620      	mov	r0, r4
    15ae:	f7ff fedb 	bl	1368 <ep2bit>
    15b2:	9a01      	ldr	r2, [sp, #4]
    15b4:	682b      	ldr	r3, [r5, #0]
    15b6:	429a      	cmp	r2, r3
    15b8:	4601      	mov	r1, r0
    15ba:	d001      	beq.n	15c0 <ev_setup_data_handler+0x20>
    15bc:	f009 fd2e 	bl	b01c <_StackCheckHandler>
    15c0:	4620      	mov	r0, r4
}
    15c2:	b003      	add	sp, #12
    15c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    15c8:	f7ff bfb4 	b.w	1534 <usbd_ep_data_handler>
    15cc:	200036b0 	.word	0x200036b0
    15d0:	20001953 	.word	0x20001953

000015d4 <atomic_and.constprop.11>:
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
    15d4:	b507      	push	{r0, r1, r2, lr}
    15d6:	4a0d      	ldr	r2, [pc, #52]	; (160c <atomic_and.constprop.11+0x38>)
    15d8:	6813      	ldr	r3, [r2, #0]
    15da:	9301      	str	r3, [sp, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    15dc:	4b0c      	ldr	r3, [pc, #48]	; (1610 <atomic_and.constprop.11+0x3c>)
}
    15de:	f3bf 8f5b 	dmb	ish
    15e2:	4601      	mov	r1, r0
    15e4:	e853 0f00 	ldrex	r0, [r3]
    15e8:	ea00 0c01 	and.w	ip, r0, r1
    15ec:	e843 ce00 	strex	lr, ip, [r3]
    15f0:	f1be 0f00 	cmp.w	lr, #0
    15f4:	d1f6      	bne.n	15e4 <atomic_and.constprop.11+0x10>
    15f6:	f3bf 8f5b 	dmb	ish
    15fa:	9901      	ldr	r1, [sp, #4]
    15fc:	6813      	ldr	r3, [r2, #0]
    15fe:	4299      	cmp	r1, r3
    1600:	d001      	beq.n	1606 <atomic_and.constprop.11+0x32>
    1602:	f009 fd0b 	bl	b01c <_StackCheckHandler>
    1606:	b003      	add	sp, #12
    1608:	f85d fb04 	ldr.w	pc, [sp], #4
    160c:	200036b0 	.word	0x200036b0
    1610:	20000074 	.word	0x20000074

00001614 <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    1614:	b513      	push	{r0, r1, r4, lr}
    1616:	4c11      	ldr	r4, [pc, #68]	; (165c <ev_dma_epin0_handler+0x48>)
    1618:	6823      	ldr	r3, [r4, #0]
    161a:	9301      	str	r3, [sp, #4]
    usbd_dma_pending_clear();
    161c:	f7ff febc 	bl	1398 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    1620:	4b0f      	ldr	r3, [pc, #60]	; (1660 <ev_dma_epin0_handler+0x4c>)
    1622:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
    1626:	2a03      	cmp	r2, #3
    1628:	4622      	mov	r2, r4
    162a:	d10c      	bne.n	1646 <ev_dma_epin0_handler+0x32>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    162c:	9901      	ldr	r1, [sp, #4]
    162e:	6813      	ldr	r3, [r2, #0]
    1630:	4299      	cmp	r1, r3
    1632:	d001      	beq.n	1638 <ev_dma_epin0_handler+0x24>
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    1634:	f009 fcf2 	bl	b01c <_StackCheckHandler>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    1638:	f06f 0001 	mvn.w	r0, #1
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    163c:	b002      	add	sp, #8
    163e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    1642:	f7ff bfc7 	b.w	15d4 <atomic_and.constprop.11>
    else if (p_state->handler.feeder == NULL)
    1646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    164a:	2b00      	cmp	r3, #0
    164c:	d0ee      	beq.n	162c <ev_dma_epin0_handler+0x18>
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    164e:	9a01      	ldr	r2, [sp, #4]
    1650:	6823      	ldr	r3, [r4, #0]
    1652:	429a      	cmp	r2, r3
    1654:	d1ee      	bne.n	1634 <ev_dma_epin0_handler+0x20>
    1656:	b002      	add	sp, #8
    1658:	bd10      	pop	{r4, pc}
    165a:	bf00      	nop
    165c:	200036b0 	.word	0x200036b0
    1660:	200000e8 	.word	0x200000e8

00001664 <nrf_usbd_epin_dma_handler>:
{
    1664:	b573      	push	{r0, r1, r4, r5, r6, lr}
    1666:	4c14      	ldr	r4, [pc, #80]	; (16b8 <nrf_usbd_epin_dma_handler+0x54>)
    1668:	4605      	mov	r5, r0
    166a:	6823      	ldr	r3, [r4, #0]
    166c:	9301      	str	r3, [sp, #4]
    usbd_dma_pending_clear();
    166e:	f7ff fe93 	bl	1398 <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
    1672:	4628      	mov	r0, r5
    1674:	f7ff fe5c 	bl	1330 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    1678:	7b83      	ldrb	r3, [r0, #14]
    167a:	2b03      	cmp	r3, #3
    167c:	4626      	mov	r6, r4
    167e:	d111      	bne.n	16a4 <nrf_usbd_epin_dma_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    1680:	4628      	mov	r0, r5
    1682:	f7ff fe71 	bl	1368 <ep2bit>
    1686:	9a01      	ldr	r2, [sp, #4]
    1688:	6833      	ldr	r3, [r6, #0]
    168a:	429a      	cmp	r2, r3
    168c:	d001      	beq.n	1692 <nrf_usbd_epin_dma_handler+0x2e>
}
    168e:	f009 fcc5 	bl	b01c <_StackCheckHandler>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    1692:	2301      	movs	r3, #1
    1694:	fa03 f000 	lsl.w	r0, r3, r0
    1698:	43c0      	mvns	r0, r0
}
    169a:	b002      	add	sp, #8
    169c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    16a0:	f7ff bf98 	b.w	15d4 <atomic_and.constprop.11>
    else if (p_state->handler.feeder == NULL)
    16a4:	6803      	ldr	r3, [r0, #0]
    16a6:	2b00      	cmp	r3, #0
    16a8:	d0ea      	beq.n	1680 <nrf_usbd_epin_dma_handler+0x1c>
}
    16aa:	9a01      	ldr	r2, [sp, #4]
    16ac:	6823      	ldr	r3, [r4, #0]
    16ae:	429a      	cmp	r2, r3
    16b0:	d1ed      	bne.n	168e <nrf_usbd_epin_dma_handler+0x2a>
    16b2:	b002      	add	sp, #8
    16b4:	bd70      	pop	{r4, r5, r6, pc}
    16b6:	bf00      	nop
    16b8:	200036b0 	.word	0x200036b0

000016bc <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    16bc:	b507      	push	{r0, r1, r2, lr}
    16be:	4b07      	ldr	r3, [pc, #28]	; (16dc <ev_dma_epin7_handler+0x20>)
    16c0:	681a      	ldr	r2, [r3, #0]
    16c2:	9201      	str	r2, [sp, #4]
    16c4:	9a01      	ldr	r2, [sp, #4]
    16c6:	681b      	ldr	r3, [r3, #0]
    16c8:	429a      	cmp	r2, r3
    16ca:	d001      	beq.n	16d0 <ev_dma_epin7_handler+0x14>
    16cc:	f009 fca6 	bl	b01c <_StackCheckHandler>
    16d0:	2087      	movs	r0, #135	; 0x87
    16d2:	b003      	add	sp, #12
    16d4:	f85d eb04 	ldr.w	lr, [sp], #4
    16d8:	f7ff bfc4 	b.w	1664 <nrf_usbd_epin_dma_handler>
    16dc:	200036b0 	.word	0x200036b0

000016e0 <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    16e0:	b507      	push	{r0, r1, r2, lr}
    16e2:	4b07      	ldr	r3, [pc, #28]	; (1700 <ev_dma_epin6_handler+0x20>)
    16e4:	681a      	ldr	r2, [r3, #0]
    16e6:	9201      	str	r2, [sp, #4]
    16e8:	9a01      	ldr	r2, [sp, #4]
    16ea:	681b      	ldr	r3, [r3, #0]
    16ec:	429a      	cmp	r2, r3
    16ee:	d001      	beq.n	16f4 <ev_dma_epin6_handler+0x14>
    16f0:	f009 fc94 	bl	b01c <_StackCheckHandler>
    16f4:	2086      	movs	r0, #134	; 0x86
    16f6:	b003      	add	sp, #12
    16f8:	f85d eb04 	ldr.w	lr, [sp], #4
    16fc:	f7ff bfb2 	b.w	1664 <nrf_usbd_epin_dma_handler>
    1700:	200036b0 	.word	0x200036b0

00001704 <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    1704:	b507      	push	{r0, r1, r2, lr}
    1706:	4b07      	ldr	r3, [pc, #28]	; (1724 <ev_dma_epin5_handler+0x20>)
    1708:	681a      	ldr	r2, [r3, #0]
    170a:	9201      	str	r2, [sp, #4]
    170c:	9a01      	ldr	r2, [sp, #4]
    170e:	681b      	ldr	r3, [r3, #0]
    1710:	429a      	cmp	r2, r3
    1712:	d001      	beq.n	1718 <ev_dma_epin5_handler+0x14>
    1714:	f009 fc82 	bl	b01c <_StackCheckHandler>
    1718:	2085      	movs	r0, #133	; 0x85
    171a:	b003      	add	sp, #12
    171c:	f85d eb04 	ldr.w	lr, [sp], #4
    1720:	f7ff bfa0 	b.w	1664 <nrf_usbd_epin_dma_handler>
    1724:	200036b0 	.word	0x200036b0

00001728 <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    1728:	b507      	push	{r0, r1, r2, lr}
    172a:	4b07      	ldr	r3, [pc, #28]	; (1748 <ev_dma_epin4_handler+0x20>)
    172c:	681a      	ldr	r2, [r3, #0]
    172e:	9201      	str	r2, [sp, #4]
    1730:	9a01      	ldr	r2, [sp, #4]
    1732:	681b      	ldr	r3, [r3, #0]
    1734:	429a      	cmp	r2, r3
    1736:	d001      	beq.n	173c <ev_dma_epin4_handler+0x14>
    1738:	f009 fc70 	bl	b01c <_StackCheckHandler>
    173c:	2084      	movs	r0, #132	; 0x84
    173e:	b003      	add	sp, #12
    1740:	f85d eb04 	ldr.w	lr, [sp], #4
    1744:	f7ff bf8e 	b.w	1664 <nrf_usbd_epin_dma_handler>
    1748:	200036b0 	.word	0x200036b0

0000174c <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    174c:	b507      	push	{r0, r1, r2, lr}
    174e:	4b07      	ldr	r3, [pc, #28]	; (176c <ev_dma_epin3_handler+0x20>)
    1750:	681a      	ldr	r2, [r3, #0]
    1752:	9201      	str	r2, [sp, #4]
    1754:	9a01      	ldr	r2, [sp, #4]
    1756:	681b      	ldr	r3, [r3, #0]
    1758:	429a      	cmp	r2, r3
    175a:	d001      	beq.n	1760 <ev_dma_epin3_handler+0x14>
    175c:	f009 fc5e 	bl	b01c <_StackCheckHandler>
    1760:	2083      	movs	r0, #131	; 0x83
    1762:	b003      	add	sp, #12
    1764:	f85d eb04 	ldr.w	lr, [sp], #4
    1768:	f7ff bf7c 	b.w	1664 <nrf_usbd_epin_dma_handler>
    176c:	200036b0 	.word	0x200036b0

00001770 <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    1770:	b507      	push	{r0, r1, r2, lr}
    1772:	4b07      	ldr	r3, [pc, #28]	; (1790 <ev_dma_epin2_handler+0x20>)
    1774:	681a      	ldr	r2, [r3, #0]
    1776:	9201      	str	r2, [sp, #4]
    1778:	9a01      	ldr	r2, [sp, #4]
    177a:	681b      	ldr	r3, [r3, #0]
    177c:	429a      	cmp	r2, r3
    177e:	d001      	beq.n	1784 <ev_dma_epin2_handler+0x14>
    1780:	f009 fc4c 	bl	b01c <_StackCheckHandler>
    1784:	2082      	movs	r0, #130	; 0x82
    1786:	b003      	add	sp, #12
    1788:	f85d eb04 	ldr.w	lr, [sp], #4
    178c:	f7ff bf6a 	b.w	1664 <nrf_usbd_epin_dma_handler>
    1790:	200036b0 	.word	0x200036b0

00001794 <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    1794:	b507      	push	{r0, r1, r2, lr}
    1796:	4b07      	ldr	r3, [pc, #28]	; (17b4 <ev_dma_epin1_handler+0x20>)
    1798:	681a      	ldr	r2, [r3, #0]
    179a:	9201      	str	r2, [sp, #4]
    179c:	9a01      	ldr	r2, [sp, #4]
    179e:	681b      	ldr	r3, [r3, #0]
    17a0:	429a      	cmp	r2, r3
    17a2:	d001      	beq.n	17a8 <ev_dma_epin1_handler+0x14>
    17a4:	f009 fc3a 	bl	b01c <_StackCheckHandler>
    17a8:	2081      	movs	r0, #129	; 0x81
    17aa:	b003      	add	sp, #12
    17ac:	f85d eb04 	ldr.w	lr, [sp], #4
    17b0:	f7ff bf58 	b.w	1664 <nrf_usbd_epin_dma_handler>
    17b4:	200036b0 	.word	0x200036b0

000017b8 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    17b8:	b513      	push	{r0, r1, r4, lr}
    17ba:	4c11      	ldr	r4, [pc, #68]	; (1800 <ev_dma_epout8_handler+0x48>)
    17bc:	6823      	ldr	r3, [r4, #0]
    17be:	9301      	str	r3, [sp, #4]
    usbd_dma_pending_clear();
    17c0:	f7ff fdea 	bl	1398 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    17c4:	4b0f      	ldr	r3, [pc, #60]	; (1804 <ev_dma_epout8_handler+0x4c>)
    17c6:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
    17ca:	2a03      	cmp	r2, #3
    17cc:	d010      	beq.n	17f0 <ev_dma_epout8_handler+0x38>
    else if (p_state->handler.consumer == NULL)
    17ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    17d2:	b96b      	cbnz	r3, 17f0 <ev_dma_epout8_handler+0x38>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    17d4:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
    17d8:	f7ff fefc 	bl	15d4 <atomic_and.constprop.11>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    17dc:	2306      	movs	r3, #6
    17de:	f88d 3000 	strb.w	r3, [sp]
    17e2:	2308      	movs	r3, #8
    17e4:	f8ad 3002 	strh.w	r3, [sp, #2]
        m_event_handler(&evt);
    17e8:	4b07      	ldr	r3, [pc, #28]	; (1808 <ev_dma_epout8_handler+0x50>)
    17ea:	4668      	mov	r0, sp
    17ec:	681b      	ldr	r3, [r3, #0]
    17ee:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    17f0:	9a01      	ldr	r2, [sp, #4]
    17f2:	6823      	ldr	r3, [r4, #0]
    17f4:	429a      	cmp	r2, r3
    17f6:	d001      	beq.n	17fc <ev_dma_epout8_handler+0x44>
    17f8:	f009 fc10 	bl	b01c <_StackCheckHandler>
    17fc:	b002      	add	sp, #8
    17fe:	bd10      	pop	{r4, pc}
    1800:	200036b0 	.word	0x200036b0
    1804:	200000e8 	.word	0x200000e8
    1808:	20000208 	.word	0x20000208

0000180c <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    180c:	b513      	push	{r0, r1, r4, lr}
    180e:	4c14      	ldr	r4, [pc, #80]	; (1860 <ev_dma_epin8_handler+0x54>)
    1810:	6823      	ldr	r3, [r4, #0]
    1812:	9301      	str	r3, [sp, #4]
    usbd_dma_pending_clear();
    1814:	f7ff fdc0 	bl	1398 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    1818:	4b12      	ldr	r3, [pc, #72]	; (1864 <ev_dma_epin8_handler+0x58>)
    181a:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
    181e:	2a03      	cmp	r2, #3
    1820:	d109      	bne.n	1836 <ev_dma_epin8_handler+0x2a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    1822:	f46f 7080 	mvn.w	r0, #256	; 0x100
    1826:	f7ff fed5 	bl	15d4 <atomic_and.constprop.11>
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    182a:	9a01      	ldr	r2, [sp, #4]
    182c:	6823      	ldr	r3, [r4, #0]
    182e:	429a      	cmp	r2, r3
    1830:	d014      	beq.n	185c <ev_dma_epin8_handler+0x50>
    1832:	f009 fbf3 	bl	b01c <_StackCheckHandler>
    else if (p_state->handler.feeder == NULL)
    1836:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    183a:	2b00      	cmp	r3, #0
    183c:	d1f5      	bne.n	182a <ev_dma_epin8_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    183e:	f46f 7080 	mvn.w	r0, #256	; 0x100
    1842:	f7ff fec7 	bl	15d4 <atomic_and.constprop.11>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    1846:	2306      	movs	r3, #6
    1848:	f88d 3000 	strb.w	r3, [sp]
    184c:	2388      	movs	r3, #136	; 0x88
    184e:	f8ad 3002 	strh.w	r3, [sp, #2]
        m_event_handler(&evt);
    1852:	4b05      	ldr	r3, [pc, #20]	; (1868 <ev_dma_epin8_handler+0x5c>)
    1854:	4668      	mov	r0, sp
    1856:	681b      	ldr	r3, [r3, #0]
    1858:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    185a:	e7e6      	b.n	182a <ev_dma_epin8_handler+0x1e>
    185c:	b002      	add	sp, #8
    185e:	bd10      	pop	{r4, pc}
    1860:	200036b0 	.word	0x200036b0
    1864:	200000e8 	.word	0x200000e8
    1868:	20000208 	.word	0x20000208

0000186c <ev_usbevent_handler>:
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
    186c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    186e:	4d24      	ldr	r5, [pc, #144]	; (1900 <ev_usbevent_handler+0x94>)
    1870:	682a      	ldr	r2, [r5, #0]
    1872:	9201      	str	r2, [sp, #4]
    return NRF_USBD->EVENTCAUSE;
    1874:	4a23      	ldr	r2, [pc, #140]	; (1904 <ev_usbevent_handler+0x98>)
    1876:	f8d2 4400 	ldr.w	r4, [r2, #1024]	; 0x400
    NRF_USBD->EVENTCAUSE = flags;
    187a:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
  __ASM volatile ("isb 0xF":::"memory");
    187e:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    1882:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1886:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    188a:	f3bf 8f4f 	dsb	sy
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
    188e:	05e1      	lsls	r1, r4, #23
    1890:	d50b      	bpl.n	18aa <ev_usbevent_handler+0x3e>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
    1892:	4b1d      	ldr	r3, [pc, #116]	; (1908 <ev_usbevent_handler+0x9c>)
    1894:	2201      	movs	r2, #1
    1896:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    1898:	2300      	movs	r3, #0
    189a:	9300      	str	r3, [sp, #0]
    189c:	2302      	movs	r3, #2
    189e:	f88d 3000 	strb.w	r3, [sp]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
    18a2:	4b1a      	ldr	r3, [pc, #104]	; (190c <ev_usbevent_handler+0xa0>)
    18a4:	4668      	mov	r0, sp
    18a6:	681b      	ldr	r3, [r3, #0]
    18a8:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    18aa:	05a2      	lsls	r2, r4, #22
    18ac:	d50a      	bpl.n	18c4 <ev_usbevent_handler+0x58>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
    18ae:	4a16      	ldr	r2, [pc, #88]	; (1908 <ev_usbevent_handler+0x9c>)
    18b0:	2300      	movs	r3, #0
        const nrfx_usbd_evt_t evt = {
    18b2:	9300      	str	r3, [sp, #0]
        m_bus_suspend = false;
    18b4:	7013      	strb	r3, [r2, #0]
        const nrfx_usbd_evt_t evt = {
    18b6:	2303      	movs	r3, #3
    18b8:	f88d 3000 	strb.w	r3, [sp]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
    18bc:	4b13      	ldr	r3, [pc, #76]	; (190c <ev_usbevent_handler+0xa0>)
    18be:	4668      	mov	r0, sp
    18c0:	681b      	ldr	r3, [r3, #0]
    18c2:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
    18c4:	0563      	lsls	r3, r4, #21
    18c6:	d513      	bpl.n	18f0 <ev_usbevent_handler+0x84>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
    18c8:	4b0f      	ldr	r3, [pc, #60]	; (1908 <ev_usbevent_handler+0x9c>)
    18ca:	781a      	ldrb	r2, [r3, #0]
    18cc:	b182      	cbz	r2, 18f0 <ev_usbevent_handler+0x84>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check());
            m_bus_suspend = false;
    18ce:	2400      	movs	r4, #0
    18d0:	701c      	strb	r4, [r3, #0]
    NRF_USBD->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
    18d2:	4b0c      	ldr	r3, [pc, #48]	; (1904 <ev_usbevent_handler+0x98>)
    18d4:	2201      	movs	r2, #1
    18d6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

            nrf_usbd_dpdmvalue_set(NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD_TASK_DRIVEDPDM);
    18da:	2058      	movs	r0, #88	; 0x58
    18dc:	f7ff fc6e 	bl	11bc <nrf_usbd_task_trigger>

            const nrfx_usbd_evt_t evt = {
    18e0:	2304      	movs	r3, #4
    18e2:	9400      	str	r4, [sp, #0]
    18e4:	f88d 3000 	strb.w	r3, [sp]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
    18e8:	4b08      	ldr	r3, [pc, #32]	; (190c <ev_usbevent_handler+0xa0>)
    18ea:	4668      	mov	r0, sp
    18ec:	681b      	ldr	r3, [r3, #0]
    18ee:	4798      	blx	r3
        }
    }
}
    18f0:	9a01      	ldr	r2, [sp, #4]
    18f2:	682b      	ldr	r3, [r5, #0]
    18f4:	429a      	cmp	r2, r3
    18f6:	d001      	beq.n	18fc <ev_usbevent_handler+0x90>
    18f8:	f009 fb90 	bl	b01c <_StackCheckHandler>
    18fc:	b003      	add	sp, #12
    18fe:	bd30      	pop	{r4, r5, pc}
    1900:	200036b0 	.word	0x200036b0
    1904:	40027000 	.word	0x40027000
    1908:	20001950 	.word	0x20001950
    190c:	20000208 	.word	0x20000208

00001910 <usbd_dmareq_process>:
 * Function that have to be called from USBD interrupt handler.
 * It have to be called when all the interrupts connected with endpoints transfer
 * and DMA transfer are already handled.
 */
static void usbd_dmareq_process(void)
{
    1910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1914:	4a7c      	ldr	r2, [pc, #496]	; (1b08 <usbd_dmareq_process+0x1f8>)
    1916:	b087      	sub	sp, #28
    1918:	6813      	ldr	r3, [r2, #0]
    191a:	9305      	str	r3, [sp, #20]
    if (!m_dma_pending)
    191c:	4b7b      	ldr	r3, [pc, #492]	; (1b0c <usbd_dmareq_process+0x1fc>)
    191e:	7819      	ldrb	r1, [r3, #0]
    1920:	e9cd 2300 	strd	r2, r3, [sp]
    1924:	2900      	cmp	r1, #0
    1926:	d17d      	bne.n	1a24 <usbd_dmareq_process+0x114>
    1928:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 1b14 <usbd_dmareq_process+0x204>
    {
        uint32_t req;
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
    192c:	4b78      	ldr	r3, [pc, #480]	; (1b10 <usbd_dmareq_process+0x200>)
    192e:	6818      	ldr	r0, [r3, #0]
    1930:	4b78      	ldr	r3, [pc, #480]	; (1b14 <usbd_dmareq_process+0x204>)
    1932:	681d      	ldr	r5, [r3, #0]
    1934:	4028      	ands	r0, r5
    1936:	d075      	beq.n	1a24 <usbd_dmareq_process+0x114>
        {
            uint8_t pos;
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
    1938:	f010 2501 	ands.w	r5, r0, #16777472	; 0x1000100
    193c:	d079      	beq.n	1a32 <usbd_dmareq_process+0x122>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
    193e:	fa95 f5a5 	rbit	r5, r5
    return __CLZ(__RBIT(req));
    1942:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    1946:	2d0f      	cmp	r5, #15
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    1948:	bf86      	itte	hi
    194a:	f1a5 0410 	subhi.w	r4, r5, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    194e:	b2e4      	uxtbhi	r4, r4
    1950:	f045 0480 	orrls.w	r4, r5, #128	; 0x80
            else
            {
                pos = usbd_dma_scheduler_algorithm(req);
            }
            nrfx_usbd_ep_t ep = bit2ep(pos);
            usbd_ep_state_t * p_state = ep_state_access(ep);
    1954:	4620      	mov	r0, r4
    1956:	f7ff fceb 	bl	1330 <ep_state_access>

            NRFX_STATIC_ASSERT(offsetof(usbd_ep_state_t, handler.feeder) ==
                offsetof(usbd_ep_state_t, handler.consumer));
            NRFX_ASSERT((p_state->handler.feeder) != NULL);

            if (NRF_USBD_EPIN_CHECK(ep))
    195a:	fa4f f984 	sxtb.w	r9, r4
    195e:	f1b9 0f00 	cmp.w	r9, #0
            usbd_ep_state_t * p_state = ep_state_access(ep);
    1962:	4606      	mov	r6, r0
            if (NRF_USBD_EPIN_CHECK(ep))
    1964:	f004 0a08 	and.w	sl, r4, #8
    1968:	8982      	ldrh	r2, [r0, #12]
    196a:	da67      	bge.n	1a3c <usbd_dmareq_process+0x12c>
            {
                /* Device -> Host */
                continue_transfer = p_state->handler.feeder(
    196c:	e9d0 3100 	ldrd	r3, r1, [r0]
    1970:	a803      	add	r0, sp, #12
    1972:	4798      	blx	r3
                {
                    /* Nothing to do - only check integrity if assertions are enabled */
                    NRFX_ASSERT(transfer.size == rx_size);
                }

                if (!continue_transfer)
    1974:	b900      	cbnz	r0, 1978 <usbd_dmareq_process+0x68>
                {
                    p_state->handler.consumer = NULL;
    1976:	6030      	str	r0, [r6, #0]
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
    1978:	4b67      	ldr	r3, [pc, #412]	; (1b18 <usbd_dmareq_process+0x208>)
    197a:	2282      	movs	r2, #130	; 0x82
    197c:	601a      	str	r2, [r3, #0]
    m_dma_pending = true;
    197e:	9b01      	ldr	r3, [sp, #4]
                    "USB DMA process: Starting transfer on EP: %x, size: %u",
                    ep,
                    transfer.size);
            }
            /* Update number of currently transferred bytes */
            p_state->transfer_cnt += transfer.size;
    1980:	9a04      	ldr	r2, [sp, #16]
    m_dma_pending = true;
    1982:	2001      	movs	r0, #1
    1984:	7018      	strb	r0, [r3, #0]
            m_ep_ready &= ~(1U << pos);
    1986:	40a8      	lsls	r0, r5
            p_state->transfer_cnt += transfer.size;
    1988:	68b3      	ldr	r3, [r6, #8]
            m_ep_ready &= ~(1U << pos);
    198a:	f8db 5000 	ldr.w	r5, [fp]
            p_state->transfer_cnt += transfer.size;
    198e:	4413      	add	r3, r2
            m_ep_ready &= ~(1U << pos);
    1990:	ea25 0000 	bic.w	r0, r5, r0
        (((NRF_USBD->ISOINCONFIG) & USBD_ISOINCONFIG_RESPONSE_Msk) >> USBD_ISOINCONFIG_RESPONSE_Pos);
}

void nrf_usbd_ep_easydma_set(uint8_t ep, uint32_t ptr, uint32_t maxcnt)
{
    if (NRF_USBD_EPIN_CHECK(ep))
    1994:	f1b9 0f00 	cmp.w	r9, #0
    1998:	f8cb 0000 	str.w	r0, [fp]
            p_state->transfer_cnt += transfer.size;
    199c:	60b3      	str	r3, [r6, #8]
            /* Start transfer to the endpoint buffer */
            nrf_usbd_ep_easydma_set(ep, transfer.p_data.addr, (uint32_t)transfer.size);
    199e:	9803      	ldr	r0, [sp, #12]
    19a0:	4b5e      	ldr	r3, [pc, #376]	; (1b1c <usbd_dmareq_process+0x20c>)
    19a2:	f004 040f 	and.w	r4, r4, #15
    19a6:	f280 8083 	bge.w	1ab0 <usbd_dmareq_process+0x1a0>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    19aa:	f1ba 0f00 	cmp.w	sl, #0
    19ae:	d077      	beq.n	1aa0 <usbd_dmareq_process+0x190>
        {
            NRF_USBD->ISOIN.PTR    = ptr;
    19b0:	f8c3 06a0 	str.w	r0, [r3, #1696]	; 0x6a0
            NRF_USBD->ISOIN.MAXCNT = maxcnt;
    19b4:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
}

/* Errata: USBD: EPDATA event is not always generated. */
static inline bool nrfx_usbd_errata_104(void)
{
    return (NRFX_USBD_ERRATA_ENABLE && (!nrfx_usbd_errata_type_52840_eng_b()));
    19b8:	f7ff fc38 	bl	122c <nrfx_usbd_errata_type_52840_eng_b>
    19bc:	00a3      	lsls	r3, r4, #2
    19be:	b224      	sxth	r4, r4
    19c0:	0062      	lsls	r2, r4, #1
    19c2:	4d57      	ldr	r5, [pc, #348]	; (1b20 <usbd_dmareq_process+0x210>)
    19c4:	4e57      	ldr	r6, [pc, #348]	; (1b24 <usbd_dmareq_process+0x214>)

            if (nrfx_usbd_errata_104())
    19c6:	2800      	cmp	r0, #0
    19c8:	f040 8084 	bne.w	1ad4 <usbd_dmareq_process+0x1c4>
    return (nrf_usbd_task_t)(
    19cc:	f1b9 0f00 	cmp.w	r9, #0
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    19d0:	bfaa      	itet	ge
    19d2:	4635      	movge	r5, r6
    return (nrf_usbd_task_t)(
    19d4:	2404      	movlt	r4, #4
    19d6:	2428      	movge	r4, #40	; 0x28
    *(nrf_usbd_getRegPtr((uint32_t)event)) = 0UL;
    19d8:	4f53      	ldr	r7, [pc, #332]	; (1b28 <usbd_dmareq_process+0x218>)
                    {
                        NRFX_USBD_LOG_PROTO1_FIX_PRINTF("   DMA restarted: %u times", cnt);
                    }

                    nrfx_systick_delay_us(30);
                    while (0 == (0x20 & *((volatile uint32_t *)(NRF_USBD_BASE + 0x474))))
    19da:	f8df 8154 	ldr.w	r8, [pc, #340]	; 1b30 <usbd_dmareq_process+0x220>
    return (nrf_usbd_task_t)(
    19de:	441c      	add	r4, r3
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    19e0:	4415      	add	r5, r2
    19e2:	4606      	mov	r6, r0
    19e4:	603e      	str	r6, [r7, #0]
  __ASM volatile ("isb 0xF":::"memory");
    19e6:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    19ea:	f3bf 8f4f 	dsb	sy
    nrf_usbd_task_trigger(task_start_ep(ep));
    19ee:	4620      	mov	r0, r4
    19f0:	f7ff fbe4 	bl	11bc <nrf_usbd_task_trigger>
                        nrfx_systick_delay_us(2);
    19f4:	2002      	movs	r0, #2
    19f6:	f7ff fbc5 	bl	1184 <nrfx_systick_delay_us>
    return (bool)*nrf_usbd_getRegPtr_c((uint32_t)event);
    19fa:	683b      	ldr	r3, [r7, #0]
                    }while (!nrf_usbd_event_check(NRF_USBD_EVENT_STARTED));
    19fc:	2b00      	cmp	r3, #0
    19fe:	d0f1      	beq.n	19e4 <usbd_dmareq_process+0xd4>
                    nrfx_systick_delay_us(30);
    1a00:	201e      	movs	r0, #30
                    {
                        nrfx_systick_delay_us(2);
    1a02:	f7ff fbbf 	bl	1184 <nrfx_systick_delay_us>
                    while (0 == (0x20 & *((volatile uint32_t *)(NRF_USBD_BASE + 0x474))))
    1a06:	f8d8 3000 	ldr.w	r3, [r8]
    1a0a:	069b      	lsls	r3, r3, #26
    1a0c:	d560      	bpl.n	1ad0 <usbd_dmareq_process+0x1c0>
                    }
                    nrfx_systick_delay_us(1);
    1a0e:	2001      	movs	r0, #1
    1a10:	f7ff fbb8 	bl	1184 <nrfx_systick_delay_us>
    1a14:	882b      	ldrh	r3, [r5, #0]
    return (volatile const uint32_t*)(((uint8_t *)NRF_USBD) + (uint32_t)offset);
    1a16:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1a1a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c((uint32_t)event);
    1a1e:	681b      	ldr	r3, [r3, #0]

                    ++cnt_end;
                } while (!nrf_usbd_event_check(nrfx_usbd_ep_to_endevent(ep)));
    1a20:	2b00      	cmp	r3, #0
    1a22:	d0df      	beq.n	19e4 <usbd_dmareq_process+0xd4>
        if (NRFX_USBD_DMAREQ_PROCESS_DEBUG)
        {
            NRFX_LOG_DEBUG("USB DMA process - EasyDMA busy");
        }
    }
}
    1a24:	9b00      	ldr	r3, [sp, #0]
    1a26:	9a05      	ldr	r2, [sp, #20]
    1a28:	681b      	ldr	r3, [r3, #0]
    1a2a:	429a      	cmp	r2, r3
    1a2c:	d068      	beq.n	1b00 <usbd_dmareq_process+0x1f0>
    1a2e:	f009 faf5 	bl	b01c <_StackCheckHandler>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
    1a32:	fa90 f0a0 	rbit	r0, r0
    return __CLZ(__RBIT(req));
    1a36:	fab0 f580 	clz	r5, r0
    1a3a:	e784      	b.n	1946 <usbd_dmareq_process+0x36>
    if (NRF_USBD_EPISO_CHECK(ep))
    1a3c:	4937      	ldr	r1, [pc, #220]	; (1b1c <usbd_dmareq_process+0x20c>)
    1a3e:	f1ba 0f00 	cmp.w	sl, #0
    1a42:	d026      	beq.n	1a92 <usbd_dmareq_process+0x182>
        size_t size_isoout = NRF_USBD->SIZE.ISOOUT;
    1a44:	f8d1 84c0 	ldr.w	r8, [r1, #1216]	; 0x4c0
            size_isoout = 0;
    1a48:	f418 3f80 	tst.w	r8, #65536	; 0x10000
    1a4c:	bf18      	it	ne
    1a4e:	f04f 0800 	movne.w	r8, #0
                continue_transfer = p_state->handler.consumer(
    1a52:	4643      	mov	r3, r8
    1a54:	6871      	ldr	r1, [r6, #4]
    1a56:	6837      	ldr	r7, [r6, #0]
    1a58:	a803      	add	r0, sp, #12
    1a5a:	47b8      	blx	r7
                if (transfer.p_data.rx == NULL)
    1a5c:	9b03      	ldr	r3, [sp, #12]
    1a5e:	2b00      	cmp	r3, #0
    1a60:	d088      	beq.n	1974 <usbd_dmareq_process+0x64>
                else if (transfer.size < rx_size)
    1a62:	9b04      	ldr	r3, [sp, #16]
    1a64:	4543      	cmp	r3, r8
    1a66:	d285      	bcs.n	1974 <usbd_dmareq_process+0x64>
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    1a68:	2001      	movs	r0, #1
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    1a6a:	f04f 0802 	mov.w	r8, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    1a6e:	40a8      	lsls	r0, r5
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    1a70:	f886 800e 	strb.w	r8, [r6, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    1a74:	43c0      	mvns	r0, r0
    1a76:	f7ff fdad 	bl	15d4 <atomic_and.constprop.11>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    1a7a:	2306      	movs	r3, #6
    1a7c:	f88d 3008 	strb.w	r3, [sp, #8]
                    m_event_handler(&evt);
    1a80:	4b2a      	ldr	r3, [pc, #168]	; (1b2c <usbd_dmareq_process+0x21c>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    1a82:	f88d 400a 	strb.w	r4, [sp, #10]
    1a86:	f88d 800b 	strb.w	r8, [sp, #11]
                    m_event_handler(&evt);
    1a8a:	681b      	ldr	r3, [r3, #0]
    1a8c:	a802      	add	r0, sp, #8
    1a8e:	4798      	blx	r3
                    continue;
    1a90:	e74c      	b.n	192c <usbd_dmareq_process+0x1c>
    return NRF_USBD->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    1a92:	f004 030f 	and.w	r3, r4, #15
    1a96:	f503 7394 	add.w	r3, r3, #296	; 0x128
    1a9a:	f851 8023 	ldr.w	r8, [r1, r3, lsl #2]
    1a9e:	e7d8      	b.n	1a52 <usbd_dmareq_process+0x142>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT(epnr < NRFX_ARRAY_SIZE(NRF_USBD->EPIN));
            NRF_USBD->EPIN[epnr].PTR    = ptr;
    1aa0:	2114      	movs	r1, #20
    1aa2:	fb01 3304 	mla	r3, r1, r4, r3
    1aa6:	f8c3 0600 	str.w	r0, [r3, #1536]	; 0x600
            NRF_USBD->EPIN[epnr].MAXCNT = maxcnt;
    1aaa:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
    1aae:	e783      	b.n	19b8 <usbd_dmareq_process+0xa8>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    1ab0:	f1ba 0f00 	cmp.w	sl, #0
    1ab4:	d004      	beq.n	1ac0 <usbd_dmareq_process+0x1b0>
        {
            NRF_USBD->ISOOUT.PTR    = ptr;
    1ab6:	f8c3 07a0 	str.w	r0, [r3, #1952]	; 0x7a0
            NRF_USBD->ISOOUT.MAXCNT = maxcnt;
    1aba:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    1abe:	e77b      	b.n	19b8 <usbd_dmareq_process+0xa8>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT(epnr < NRFX_ARRAY_SIZE(NRF_USBD->EPOUT));
            NRF_USBD->EPOUT[epnr].PTR    = ptr;
    1ac0:	2114      	movs	r1, #20
    1ac2:	fb01 3304 	mla	r3, r1, r4, r3
    1ac6:	f8c3 0700 	str.w	r0, [r3, #1792]	; 0x700
            NRF_USBD->EPOUT[epnr].MAXCNT = maxcnt;
    1aca:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
    1ace:	e773      	b.n	19b8 <usbd_dmareq_process+0xa8>
                        nrfx_systick_delay_us(2);
    1ad0:	2002      	movs	r0, #2
    1ad2:	e796      	b.n	1a02 <usbd_dmareq_process+0xf2>
    return (nrf_usbd_task_t)(
    1ad4:	f1b9 0f00 	cmp.w	r9, #0
    1ad8:	bfb4      	ite	lt
    1ada:	2004      	movlt	r0, #4
    1adc:	2028      	movge	r0, #40	; 0x28
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    1ade:	ea15 0529 	ands.w	r5, r5, r9, asr #32
    1ae2:	bf38      	it	cc
    1ae4:	4635      	movcc	r5, r6
    nrf_usbd_task_trigger(task_start_ep(ep));
    1ae6:	4418      	add	r0, r3
    1ae8:	f7ff fb68 	bl	11bc <nrf_usbd_task_trigger>
    return (bool)*nrf_usbd_getRegPtr_c((uint32_t)event);
    1aec:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)NRF_USBD) + (uint32_t)offset);
    1af0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1af4:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c((uint32_t)event);
    1af8:	681a      	ldr	r2, [r3, #0]
                while (!nrf_usbd_event_check(nrfx_usbd_ep_to_endevent(ep)))
    1afa:	2a00      	cmp	r2, #0
    1afc:	d0fc      	beq.n	1af8 <usbd_dmareq_process+0x1e8>
    1afe:	e791      	b.n	1a24 <usbd_dmareq_process+0x114>
}
    1b00:	b007      	add	sp, #28
    1b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b06:	bf00      	nop
    1b08:	200036b0 	.word	0x200036b0
    1b0c:	20001951 	.word	0x20001951
    1b10:	20000074 	.word	0x20000074
    1b14:	200000e4 	.word	0x200000e4
    1b18:	40027c1c 	.word	0x40027c1c
    1b1c:	40027000 	.word	0x40027000
    1b20:	0000b830 	.word	0x0000b830
    1b24:	0000b842 	.word	0x0000b842
    1b28:	40027104 	.word	0x40027104
    1b2c:	20000208 	.word	0x20000208
    1b30:	40027474 	.word	0x40027474

00001b34 <ev_epdata_handler>:
{
    1b34:	b573      	push	{r0, r1, r4, r5, r6, lr}
    1b36:	4d1c      	ldr	r5, [pc, #112]	; (1ba8 <ev_epdata_handler+0x74>)
    1b38:	682b      	ldr	r3, [r5, #0]
    1b3a:	9301      	str	r3, [sp, #4]
    return NRF_USBD->EPDATASTATUS;
    1b3c:	4b1b      	ldr	r3, [pc, #108]	; (1bac <ev_epdata_handler+0x78>)
    1b3e:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    NRF_USBD->EPDATASTATUS = flags;
    1b42:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
  __ASM volatile ("isb 0xF":::"memory");
    1b46:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    1b4a:	f3bf 8f4f 	dsb	sy
    1b4e:	f7ff fb6d 	bl	122c <nrfx_usbd_errata_type_52840_eng_b>
    if (nrfx_usbd_errata_104())
    1b52:	b938      	cbnz	r0, 1b64 <ev_epdata_handler+0x30>
        dataepstatus |= (m_simulated_dataepstatus &
    1b54:	4a16      	ldr	r2, [pc, #88]	; (1bb0 <ev_epdata_handler+0x7c>)
    1b56:	6813      	ldr	r3, [r2, #0]
    1b58:	f023 1101 	bic.w	r1, r3, #65537	; 0x10001
        m_simulated_dataepstatus &=
    1b5c:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
        dataepstatus |= (m_simulated_dataepstatus &
    1b60:	430c      	orrs	r4, r1
        m_simulated_dataepstatus &=
    1b62:	6013      	str	r3, [r2, #0]
        dataepstatus &= ~(1UL << bitpos);
    1b64:	2601      	movs	r6, #1
    while (dataepstatus)
    1b66:	b92c      	cbnz	r4, 1b74 <ev_epdata_handler+0x40>
        usbd_dmareq_process();
    1b68:	9a01      	ldr	r2, [sp, #4]
    1b6a:	682b      	ldr	r3, [r5, #0]
    1b6c:	429a      	cmp	r2, r3
    1b6e:	d015      	beq.n	1b9c <ev_epdata_handler+0x68>
    1b70:	f009 fa54 	bl	b01c <_StackCheckHandler>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
    1b74:	fa94 f3a4 	rbit	r3, r4
        uint8_t bitpos    = __CLZ(__RBIT(dataepstatus));
    1b78:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    1b7c:	2b0f      	cmp	r3, #15
        uint8_t bitpos    = __CLZ(__RBIT(dataepstatus));
    1b7e:	b2d9      	uxtb	r1, r3
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    1b80:	bfc4      	itt	gt
    1b82:	f1a3 0010 	subgt.w	r0, r3, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    1b86:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
    1b88:	fa06 f303 	lsl.w	r3, r6, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    1b8c:	bfd8      	it	le
    1b8e:	f041 0080 	orrle.w	r0, r1, #128	; 0x80
        dataepstatus &= ~(1UL << bitpos);
    1b92:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
    1b96:	f7ff fccd 	bl	1534 <usbd_ep_data_handler>
    1b9a:	e7e4      	b.n	1b66 <ev_epdata_handler+0x32>
}
    1b9c:	b002      	add	sp, #8
    1b9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        usbd_dmareq_process();
    1ba2:	f7ff beb5 	b.w	1910 <usbd_dmareq_process>
    1ba6:	bf00      	nop
    1ba8:	200036b0 	.word	0x200036b0
    1bac:	40027000 	.word	0x40027000
    1bb0:	2000020c 	.word	0x2000020c

00001bb4 <nrf_usbd_epout_dma_handler>:
{
    1bb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    1bb6:	4e1b      	ldr	r6, [pc, #108]	; (1c24 <nrf_usbd_epout_dma_handler+0x70>)
    1bb8:	4604      	mov	r4, r0
    1bba:	6833      	ldr	r3, [r6, #0]
    1bbc:	9301      	str	r3, [sp, #4]
    usbd_dma_pending_clear();
    1bbe:	f7ff fbeb 	bl	1398 <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
    1bc2:	4620      	mov	r0, r4
    1bc4:	f7ff fbb4 	bl	1330 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    1bc8:	7b83      	ldrb	r3, [r0, #14]
    1bca:	2b03      	cmp	r3, #3
    1bcc:	d110      	bne.n	1bf0 <nrf_usbd_epout_dma_handler+0x3c>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    1bce:	4620      	mov	r0, r4
    1bd0:	f7ff fbca 	bl	1368 <ep2bit>
    1bd4:	2301      	movs	r3, #1
    1bd6:	fa03 f000 	lsl.w	r0, r3, r0
    1bda:	43c0      	mvns	r0, r0
    1bdc:	f7ff fcfa 	bl	15d4 <atomic_and.constprop.11>
    usbd_dmareq_process();
    1be0:	f7ff fe96 	bl	1910 <usbd_dmareq_process>
}
    1be4:	9a01      	ldr	r2, [sp, #4]
    1be6:	6833      	ldr	r3, [r6, #0]
    1be8:	429a      	cmp	r2, r3
    1bea:	d019      	beq.n	1c20 <nrf_usbd_epout_dma_handler+0x6c>
    1bec:	f009 fa16 	bl	b01c <_StackCheckHandler>
    else if (p_state->handler.consumer == NULL)
    1bf0:	6805      	ldr	r5, [r0, #0]
    1bf2:	2d00      	cmp	r5, #0
    1bf4:	d1f4      	bne.n	1be0 <nrf_usbd_epout_dma_handler+0x2c>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    1bf6:	4620      	mov	r0, r4
    1bf8:	f7ff fbb6 	bl	1368 <ep2bit>
    1bfc:	2301      	movs	r3, #1
    1bfe:	fa03 f000 	lsl.w	r0, r3, r0
    1c02:	43c0      	mvns	r0, r0
    1c04:	f7ff fce6 	bl	15d4 <atomic_and.constprop.11>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    1c08:	2306      	movs	r3, #6
    1c0a:	f88d 3000 	strb.w	r3, [sp]
        m_event_handler(&evt);
    1c0e:	4b06      	ldr	r3, [pc, #24]	; (1c28 <nrf_usbd_epout_dma_handler+0x74>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    1c10:	f88d 4002 	strb.w	r4, [sp, #2]
    1c14:	f88d 5003 	strb.w	r5, [sp, #3]
        m_event_handler(&evt);
    1c18:	681b      	ldr	r3, [r3, #0]
    1c1a:	4668      	mov	r0, sp
    1c1c:	4798      	blx	r3
    1c1e:	e7df      	b.n	1be0 <nrf_usbd_epout_dma_handler+0x2c>
}
    1c20:	b002      	add	sp, #8
    1c22:	bd70      	pop	{r4, r5, r6, pc}
    1c24:	200036b0 	.word	0x200036b0
    1c28:	20000208 	.word	0x20000208

00001c2c <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    1c2c:	b507      	push	{r0, r1, r2, lr}
    1c2e:	4b07      	ldr	r3, [pc, #28]	; (1c4c <ev_dma_epout7_handler+0x20>)
    1c30:	681a      	ldr	r2, [r3, #0]
    1c32:	9201      	str	r2, [sp, #4]
    1c34:	9a01      	ldr	r2, [sp, #4]
    1c36:	681b      	ldr	r3, [r3, #0]
    1c38:	429a      	cmp	r2, r3
    1c3a:	d001      	beq.n	1c40 <ev_dma_epout7_handler+0x14>
    1c3c:	f009 f9ee 	bl	b01c <_StackCheckHandler>
    1c40:	2007      	movs	r0, #7
    1c42:	b003      	add	sp, #12
    1c44:	f85d eb04 	ldr.w	lr, [sp], #4
    1c48:	f7ff bfb4 	b.w	1bb4 <nrf_usbd_epout_dma_handler>
    1c4c:	200036b0 	.word	0x200036b0

00001c50 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    1c50:	b507      	push	{r0, r1, r2, lr}
    1c52:	4b07      	ldr	r3, [pc, #28]	; (1c70 <ev_dma_epout6_handler+0x20>)
    1c54:	681a      	ldr	r2, [r3, #0]
    1c56:	9201      	str	r2, [sp, #4]
    1c58:	9a01      	ldr	r2, [sp, #4]
    1c5a:	681b      	ldr	r3, [r3, #0]
    1c5c:	429a      	cmp	r2, r3
    1c5e:	d001      	beq.n	1c64 <ev_dma_epout6_handler+0x14>
    1c60:	f009 f9dc 	bl	b01c <_StackCheckHandler>
    1c64:	2006      	movs	r0, #6
    1c66:	b003      	add	sp, #12
    1c68:	f85d eb04 	ldr.w	lr, [sp], #4
    1c6c:	f7ff bfa2 	b.w	1bb4 <nrf_usbd_epout_dma_handler>
    1c70:	200036b0 	.word	0x200036b0

00001c74 <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    1c74:	b507      	push	{r0, r1, r2, lr}
    1c76:	4b07      	ldr	r3, [pc, #28]	; (1c94 <ev_dma_epout5_handler+0x20>)
    1c78:	681a      	ldr	r2, [r3, #0]
    1c7a:	9201      	str	r2, [sp, #4]
    1c7c:	9a01      	ldr	r2, [sp, #4]
    1c7e:	681b      	ldr	r3, [r3, #0]
    1c80:	429a      	cmp	r2, r3
    1c82:	d001      	beq.n	1c88 <ev_dma_epout5_handler+0x14>
    1c84:	f009 f9ca 	bl	b01c <_StackCheckHandler>
    1c88:	2005      	movs	r0, #5
    1c8a:	b003      	add	sp, #12
    1c8c:	f85d eb04 	ldr.w	lr, [sp], #4
    1c90:	f7ff bf90 	b.w	1bb4 <nrf_usbd_epout_dma_handler>
    1c94:	200036b0 	.word	0x200036b0

00001c98 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    1c98:	b507      	push	{r0, r1, r2, lr}
    1c9a:	4b07      	ldr	r3, [pc, #28]	; (1cb8 <ev_dma_epout4_handler+0x20>)
    1c9c:	681a      	ldr	r2, [r3, #0]
    1c9e:	9201      	str	r2, [sp, #4]
    1ca0:	9a01      	ldr	r2, [sp, #4]
    1ca2:	681b      	ldr	r3, [r3, #0]
    1ca4:	429a      	cmp	r2, r3
    1ca6:	d001      	beq.n	1cac <ev_dma_epout4_handler+0x14>
    1ca8:	f009 f9b8 	bl	b01c <_StackCheckHandler>
    1cac:	2004      	movs	r0, #4
    1cae:	b003      	add	sp, #12
    1cb0:	f85d eb04 	ldr.w	lr, [sp], #4
    1cb4:	f7ff bf7e 	b.w	1bb4 <nrf_usbd_epout_dma_handler>
    1cb8:	200036b0 	.word	0x200036b0

00001cbc <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    1cbc:	b507      	push	{r0, r1, r2, lr}
    1cbe:	4b07      	ldr	r3, [pc, #28]	; (1cdc <ev_dma_epout3_handler+0x20>)
    1cc0:	681a      	ldr	r2, [r3, #0]
    1cc2:	9201      	str	r2, [sp, #4]
    1cc4:	9a01      	ldr	r2, [sp, #4]
    1cc6:	681b      	ldr	r3, [r3, #0]
    1cc8:	429a      	cmp	r2, r3
    1cca:	d001      	beq.n	1cd0 <ev_dma_epout3_handler+0x14>
    1ccc:	f009 f9a6 	bl	b01c <_StackCheckHandler>
    1cd0:	2003      	movs	r0, #3
    1cd2:	b003      	add	sp, #12
    1cd4:	f85d eb04 	ldr.w	lr, [sp], #4
    1cd8:	f7ff bf6c 	b.w	1bb4 <nrf_usbd_epout_dma_handler>
    1cdc:	200036b0 	.word	0x200036b0

00001ce0 <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    1ce0:	b507      	push	{r0, r1, r2, lr}
    1ce2:	4b07      	ldr	r3, [pc, #28]	; (1d00 <ev_dma_epout2_handler+0x20>)
    1ce4:	681a      	ldr	r2, [r3, #0]
    1ce6:	9201      	str	r2, [sp, #4]
    1ce8:	9a01      	ldr	r2, [sp, #4]
    1cea:	681b      	ldr	r3, [r3, #0]
    1cec:	429a      	cmp	r2, r3
    1cee:	d001      	beq.n	1cf4 <ev_dma_epout2_handler+0x14>
    1cf0:	f009 f994 	bl	b01c <_StackCheckHandler>
    1cf4:	2002      	movs	r0, #2
    1cf6:	b003      	add	sp, #12
    1cf8:	f85d eb04 	ldr.w	lr, [sp], #4
    1cfc:	f7ff bf5a 	b.w	1bb4 <nrf_usbd_epout_dma_handler>
    1d00:	200036b0 	.word	0x200036b0

00001d04 <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    1d04:	b507      	push	{r0, r1, r2, lr}
    1d06:	4b07      	ldr	r3, [pc, #28]	; (1d24 <ev_dma_epout1_handler+0x20>)
    1d08:	681a      	ldr	r2, [r3, #0]
    1d0a:	9201      	str	r2, [sp, #4]
    1d0c:	9a01      	ldr	r2, [sp, #4]
    1d0e:	681b      	ldr	r3, [r3, #0]
    1d10:	429a      	cmp	r2, r3
    1d12:	d001      	beq.n	1d18 <ev_dma_epout1_handler+0x14>
    1d14:	f009 f982 	bl	b01c <_StackCheckHandler>
    1d18:	2001      	movs	r0, #1
    1d1a:	b003      	add	sp, #12
    1d1c:	f85d eb04 	ldr.w	lr, [sp], #4
    1d20:	f7ff bf48 	b.w	1bb4 <nrf_usbd_epout_dma_handler>
    1d24:	200036b0 	.word	0x200036b0

00001d28 <nrfx_usbd_uninit>:

    return NRFX_SUCCESS;
}

void nrfx_usbd_uninit(void)
{
    1d28:	b507      	push	{r0, r1, r2, lr}
    1d2a:	4b08      	ldr	r3, [pc, #32]	; (1d4c <nrfx_usbd_uninit+0x24>)
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
    1d2c:	4908      	ldr	r1, [pc, #32]	; (1d50 <nrfx_usbd_uninit+0x28>)
{
    1d2e:	681a      	ldr	r2, [r3, #0]
    1d30:	9201      	str	r2, [sp, #4]
    m_event_handler = NULL;
    1d32:	2200      	movs	r2, #0
    1d34:	600a      	str	r2, [r1, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    1d36:	4907      	ldr	r1, [pc, #28]	; (1d54 <nrfx_usbd_uninit+0x2c>)
    1d38:	700a      	strb	r2, [r1, #0]
    return;
}
    1d3a:	9a01      	ldr	r2, [sp, #4]
    1d3c:	681b      	ldr	r3, [r3, #0]
    1d3e:	429a      	cmp	r2, r3
    1d40:	d001      	beq.n	1d46 <nrfx_usbd_uninit+0x1e>
    1d42:	f009 f96b 	bl	b01c <_StackCheckHandler>
    1d46:	b003      	add	sp, #12
    1d48:	f85d fb04 	ldr.w	pc, [sp], #4
    1d4c:	200036b0 	.word	0x200036b0
    1d50:	20000208 	.word	0x20000208
    1d54:	20001952 	.word	0x20001952

00001d58 <nrfx_usbd_enable>:

void nrfx_usbd_enable(void)
{
    1d58:	b573      	push	{r0, r1, r4, r5, r6, lr}
    1d5a:	4d56      	ldr	r5, [pc, #344]	; (1eb4 <nrfx_usbd_enable+0x15c>)
    1d5c:	682b      	ldr	r3, [r5, #0]
    1d5e:	9301      	str	r3, [sp, #4]
    NRF_USBD->EVENTCAUSE = flags;
    1d60:	4b55      	ldr	r3, [pc, #340]	; (1eb8 <nrfx_usbd_enable+0x160>)
    1d62:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1d66:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  __ASM volatile ("isb 0xF":::"memory");
    1d6a:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    1d6e:	f3bf 8f4f 	dsb	sy
}

/* Errata: USB cannot be enabled. */
static inline bool nrfx_usbd_errata_187(void)
{
    return (NRFX_USBD_ERRATA_ENABLE && nrfx_usbd_errata_type_52840_eng_b());
    1d72:	f7ff fa5b 	bl	122c <nrfx_usbd_errata_type_52840_eng_b>
    1d76:	4c51      	ldr	r4, [pc, #324]	; (1ebc <nrfx_usbd_enable+0x164>)
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    /* Prepare for READY event receiving */
    nrf_usbd_eventcause_clear(NRF_USBD_EVENTCAUSE_READY_MASK);

    if (nrfx_usbd_errata_187())
    1d78:	b1b0      	cbz	r0, 1da8 <nrfx_usbd_enable+0x50>
	__asm__ volatile(
    1d7a:	f04f 0320 	mov.w	r3, #32
    1d7e:	f3ef 8011 	mrs	r0, BASEPRI
    1d82:	f383 8811 	msr	BASEPRI, r3
    1d86:	f3bf 8f6f 	isb	sy
    {
        NRFX_CRITICAL_SECTION_ENTER();
        if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    1d8a:	6821      	ldr	r1, [r4, #0]
    1d8c:	4b4c      	ldr	r3, [pc, #304]	; (1ec0 <nrfx_usbd_enable+0x168>)
    1d8e:	2203      	movs	r2, #3
    1d90:	2900      	cmp	r1, #0
    1d92:	f040 8084 	bne.w	1e9e <nrfx_usbd_enable+0x146>
        {
            *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    1d96:	f249 3175 	movw	r1, #37749	; 0x9375
    1d9a:	6021      	str	r1, [r4, #0]
            *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    1d9c:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    1d9e:	6021      	str	r1, [r4, #0]
	__asm__ volatile(
    1da0:	f380 8811 	msr	BASEPRI, r0
    1da4:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    1da8:	f04f 0320 	mov.w	r3, #32
    1dac:	f3ef 8011 	mrs	r0, BASEPRI
    1db0:	f383 8811 	msr	BASEPRI, r3
    1db4:	f3bf 8f6f 	isb	sy
    }
    
    if (nrfx_usbd_errata_171())
    {
        NRFX_CRITICAL_SECTION_ENTER();
        if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    1db8:	6821      	ldr	r1, [r4, #0]
    1dba:	4a42      	ldr	r2, [pc, #264]	; (1ec4 <nrfx_usbd_enable+0x16c>)
    1dbc:	23c0      	movs	r3, #192	; 0xc0
    1dbe:	2900      	cmp	r1, #0
    1dc0:	d16f      	bne.n	1ea2 <nrfx_usbd_enable+0x14a>
        {
            *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    1dc2:	f249 3175 	movw	r1, #37749	; 0x9375
    1dc6:	6021      	str	r1, [r4, #0]
            *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    1dc8:	6013      	str	r3, [r2, #0]
            *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    1dca:	6021      	str	r1, [r4, #0]
	__asm__ volatile(
    1dcc:	f380 8811 	msr	BASEPRI, r0
    1dd0:	f3bf 8f6f 	isb	sy
    NRF_USBD->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
    1dd4:	4b38      	ldr	r3, [pc, #224]	; (1eb8 <nrfx_usbd_enable+0x160>)
    1dd6:	2101      	movs	r1, #1
    1dd8:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
  __ASM volatile ("isb 0xF":::"memory");
    1ddc:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    1de0:	f3bf 8f4f 	dsb	sy
    return NRF_USBD->EVENTCAUSE;
    1de4:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    }

    /* Enable the peripheral */
    nrf_usbd_enable();
    /* Waiting for peripheral to enable, this should take a few us */
    while (0 == (NRF_USBD_EVENTCAUSE_READY_MASK & nrf_usbd_eventcause_get()))
    1de8:	0509      	lsls	r1, r1, #20
    1dea:	d5fb      	bpl.n	1de4 <nrfx_usbd_enable+0x8c>
    NRF_USBD->EVENTCAUSE = flags;
    1dec:	f44f 6100 	mov.w	r1, #2048	; 0x800
    1df0:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
  __ASM volatile ("isb 0xF":::"memory");
    1df4:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    1df8:	f3bf 8f4f 	dsb	sy
	__asm__ volatile(
    1dfc:	f04f 0320 	mov.w	r3, #32
    1e00:	f3ef 8011 	mrs	r0, BASEPRI
    1e04:	f383 8811 	msr	BASEPRI, r3
    1e08:	f3bf 8f6f 	isb	sy
    nrf_usbd_eventcause_clear(NRF_USBD_EVENTCAUSE_READY_MASK);
    
    if (nrfx_usbd_errata_171())
    {
        NRFX_CRITICAL_SECTION_ENTER();
        if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    1e0c:	6821      	ldr	r1, [r4, #0]
    1e0e:	2900      	cmp	r1, #0
    1e10:	d149      	bne.n	1ea6 <nrfx_usbd_enable+0x14e>
        {
            *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    1e12:	f249 3375 	movw	r3, #37749	; 0x9375
    1e16:	6023      	str	r3, [r4, #0]
            *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    1e18:	6011      	str	r1, [r2, #0]
            *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    1e1a:	6023      	str	r3, [r4, #0]
	__asm__ volatile(
    1e1c:	f380 8811 	msr	BASEPRI, r0
    1e20:	f3bf 8f6f 	isb	sy
        NRFX_CRITICAL_SECTION_EXIT();
    }

    if (nrfx_usbd_errata_166())
    {
        *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7E3;
    1e24:	4b28      	ldr	r3, [pc, #160]	; (1ec8 <nrfx_usbd_enable+0x170>)
    1e26:	f240 72e3 	movw	r2, #2019	; 0x7e3
    1e2a:	601a      	str	r2, [r3, #0]
        *((volatile uint32_t *)(NRF_USBD_BASE + 0x804)) = 0x40;
    1e2c:	3304      	adds	r3, #4
    1e2e:	2240      	movs	r2, #64	; 0x40
    1e30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
    1e32:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    1e36:	f3bf 8f4f 	dsb	sy
    NRF_USBD->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    1e3a:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
    NRF_USBD->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    1e3e:	2600      	movs	r6, #0
    NRF_USBD->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    1e40:	2280      	movs	r2, #128	; 0x80
    1e42:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    NRF_USBD->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    1e46:	f8c3 6530 	str.w	r6, [r3, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    1e4a:	4b20      	ldr	r3, [pc, #128]	; (1ecc <nrfx_usbd_enable+0x174>)
    1e4c:	f240 12ff 	movw	r2, #511	; 0x1ff
    1e50:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
    1e52:	4b1f      	ldr	r3, [pc, #124]	; (1ed0 <nrfx_usbd_enable+0x178>)
    1e54:	601e      	str	r6, [r3, #0]
    usbd_dma_pending_clear();
    1e56:	f7ff fa9f 	bl	1398 <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    1e5a:	4b1e      	ldr	r3, [pc, #120]	; (1ed4 <nrfx_usbd_enable+0x17c>)
    1e5c:	701e      	strb	r6, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
    1e5e:	4b1e      	ldr	r3, [pc, #120]	; (1ed8 <nrfx_usbd_enable+0x180>)
    1e60:	2202      	movs	r2, #2
    1e62:	701a      	strb	r2, [r3, #0]
    1e64:	f7ff f9e2 	bl	122c <nrfx_usbd_errata_type_52840_eng_b>

    if (nrfx_usbd_errata_187())
    1e68:	b198      	cbz	r0, 1e92 <nrfx_usbd_enable+0x13a>
	__asm__ volatile(
    1e6a:	f04f 0320 	mov.w	r3, #32
    1e6e:	f3ef 8011 	mrs	r0, BASEPRI
    1e72:	f383 8811 	msr	BASEPRI, r3
    1e76:	f3bf 8f6f 	isb	sy
    {
        NRFX_CRITICAL_SECTION_ENTER();
        if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    1e7a:	6821      	ldr	r1, [r4, #0]
    1e7c:	4b10      	ldr	r3, [pc, #64]	; (1ec0 <nrfx_usbd_enable+0x168>)
    1e7e:	b9a9      	cbnz	r1, 1eac <nrfx_usbd_enable+0x154>
        {
            *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    1e80:	f249 3275 	movw	r2, #37749	; 0x9375
    1e84:	6022      	str	r2, [r4, #0]
            *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    1e86:	6019      	str	r1, [r3, #0]
            *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    1e88:	6022      	str	r2, [r4, #0]
	__asm__ volatile(
    1e8a:	f380 8811 	msr	BASEPRI, r0
    1e8e:	f3bf 8f6f 	isb	sy
        {
            *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
        }
        NRFX_CRITICAL_SECTION_EXIT();
    }
}
    1e92:	9a01      	ldr	r2, [sp, #4]
    1e94:	682b      	ldr	r3, [r5, #0]
    1e96:	429a      	cmp	r2, r3
    1e98:	d00a      	beq.n	1eb0 <nrfx_usbd_enable+0x158>
    1e9a:	f009 f8bf 	bl	b01c <_StackCheckHandler>
            *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    1e9e:	601a      	str	r2, [r3, #0]
    1ea0:	e77e      	b.n	1da0 <nrfx_usbd_enable+0x48>
            *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    1ea2:	6013      	str	r3, [r2, #0]
    1ea4:	e792      	b.n	1dcc <nrfx_usbd_enable+0x74>
            *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    1ea6:	2300      	movs	r3, #0
    1ea8:	6013      	str	r3, [r2, #0]
    1eaa:	e7b7      	b.n	1e1c <nrfx_usbd_enable+0xc4>
            *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    1eac:	601e      	str	r6, [r3, #0]
    1eae:	e7ec      	b.n	1e8a <nrfx_usbd_enable+0x132>
}
    1eb0:	b002      	add	sp, #8
    1eb2:	bd70      	pop	{r4, r5, r6, pc}
    1eb4:	200036b0 	.word	0x200036b0
    1eb8:	40027000 	.word	0x40027000
    1ebc:	4006ec00 	.word	0x4006ec00
    1ec0:	4006ed14 	.word	0x4006ed14
    1ec4:	4006ec14 	.word	0x4006ec14
    1ec8:	40027800 	.word	0x40027800
    1ecc:	200000e4 	.word	0x200000e4
    1ed0:	20000074 	.word	0x20000074
    1ed4:	20001953 	.word	0x20001953
    1ed8:	20001952 	.word	0x20001952

00001edc <nrfx_usbd_start>:
    usbd_dma_pending_clear();
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
}

void nrfx_usbd_start(bool enable_sof)
{
    1edc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    1ede:	4c13      	ldr	r4, [pc, #76]	; (1f2c <nrfx_usbd_start+0x50>)
    1ee0:	6822      	ldr	r2, [r4, #0]
    1ee2:	9201      	str	r2, [sp, #4]
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
    1ee4:	4a12      	ldr	r2, [pc, #72]	; (1f30 <nrfx_usbd_start+0x54>)
    1ee6:	2100      	movs	r1, #0
    1ee8:	7011      	strb	r1, [r2, #0]
       NRF_USBD_INT_ENDEPOUT0_MASK    |
       NRF_USBD_INT_USBEVENT_MASK     |
       NRF_USBD_INT_EP0SETUP_MASK     |
       NRF_USBD_INT_DATAEP_MASK;

   if (enable_sof || nrfx_usbd_errata_104())
    1eea:	b9d0      	cbnz	r0, 1f22 <nrfx_usbd_start+0x46>
    return (NRFX_USBD_ERRATA_ENABLE && (!nrfx_usbd_errata_type_52840_eng_b()));
    1eec:	f7ff f99e 	bl	122c <nrfx_usbd_errata_type_52840_eng_b>
    uint32_t ints_to_enable =
    1ef0:	4b10      	ldr	r3, [pc, #64]	; (1f34 <nrfx_usbd_start+0x58>)
    1ef2:	4a11      	ldr	r2, [pc, #68]	; (1f38 <nrfx_usbd_start+0x5c>)
    1ef4:	2800      	cmp	r0, #0
    1ef6:	bf0c      	ite	eq
    1ef8:	4618      	moveq	r0, r3
    1efa:	4610      	movne	r0, r2
    NRF_USBD->INTENSET = int_mask;
    1efc:	4d0f      	ldr	r5, [pc, #60]	; (1f3c <nrfx_usbd_start+0x60>)
    1efe:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
    1f02:	2027      	movs	r0, #39	; 0x27
    1f04:	f005 fb12 	bl	752c <z_arch_irq_enable>
    NRF_USBD->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
    1f08:	2301      	movs	r3, #1
    1f0a:	f8c5 3504 	str.w	r3, [r5, #1284]	; 0x504
  __ASM volatile ("isb 0xF":::"memory");
    1f0e:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    1f12:	f3bf 8f4f 	dsb	sy

   /* Enable pullups */
   nrf_usbd_pullup_enable();
}
    1f16:	9a01      	ldr	r2, [sp, #4]
    1f18:	6823      	ldr	r3, [r4, #0]
    1f1a:	429a      	cmp	r2, r3
    1f1c:	d003      	beq.n	1f26 <nrfx_usbd_start+0x4a>
    1f1e:	f009 f87d 	bl	b01c <_StackCheckHandler>
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
    1f22:	4804      	ldr	r0, [pc, #16]	; (1f34 <nrfx_usbd_start+0x58>)
    1f24:	e7ea      	b.n	1efc <nrfx_usbd_start+0x20>
}
    1f26:	b003      	add	sp, #12
    1f28:	bd30      	pop	{r4, r5, pc}
    1f2a:	bf00      	nop
    1f2c:	200036b0 	.word	0x200036b0
    1f30:	20001950 	.word	0x20001950
    1f34:	01e01407 	.word	0x01e01407
    1f38:	01c01407 	.word	0x01c01407
    1f3c:	40027000 	.word	0x40027000

00001f40 <nrfx_usbd_is_enabled>:
{
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    1f40:	b507      	push	{r0, r1, r2, lr}
    1f42:	4b09      	ldr	r3, [pc, #36]	; (1f68 <nrfx_usbd_is_enabled+0x28>)
    1f44:	681a      	ldr	r2, [r3, #0]
    1f46:	9201      	str	r2, [sp, #4]
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
    1f48:	4a08      	ldr	r2, [pc, #32]	; (1f6c <nrfx_usbd_is_enabled+0x2c>)
    1f4a:	7810      	ldrb	r0, [r2, #0]
}
    1f4c:	9a01      	ldr	r2, [sp, #4]
    1f4e:	681b      	ldr	r3, [r3, #0]
    1f50:	2801      	cmp	r0, #1
    1f52:	bf94      	ite	ls
    1f54:	2000      	movls	r0, #0
    1f56:	2001      	movhi	r0, #1
    1f58:	429a      	cmp	r2, r3
    1f5a:	d001      	beq.n	1f60 <nrfx_usbd_is_enabled+0x20>
    1f5c:	f009 f85e 	bl	b01c <_StackCheckHandler>
    1f60:	b003      	add	sp, #12
    1f62:	f85d fb04 	ldr.w	pc, [sp], #4
    1f66:	bf00      	nop
    1f68:	200036b0 	.word	0x200036b0
    1f6c:	20001952 	.word	0x20001952

00001f70 <nrfx_usbd_ep_max_packet_size_set>:
{
    m_bus_suspend = false;
}

void nrfx_usbd_ep_max_packet_size_set(nrfx_usbd_ep_t ep, uint16_t size)
{
    1f70:	b537      	push	{r0, r1, r2, r4, r5, lr}
    1f72:	4c07      	ldr	r4, [pc, #28]	; (1f90 <nrfx_usbd_ep_max_packet_size_set+0x20>)
    1f74:	6823      	ldr	r3, [r4, #0]
    1f76:	9301      	str	r3, [sp, #4]
    1f78:	460d      	mov	r5, r1
    NRFX_ASSERT((size != 0) && (size & (size - 1)) == 0);
    /* Packet size cannot be higher than maximum buffer size */
    NRFX_ASSERT((NRF_USBD_EPISO_CHECK(ep) && (size <= usbd_ep_iso_capacity(ep))) ||
                (!NRF_USBD_EPISO_CHECK(ep) && (size <= NRFX_USBD_EPSIZE)));

    usbd_ep_state_t * p_state = ep_state_access(ep);
    1f7a:	f7ff f9d9 	bl	1330 <ep_state_access>
    p_state->max_packet_size = size;
}
    1f7e:	9a01      	ldr	r2, [sp, #4]
    1f80:	6823      	ldr	r3, [r4, #0]
    p_state->max_packet_size = size;
    1f82:	8185      	strh	r5, [r0, #12]
}
    1f84:	429a      	cmp	r2, r3
    1f86:	d001      	beq.n	1f8c <nrfx_usbd_ep_max_packet_size_set+0x1c>
    1f88:	f009 f848 	bl	b01c <_StackCheckHandler>
    1f8c:	b003      	add	sp, #12
    1f8e:	bd30      	pop	{r4, r5, pc}
    1f90:	200036b0 	.word	0x200036b0

00001f94 <nrfx_usbd_init>:
{
    1f94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    1f98:	4d21      	ldr	r5, [pc, #132]	; (2020 <nrfx_usbd_init+0x8c>)
    1f9a:	682b      	ldr	r3, [r5, #0]
    1f9c:	9301      	str	r3, [sp, #4]
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    1f9e:	4b21      	ldr	r3, [pc, #132]	; (2024 <nrfx_usbd_init+0x90>)
    1fa0:	781c      	ldrb	r4, [r3, #0]
    1fa2:	2c00      	cmp	r4, #0
    1fa4:	d137      	bne.n	2016 <nrfx_usbd_init+0x82>
    m_event_handler = event_handler;
    1fa6:	4a20      	ldr	r2, [pc, #128]	; (2028 <nrfx_usbd_init+0x94>)
    1fa8:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    1faa:	2201      	movs	r2, #1
    1fac:	701a      	strb	r2, [r3, #0]
    1fae:	4626      	mov	r6, r4
        p_state->status = NRFX_USBD_EP_OK;
    1fb0:	4627      	mov	r7, r4
    1fb2:	b2f3      	uxtb	r3, r6
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    1fb4:	f013 0f08 	tst.w	r3, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    1fb8:	f043 0880 	orr.w	r8, r3, #128	; 0x80
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    1fbc:	bf0c      	ite	eq
    1fbe:	2140      	moveq	r1, #64	; 0x40
    1fc0:	f44f 7100 	movne.w	r1, #512	; 0x200
    1fc4:	4640      	mov	r0, r8
    1fc6:	f7ff ffd3 	bl	1f70 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    1fca:	4640      	mov	r0, r8
    1fcc:	f7ff f9b0 	bl	1330 <ep_state_access>
        p_state->status = NRFX_USBD_EP_OK;
    1fd0:	3601      	adds	r6, #1
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    1fd2:	2e09      	cmp	r6, #9
        p_state->status = NRFX_USBD_EP_OK;
    1fd4:	7387      	strb	r7, [r0, #14]
        p_state->handler.feeder = NULL;
    1fd6:	6007      	str	r7, [r0, #0]
        p_state->transfer_cnt = 0;
    1fd8:	6087      	str	r7, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    1fda:	d1ea      	bne.n	1fb2 <nrfx_usbd_init+0x1e>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    1fdc:	2140      	movs	r1, #64	; 0x40
        p_state->status = NRFX_USBD_EP_OK;
    1fde:	2600      	movs	r6, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    1fe0:	4620      	mov	r0, r4
    1fe2:	f7ff ffc5 	bl	1f70 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    1fe6:	4620      	mov	r0, r4
    1fe8:	f7ff f9a2 	bl	1330 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    1fec:	3401      	adds	r4, #1
    1fee:	b2e4      	uxtb	r4, r4
    1ff0:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    1ff2:	7386      	strb	r6, [r0, #14]
        p_state->handler.consumer = NULL;
    1ff4:	6006      	str	r6, [r0, #0]
        p_state->transfer_cnt = 0;
    1ff6:	6086      	str	r6, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    1ff8:	d106      	bne.n	2008 <nrfx_usbd_init+0x74>
    return NRFX_SUCCESS;
    1ffa:	480c      	ldr	r0, [pc, #48]	; (202c <nrfx_usbd_init+0x98>)
}
    1ffc:	9a01      	ldr	r2, [sp, #4]
    1ffe:	682b      	ldr	r3, [r5, #0]
    2000:	429a      	cmp	r2, r3
    2002:	d00a      	beq.n	201a <nrfx_usbd_init+0x86>
    2004:	f009 f80a 	bl	b01c <_StackCheckHandler>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    2008:	f014 0f08 	tst.w	r4, #8
    200c:	bf14      	ite	ne
    200e:	f44f 7100 	movne.w	r1, #512	; 0x200
    2012:	2140      	moveq	r1, #64	; 0x40
    2014:	e7e4      	b.n	1fe0 <nrfx_usbd_init+0x4c>
        return NRFX_ERROR_INVALID_STATE;
    2016:	4806      	ldr	r0, [pc, #24]	; (2030 <nrfx_usbd_init+0x9c>)
    2018:	e7f0      	b.n	1ffc <nrfx_usbd_init+0x68>
}
    201a:	b002      	add	sp, #8
    201c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2020:	200036b0 	.word	0x200036b0
    2024:	20001952 	.word	0x20001952
    2028:	20000208 	.word	0x20000208
    202c:	0bad0000 	.word	0x0bad0000
    2030:	0bad0005 	.word	0x0bad0005

00002034 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
    2034:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2038:	4e37      	ldr	r6, [pc, #220]	; (2118 <nrfx_usbd_ep_transfer+0xe4>)
    203a:	6833      	ldr	r3, [r6, #0]
    203c:	9301      	str	r3, [sp, #4]
    203e:	4605      	mov	r5, r0
    2040:	468a      	mov	sl, r1
	__asm__ volatile(
    2042:	f04f 0320 	mov.w	r3, #32
    2046:	f3ef 8811 	mrs	r8, BASEPRI
    204a:	f383 8811 	msr	BASEPRI, r3
    204e:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
    2052:	f010 090f 	ands.w	r9, r0, #15
    2056:	d103      	bne.n	2060 <nrfx_usbd_ep_transfer+0x2c>
    2058:	4b30      	ldr	r3, [pc, #192]	; (211c <nrfx_usbd_ep_transfer+0xe8>)
    205a:	781b      	ldrb	r3, [r3, #0]
    205c:	4283      	cmp	r3, r0
    205e:	d154      	bne.n	210a <nrfx_usbd_ep_transfer+0xd6>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    2060:	4a2f      	ldr	r2, [pc, #188]	; (2120 <nrfx_usbd_ep_transfer+0xec>)
    2062:	4b30      	ldr	r3, [pc, #192]	; (2124 <nrfx_usbd_ep_transfer+0xf0>)
    2064:	6814      	ldr	r4, [r2, #0]
    2066:	681f      	ldr	r7, [r3, #0]
    const uint8_t ep_bitpos = ep2bit(ep);
    2068:	4628      	mov	r0, r5
    206a:	f7ff f97d 	bl	1368 <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    206e:	43e4      	mvns	r4, r4
    2070:	b2a4      	uxth	r4, r4
    2072:	f04f 0b01 	mov.w	fp, #1
    2076:	433c      	orrs	r4, r7
    2078:	fa0b fb00 	lsl.w	fp, fp, r0
    207c:	4b29      	ldr	r3, [pc, #164]	; (2124 <nrfx_usbd_ep_transfer+0xf0>)
    207e:	ea14 0f0b 	tst.w	r4, fp
    2082:	461c      	mov	r4, r3
    2084:	d143      	bne.n	210e <nrfx_usbd_ep_transfer+0xda>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    2086:	4628      	mov	r0, r5
    2088:	f7ff f952 	bl	1330 <ep_state_access>
    208c:	230c      	movs	r3, #12
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
    208e:	062a      	lsls	r2, r5, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    2090:	4684      	mov	ip, r0
        if (NRF_USBD_EPIN_CHECK(ep))
    2092:	fb03 f309 	mul.w	r3, r3, r9
    2096:	d534      	bpl.n	2102 <nrfx_usbd_ep_transfer+0xce>
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    2098:	4a23      	ldr	r2, [pc, #140]	; (2128 <nrfx_usbd_ep_transfer+0xf4>)

#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    209a:	f8da 1000 	ldr.w	r1, [sl]
    209e:	4413      	add	r3, r2
    20a0:	f001 4160 	and.w	r1, r1, #3758096384	; 0xe0000000
    20a4:	f8da 2008 	ldr.w	r2, [sl, #8]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    20a8:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    20ac:	f002 0201 	and.w	r2, r2, #1
    20b0:	d122      	bne.n	20f8 <nrfx_usbd_ep_transfer+0xc4>
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    20b2:	b9fa      	cbnz	r2, 20f4 <nrfx_usbd_ep_transfer+0xc0>
                {
                    p_state->handler.feeder = nrfx_usbd_feeder_ram;
    20b4:	4a1d      	ldr	r2, [pc, #116]	; (212c <nrfx_usbd_ep_transfer+0xf8>)
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
    20b6:	f8cc 2000 	str.w	r2, [ip]
        }
        *p_context = *p_transfer;
    20ba:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
    20be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        p_state->p_context = p_context;
    20c2:	f8cc 3004 	str.w	r3, [ip, #4]

        p_state->transfer_cnt = 0;
    20c6:	2300      	movs	r3, #0
    20c8:	f8cc 3008 	str.w	r3, [ip, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
    20cc:	f88c 300e 	strb.w	r3, [ip, #14]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    20d0:	4b17      	ldr	r3, [pc, #92]	; (2130 <nrfx_usbd_ep_transfer+0xfc>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
        ret = NRFX_SUCCESS;
    20d2:	4818      	ldr	r0, [pc, #96]	; (2134 <nrfx_usbd_ep_transfer+0x100>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    20d4:	ea47 070b 	orr.w	r7, r7, fp
    20d8:	2280      	movs	r2, #128	; 0x80
    20da:	6027      	str	r7, [r4, #0]
    20dc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
    20e0:	f388 8811 	msr	BASEPRI, r8
    20e4:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    20e8:	9a01      	ldr	r2, [sp, #4]
    20ea:	6833      	ldr	r3, [r6, #0]
    20ec:	429a      	cmp	r2, r3
    20ee:	d010      	beq.n	2112 <nrfx_usbd_ep_transfer+0xde>
    20f0:	f008 ff94 	bl	b01c <_StackCheckHandler>
                    p_state->handler.feeder = nrfx_usbd_feeder_ram_zlp;
    20f4:	4a10      	ldr	r2, [pc, #64]	; (2138 <nrfx_usbd_ep_transfer+0x104>)
    20f6:	e7de      	b.n	20b6 <nrfx_usbd_ep_transfer+0x82>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    20f8:	b90a      	cbnz	r2, 20fe <nrfx_usbd_ep_transfer+0xca>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash;
    20fa:	4a10      	ldr	r2, [pc, #64]	; (213c <nrfx_usbd_ep_transfer+0x108>)
    20fc:	e7db      	b.n	20b6 <nrfx_usbd_ep_transfer+0x82>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash_zlp;
    20fe:	4a10      	ldr	r2, [pc, #64]	; (2140 <nrfx_usbd_ep_transfer+0x10c>)
    2100:	e7d9      	b.n	20b6 <nrfx_usbd_ep_transfer+0x82>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
    2102:	4a10      	ldr	r2, [pc, #64]	; (2144 <nrfx_usbd_ep_transfer+0x110>)
    2104:	4413      	add	r3, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
    2106:	4a10      	ldr	r2, [pc, #64]	; (2148 <nrfx_usbd_ep_transfer+0x114>)
    2108:	e7d5      	b.n	20b6 <nrfx_usbd_ep_transfer+0x82>
        ret = NRFX_ERROR_INVALID_ADDR;
    210a:	4810      	ldr	r0, [pc, #64]	; (214c <nrfx_usbd_ep_transfer+0x118>)
    210c:	e7e8      	b.n	20e0 <nrfx_usbd_ep_transfer+0xac>
        ret = NRFX_ERROR_BUSY;
    210e:	4810      	ldr	r0, [pc, #64]	; (2150 <nrfx_usbd_ep_transfer+0x11c>)
    2110:	e7e6      	b.n	20e0 <nrfx_usbd_ep_transfer+0xac>
}
    2112:	b003      	add	sp, #12
    2114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2118:	200036b0 	.word	0x200036b0
    211c:	20001953 	.word	0x20001953
    2120:	200000e4 	.word	0x200000e4
    2124:	20000074 	.word	0x20000074
    2128:	20000078 	.word	0x20000078
    212c:	000012b1 	.word	0x000012b1
    2130:	e000e100 	.word	0xe000e100
    2134:	0bad0000 	.word	0x0bad0000
    2138:	000012ed 	.word	0x000012ed
    213c:	0000142d 	.word	0x0000142d
    2140:	00001481 	.word	0x00001481
    2144:	20000008 	.word	0x20000008
    2148:	00001269 	.word	0x00001269
    214c:	0bad000a 	.word	0x0bad000a
    2150:	0bad000b 	.word	0x0bad000b

00002154 <nrfx_usbd_ep_status_get>:
{
    return m_tx_buffer;
}

nrfx_usbd_ep_status_t nrfx_usbd_ep_status_get(nrfx_usbd_ep_t ep, size_t * p_size)
{
    2154:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2156:	4c10      	ldr	r4, [pc, #64]	; (2198 <nrfx_usbd_ep_status_get+0x44>)
    2158:	6823      	ldr	r3, [r4, #0]
    215a:	9301      	str	r3, [sp, #4]
    215c:	460d      	mov	r5, r1
    nrfx_usbd_ep_status_t ret;

    usbd_ep_state_t const * p_state = ep_state_access(ep);
    215e:	f7ff f8e7 	bl	1330 <ep_state_access>
	__asm__ volatile(
    2162:	f04f 0220 	mov.w	r2, #32
    2166:	f3ef 8311 	mrs	r3, BASEPRI
    216a:	f382 8811 	msr	BASEPRI, r2
    216e:	f3bf 8f6f 	isb	sy
    NRFX_CRITICAL_SECTION_ENTER();
    *p_size = p_state->transfer_cnt;
    2172:	6882      	ldr	r2, [r0, #8]
    2174:	602a      	str	r2, [r5, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    2176:	6802      	ldr	r2, [r0, #0]
    2178:	b952      	cbnz	r2, 2190 <nrfx_usbd_ep_status_get+0x3c>
    217a:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
    217c:	f383 8811 	msr	BASEPRI, r3
    2180:	f3bf 8f6f 	isb	sy
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    2184:	9a01      	ldr	r2, [sp, #4]
    2186:	6823      	ldr	r3, [r4, #0]
    2188:	429a      	cmp	r2, r3
    218a:	d003      	beq.n	2194 <nrfx_usbd_ep_status_get+0x40>
    218c:	f008 ff46 	bl	b01c <_StackCheckHandler>
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    2190:	2004      	movs	r0, #4
    2192:	e7f3      	b.n	217c <nrfx_usbd_ep_status_get+0x28>
}
    2194:	b003      	add	sp, #12
    2196:	bd30      	pop	{r4, r5, pc}
    2198:	200036b0 	.word	0x200036b0

0000219c <nrfx_usbd_ep_stall>:
{
    return (0 != ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep2bit(ep))));
}

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    219c:	b507      	push	{r0, r1, r2, lr}
    219e:	4b0a      	ldr	r3, [pc, #40]	; (21c8 <nrfx_usbd_ep_stall+0x2c>)
    21a0:	681a      	ldr	r2, [r3, #0]
    21a2:	9201      	str	r2, [sp, #4]
    NRF_USBD->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
    21a4:	4a09      	ldr	r2, [pc, #36]	; (21cc <nrfx_usbd_ep_stall+0x30>)
    21a6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    21aa:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
  __ASM volatile ("isb 0xF":::"memory");
    21ae:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    21b2:	f3bf 8f4f 	dsb	sy
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(ep_to_hal(ep));
}
    21b6:	9a01      	ldr	r2, [sp, #4]
    21b8:	681b      	ldr	r3, [r3, #0]
    21ba:	429a      	cmp	r2, r3
    21bc:	d001      	beq.n	21c2 <nrfx_usbd_ep_stall+0x26>
    21be:	f008 ff2d 	bl	b01c <_StackCheckHandler>
    21c2:	b003      	add	sp, #12
    21c4:	f85d fb04 	ldr.w	pc, [sp], #4
    21c8:	200036b0 	.word	0x200036b0
    21cc:	40027000 	.word	0x40027000

000021d0 <nrfx_usbd_ep_stall_check>:
    }
    nrf_usbd_ep_unstall(ep_to_hal(ep));
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    21d0:	b507      	push	{r0, r1, r2, lr}
    21d2:	4b12      	ldr	r3, [pc, #72]	; (221c <nrfx_usbd_ep_stall_check+0x4c>)
    if (NRF_USBD_EPISO_CHECK(ep))
    21d4:	f010 0f08 	tst.w	r0, #8
    21d8:	681a      	ldr	r2, [r3, #0]
    21da:	9201      	str	r2, [sp, #4]
    21dc:	461a      	mov	r2, r3
    21de:	d118      	bne.n	2212 <nrfx_usbd_ep_stall_check+0x42>
    if (NRF_USBD_EPIN_CHECK(ep))
    21e0:	f000 030f 	and.w	r3, r0, #15
    21e4:	f010 0f80 	tst.w	r0, #128	; 0x80
    21e8:	490d      	ldr	r1, [pc, #52]	; (2220 <nrfx_usbd_ep_stall_check+0x50>)
        return NRF_USBD->HALTED.EPOUT[epnr];
    21ea:	bf0b      	itete	eq
    21ec:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return NRF_USBD->HALTED.EPIN[epnr];
    21f0:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return NRF_USBD->HALTED.EPOUT[epnr];
    21f4:	eb01 0383 	addeq.w	r3, r1, r3, lsl #2
        return NRF_USBD->HALTED.EPIN[epnr];
    21f8:	f851 0023 	ldrne.w	r0, [r1, r3, lsl #2]
        return NRF_USBD->HALTED.EPOUT[epnr];
    21fc:	bf08      	it	eq
    21fe:	6858      	ldreq	r0, [r3, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_haltedep(ep);
    2200:	1e43      	subs	r3, r0, #1
    2202:	4258      	negs	r0, r3
    2204:	4158      	adcs	r0, r3
    return nrf_usbd_ep_is_stall(ep_to_hal(ep));
}
    2206:	9901      	ldr	r1, [sp, #4]
    2208:	6813      	ldr	r3, [r2, #0]
    220a:	4299      	cmp	r1, r3
    220c:	d003      	beq.n	2216 <nrfx_usbd_ep_stall_check+0x46>
    220e:	f008 ff05 	bl	b01c <_StackCheckHandler>
        return false;
    2212:	2000      	movs	r0, #0
    2214:	e7f7      	b.n	2206 <nrfx_usbd_ep_stall_check+0x36>
    2216:	b003      	add	sp, #12
    2218:	f85d fb04 	ldr.w	pc, [sp], #4
    221c:	200036b0 	.word	0x200036b0
    2220:	40027000 	.word	0x40027000

00002224 <nrfx_usbd_setup_get>:
{
    nrf_usbd_dtoggle_set(ep, NRF_USBD_DTOGGLE_DATA0);
}

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
    2224:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2226:	4d16      	ldr	r5, [pc, #88]	; (2280 <nrfx_usbd_setup_get+0x5c>)
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    2228:	2208      	movs	r2, #8
{
    222a:	682b      	ldr	r3, [r5, #0]
    222c:	9301      	str	r3, [sp, #4]
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    222e:	2100      	movs	r1, #0
{
    2230:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    2232:	f005 fda7 	bl	7d84 <memset>
    return (uint8_t)(NRF_USBD->BMREQUESTTYPE);
    2236:	4b13      	ldr	r3, [pc, #76]	; (2284 <nrfx_usbd_setup_get+0x60>)
    2238:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    223c:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(NRF_USBD->BREQUEST);
    223e:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    2242:	7062      	strb	r2, [r4, #1]
    const uint16_t val = NRF_USBD->WVALUEL;
    2244:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((NRF_USBD->WVALUEH) << 8));
    2248:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    224c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get();
    p_setup->bRequest      = nrf_usbd_setup_brequest_get();
    p_setup->wValue        = nrf_usbd_setup_wvalue_get();
    2250:	8062      	strh	r2, [r4, #2]
    const uint16_t val = NRF_USBD->WINDEXL;
    2252:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((NRF_USBD->WINDEXH) << 8));
    2256:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    225a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get();
    225e:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = NRF_USBD->WLENGTHL;
    2260:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((NRF_USBD->WLENGTHH) << 8));
    2264:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    2268:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get();
    226c:	80e3      	strh	r3, [r4, #6]
}
    226e:	9a01      	ldr	r2, [sp, #4]
    2270:	682b      	ldr	r3, [r5, #0]
    2272:	429a      	cmp	r2, r3
    2274:	d001      	beq.n	227a <nrfx_usbd_setup_get+0x56>
    2276:	f008 fed1 	bl	b01c <_StackCheckHandler>
    227a:	b003      	add	sp, #12
    227c:	bd30      	pop	{r4, r5, pc}
    227e:	bf00      	nop
    2280:	200036b0 	.word	0x200036b0
    2284:	40027000 	.word	0x40027000

00002288 <nrfx_usbd_setup_data_clear>:

void nrfx_usbd_setup_data_clear(void)
{
    2288:	b537      	push	{r0, r1, r2, r4, r5, lr}
    228a:	4c11      	ldr	r4, [pc, #68]	; (22d0 <nrfx_usbd_setup_data_clear+0x48>)
    228c:	6823      	ldr	r3, [r4, #0]
    228e:	9301      	str	r3, [sp, #4]
    2290:	f7fe ffcc 	bl	122c <nrfx_usbd_errata_type_52840_eng_b>
    if (nrfx_usbd_errata_104())
    2294:	b980      	cbnz	r0, 22b8 <nrfx_usbd_setup_data_clear+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2296:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    229a:	b672      	cpsid	i
        /* For this fix to work properly, it must be ensured that the task is
         * executed twice one after another - blocking ISR. This is however a temporary
         * solution to be used only before production version of the chip. */
        uint32_t primask_copy = __get_PRIMASK();
        __disable_irq();
        nrf_usbd_task_trigger(NRF_USBD_TASK_EP0RCVOUT);
    229c:	204c      	movs	r0, #76	; 0x4c
    229e:	f7fe ff8d 	bl	11bc <nrf_usbd_task_trigger>
        nrf_usbd_task_trigger(NRF_USBD_TASK_EP0RCVOUT);
    22a2:	204c      	movs	r0, #76	; 0x4c
    22a4:	f7fe ff8a 	bl	11bc <nrf_usbd_task_trigger>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    22a8:	f385 8810 	msr	PRIMASK, r5
    }
    else
    {
        nrf_usbd_task_trigger(NRF_USBD_TASK_EP0RCVOUT);
    }
}
    22ac:	9a01      	ldr	r2, [sp, #4]
    22ae:	6823      	ldr	r3, [r4, #0]
    22b0:	429a      	cmp	r2, r3
    22b2:	d00b      	beq.n	22cc <nrfx_usbd_setup_data_clear+0x44>
    22b4:	f008 feb2 	bl	b01c <_StackCheckHandler>
        nrf_usbd_task_trigger(NRF_USBD_TASK_EP0RCVOUT);
    22b8:	9a01      	ldr	r2, [sp, #4]
    22ba:	6823      	ldr	r3, [r4, #0]
    22bc:	429a      	cmp	r2, r3
    22be:	d1f9      	bne.n	22b4 <nrfx_usbd_setup_data_clear+0x2c>
    22c0:	204c      	movs	r0, #76	; 0x4c
}
    22c2:	b003      	add	sp, #12
    22c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_usbd_task_trigger(NRF_USBD_TASK_EP0RCVOUT);
    22c8:	f7fe bf78 	b.w	11bc <nrf_usbd_task_trigger>
}
    22cc:	b003      	add	sp, #12
    22ce:	bd30      	pop	{r4, r5, pc}
    22d0:	200036b0 	.word	0x200036b0

000022d4 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    22d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    22d6:	4c14      	ldr	r4, [pc, #80]	; (2328 <ev_dma_epout0_handler+0x54>)
    22d8:	6823      	ldr	r3, [r4, #0]
    22da:	9301      	str	r3, [sp, #4]
    usbd_dma_pending_clear();
    22dc:	f7ff f85c 	bl	1398 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    22e0:	4b12      	ldr	r3, [pc, #72]	; (232c <ev_dma_epout0_handler+0x58>)
    22e2:	7b9a      	ldrb	r2, [r3, #14]
    22e4:	2a03      	cmp	r2, #3
    22e6:	d109      	bne.n	22fc <ev_dma_epout0_handler+0x28>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    22e8:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
    22ec:	f7ff f972 	bl	15d4 <atomic_and.constprop.11>
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    22f0:	9a01      	ldr	r2, [sp, #4]
    22f2:	6823      	ldr	r3, [r4, #0]
    22f4:	429a      	cmp	r2, r3
    22f6:	d014      	beq.n	2322 <ev_dma_epout0_handler+0x4e>
    22f8:	f008 fe90 	bl	b01c <_StackCheckHandler>
    else if (p_state->handler.consumer == NULL)
    22fc:	681d      	ldr	r5, [r3, #0]
    22fe:	b96d      	cbnz	r5, 231c <ev_dma_epout0_handler+0x48>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    2300:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
    2304:	f7ff f966 	bl	15d4 <atomic_and.constprop.11>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    2308:	2306      	movs	r3, #6
    230a:	f88d 3000 	strb.w	r3, [sp]
        m_event_handler(&evt);
    230e:	4b08      	ldr	r3, [pc, #32]	; (2330 <ev_dma_epout0_handler+0x5c>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    2310:	f8ad 5002 	strh.w	r5, [sp, #2]
        m_event_handler(&evt);
    2314:	681b      	ldr	r3, [r3, #0]
    2316:	4668      	mov	r0, sp
    2318:	4798      	blx	r3
    231a:	e7e9      	b.n	22f0 <ev_dma_epout0_handler+0x1c>
        nrfx_usbd_setup_data_clear();
    231c:	f7ff ffb4 	bl	2288 <nrfx_usbd_setup_data_clear>
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    2320:	e7e6      	b.n	22f0 <ev_dma_epout0_handler+0x1c>
    2322:	b003      	add	sp, #12
    2324:	bd30      	pop	{r4, r5, pc}
    2326:	bf00      	nop
    2328:	200036b0 	.word	0x200036b0
    232c:	200000e8 	.word	0x200000e8
    2330:	20000208 	.word	0x20000208

00002334 <nrfx_usbd_setup_clear>:

void nrfx_usbd_setup_clear(void)
{
    2334:	b507      	push	{r0, r1, r2, lr}
    2336:	4b07      	ldr	r3, [pc, #28]	; (2354 <nrfx_usbd_setup_clear+0x20>)
    2338:	681a      	ldr	r2, [r3, #0]
    233a:	9201      	str	r2, [sp, #4]
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD_TASK_EP0STATUS);
    233c:	9a01      	ldr	r2, [sp, #4]
    233e:	681b      	ldr	r3, [r3, #0]
    2340:	429a      	cmp	r2, r3
    2342:	d001      	beq.n	2348 <nrfx_usbd_setup_clear+0x14>
    2344:	f008 fe6a 	bl	b01c <_StackCheckHandler>
    2348:	2050      	movs	r0, #80	; 0x50
}
    234a:	b003      	add	sp, #12
    234c:	f85d eb04 	ldr.w	lr, [sp], #4
    nrf_usbd_task_trigger(NRF_USBD_TASK_EP0STATUS);
    2350:	f7fe bf34 	b.w	11bc <nrf_usbd_task_trigger>
    2354:	200036b0 	.word	0x200036b0

00002358 <nrfx_usbd_setup_stall>:

void nrfx_usbd_setup_stall(void)
{
    2358:	b507      	push	{r0, r1, r2, lr}
    235a:	4b07      	ldr	r3, [pc, #28]	; (2378 <nrfx_usbd_setup_stall+0x20>)
    235c:	681a      	ldr	r2, [r3, #0]
    235e:	9201      	str	r2, [sp, #4]
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD_TASK_EP0STALL);
    2360:	9a01      	ldr	r2, [sp, #4]
    2362:	681b      	ldr	r3, [r3, #0]
    2364:	429a      	cmp	r2, r3
    2366:	d001      	beq.n	236c <nrfx_usbd_setup_stall+0x14>
    2368:	f008 fe58 	bl	b01c <_StackCheckHandler>
    236c:	2054      	movs	r0, #84	; 0x54
}
    236e:	b003      	add	sp, #12
    2370:	f85d eb04 	ldr.w	lr, [sp], #4
    nrf_usbd_task_trigger(NRF_USBD_TASK_EP0STALL);
    2374:	f7fe bf22 	b.w	11bc <nrf_usbd_task_trigger>
    2378:	200036b0 	.word	0x200036b0

0000237c <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    237c:	b507      	push	{r0, r1, r2, lr}
    237e:	4b07      	ldr	r3, [pc, #28]	; (239c <nrfx_usbd_last_setup_dir_get+0x20>)
    2380:	681a      	ldr	r2, [r3, #0]
    2382:	9201      	str	r2, [sp, #4]
    return m_last_setup_dir;
}
    2384:	4a06      	ldr	r2, [pc, #24]	; (23a0 <nrfx_usbd_last_setup_dir_get+0x24>)
    2386:	7810      	ldrb	r0, [r2, #0]
    2388:	9a01      	ldr	r2, [sp, #4]
    238a:	681b      	ldr	r3, [r3, #0]
    238c:	429a      	cmp	r2, r3
    238e:	d001      	beq.n	2394 <nrfx_usbd_last_setup_dir_get+0x18>
    2390:	f008 fe44 	bl	b01c <_StackCheckHandler>
    2394:	b003      	add	sp, #12
    2396:	f85d fb04 	ldr.w	pc, [sp], #4
    239a:	bf00      	nop
    239c:	200036b0 	.word	0x200036b0
    23a0:	20001953 	.word	0x20001953

000023a4 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
    23a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    23a6:	4e28      	ldr	r6, [pc, #160]	; (2448 <nrfx_usbd_transfer_out_drop+0xa4>)
    23a8:	6833      	ldr	r3, [r6, #0]
    23aa:	9301      	str	r3, [sp, #4]
    23ac:	4604      	mov	r4, r0
    23ae:	f7fe ff3d 	bl	122c <nrfx_usbd_errata_type_52840_eng_b>
    23b2:	4605      	mov	r5, r0
    23b4:	4620      	mov	r0, r4
    23b6:	f7fe ffd7 	bl	1368 <ep2bit>
    23ba:	2301      	movs	r3, #1
    23bc:	fa03 f000 	lsl.w	r0, r3, r0
    23c0:	43c0      	mvns	r0, r0
    23c2:	4633      	mov	r3, r6
    23c4:	4a21      	ldr	r2, [pc, #132]	; (244c <nrfx_usbd_transfer_out_drop+0xa8>)
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    if (nrfx_usbd_errata_200())
    23c6:	b9f5      	cbnz	r5, 2406 <nrfx_usbd_transfer_out_drop+0x62>
	__asm__ volatile(
    23c8:	f04f 0120 	mov.w	r1, #32
    23cc:	f3ef 8611 	mrs	r6, BASEPRI
    23d0:	f381 8811 	msr	BASEPRI, r1
    23d4:	f3bf 8f6f 	isb	sy
    {
        NRFX_CRITICAL_SECTION_ENTER();
        m_ep_ready &= ~(1U << ep2bit(ep));
    23d8:	6811      	ldr	r1, [r2, #0]
        *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7C5 + (2u * NRF_USBD_EP_NR_GET(ep));
    23da:	f004 040f 	and.w	r4, r4, #15
        m_ep_ready &= ~(1U << ep2bit(ep));
    23de:	4008      	ands	r0, r1
    23e0:	6010      	str	r0, [r2, #0]
        *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7C5 + (2u * NRF_USBD_EP_NR_GET(ep));
    23e2:	0064      	lsls	r4, r4, #1
    23e4:	4a1a      	ldr	r2, [pc, #104]	; (2450 <nrfx_usbd_transfer_out_drop+0xac>)
    23e6:	f204 74c5 	addw	r4, r4, #1989	; 0x7c5
    23ea:	6014      	str	r4, [r2, #0]
        *((volatile uint32_t *)(NRF_USBD_BASE + 0x804)) = 0;
    23ec:	6055      	str	r5, [r2, #4]
    23ee:	3204      	adds	r2, #4
        (void)(*((volatile uint32_t *)(NRF_USBD_BASE + 0x804)));
    23f0:	6812      	ldr	r2, [r2, #0]
	__asm__ volatile(
    23f2:	f386 8811 	msr	BASEPRI, r6
    23f6:	f3bf 8f6f 	isb	sy
        {
            nrf_usbd_epout_clear(ep);
        }
        NRFX_CRITICAL_SECTION_EXIT();
    }
}
    23fa:	9a01      	ldr	r2, [sp, #4]
    23fc:	681b      	ldr	r3, [r3, #0]
    23fe:	429a      	cmp	r2, r3
    2400:	d01f      	beq.n	2442 <nrfx_usbd_transfer_out_drop+0x9e>
    2402:	f008 fe0b 	bl	b01c <_StackCheckHandler>
	__asm__ volatile(
    2406:	f04f 0120 	mov.w	r1, #32
    240a:	f3ef 8511 	mrs	r5, BASEPRI
    240e:	f381 8811 	msr	BASEPRI, r1
    2412:	f3bf 8f6f 	isb	sy
        m_ep_ready &= ~(1U << ep2bit(ep));
    2416:	6811      	ldr	r1, [r2, #0]
    2418:	4008      	ands	r0, r1
        if (!NRF_USBD_EPISO_CHECK(ep))
    241a:	f014 0108 	ands.w	r1, r4, #8
        m_ep_ready &= ~(1U << ep2bit(ep));
    241e:	6010      	str	r0, [r2, #0]
        if (!NRF_USBD_EPISO_CHECK(ep))
    2420:	d10a      	bne.n	2438 <nrfx_usbd_transfer_out_drop+0x94>
    NRF_USBD->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
    2422:	f004 040f 	and.w	r4, r4, #15
    2426:	f504 7494 	add.w	r4, r4, #296	; 0x128
    242a:	4a0a      	ldr	r2, [pc, #40]	; (2454 <nrfx_usbd_transfer_out_drop+0xb0>)
    242c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
  __ASM volatile ("isb 0xF":::"memory");
    2430:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    2434:	f3bf 8f4f 	dsb	sy
	__asm__ volatile(
    2438:	f385 8811 	msr	BASEPRI, r5
    243c:	f3bf 8f6f 	isb	sy
}
    2440:	e7db      	b.n	23fa <nrfx_usbd_transfer_out_drop+0x56>
    2442:	b002      	add	sp, #8
    2444:	bd70      	pop	{r4, r5, r6, pc}
    2446:	bf00      	nop
    2448:	200036b0 	.word	0x200036b0
    244c:	200000e4 	.word	0x200000e4
    2450:	40027800 	.word	0x40027800
    2454:	40027000 	.word	0x40027000

00002458 <usbd_ep_abort>:
{
    2458:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    245a:	4d3d      	ldr	r5, [pc, #244]	; (2550 <usbd_ep_abort+0xf8>)
    245c:	682b      	ldr	r3, [r5, #0]
    245e:	9301      	str	r3, [sp, #4]
    2460:	4604      	mov	r4, r0
	__asm__ volatile(
    2462:	f04f 0320 	mov.w	r3, #32
    2466:	f3ef 8611 	mrs	r6, BASEPRI
    246a:	f383 8811 	msr	BASEPRI, r3
    246e:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
    2472:	f7fe ff5d 	bl	1330 <ep_state_access>
    2476:	4607      	mov	r7, r0
    if (NRF_USBD_EPOUT_CHECK(ep))
    2478:	4620      	mov	r0, r4
    247a:	f7fe ff75 	bl	1368 <ep2bit>
    247e:	2301      	movs	r3, #1
    2480:	f014 0f80 	tst.w	r4, #128	; 0x80
    2484:	fa03 f000 	lsl.w	r0, r3, r0
    2488:	4932      	ldr	r1, [pc, #200]	; (2554 <usbd_ep_abort+0xfc>)
    248a:	d11b      	bne.n	24c4 <usbd_ep_abort+0x6c>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    248c:	680b      	ldr	r3, [r1, #0]
    248e:	ea30 0203 	bics.w	r2, r0, r3
    2492:	d00e      	beq.n	24b2 <usbd_ep_abort+0x5a>
            nrfx_usbd_transfer_out_drop(ep);
    2494:	4620      	mov	r0, r4
    2496:	f7ff ff85 	bl	23a4 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
    249a:	2303      	movs	r3, #3
    249c:	73bb      	strb	r3, [r7, #14]
	__asm__ volatile(
    249e:	f386 8811 	msr	BASEPRI, r6
    24a2:	f3bf 8f6f 	isb	sy
}
    24a6:	9a01      	ldr	r2, [sp, #4]
    24a8:	682b      	ldr	r3, [r5, #0]
    24aa:	429a      	cmp	r2, r3
    24ac:	d04d      	beq.n	254a <usbd_ep_abort+0xf2>
    24ae:	f008 fdb5 	bl	b01c <_StackCheckHandler>
            p_state->handler.consumer = NULL;
    24b2:	603a      	str	r2, [r7, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    24b4:	43c0      	mvns	r0, r0
            m_ep_ready &= ~(1U << ep2bit(ep));
    24b6:	4a28      	ldr	r2, [pc, #160]	; (2558 <usbd_ep_abort+0x100>)
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    24b8:	4003      	ands	r3, r0
    24ba:	600b      	str	r3, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    24bc:	6813      	ldr	r3, [r2, #0]
    24be:	4003      	ands	r3, r0
    24c0:	6013      	str	r3, [r2, #0]
    24c2:	e7ea      	b.n	249a <usbd_ep_abort+0x42>
        if(!NRF_USBD_EPISO_CHECK(ep))
    24c4:	0723      	lsls	r3, r4, #28
    24c6:	d415      	bmi.n	24f4 <usbd_ep_abort+0x9c>
            if(ep != NRFX_USBD_EPIN0)
    24c8:	2c80      	cmp	r4, #128	; 0x80
    24ca:	f8df c098 	ldr.w	ip, [pc, #152]	; 2564 <usbd_ep_abort+0x10c>
    24ce:	4b23      	ldr	r3, [pc, #140]	; (255c <usbd_ep_abort+0x104>)
    24d0:	d030      	beq.n	2534 <usbd_ep_abort+0xdc>
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    24d2:	f004 020f 	and.w	r2, r4, #15
    24d6:	0052      	lsls	r2, r2, #1
    24d8:	f202 72b4 	addw	r2, r2, #1972	; 0x7b4
    24dc:	f8cc 2000 	str.w	r2, [ip]
                uint8_t temp = *((volatile uint32_t *)(NRF_USBD_BASE + 0x804));
    24e0:	681a      	ldr	r2, [r3, #0]
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x804)) |= temp;
    24e2:	f8d3 c000 	ldr.w	ip, [r3]
                uint8_t temp = *((volatile uint32_t *)(NRF_USBD_BASE + 0x804));
    24e6:	b2d2      	uxtb	r2, r2
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x804)) |= temp;
    24e8:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x804)) |= temp;
    24ec:	ea42 020c 	orr.w	r2, r2, ip
    24f0:	601a      	str	r2, [r3, #0]
                (void)(*((volatile uint32_t *)(NRF_USBD_BASE + 0x804)));
    24f2:	681b      	ldr	r3, [r3, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    24f4:	f8df c060 	ldr.w	ip, [pc, #96]	; 2558 <usbd_ep_abort+0x100>
    24f8:	680a      	ldr	r2, [r1, #0]
    24fa:	f8dc 3000 	ldr.w	r3, [ip]
    24fe:	ea62 0e03 	orn	lr, r2, r3
    2502:	ea1e 0f00 	tst.w	lr, r0
    2506:	d0ca      	beq.n	249e <usbd_ep_abort+0x46>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    2508:	ea22 0200 	bic.w	r2, r2, r0
            m_ep_ready       |=   1U << ep2bit(ep) ;
    250c:	4318      	orrs	r0, r3
            p_state->handler.feeder = NULL;
    250e:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    2510:	600a      	str	r2, [r1, #0]
            p_state->handler.feeder = NULL;
    2512:	603b      	str	r3, [r7, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    2514:	2303      	movs	r3, #3
    2516:	73bb      	strb	r3, [r7, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    2518:	f88d 3003 	strb.w	r3, [sp, #3]
            m_event_handler(&evt);
    251c:	4b10      	ldr	r3, [pc, #64]	; (2560 <usbd_ep_abort+0x108>)
            m_ep_ready       |=   1U << ep2bit(ep) ;
    251e:	f8cc 0000 	str.w	r0, [ip]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    2522:	2206      	movs	r2, #6
    2524:	f88d 2000 	strb.w	r2, [sp]
    2528:	f88d 4002 	strb.w	r4, [sp, #2]
            m_event_handler(&evt);
    252c:	681b      	ldr	r3, [r3, #0]
    252e:	4668      	mov	r0, sp
    2530:	4798      	blx	r3
    2532:	e7b4      	b.n	249e <usbd_ep_abort+0x46>
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7B4;
    2534:	f240 72b4 	movw	r2, #1972	; 0x7b4
    2538:	f8cc 2000 	str.w	r2, [ip]
                uint8_t temp = *((volatile uint32_t *)(NRF_USBD_BASE + 0x804));
    253c:	681a      	ldr	r2, [r3, #0]
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x804)) |= temp;
    253e:	f8d3 c000 	ldr.w	ip, [r3]
                uint8_t temp = *((volatile uint32_t *)(NRF_USBD_BASE + 0x804));
    2542:	b2d2      	uxtb	r2, r2
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x804)) |= temp;
    2544:	f042 0204 	orr.w	r2, r2, #4
    2548:	e7d0      	b.n	24ec <usbd_ep_abort+0x94>
}
    254a:	b003      	add	sp, #12
    254c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    254e:	bf00      	nop
    2550:	200036b0 	.word	0x200036b0
    2554:	20000074 	.word	0x20000074
    2558:	200000e4 	.word	0x200000e4
    255c:	40027804 	.word	0x40027804
    2560:	20000208 	.word	0x20000208
    2564:	40027800 	.word	0x40027800

00002568 <ev_setup_handler>:
{
    2568:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    256c:	f8df 9088 	ldr.w	r9, [pc, #136]	; 25f8 <ev_setup_handler+0x90>
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    2570:	4d1c      	ldr	r5, [pc, #112]	; (25e4 <ev_setup_handler+0x7c>)
{
    2572:	f8d9 3000 	ldr.w	r3, [r9]
    2576:	9301      	str	r3, [sp, #4]
    return (uint8_t)(NRF_USBD->BMREQUESTTYPE);
    2578:	4b1b      	ldr	r3, [pc, #108]	; (25e8 <ev_setup_handler+0x80>)
        & (1U <<ep2bit(m_last_setup_dir)))
    257a:	4f1c      	ldr	r7, [pc, #112]	; (25ec <ev_setup_handler+0x84>)
    257c:	f8d3 6480 	ldr.w	r6, [r3, #1152]	; 0x480
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    2580:	682b      	ldr	r3, [r5, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
    2582:	f897 8000 	ldrb.w	r8, [r7]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    2586:	43dc      	mvns	r4, r3
    2588:	4b19      	ldr	r3, [pc, #100]	; (25f0 <ev_setup_handler+0x88>)
    258a:	681b      	ldr	r3, [r3, #0]
    258c:	b2a4      	uxth	r4, r4
        & (1U <<ep2bit(m_last_setup_dir)))
    258e:	4640      	mov	r0, r8
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    2590:	431c      	orrs	r4, r3
        & (1U <<ep2bit(m_last_setup_dir)))
    2592:	f7fe fee9 	bl	1368 <ep2bit>
    2596:	2301      	movs	r3, #1
    2598:	fa03 f000 	lsl.w	r0, r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    259c:	4220      	tst	r0, r4
    259e:	d002      	beq.n	25a6 <ev_setup_handler+0x3e>
        usbd_ep_abort(m_last_setup_dir);
    25a0:	4640      	mov	r0, r8
    25a2:	f7ff ff59 	bl	2458 <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    25a6:	f006 0680 	and.w	r6, r6, #128	; 0x80
    (void)(NRFX_ATOMIC_FETCH_AND(
    25aa:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
    25ae:	703e      	strb	r6, [r7, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
    25b0:	f7ff f810 	bl	15d4 <atomic_and.constprop.11>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    25b4:	682b      	ldr	r3, [r5, #0]
    25b6:	f043 0301 	orr.w	r3, r3, #1
    25ba:	602b      	str	r3, [r5, #0]
    const nrfx_usbd_evt_t evt = {
    25bc:	2300      	movs	r3, #0
    25be:	9300      	str	r3, [sp, #0]
    25c0:	2305      	movs	r3, #5
    25c2:	f88d 3000 	strb.w	r3, [sp]
    m_event_handler(&evt);
    25c6:	4b0b      	ldr	r3, [pc, #44]	; (25f4 <ev_setup_handler+0x8c>)
    25c8:	4668      	mov	r0, sp
    25ca:	681b      	ldr	r3, [r3, #0]
    25cc:	4798      	blx	r3
}
    25ce:	9a01      	ldr	r2, [sp, #4]
    25d0:	f8d9 3000 	ldr.w	r3, [r9]
    25d4:	429a      	cmp	r2, r3
    25d6:	d001      	beq.n	25dc <ev_setup_handler+0x74>
    25d8:	f008 fd20 	bl	b01c <_StackCheckHandler>
    25dc:	b003      	add	sp, #12
    25de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    25e2:	bf00      	nop
    25e4:	200000e4 	.word	0x200000e4
    25e8:	40027000 	.word	0x40027000
    25ec:	20001953 	.word	0x20001953
    25f0:	20000074 	.word	0x20000074
    25f4:	20000208 	.word	0x20000208
    25f8:	200036b0 	.word	0x200036b0

000025fc <nrfx_usbd_irq_handler>:
{
    25fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    2600:	4d61      	ldr	r5, [pc, #388]	; (2788 <nrfx_usbd_irq_handler+0x18c>)
    2602:	682b      	ldr	r3, [r5, #0]
    2604:	9301      	str	r3, [sp, #4]
    return NRF_USBD->INTENSET;
    2606:	4b61      	ldr	r3, [pc, #388]	; (278c <nrfx_usbd_irq_handler+0x190>)
    2608:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
    uint32_t active = 0;
    260c:	2400      	movs	r4, #0
    uint32_t to_process = enabled;
    260e:	4632      	mov	r2, r6
    *(nrf_usbd_getRegPtr((uint32_t)event)) = 0UL;
    2610:	4627      	mov	r7, r4
            active |= 1UL << event_nr;
    2612:	2001      	movs	r0, #1
    while (to_process)
    2614:	2a00      	cmp	r2, #0
    2616:	f040 8087 	bne.w	2728 <nrfx_usbd_irq_handler+0x12c>
    261a:	f7fe fe07 	bl	122c <nrfx_usbd_errata_type_52840_eng_b>
    if (nrfx_usbd_errata_104())
    261e:	2800      	cmp	r0, #0
    2620:	d170      	bne.n	2704 <nrfx_usbd_irq_handler+0x108>
        if ((!m_dma_pending) && (0 != (active & (USBD_INTEN_SOF_Msk))))
    2622:	4b5b      	ldr	r3, [pc, #364]	; (2790 <nrfx_usbd_irq_handler+0x194>)
    2624:	781b      	ldrb	r3, [r3, #0]
    2626:	2b00      	cmp	r3, #0
    2628:	d16c      	bne.n	2704 <nrfx_usbd_irq_handler+0x108>
    262a:	02a7      	lsls	r7, r4, #10
    262c:	d56a      	bpl.n	2704 <nrfx_usbd_irq_handler+0x108>
            *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7A9;
    262e:	4a59      	ldr	r2, [pc, #356]	; (2794 <nrfx_usbd_irq_handler+0x198>)
            *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7AB;
    2630:	4f58      	ldr	r7, [pc, #352]	; (2794 <nrfx_usbd_irq_handler+0x198>)
    2632:	f8df c16c 	ldr.w	ip, [pc, #364]	; 27a0 <nrfx_usbd_irq_handler+0x1a4>
            *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7A9;
    2636:	f240 73a9 	movw	r3, #1961	; 0x7a9
    263a:	6013      	str	r3, [r2, #0]
            uii = (uint8_t)(*((volatile uint32_t *)(NRF_USBD_BASE + 0x804)));
    263c:	4b56      	ldr	r3, [pc, #344]	; (2798 <nrfx_usbd_irq_handler+0x19c>)
    263e:	6818      	ldr	r0, [r3, #0]
            if (0 != uii)
    2640:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
                uii &= (uint8_t)(*((volatile uint32_t *)(NRF_USBD_BASE + 0x804)));
    2644:	bf1c      	itt	ne
    2646:	6819      	ldrne	r1, [r3, #0]
    2648:	4008      	andne	r0, r1
            *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7AA;
    264a:	f240 71aa 	movw	r1, #1962	; 0x7aa
    264e:	6011      	str	r1, [r2, #0]
            uoi = (uint8_t)(*((volatile uint32_t *)(NRF_USBD_BASE + 0x804)));
    2650:	6819      	ldr	r1, [r3, #0]
            if (0 != uoi)
    2652:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
                uoi &= (uint8_t)(*((volatile uint32_t *)(NRF_USBD_BASE + 0x804)));
    2656:	bf1c      	itt	ne
    2658:	681a      	ldrne	r2, [r3, #0]
    265a:	4011      	andne	r1, r2
            *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7AB;
    265c:	f240 72ab 	movw	r2, #1963	; 0x7ab
    2660:	603a      	str	r2, [r7, #0]
            usbi = (uint8_t)(*((volatile uint32_t *)(NRF_USBD_BASE + 0x804)));
    2662:	681a      	ldr	r2, [r3, #0]
            if (0 != usbi)
    2664:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    2668:	46be      	mov	lr, r7
                usbi &= (uint8_t)(*((volatile uint32_t *)(NRF_USBD_BASE + 0x804)));
    266a:	bf1c      	itt	ne
    266c:	681f      	ldrne	r7, [r3, #0]
    266e:	403a      	andne	r2, r7
            *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7AC;
    2670:	f240 77ac 	movw	r7, #1964	; 0x7ac
    2674:	f8ce 7000 	str.w	r7, [lr]
            uii &= (uint8_t)*((volatile uint32_t *)(NRF_USBD_BASE + 0x804));
    2678:	681f      	ldr	r7, [r3, #0]
            if (0 != uii)
    267a:	4038      	ands	r0, r7
    267c:	d00a      	beq.n	2694 <nrfx_usbd_irq_handler+0x98>
                m_simulated_dataepstatus |= ((uint32_t)uii) << NRFX_USBD_EPIN_BITPOS_0;
    267e:	f8dc 7000 	ldr.w	r7, [ip]
    2682:	4307      	orrs	r7, r0
    2684:	f8cc 7000 	str.w	r7, [ip]
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7A9;
    2688:	f240 77a9 	movw	r7, #1961	; 0x7a9
    268c:	f8ce 7000 	str.w	r7, [lr]
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x804)) = uii;
    2690:	6018      	str	r0, [r3, #0]
                rb = (uint8_t)*((volatile uint32_t *)(NRF_USBD_BASE + 0x804));
    2692:	6818      	ldr	r0, [r3, #0]
            *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7AD;
    2694:	4f3f      	ldr	r7, [pc, #252]	; (2794 <nrfx_usbd_irq_handler+0x198>)
    2696:	f240 70ad 	movw	r0, #1965	; 0x7ad
    269a:	6038      	str	r0, [r7, #0]
            uoi &= (uint8_t)*((volatile uint32_t *)(NRF_USBD_BASE + 0x804));
    269c:	6818      	ldr	r0, [r3, #0]
            if (0 != uoi)
    269e:	4001      	ands	r1, r0
    26a0:	d00a      	beq.n	26b8 <nrfx_usbd_irq_handler+0xbc>
                m_simulated_dataepstatus |= ((uint32_t)uoi) << NRFX_USBD_EPOUT_BITPOS_0;
    26a2:	f8dc 0000 	ldr.w	r0, [ip]
    26a6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    26aa:	f8cc 0000 	str.w	r0, [ip]
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7AA;
    26ae:	f240 70aa 	movw	r0, #1962	; 0x7aa
    26b2:	6038      	str	r0, [r7, #0]
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x804)) = uoi;
    26b4:	6019      	str	r1, [r3, #0]
                rb = (uint8_t)*((volatile uint32_t *)(NRF_USBD_BASE + 0x804));
    26b6:	6819      	ldr	r1, [r3, #0]
            *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7AE;
    26b8:	4936      	ldr	r1, [pc, #216]	; (2794 <nrfx_usbd_irq_handler+0x198>)
    26ba:	f240 70ae 	movw	r0, #1966	; 0x7ae
    26be:	6008      	str	r0, [r1, #0]
            usbi &= (uint8_t)*((volatile uint32_t *)(NRF_USBD_BASE + 0x804));
    26c0:	6819      	ldr	r1, [r3, #0]
            if (0 != usbi)
    26c2:	400a      	ands	r2, r1
    26c4:	d00d      	beq.n	26e2 <nrfx_usbd_irq_handler+0xe6>
                if (usbi & 0x01)
    26c6:	07d0      	lsls	r0, r2, #31
                    active |= USBD_INTEN_EP0SETUP_Msk;
    26c8:	bf48      	it	mi
    26ca:	f444 0400 	orrmi.w	r4, r4, #8388608	; 0x800000
                if (usbi & 0x10)
    26ce:	06d1      	lsls	r1, r2, #27
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7AB;
    26d0:	4930      	ldr	r1, [pc, #192]	; (2794 <nrfx_usbd_irq_handler+0x198>)
    26d2:	f240 70ab 	movw	r0, #1963	; 0x7ab
    26d6:	6008      	str	r0, [r1, #0]
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x804)) = usbi;
    26d8:	601a      	str	r2, [r3, #0]
                rb = (uint8_t)*((volatile uint32_t *)(NRF_USBD_BASE + 0x804));
    26da:	681b      	ldr	r3, [r3, #0]
                    active |= USBD_INTEN_USBRESET_Msk;
    26dc:	bf48      	it	mi
    26de:	f044 0401 	orrmi.w	r4, r4, #1
            if (0 != (m_simulated_dataepstatus &
    26e2:	f8dc 3000 	ldr.w	r3, [ip]
    26e6:	f033 1201 	bics.w	r2, r3, #65537	; 0x10001
                active |= enabled & NRF_USBD_INT_DATAEP_MASK;
    26ea:	bf1c      	itt	ne
    26ec:	f006 7180 	andne.w	r1, r6, #16777216	; 0x1000000
    26f0:	430c      	orrne	r4, r1
            if (0 != (m_simulated_dataepstatus &
    26f2:	f013 1f01 	tst.w	r3, #65537	; 0x10001
    26f6:	d005      	beq.n	2704 <nrfx_usbd_irq_handler+0x108>
                if (0 != (enabled & NRF_USBD_INT_EP0DATADONE_MASK))
    26f8:	0573      	lsls	r3, r6, #21
                    m_simulated_dataepstatus &=
    26fa:	bf44      	itt	mi
    26fc:	f8cc 2000 	strmi.w	r2, [ip]
                    active |= NRF_USBD_INT_EP0DATADONE_MASK;
    2700:	f444 6480 	orrmi.w	r4, r4, #1024	; 0x400
        m_isr[event_nr]();
    2704:	f8df 809c 	ldr.w	r8, [pc, #156]	; 27a4 <nrfx_usbd_irq_handler+0x1a8>
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
    2708:	f404 0700 	and.w	r7, r4, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
    270c:	f04f 0901 	mov.w	r9, #1
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
    2710:	f424 0400 	bic.w	r4, r4, #8388608	; 0x800000
    while (active)
    2714:	bb14      	cbnz	r4, 275c <nrfx_usbd_irq_handler+0x160>
    usbd_dmareq_process();
    2716:	f7ff f8fb 	bl	1910 <usbd_dmareq_process>
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    271a:	9a01      	ldr	r2, [sp, #4]
    271c:	682b      	ldr	r3, [r5, #0]
    if (setup_active)
    271e:	b377      	cbz	r7, 277e <nrfx_usbd_irq_handler+0x182>
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    2720:	429a      	cmp	r2, r3
    2722:	d027      	beq.n	2774 <nrfx_usbd_irq_handler+0x178>
}
    2724:	f008 fc7a 	bl	b01c <_StackCheckHandler>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
    2728:	fa92 f3a2 	rbit	r3, r2
    return (volatile const uint32_t*)(((uint8_t *)NRF_USBD) + (uint32_t)offset);
    272c:	491b      	ldr	r1, [pc, #108]	; (279c <nrfx_usbd_irq_handler+0x1a0>)
        uint8_t event_nr = __CLZ(__RBIT(to_process));
    272e:	fab3 f383 	clz	r3, r3
}

__STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
    2732:	ea4f 0c83 	mov.w	ip, r3, lsl #2
    2736:	4461      	add	r1, ip
    return (bool)*nrf_usbd_getRegPtr_c((uint32_t)event);
    2738:	f8d1 c000 	ldr.w	ip, [r1]
    if (ret)
    273c:	f1bc 0f00 	cmp.w	ip, #0
    2740:	d007      	beq.n	2752 <nrfx_usbd_irq_handler+0x156>
    *(nrf_usbd_getRegPtr((uint32_t)event)) = 0UL;
    2742:	600f      	str	r7, [r1, #0]
  __ASM volatile ("isb 0xF":::"memory");
    2744:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    2748:	f3bf 8f4f 	dsb	sy
            active |= 1UL << event_nr;
    274c:	fa00 f103 	lsl.w	r1, r0, r3
    2750:	430c      	orrs	r4, r1
        to_process &= ~(1UL << event_nr);
    2752:	fa00 f303 	lsl.w	r3, r0, r3
    2756:	ea22 0203 	bic.w	r2, r2, r3
    275a:	e75b      	b.n	2614 <nrfx_usbd_irq_handler+0x18>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
    275c:	fa94 f6a4 	rbit	r6, r4
        uint8_t event_nr = __CLZ(__RBIT(active));
    2760:	fab6 f686 	clz	r6, r6
        m_isr[event_nr]();
    2764:	f858 3026 	ldr.w	r3, [r8, r6, lsl #2]
        active &= ~(1UL << event_nr);
    2768:	fa09 f606 	lsl.w	r6, r9, r6
        m_isr[event_nr]();
    276c:	4798      	blx	r3
        active &= ~(1UL << event_nr);
    276e:	ea24 0406 	bic.w	r4, r4, r6
    2772:	e7cf      	b.n	2714 <nrfx_usbd_irq_handler+0x118>
}
    2774:	b003      	add	sp, #12
    2776:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    277a:	f7ff bef5 	b.w	2568 <ev_setup_handler>
}
    277e:	429a      	cmp	r2, r3
    2780:	d1d0      	bne.n	2724 <nrfx_usbd_irq_handler+0x128>
    2782:	b003      	add	sp, #12
    2784:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2788:	200036b0 	.word	0x200036b0
    278c:	40027000 	.word	0x40027000
    2790:	20001951 	.word	0x20001951
    2794:	40027800 	.word	0x40027800
    2798:	40027804 	.word	0x40027804
    279c:	40027100 	.word	0x40027100
    27a0:	2000020c 	.word	0x2000020c
    27a4:	0000b6ec 	.word	0x0000b6ec

000027a8 <usbd_ep_abort_all>:
{
    27a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    27ac:	4e16      	ldr	r6, [pc, #88]	; (2808 <usbd_ep_abort_all+0x60>)
    27ae:	4917      	ldr	r1, [pc, #92]	; (280c <usbd_ep_abort_all+0x64>)
    27b0:	6834      	ldr	r4, [r6, #0]
{
    27b2:	4f17      	ldr	r7, [pc, #92]	; (2810 <usbd_ep_abort_all+0x68>)
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    27b4:	6809      	ldr	r1, [r1, #0]
{
    27b6:	683b      	ldr	r3, [r7, #0]
    27b8:	9301      	str	r3, [sp, #4]
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    27ba:	0c24      	lsrs	r4, r4, #16
    27bc:	0424      	lsls	r4, r4, #16
    27be:	430c      	orrs	r4, r1
        ep_waiting &= ~(1U << bitpos);
    27c0:	f04f 0801 	mov.w	r8, #1
    while (0 != ep_waiting)
    27c4:	b944      	cbnz	r4, 27d8 <usbd_ep_abort_all+0x30>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    27c6:	f240 13ff 	movw	r3, #511	; 0x1ff
}
    27ca:	9a01      	ldr	r2, [sp, #4]
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    27cc:	6033      	str	r3, [r6, #0]
}
    27ce:	683b      	ldr	r3, [r7, #0]
    27d0:	429a      	cmp	r2, r3
    27d2:	d015      	beq.n	2800 <usbd_ep_abort_all+0x58>
    27d4:	f008 fc22 	bl	b01c <_StackCheckHandler>
    27d8:	fa94 f5a4 	rbit	r5, r4
        uint8_t bitpos = __CLZ(__RBIT(ep_waiting));
    27dc:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    27e0:	2d0f      	cmp	r5, #15
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    27e2:	bfc6      	itte	gt
    27e4:	f1a5 0010 	subgt.w	r0, r5, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    27e8:	b2c0      	uxtbgt	r0, r0
    27ea:	f045 0080 	orrle.w	r0, r5, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
    27ee:	0703      	lsls	r3, r0, #28
    27f0:	d401      	bmi.n	27f6 <usbd_ep_abort_all+0x4e>
            usbd_ep_abort(bit2ep(bitpos));
    27f2:	f7ff fe31 	bl	2458 <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
    27f6:	fa08 f505 	lsl.w	r5, r8, r5
    27fa:	ea24 0405 	bic.w	r4, r4, r5
    27fe:	e7e1      	b.n	27c4 <usbd_ep_abort_all+0x1c>
}
    2800:	b002      	add	sp, #8
    2802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2806:	bf00      	nop
    2808:	200000e4 	.word	0x200000e4
    280c:	20000074 	.word	0x20000074
    2810:	200036b0 	.word	0x200036b0

00002814 <nrfx_usbd_stop>:
{
    2814:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2816:	4c12      	ldr	r4, [pc, #72]	; (2860 <nrfx_usbd_stop+0x4c>)
    2818:	6823      	ldr	r3, [r4, #0]
    281a:	9301      	str	r3, [sp, #4]
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    281c:	4b11      	ldr	r3, [pc, #68]	; (2864 <nrfx_usbd_stop+0x50>)
    281e:	2280      	movs	r2, #128	; 0x80
    2820:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
    2824:	2027      	movs	r0, #39	; 0x27
    2826:	f004 fec1 	bl	75ac <z_arch_irq_is_enabled>
    282a:	b180      	cbz	r0, 284e <nrfx_usbd_stop+0x3a>
    NRF_USBD->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
    282c:	4d0e      	ldr	r5, [pc, #56]	; (2868 <nrfx_usbd_stop+0x54>)
        usbd_ep_abort_all();
    282e:	f7ff ffbb 	bl	27a8 <usbd_ep_abort_all>
    2832:	2300      	movs	r3, #0
    2834:	f8c5 3504 	str.w	r3, [r5, #1284]	; 0x504
  __ASM volatile ("isb 0xF":::"memory");
    2838:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    283c:	f3bf 8f4f 	dsb	sy
        NRFX_IRQ_DISABLE(USBD_IRQn);
    2840:	2027      	movs	r0, #39	; 0x27
    2842:	f004 fe91 	bl	7568 <z_arch_irq_disable>
    NRF_USBD->INTENCLR = int_mask;
    2846:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    284a:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
}
    284e:	9a01      	ldr	r2, [sp, #4]
    2850:	6823      	ldr	r3, [r4, #0]
    2852:	429a      	cmp	r2, r3
    2854:	d001      	beq.n	285a <nrfx_usbd_stop+0x46>
    2856:	f008 fbe1 	bl	b01c <_StackCheckHandler>
    285a:	b003      	add	sp, #12
    285c:	bd30      	pop	{r4, r5, pc}
    285e:	bf00      	nop
    2860:	200036b0 	.word	0x200036b0
    2864:	e000e100 	.word	0xe000e100
    2868:	40027000 	.word	0x40027000

0000286c <nrfx_usbd_disable>:
{
    286c:	b513      	push	{r0, r1, r4, lr}
    286e:	4c0f      	ldr	r4, [pc, #60]	; (28ac <nrfx_usbd_disable+0x40>)
    2870:	6823      	ldr	r3, [r4, #0]
    2872:	9301      	str	r3, [sp, #4]
    nrfx_usbd_stop();
    2874:	f7ff ffce 	bl	2814 <nrfx_usbd_stop>
    return NRF_USBD->INTENSET;
    2878:	4b0d      	ldr	r3, [pc, #52]	; (28b0 <nrfx_usbd_disable+0x44>)
    287a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    NRF_USBD->INTENCLR = int_mask;
    287e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NRF_USBD->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    2882:	2200      	movs	r2, #0
    2884:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("isb 0xF":::"memory");
    2888:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    288c:	f3bf 8f4f 	dsb	sy
    usbd_dma_pending_clear();
    2890:	f7fe fd82 	bl	1398 <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    2894:	4b07      	ldr	r3, [pc, #28]	; (28b4 <nrfx_usbd_disable+0x48>)
    2896:	2201      	movs	r2, #1
    2898:	701a      	strb	r2, [r3, #0]
}
    289a:	9a01      	ldr	r2, [sp, #4]
    289c:	6823      	ldr	r3, [r4, #0]
    289e:	429a      	cmp	r2, r3
    28a0:	d001      	beq.n	28a6 <nrfx_usbd_disable+0x3a>
    28a2:	f008 fbbb 	bl	b01c <_StackCheckHandler>
    28a6:	b002      	add	sp, #8
    28a8:	bd10      	pop	{r4, pc}
    28aa:	bf00      	nop
    28ac:	200036b0 	.word	0x200036b0
    28b0:	40027000 	.word	0x40027000
    28b4:	20001952 	.word	0x20001952

000028b8 <nrfx_usbd_suspend>:
{
    28b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    28ba:	4c18      	ldr	r4, [pc, #96]	; (291c <nrfx_usbd_suspend+0x64>)
    28bc:	6822      	ldr	r2, [r4, #0]
    28be:	9201      	str	r2, [sp, #4]
	__asm__ volatile(
    28c0:	f04f 0220 	mov.w	r2, #32
    28c4:	f3ef 8611 	mrs	r6, BASEPRI
    28c8:	f382 8811 	msr	BASEPRI, r2
    28cc:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
    28d0:	4a13      	ldr	r2, [pc, #76]	; (2920 <nrfx_usbd_suspend+0x68>)
    28d2:	7812      	ldrb	r2, [r2, #0]
    28d4:	f002 05ff 	and.w	r5, r2, #255	; 0xff
    28d8:	b95a      	cbnz	r2, 28f2 <nrfx_usbd_suspend+0x3a>
    bool suspended = false;
    28da:	2500      	movs	r5, #0
	__asm__ volatile(
    28dc:	f386 8811 	msr	BASEPRI, r6
    28e0:	f3bf 8f6f 	isb	sy
}
    28e4:	9a01      	ldr	r2, [sp, #4]
    28e6:	6823      	ldr	r3, [r4, #0]
    28e8:	429a      	cmp	r2, r3
    28ea:	4628      	mov	r0, r5
    28ec:	d014      	beq.n	2918 <nrfx_usbd_suspend+0x60>
    28ee:	f008 fb95 	bl	b01c <_StackCheckHandler>
        usbd_ep_abort_all();
    28f2:	f7ff ff59 	bl	27a8 <usbd_ep_abort_all>
    return NRF_USBD->EVENTCAUSE;
    28f6:	4a0b      	ldr	r2, [pc, #44]	; (2924 <nrfx_usbd_suspend+0x6c>)
    28f8:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get() & NRF_USBD_EVENTCAUSE_RESUME_MASK))
    28fc:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    2900:	d1eb      	bne.n	28da <nrfx_usbd_suspend+0x22>
    NRF_USBD->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
    2902:	2101      	movs	r1, #1
    2904:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
    return NRF_USBD->EVENTCAUSE;
    2908:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
            if (nrf_usbd_eventcause_get() & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    290c:	0589      	lsls	r1, r1, #22
    NRF_USBD->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
    290e:	bf44      	itt	mi
    2910:	f8c2 352c 	strmi.w	r3, [r2, #1324]	; 0x52c
    bool suspended = false;
    2914:	461d      	movmi	r5, r3
    2916:	e7e1      	b.n	28dc <nrfx_usbd_suspend+0x24>
}
    2918:	b002      	add	sp, #8
    291a:	bd70      	pop	{r4, r5, r6, pc}
    291c:	200036b0 	.word	0x200036b0
    2920:	20001950 	.word	0x20001950
    2924:	40027000 	.word	0x40027000

00002928 <nrfx_usbd_ep_enable>:
{
    2928:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    292c:	4f2c      	ldr	r7, [pc, #176]	; (29e0 <nrfx_usbd_ep_enable+0xb8>)
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    292e:	4a2d      	ldr	r2, [pc, #180]	; (29e4 <nrfx_usbd_ep_enable+0xbc>)
{
    2930:	683b      	ldr	r3, [r7, #0]
    2932:	9301      	str	r3, [sp, #4]
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    2934:	4b2c      	ldr	r3, [pc, #176]	; (29e8 <nrfx_usbd_ep_enable+0xc0>)
    NRF_USBD->INTENSET = int_mask;
    2936:	4e2d      	ldr	r6, [pc, #180]	; (29ec <nrfx_usbd_ep_enable+0xc4>)
    2938:	fa4f f880 	sxtb.w	r8, r0
    293c:	ea13 0328 	ands.w	r3, r3, r8, asr #32
    2940:	bf38      	it	cc
    2942:	4613      	movcc	r3, r2
    2944:	f000 090f 	and.w	r9, r0, #15
    2948:	2401      	movs	r4, #1
    294a:	f813 3009 	ldrb.w	r3, [r3, r9]
    294e:	fa04 f303 	lsl.w	r3, r4, r3
    2952:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
{
    2956:	4605      	mov	r5, r0
    if (nrf_usbd_ep_enable_check(ep))
    2958:	f7fe fc4a 	bl	11f0 <nrf_usbd_ep_enable_check>
    295c:	2800      	cmp	r0, #0
    295e:	d135      	bne.n	29cc <nrfx_usbd_ep_enable+0xa4>
    if (NRF_USBD_EPIN_CHECK(ep))
    2960:	f1b8 0f00 	cmp.w	r8, #0
        NRF_USBD->EPINEN |= 1UL << epnr;
    2964:	bfb4      	ite	lt
    2966:	f8d6 3510 	ldrlt.w	r3, [r6, #1296]	; 0x510
        NRF_USBD->EPOUTEN |= 1UL << epnr;
    296a:	f8d6 3514 	ldrge.w	r3, [r6, #1300]	; 0x514
    296e:	fa04 f409 	lsl.w	r4, r4, r9
        NRF_USBD->EPINEN |= 1UL << epnr;
    2972:	bfb5      	itete	lt
    2974:	431c      	orrlt	r4, r3
        NRF_USBD->EPOUTEN |= 1UL << epnr;
    2976:	431c      	orrge	r4, r3
        NRF_USBD->EPINEN |= 1UL << epnr;
    2978:	f8c6 4510 	strlt.w	r4, [r6, #1296]	; 0x510
        NRF_USBD->EPOUTEN |= 1UL << epnr;
    297c:	f8c6 4514 	strge.w	r4, [r6, #1300]	; 0x514
  __ASM volatile ("isb 0xF":::"memory");
    2980:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    2984:	f3bf 8f4f 	dsb	sy
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
    2988:	f1b9 0f00 	cmp.w	r9, #0
    298c:	d01e      	beq.n	29cc <nrfx_usbd_ep_enable+0xa4>
    298e:	f1b8 0f00 	cmp.w	r8, #0
    2992:	db1b      	blt.n	29cc <nrfx_usbd_ep_enable+0xa4>
        NRF_USBD_EPOUT_CHECK(ep) &&
    2994:	072b      	lsls	r3, r5, #28
    2996:	d419      	bmi.n	29cc <nrfx_usbd_ep_enable+0xa4>
	__asm__ volatile(
    2998:	f04f 0320 	mov.w	r3, #32
    299c:	f3ef 8411 	mrs	r4, BASEPRI
    29a0:	f383 8811 	msr	BASEPRI, r3
    29a4:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
    29a8:	4628      	mov	r0, r5
    29aa:	f7ff fcfb 	bl	23a4 <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    29ae:	4628      	mov	r0, r5
    29b0:	f7fe fcda 	bl	1368 <ep2bit>
    29b4:	4a0e      	ldr	r2, [pc, #56]	; (29f0 <nrfx_usbd_ep_enable+0xc8>)
    29b6:	2301      	movs	r3, #1
    29b8:	fa03 f000 	lsl.w	r0, r3, r0
    29bc:	6813      	ldr	r3, [r2, #0]
    29be:	ea23 0300 	bic.w	r3, r3, r0
    29c2:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    29c4:	f384 8811 	msr	BASEPRI, r4
    29c8:	f3bf 8f6f 	isb	sy
}
    29cc:	9a01      	ldr	r2, [sp, #4]
    29ce:	683b      	ldr	r3, [r7, #0]
    29d0:	429a      	cmp	r2, r3
    29d2:	d001      	beq.n	29d8 <nrfx_usbd_ep_enable+0xb0>
    29d4:	f008 fb22 	bl	b01c <_StackCheckHandler>
    29d8:	b003      	add	sp, #12
    29da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    29de:	bf00      	nop
    29e0:	200036b0 	.word	0x200036b0
    29e4:	0000b8a2 	.word	0x0000b8a2
    29e8:	0000b899 	.word	0x0000b899
    29ec:	40027000 	.word	0x40027000
    29f0:	20000074 	.word	0x20000074

000029f4 <nrfx_usbd_ep_stall_clear>:
{
    29f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    29f6:	4c10      	ldr	r4, [pc, #64]	; (2a38 <nrfx_usbd_ep_stall_clear+0x44>)
    29f8:	6822      	ldr	r2, [r4, #0]
    29fa:	9201      	str	r2, [sp, #4]
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    29fc:	0602      	lsls	r2, r0, #24
{
    29fe:	4605      	mov	r5, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    2a00:	d40a      	bmi.n	2a18 <nrfx_usbd_ep_stall_clear+0x24>
    if (NRF_USBD_EPISO_CHECK(ep))
    2a02:	0703      	lsls	r3, r0, #28
    2a04:	d408      	bmi.n	2a18 <nrfx_usbd_ep_stall_clear+0x24>
        return NRF_USBD->HALTED.EPOUT[epnr];
    2a06:	f000 020f 	and.w	r2, r0, #15
    2a0a:	0092      	lsls	r2, r2, #2
    2a0c:	4b0b      	ldr	r3, [pc, #44]	; (2a3c <nrfx_usbd_ep_stall_clear+0x48>)
    2a0e:	589b      	ldr	r3, [r3, r2]
    2a10:	2b01      	cmp	r3, #1
    2a12:	d101      	bne.n	2a18 <nrfx_usbd_ep_stall_clear+0x24>
        nrfx_usbd_transfer_out_drop(ep);
    2a14:	f7ff fcc6 	bl	23a4 <nrfx_usbd_transfer_out_drop>
    NRF_USBD->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
    2a18:	4b09      	ldr	r3, [pc, #36]	; (2a40 <nrfx_usbd_ep_stall_clear+0x4c>)
    2a1a:	f8c3 5518 	str.w	r5, [r3, #1304]	; 0x518
  __ASM volatile ("isb 0xF":::"memory");
    2a1e:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    2a22:	f3bf 8f4f 	dsb	sy
}
    2a26:	9a01      	ldr	r2, [sp, #4]
    2a28:	6823      	ldr	r3, [r4, #0]
    2a2a:	429a      	cmp	r2, r3
    2a2c:	d001      	beq.n	2a32 <nrfx_usbd_ep_stall_clear+0x3e>
    2a2e:	f008 faf5 	bl	b01c <_StackCheckHandler>
    2a32:	b003      	add	sp, #12
    2a34:	bd30      	pop	{r4, r5, pc}
    2a36:	bf00      	nop
    2a38:	200036b0 	.word	0x200036b0
    2a3c:	40027444 	.word	0x40027444
    2a40:	40027000 	.word	0x40027000

00002a44 <log_list_init>:
 */

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
    2a44:	b507      	push	{r0, r1, r2, lr}
    2a46:	4b07      	ldr	r3, [pc, #28]	; (2a64 <log_list_init+0x20>)
    2a48:	681a      	ldr	r2, [r3, #0]
    2a4a:	9201      	str	r2, [sp, #4]
	list->tail = NULL;
    2a4c:	2200      	movs	r2, #0
	list->head = NULL;
    2a4e:	e9c0 2200 	strd	r2, r2, [r0]
}
    2a52:	9a01      	ldr	r2, [sp, #4]
    2a54:	681b      	ldr	r3, [r3, #0]
    2a56:	429a      	cmp	r2, r3
    2a58:	d001      	beq.n	2a5e <log_list_init+0x1a>
    2a5a:	f008 fadf 	bl	b01c <_StackCheckHandler>
    2a5e:	b003      	add	sp, #12
    2a60:	f85d fb04 	ldr.w	pc, [sp], #4
    2a64:	200036b0 	.word	0x200036b0

00002a68 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
    2a68:	b507      	push	{r0, r1, r2, lr}
    2a6a:	4b0a      	ldr	r3, [pc, #40]	; (2a94 <log_list_add_tail+0x2c>)
    2a6c:	681a      	ldr	r2, [r3, #0]
    2a6e:	9201      	str	r2, [sp, #4]
	if (list->head == NULL) {
    2a70:	6802      	ldr	r2, [r0, #0]
    2a72:	b94a      	cbnz	r2, 2a88 <log_list_add_tail+0x20>
		list->head = msg;
    2a74:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
    2a76:	2200      	movs	r2, #0
	list->tail = msg;
    2a78:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
    2a7a:	600a      	str	r2, [r1, #0]
}
    2a7c:	9a01      	ldr	r2, [sp, #4]
    2a7e:	681b      	ldr	r3, [r3, #0]
    2a80:	429a      	cmp	r2, r3
    2a82:	d004      	beq.n	2a8e <log_list_add_tail+0x26>
    2a84:	f008 faca 	bl	b01c <_StackCheckHandler>
		list->tail->next = msg;
    2a88:	6842      	ldr	r2, [r0, #4]
    2a8a:	6011      	str	r1, [r2, #0]
    2a8c:	e7f3      	b.n	2a76 <log_list_add_tail+0xe>
}
    2a8e:	b003      	add	sp, #12
    2a90:	f85d fb04 	ldr.w	pc, [sp], #4
    2a94:	200036b0 	.word	0x200036b0

00002a98 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
    2a98:	b507      	push	{r0, r1, r2, lr}
    2a9a:	4b06      	ldr	r3, [pc, #24]	; (2ab4 <log_list_head_peek+0x1c>)
	return list->head;
}
    2a9c:	6800      	ldr	r0, [r0, #0]
{
    2a9e:	681a      	ldr	r2, [r3, #0]
    2aa0:	9201      	str	r2, [sp, #4]
}
    2aa2:	9a01      	ldr	r2, [sp, #4]
    2aa4:	681b      	ldr	r3, [r3, #0]
    2aa6:	429a      	cmp	r2, r3
    2aa8:	d001      	beq.n	2aae <log_list_head_peek+0x16>
    2aaa:	f008 fab7 	bl	b01c <_StackCheckHandler>
    2aae:	b003      	add	sp, #12
    2ab0:	f85d fb04 	ldr.w	pc, [sp], #4
    2ab4:	200036b0 	.word	0x200036b0

00002ab8 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
    2ab8:	b507      	push	{r0, r1, r2, lr}
    2aba:	4b08      	ldr	r3, [pc, #32]	; (2adc <log_list_head_get+0x24>)
    2abc:	681a      	ldr	r2, [r3, #0]
    2abe:	9201      	str	r2, [sp, #4]
	struct log_msg *msg = list->head;
    2ac0:	6802      	ldr	r2, [r0, #0]

	if (list->head != NULL) {
    2ac2:	b10a      	cbz	r2, 2ac8 <log_list_head_get+0x10>
		list->head = list->head->next;
    2ac4:	6811      	ldr	r1, [r2, #0]
    2ac6:	6001      	str	r1, [r0, #0]
	}

	return msg;
}
    2ac8:	4610      	mov	r0, r2
    2aca:	9a01      	ldr	r2, [sp, #4]
    2acc:	681b      	ldr	r3, [r3, #0]
    2ace:	429a      	cmp	r2, r3
    2ad0:	d001      	beq.n	2ad6 <log_list_head_get+0x1e>
    2ad2:	f008 faa3 	bl	b01c <_StackCheckHandler>
    2ad6:	b003      	add	sp, #12
    2ad8:	f85d fb04 	ldr.w	pc, [sp], #4
    2adc:	200036b0 	.word	0x200036b0

00002ae0 <dummy_timestamp>:

static u32_t dummy_timestamp(void);
static timestamp_get_t timestamp_func = dummy_timestamp;

static u32_t dummy_timestamp(void)
{
    2ae0:	b507      	push	{r0, r1, r2, lr}
    2ae2:	4b07      	ldr	r3, [pc, #28]	; (2b00 <dummy_timestamp+0x20>)
    2ae4:	681a      	ldr	r2, [r3, #0]
    2ae6:	9201      	str	r2, [sp, #4]
	return 0;
}
    2ae8:	9a01      	ldr	r2, [sp, #4]
    2aea:	681b      	ldr	r3, [r3, #0]
    2aec:	429a      	cmp	r2, r3
    2aee:	f04f 0000 	mov.w	r0, #0
    2af2:	d001      	beq.n	2af8 <dummy_timestamp+0x18>
    2af4:	f008 fa92 	bl	b01c <_StackCheckHandler>
    2af8:	b003      	add	sp, #12
    2afa:	f85d fb04 	ldr.w	pc, [sp], #4
    2afe:	bf00      	nop
    2b00:	200036b0 	.word	0x200036b0

00002b04 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
    2b04:	b513      	push	{r0, r1, r4, lr}
    2b06:	4c0d      	ldr	r4, [pc, #52]	; (2b3c <z_log_msg_std_alloc+0x38>)
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg, K_NO_WAIT);
    2b08:	480d      	ldr	r0, [pc, #52]	; (2b40 <z_log_msg_std_alloc+0x3c>)
{
    2b0a:	6823      	ldr	r3, [r4, #0]
    2b0c:	9301      	str	r3, [sp, #4]
	union log_msg_chunk *msg = NULL;
    2b0e:	2200      	movs	r2, #0
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg, K_NO_WAIT);
    2b10:	4669      	mov	r1, sp
	union log_msg_chunk *msg = NULL;
    2b12:	9200      	str	r2, [sp, #0]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg, K_NO_WAIT);
    2b14:	f006 fedc 	bl	98d0 <k_mem_slab_alloc>
	if (err != 0) {
    2b18:	b110      	cbz	r0, 2b20 <z_log_msg_std_alloc+0x1c>
		msg = log_msg_no_space_handle();
    2b1a:	f000 fb9d 	bl	3258 <log_msg_no_space_handle>
    2b1e:	9000      	str	r0, [sp, #0]
	return msg;
    2b20:	9800      	ldr	r0, [sp, #0]
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();

	if (msg != NULL) {
    2b22:	b118      	cbz	r0, 2b2c <z_log_msg_std_alloc+0x28>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
    2b24:	2301      	movs	r3, #1
    2b26:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    2b28:	2300      	movs	r3, #0
    2b2a:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
    2b2c:	9a01      	ldr	r2, [sp, #4]
    2b2e:	6823      	ldr	r3, [r4, #0]
    2b30:	429a      	cmp	r2, r3
    2b32:	d001      	beq.n	2b38 <z_log_msg_std_alloc+0x34>
    2b34:	f008 fa72 	bl	b01c <_StackCheckHandler>
    2b38:	b002      	add	sp, #8
    2b3a:	bd10      	pop	{r4, pc}
    2b3c:	200036b0 	.word	0x200036b0
    2b40:	200002f0 	.word	0x200002f0

00002b44 <timestamp_get>:
		}
	}
}

static u32_t timestamp_get(void)
{
    2b44:	b507      	push	{r0, r1, r2, lr}
    2b46:	4b07      	ldr	r3, [pc, #28]	; (2b64 <timestamp_get+0x20>)
    2b48:	681a      	ldr	r2, [r3, #0]
    2b4a:	9201      	str	r2, [sp, #4]
	if (CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC > 1000000) {
		return k_uptime_get_32();
	} else {
		return k_cycle_get_32();
    2b4c:	9a01      	ldr	r2, [sp, #4]
    2b4e:	681b      	ldr	r3, [r3, #0]
    2b50:	429a      	cmp	r2, r3
    2b52:	d001      	beq.n	2b58 <timestamp_get+0x14>
    2b54:	f008 fa62 	bl	b01c <_StackCheckHandler>
	}
}
    2b58:	b003      	add	sp, #12
    2b5a:	f85d eb04 	ldr.w	lr, [sp], #4
		return k_cycle_get_32();
    2b5e:	f004 ba93 	b.w	7088 <z_timer_cycle_get_32>
    2b62:	bf00      	nop
    2b64:	200036b0 	.word	0x200036b0

00002b68 <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
    2b68:	b530      	push	{r4, r5, lr}
    2b6a:	4d10      	ldr	r5, [pc, #64]	; (2bac <enable_logger+0x44>)
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
    2b6c:	4910      	ldr	r1, [pc, #64]	; (2bb0 <enable_logger+0x48>)
    2b6e:	682b      	ldr	r3, [r5, #0]
    2b70:	4810      	ldr	r0, [pc, #64]	; (2bb4 <enable_logger+0x4c>)
    2b72:	b089      	sub	sp, #36	; 0x24
    2b74:	2400      	movs	r4, #0
    2b76:	9307      	str	r3, [sp, #28]
    2b78:	230e      	movs	r3, #14
    2b7a:	f44f 7240 	mov.w	r2, #768	; 0x300
    2b7e:	e9cd 4302 	strd	r4, r3, [sp, #8]
    2b82:	e9cd 4404 	strd	r4, r4, [sp, #16]
    2b86:	4b0c      	ldr	r3, [pc, #48]	; (2bb8 <enable_logger+0x50>)
    2b88:	e9cd 4400 	strd	r4, r4, [sp]
    2b8c:	f008 f932 	bl	adf4 <z_impl_k_thread_create>
K_SYSCALL_DECLARE2(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, int, k_tid_t, thread_id, const char *, value)
    2b90:	490a      	ldr	r1, [pc, #40]	; (2bbc <enable_logger+0x54>)
    2b92:	4808      	ldr	r0, [pc, #32]	; (2bb4 <enable_logger+0x4c>)
    2b94:	f008 f8c2 	bl	ad1c <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    2b98:	9a07      	ldr	r2, [sp, #28]
    2b9a:	682b      	ldr	r3, [r5, #0]
    2b9c:	429a      	cmp	r2, r3
    2b9e:	4620      	mov	r0, r4
    2ba0:	d001      	beq.n	2ba6 <enable_logger+0x3e>
    2ba2:	f008 fa3b 	bl	b01c <_StackCheckHandler>
    2ba6:	b009      	add	sp, #36	; 0x24
    2ba8:	bd30      	pop	{r4, r5, pc}
    2baa:	bf00      	nop
    2bac:	200036b0 	.word	0x200036b0
    2bb0:	20001bd0 	.word	0x20001bd0
    2bb4:	20000280 	.word	0x20000280
    2bb8:	00003069 	.word	0x00003069
    2bbc:	0000b8ab 	.word	0x0000b8ab

00002bc0 <log_core_init>:
{
    2bc0:	b513      	push	{r0, r1, r4, lr}
    2bc2:	4c0f      	ldr	r4, [pc, #60]	; (2c00 <log_core_init+0x40>)
    2bc4:	6823      	ldr	r3, [r4, #0]
    2bc6:	9301      	str	r3, [sp, #4]
		log_msg_pool_init();
    2bc8:	f000 fb10 	bl	31ec <log_msg_pool_init>
		log_list_init(&list);
    2bcc:	480d      	ldr	r0, [pc, #52]	; (2c04 <log_core_init+0x44>)
    2bce:	f7ff ff39 	bl	2a44 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    2bd2:	2304      	movs	r3, #4
    2bd4:	2228      	movs	r2, #40	; 0x28
    2bd6:	490c      	ldr	r1, [pc, #48]	; (2c08 <log_core_init+0x48>)
    2bd8:	480c      	ldr	r0, [pc, #48]	; (2c0c <log_core_init+0x4c>)
    2bda:	f006 fe5b 	bl	9894 <k_mem_slab_init>
	timestamp_func = timestamp_get;
    2bde:	4b0c      	ldr	r3, [pc, #48]	; (2c10 <log_core_init+0x50>)
    2be0:	4a0c      	ldr	r2, [pc, #48]	; (2c14 <log_core_init+0x54>)
    2be2:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    2be4:	9a01      	ldr	r2, [sp, #4]
    2be6:	6823      	ldr	r3, [r4, #0]
    2be8:	429a      	cmp	r2, r3
    2bea:	d001      	beq.n	2bf0 <log_core_init+0x30>
    2bec:	f008 fa16 	bl	b01c <_StackCheckHandler>
    2bf0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
    2bf4:	b002      	add	sp, #8
    2bf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_timestamp_freq_set(freq);
    2bfa:	f000 bfe3 	b.w	3bc4 <log_output_timestamp_freq_set>
    2bfe:	bf00      	nop
    2c00:	200036b0 	.word	0x200036b0
    2c04:	2000025c 	.word	0x2000025c
    2c08:	20003210 	.word	0x20003210
    2c0c:	20000264 	.word	0x20000264
    2c10:	200036bc 	.word	0x200036bc
    2c14:	00002b45 	.word	0x00002b45

00002c18 <dropped_notify>:
{
    2c18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    2c1c:	4e15      	ldr	r6, [pc, #84]	; (2c74 <dropped_notify+0x5c>)
    2c1e:	6832      	ldr	r2, [r6, #0]
    2c20:	9201      	str	r2, [sp, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2c22:	4a15      	ldr	r2, [pc, #84]	; (2c78 <dropped_notify+0x60>)
    2c24:	f3bf 8f5b 	dmb	ish
    2c28:	2500      	movs	r5, #0
    2c2a:	e852 7f00 	ldrex	r7, [r2]
    2c2e:	e842 5300 	strex	r3, r5, [r2]
    2c32:	2b00      	cmp	r3, #0
    2c34:	d1f9      	bne.n	2c2a <dropped_notify+0x12>
    2c36:	f3bf 8f5b 	dmb	ish
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    2c3a:	4c10      	ldr	r4, [pc, #64]	; (2c7c <dropped_notify+0x64>)
    2c3c:	4a10      	ldr	r2, [pc, #64]	; (2c80 <dropped_notify+0x68>)
    2c3e:	1b12      	subs	r2, r2, r4
    2c40:	ea4f 1822 	mov.w	r8, r2, asr #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    2c44:	4545      	cmp	r5, r8
    2c46:	db05      	blt.n	2c54 <dropped_notify+0x3c>
}
    2c48:	9a01      	ldr	r2, [sp, #4]
    2c4a:	6833      	ldr	r3, [r6, #0]
    2c4c:	429a      	cmp	r2, r3
    2c4e:	d00d      	beq.n	2c6c <dropped_notify+0x54>
    2c50:	f008 f9e4 	bl	b01c <_StackCheckHandler>
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    2c54:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    2c56:	795b      	ldrb	r3, [r3, #5]
    2c58:	b12b      	cbz	r3, 2c66 <dropped_notify+0x4e>
	if (backend->api->dropped != NULL) {
    2c5a:	6823      	ldr	r3, [r4, #0]
    2c5c:	68db      	ldr	r3, [r3, #12]
    2c5e:	b113      	cbz	r3, 2c66 <dropped_notify+0x4e>
		backend->api->dropped(backend, cnt);
    2c60:	4639      	mov	r1, r7
    2c62:	4620      	mov	r0, r4
    2c64:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    2c66:	3501      	adds	r5, #1
    2c68:	3410      	adds	r4, #16
    2c6a:	e7eb      	b.n	2c44 <dropped_notify+0x2c>
}
    2c6c:	b002      	add	sp, #8
    2c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2c72:	bf00      	nop
    2c74:	200036b0 	.word	0x200036b0
    2c78:	20000254 	.word	0x20000254
    2c7c:	0000b684 	.word	0x0000b684
    2c80:	0000b694 	.word	0x0000b694

00002c84 <z_impl_log_process>:
{
    2c84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    2c88:	4b29      	ldr	r3, [pc, #164]	; (2d30 <z_impl_log_process+0xac>)
    2c8a:	681a      	ldr	r2, [r3, #0]
    2c8c:	9201      	str	r2, [sp, #4]
	if (!backend_attached && !bypass) {
    2c8e:	4a29      	ldr	r2, [pc, #164]	; (2d34 <z_impl_log_process+0xb0>)
    2c90:	7812      	ldrb	r2, [r2, #0]
{
    2c92:	4605      	mov	r5, r0
    2c94:	4698      	mov	r8, r3
	if (!backend_attached && !bypass) {
    2c96:	b902      	cbnz	r2, 2c9a <z_impl_log_process+0x16>
    2c98:	b360      	cbz	r0, 2cf4 <z_impl_log_process+0x70>
	__asm__ volatile(
    2c9a:	f04f 0320 	mov.w	r3, #32
    2c9e:	f3ef 8411 	mrs	r4, BASEPRI
    2ca2:	f383 8811 	msr	BASEPRI, r3
    2ca6:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    2caa:	4823      	ldr	r0, [pc, #140]	; (2d38 <z_impl_log_process+0xb4>)
    2cac:	f7ff ff04 	bl	2ab8 <log_list_head_get>
    2cb0:	4681      	mov	r9, r0
	__asm__ volatile(
    2cb2:	f384 8811 	msr	BASEPRI, r4
    2cb6:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    2cba:	b178      	cbz	r0, 2cdc <z_impl_log_process+0x58>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2cbc:	f3bf 8f5b 	dmb	ish
    2cc0:	4b1e      	ldr	r3, [pc, #120]	; (2d3c <z_impl_log_process+0xb8>)
    2cc2:	e853 2f00 	ldrex	r2, [r3]
    2cc6:	3a01      	subs	r2, #1
    2cc8:	e843 2100 	strex	r1, r2, [r3]
    2ccc:	2900      	cmp	r1, #0
    2cce:	d1f8      	bne.n	2cc2 <z_impl_log_process+0x3e>
    2cd0:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    2cd4:	b1b5      	cbz	r5, 2d04 <z_impl_log_process+0x80>
	log_msg_put(msg);
    2cd6:	4648      	mov	r0, r9
    2cd8:	f000 fb5c 	bl	3394 <log_msg_put>
	if (!bypass && dropped_cnt) {
    2cdc:	b925      	cbnz	r5, 2ce8 <z_impl_log_process+0x64>
    2cde:	4b18      	ldr	r3, [pc, #96]	; (2d40 <z_impl_log_process+0xbc>)
    2ce0:	681b      	ldr	r3, [r3, #0]
    2ce2:	b10b      	cbz	r3, 2ce8 <z_impl_log_process+0x64>
		dropped_notify();
    2ce4:	f7ff ff98 	bl	2c18 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    2ce8:	4813      	ldr	r0, [pc, #76]	; (2d38 <z_impl_log_process+0xb4>)
    2cea:	f7ff fed5 	bl	2a98 <log_list_head_peek>
    2cee:	1c05      	adds	r5, r0, #0
    2cf0:	bf18      	it	ne
    2cf2:	2501      	movne	r5, #1
}
    2cf4:	9a01      	ldr	r2, [sp, #4]
    2cf6:	f8d8 3000 	ldr.w	r3, [r8]
    2cfa:	429a      	cmp	r2, r3
    2cfc:	4628      	mov	r0, r5
    2cfe:	d013      	beq.n	2d28 <z_impl_log_process+0xa4>
    2d00:	f008 f98c 	bl	b01c <_StackCheckHandler>
	return __log_backends_end - __log_backends_start;
    2d04:	4c0f      	ldr	r4, [pc, #60]	; (2d44 <z_impl_log_process+0xc0>)
    2d06:	4e10      	ldr	r6, [pc, #64]	; (2d48 <z_impl_log_process+0xc4>)
    2d08:	1b36      	subs	r6, r6, r4
    2d0a:	1136      	asrs	r6, r6, #4
		for (int i = 0; i < log_backend_count_get(); i++) {
    2d0c:	462f      	mov	r7, r5
    2d0e:	42b7      	cmp	r7, r6
    2d10:	dae1      	bge.n	2cd6 <z_impl_log_process+0x52>
	return backend->cb->active;
    2d12:	6863      	ldr	r3, [r4, #4]
			if (log_backend_is_active(backend) &&
    2d14:	795b      	ldrb	r3, [r3, #5]
    2d16:	b123      	cbz	r3, 2d22 <z_impl_log_process+0x9e>
	backend->api->put(backend, msg);
    2d18:	6823      	ldr	r3, [r4, #0]
    2d1a:	4649      	mov	r1, r9
    2d1c:	681b      	ldr	r3, [r3, #0]
    2d1e:	4620      	mov	r0, r4
    2d20:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    2d22:	3701      	adds	r7, #1
    2d24:	3410      	adds	r4, #16
    2d26:	e7f2      	b.n	2d0e <z_impl_log_process+0x8a>
}
    2d28:	b003      	add	sp, #12
    2d2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2d2e:	bf00      	nop
    2d30:	200036b0 	.word	0x200036b0
    2d34:	20001954 	.word	0x20001954
    2d38:	2000025c 	.word	0x2000025c
    2d3c:	20000250 	.word	0x20000250
    2d40:	20000254 	.word	0x20000254
    2d44:	0000b684 	.word	0x0000b684
    2d48:	0000b694 	.word	0x0000b694

00002d4c <msg_finalize>:
{
    2d4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2d4e:	4c28      	ldr	r4, [pc, #160]	; (2df0 <msg_finalize+0xa4>)
	msg->hdr.ids = src_level;
    2d50:	8141      	strh	r1, [r0, #10]
{
    2d52:	6823      	ldr	r3, [r4, #0]
    2d54:	9301      	str	r3, [sp, #4]
	msg->hdr.timestamp = timestamp_func();
    2d56:	4b27      	ldr	r3, [pc, #156]	; (2df4 <msg_finalize+0xa8>)
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    2d58:	4d27      	ldr	r5, [pc, #156]	; (2df8 <msg_finalize+0xac>)
    2d5a:	681b      	ldr	r3, [r3, #0]
{
    2d5c:	4606      	mov	r6, r0
	msg->hdr.timestamp = timestamp_func();
    2d5e:	4798      	blx	r3
    2d60:	60f0      	str	r0, [r6, #12]
    2d62:	f3bf 8f5b 	dmb	ish
    2d66:	e855 3f00 	ldrex	r3, [r5]
    2d6a:	3301      	adds	r3, #1
    2d6c:	e845 3200 	strex	r2, r3, [r5]
    2d70:	2a00      	cmp	r2, #0
    2d72:	d1f8      	bne.n	2d66 <msg_finalize+0x1a>
    2d74:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
    2d78:	f04f 0320 	mov.w	r3, #32
    2d7c:	f3ef 8711 	mrs	r7, BASEPRI
    2d80:	f383 8811 	msr	BASEPRI, r3
    2d84:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    2d88:	481c      	ldr	r0, [pc, #112]	; (2dfc <msg_finalize+0xb0>)
    2d8a:	4631      	mov	r1, r6
    2d8c:	f7ff fe6c 	bl	2a68 <log_list_add_tail>
	__asm__ volatile(
    2d90:	f387 8811 	msr	BASEPRI, r7
    2d94:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    2d98:	4b19      	ldr	r3, [pc, #100]	; (2e00 <msg_finalize+0xb4>)
    2d9a:	781b      	ldrb	r3, [r3, #0]
    2d9c:	4626      	mov	r6, r4
    2d9e:	b1a3      	cbz	r3, 2dca <msg_finalize+0x7e>
	__asm__ volatile(
    2da0:	f04f 0320 	mov.w	r3, #32
    2da4:	f3ef 8411 	mrs	r4, BASEPRI
    2da8:	f383 8811 	msr	BASEPRI, r3
    2dac:	f3bf 8f6f 	isb	sy
extern "C" {
#endif

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_LOG_PANIC, log_panic)

K_SYSCALL_DECLARE1(K_SYSCALL_LOG_PROCESS, log_process, bool, bool, bypass)
    2db0:	2000      	movs	r0, #0
    2db2:	f7ff ff67 	bl	2c84 <z_impl_log_process>
	__asm__ volatile(
    2db6:	f384 8811 	msr	BASEPRI, r4
    2dba:	f3bf 8f6f 	isb	sy
}
    2dbe:	9a01      	ldr	r2, [sp, #4]
    2dc0:	6833      	ldr	r3, [r6, #0]
    2dc2:	429a      	cmp	r2, r3
    2dc4:	d10c      	bne.n	2de0 <msg_finalize+0x94>
    2dc6:	b003      	add	sp, #12
    2dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    2dca:	682b      	ldr	r3, [r5, #0]
    2dcc:	2b0a      	cmp	r3, #10
    2dce:	d1f6      	bne.n	2dbe <msg_finalize+0x72>
		    (proc_tid != NULL)) {
    2dd0:	4b0c      	ldr	r3, [pc, #48]	; (2e04 <msg_finalize+0xb8>)
    2dd2:	6818      	ldr	r0, [r3, #0]
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    2dd4:	2800      	cmp	r0, #0
    2dd6:	d0f2      	beq.n	2dbe <msg_finalize+0x72>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread)
    2dd8:	9a01      	ldr	r2, [sp, #4]
    2dda:	6823      	ldr	r3, [r4, #0]
    2ddc:	429a      	cmp	r2, r3
    2dde:	d001      	beq.n	2de4 <msg_finalize+0x98>
}
    2de0:	f008 f91c 	bl	b01c <_StackCheckHandler>
    2de4:	b003      	add	sp, #12
    2de6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2dea:	f007 be63 	b.w	aab4 <z_impl_k_wakeup>
    2dee:	bf00      	nop
    2df0:	200036b0 	.word	0x200036b0
    2df4:	200036bc 	.word	0x200036bc
    2df8:	20000250 	.word	0x20000250
    2dfc:	2000025c 	.word	0x2000025c
    2e00:	20001955 	.word	0x20001955
    2e04:	200002ec 	.word	0x200002ec

00002e08 <log_0>:
{
    2e08:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2e0a:	4c0d      	ldr	r4, [pc, #52]	; (2e40 <log_0+0x38>)
    2e0c:	6823      	ldr	r3, [r4, #0]
    2e0e:	9301      	str	r3, [sp, #4]
    2e10:	4606      	mov	r6, r0
    2e12:	460d      	mov	r5, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
    2e14:	f7ff fe76 	bl	2b04 <z_log_msg_std_alloc>

	if (msg != NULL) {
    2e18:	b160      	cbz	r0, 2e34 <log_0+0x2c>
	msg_finalize(msg, src_level);
    2e1a:	9a01      	ldr	r2, [sp, #4]
    2e1c:	6823      	ldr	r3, [r4, #0]
		msg->str = str;
    2e1e:	6106      	str	r6, [r0, #16]
    2e20:	429a      	cmp	r2, r3
    2e22:	d001      	beq.n	2e28 <log_0+0x20>
}
    2e24:	f008 f8fa 	bl	b01c <_StackCheckHandler>
	msg_finalize(msg, src_level);
    2e28:	4629      	mov	r1, r5
}
    2e2a:	b002      	add	sp, #8
    2e2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	msg_finalize(msg, src_level);
    2e30:	f7ff bf8c 	b.w	2d4c <msg_finalize>
}
    2e34:	9a01      	ldr	r2, [sp, #4]
    2e36:	6823      	ldr	r3, [r4, #0]
    2e38:	429a      	cmp	r2, r3
    2e3a:	d1f3      	bne.n	2e24 <log_0+0x1c>
    2e3c:	b002      	add	sp, #8
    2e3e:	bd70      	pop	{r4, r5, r6, pc}
    2e40:	200036b0 	.word	0x200036b0

00002e44 <log_1>:
{
    2e44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2e46:	4c11      	ldr	r4, [pc, #68]	; (2e8c <log_1+0x48>)
    2e48:	6823      	ldr	r3, [r4, #0]
    2e4a:	9301      	str	r3, [sp, #4]
    2e4c:	4605      	mov	r5, r0
    2e4e:	460f      	mov	r7, r1
    2e50:	4616      	mov	r6, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       u32_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    2e52:	f7ff fe57 	bl	2b04 <z_log_msg_std_alloc>

	if (msg != NULL) {
    2e56:	b190      	cbz	r0, 2e7e <log_1+0x3a>
		msg->str = str;
    2e58:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
    2e5a:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
    2e5c:	6147      	str	r7, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
    2e5e:	2201      	movs	r2, #1
    2e60:	f362 1507 	bfi	r5, r2, #4, #4
    2e64:	7245      	strb	r5, [r0, #9]
	msg_finalize(msg, src_level);
    2e66:	9a01      	ldr	r2, [sp, #4]
    2e68:	6823      	ldr	r3, [r4, #0]
    2e6a:	429a      	cmp	r2, r3
    2e6c:	d001      	beq.n	2e72 <log_1+0x2e>
}
    2e6e:	f008 f8d5 	bl	b01c <_StackCheckHandler>
	msg_finalize(msg, src_level);
    2e72:	4631      	mov	r1, r6
}
    2e74:	b003      	add	sp, #12
    2e76:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	msg_finalize(msg, src_level);
    2e7a:	f7ff bf67 	b.w	2d4c <msg_finalize>
}
    2e7e:	9a01      	ldr	r2, [sp, #4]
    2e80:	6823      	ldr	r3, [r4, #0]
    2e82:	429a      	cmp	r2, r3
    2e84:	d1f3      	bne.n	2e6e <log_1+0x2a>
    2e86:	b003      	add	sp, #12
    2e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e8a:	bf00      	nop
    2e8c:	200036b0 	.word	0x200036b0

00002e90 <log_2>:
{
    2e90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    2e94:	4d12      	ldr	r5, [pc, #72]	; (2ee0 <log_2+0x50>)
    2e96:	461f      	mov	r7, r3
    2e98:	682b      	ldr	r3, [r5, #0]
    2e9a:	9301      	str	r3, [sp, #4]
    2e9c:	4606      	mov	r6, r0
    2e9e:	4689      	mov	r9, r1
    2ea0:	4690      	mov	r8, r2
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       u32_t arg1,
					       u32_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    2ea2:	f7ff fe2f 	bl	2b04 <z_log_msg_std_alloc>

	if (msg != NULL) {
    2ea6:	b198      	cbz	r0, 2ed0 <log_2+0x40>
		msg->str = str;
    2ea8:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
    2eaa:	7a46      	ldrb	r6, [r0, #9]
    2eac:	2302      	movs	r3, #2
    2eae:	f363 1607 	bfi	r6, r3, #4, #4
    2eb2:	7246      	strb	r6, [r0, #9]
	msg_finalize(msg, src_level);
    2eb4:	9a01      	ldr	r2, [sp, #4]
    2eb6:	682b      	ldr	r3, [r5, #0]
    2eb8:	429a      	cmp	r2, r3
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
    2eba:	e9c0 9805 	strd	r9, r8, [r0, #20]
    2ebe:	d001      	beq.n	2ec4 <log_2+0x34>
}
    2ec0:	f008 f8ac 	bl	b01c <_StackCheckHandler>
	msg_finalize(msg, src_level);
    2ec4:	4639      	mov	r1, r7
}
    2ec6:	b003      	add	sp, #12
    2ec8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	msg_finalize(msg, src_level);
    2ecc:	f7ff bf3e 	b.w	2d4c <msg_finalize>
}
    2ed0:	9a01      	ldr	r2, [sp, #4]
    2ed2:	682b      	ldr	r3, [r5, #0]
    2ed4:	429a      	cmp	r2, r3
    2ed6:	d1f3      	bne.n	2ec0 <log_2+0x30>
    2ed8:	b003      	add	sp, #12
    2eda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2ede:	bf00      	nop
    2ee0:	200036b0 	.word	0x200036b0

00002ee4 <log_dropped>:
{
    2ee4:	b507      	push	{r0, r1, r2, lr}
    2ee6:	4b0c      	ldr	r3, [pc, #48]	; (2f18 <log_dropped+0x34>)
    2ee8:	681a      	ldr	r2, [r3, #0]
    2eea:	9201      	str	r2, [sp, #4]
    2eec:	4a0b      	ldr	r2, [pc, #44]	; (2f1c <log_dropped+0x38>)
    2eee:	f3bf 8f5b 	dmb	ish
    2ef2:	e852 1f00 	ldrex	r1, [r2]
    2ef6:	3101      	adds	r1, #1
    2ef8:	e842 1000 	strex	r0, r1, [r2]
    2efc:	2800      	cmp	r0, #0
    2efe:	d1f8      	bne.n	2ef2 <log_dropped+0xe>
    2f00:	f3bf 8f5b 	dmb	ish
}
    2f04:	9a01      	ldr	r2, [sp, #4]
    2f06:	681b      	ldr	r3, [r3, #0]
    2f08:	429a      	cmp	r2, r3
    2f0a:	d001      	beq.n	2f10 <log_dropped+0x2c>
    2f0c:	f008 f886 	bl	b01c <_StackCheckHandler>
    2f10:	b003      	add	sp, #12
    2f12:	f85d fb04 	ldr.w	pc, [sp], #4
    2f16:	bf00      	nop
    2f18:	200036b0 	.word	0x200036b0
    2f1c:	20000254 	.word	0x20000254

00002f20 <log_source_name_get>:
{
    2f20:	b507      	push	{r0, r1, r2, lr}
    2f22:	4b0a      	ldr	r3, [pc, #40]	; (2f4c <log_source_name_get+0x2c>)
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    2f24:	480a      	ldr	r0, [pc, #40]	; (2f50 <log_source_name_get+0x30>)
    2f26:	681a      	ldr	r2, [r3, #0]
    2f28:	9201      	str	r2, [sp, #4]
    2f2a:	4a0a      	ldr	r2, [pc, #40]	; (2f54 <log_source_name_get+0x34>)
    2f2c:	1a12      	subs	r2, r2, r0
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    2f2e:	ebb1 0fd2 	cmp.w	r1, r2, lsr #3
}
    2f32:	9a01      	ldr	r2, [sp, #4]
    2f34:	681b      	ldr	r3, [r3, #0]
	return __log_const_start[source_id].name;
    2f36:	bf34      	ite	cc
    2f38:	f850 0031 	ldrcc.w	r0, [r0, r1, lsl #3]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    2f3c:	2000      	movcs	r0, #0
}
    2f3e:	429a      	cmp	r2, r3
    2f40:	d001      	beq.n	2f46 <log_source_name_get+0x26>
    2f42:	f008 f86b 	bl	b01c <_StackCheckHandler>
    2f46:	b003      	add	sp, #12
    2f48:	f85d fb04 	ldr.w	pc, [sp], #4
    2f4c:	200036b0 	.word	0x200036b0
    2f50:	0000b634 	.word	0x0000b634
    2f54:	0000b684 	.word	0x0000b684

00002f58 <log_backend_enable>:
{
    2f58:	b513      	push	{r0, r1, r4, lr}
    2f5a:	4a0b      	ldr	r2, [pc, #44]	; (2f88 <log_backend_enable+0x30>)
	log_backend_id_set(backend, id);
    2f5c:	6844      	ldr	r4, [r0, #4]
{
    2f5e:	6813      	ldr	r3, [r2, #0]
    2f60:	9301      	str	r3, [sp, #4]
	id += backend - log_backend_get(0);
    2f62:	4b0a      	ldr	r3, [pc, #40]	; (2f8c <log_backend_enable+0x34>)
    2f64:	1ac3      	subs	r3, r0, r3
    2f66:	111b      	asrs	r3, r3, #4
    2f68:	3301      	adds	r3, #1
	log_backend_id_set(backend, id);
    2f6a:	7123      	strb	r3, [r4, #4]
	log_backend_activate(backend, ctx);
    2f6c:	6840      	ldr	r0, [r0, #4]
	backend->cb->ctx = ctx;
    2f6e:	6001      	str	r1, [r0, #0]
	backend_attached = true;
    2f70:	4907      	ldr	r1, [pc, #28]	; (2f90 <log_backend_enable+0x38>)
	backend->cb->active = true;
    2f72:	2301      	movs	r3, #1
    2f74:	700b      	strb	r3, [r1, #0]
    2f76:	7143      	strb	r3, [r0, #5]
}
    2f78:	9901      	ldr	r1, [sp, #4]
    2f7a:	6813      	ldr	r3, [r2, #0]
    2f7c:	4299      	cmp	r1, r3
    2f7e:	d001      	beq.n	2f84 <log_backend_enable+0x2c>
    2f80:	f008 f84c 	bl	b01c <_StackCheckHandler>
    2f84:	b002      	add	sp, #8
    2f86:	bd10      	pop	{r4, pc}
    2f88:	200036b0 	.word	0x200036b0
    2f8c:	0000b684 	.word	0x0000b684
    2f90:	20001954 	.word	0x20001954

00002f94 <log_init>:
{
    2f94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2f96:	4f16      	ldr	r7, [pc, #88]	; (2ff0 <CONFIG_USB_DEVICE_VID+0xd>)
    2f98:	683b      	ldr	r3, [r7, #0]
    2f9a:	9301      	str	r3, [sp, #4]
    2f9c:	4b15      	ldr	r3, [pc, #84]	; (2ff4 <CONFIG_USB_DEVICE_VID+0x11>)
    2f9e:	f3bf 8f5b 	dmb	ish
    2fa2:	e853 5f00 	ldrex	r5, [r3]
    2fa6:	1c6a      	adds	r2, r5, #1
    2fa8:	e843 2100 	strex	r1, r2, [r3]
    2fac:	2900      	cmp	r1, #0
    2fae:	d1f8      	bne.n	2fa2 <log_init+0xe>
    2fb0:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    2fb4:	b92d      	cbnz	r5, 2fc2 <log_init+0x2e>
	return __log_backends_end - __log_backends_start;
    2fb6:	4c10      	ldr	r4, [pc, #64]	; (2ff8 <CONFIG_USB_DEVICE_VID+0x15>)
    2fb8:	4e10      	ldr	r6, [pc, #64]	; (2ffc <CONFIG_USB_DEVICE_VID+0x19>)
    2fba:	1b36      	subs	r6, r6, r4
    2fbc:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    2fbe:	42b5      	cmp	r5, r6
    2fc0:	db05      	blt.n	2fce <log_init+0x3a>
}
    2fc2:	9a01      	ldr	r2, [sp, #4]
    2fc4:	683b      	ldr	r3, [r7, #0]
    2fc6:	429a      	cmp	r2, r3
    2fc8:	d00f      	beq.n	2fea <CONFIG_USB_DEVICE_VID+0x7>
    2fca:	f008 f827 	bl	b01c <_StackCheckHandler>
		if (backend->autostart) {
    2fce:	7b23      	ldrb	r3, [r4, #12]
    2fd0:	b143      	cbz	r3, 2fe4 <CONFIG_USB_DEVICE_VID+0x1>
			if (backend->api->init != NULL) {
    2fd2:	6823      	ldr	r3, [r4, #0]
    2fd4:	695b      	ldr	r3, [r3, #20]
    2fd6:	b103      	cbz	r3, 2fda <log_init+0x46>
				backend->api->init();
    2fd8:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    2fda:	2204      	movs	r2, #4
    2fdc:	2100      	movs	r1, #0
    2fde:	4620      	mov	r0, r4
    2fe0:	f7ff ffba 	bl	2f58 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    2fe4:	3501      	adds	r5, #1
    2fe6:	3410      	adds	r4, #16
    2fe8:	e7e9      	b.n	2fbe <log_init+0x2a>
}
    2fea:	b003      	add	sp, #12
    2fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2fee:	bf00      	nop
    2ff0:	200036b0 	.word	0x200036b0
    2ff4:	20000258 	.word	0x20000258
    2ff8:	0000b684 	.word	0x0000b684
    2ffc:	0000b694 	.word	0x0000b694

00003000 <z_impl_log_panic>:
{
    3000:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3004:	4f14      	ldr	r7, [pc, #80]	; (3058 <z_impl_log_panic+0x58>)
    3006:	683b      	ldr	r3, [r7, #0]
    3008:	9301      	str	r3, [sp, #4]
	if (panic_mode) {
    300a:	4b14      	ldr	r3, [pc, #80]	; (305c <z_impl_log_panic+0x5c>)
    300c:	781d      	ldrb	r5, [r3, #0]
    300e:	4698      	mov	r8, r3
    3010:	b97d      	cbnz	r5, 3032 <z_impl_log_panic+0x32>
    3012:	4c13      	ldr	r4, [pc, #76]	; (3060 <z_impl_log_panic+0x60>)
    3014:	4e13      	ldr	r6, [pc, #76]	; (3064 <z_impl_log_panic+0x64>)
	log_init();
    3016:	f7ff ffbd 	bl	2f94 <log_init>
    301a:	1b36      	subs	r6, r6, r4
    301c:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    301e:	42b5      	cmp	r5, r6
    3020:	db0d      	blt.n	303e <z_impl_log_panic+0x3e>
    3022:	2000      	movs	r0, #0
    3024:	f7ff fe2e 	bl	2c84 <z_impl_log_process>
		while (log_process(false) == true) {
    3028:	2800      	cmp	r0, #0
    302a:	d1fa      	bne.n	3022 <z_impl_log_panic+0x22>
	panic_mode = true;
    302c:	2301      	movs	r3, #1
    302e:	f888 3000 	strb.w	r3, [r8]
}
    3032:	9a01      	ldr	r2, [sp, #4]
    3034:	683b      	ldr	r3, [r7, #0]
    3036:	429a      	cmp	r2, r3
    3038:	d00b      	beq.n	3052 <z_impl_log_panic+0x52>
    303a:	f007 ffef 	bl	b01c <_StackCheckHandler>
	return backend->cb->active;
    303e:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    3040:	795b      	ldrb	r3, [r3, #5]
    3042:	b11b      	cbz	r3, 304c <z_impl_log_panic+0x4c>
	backend->api->panic(backend);
    3044:	6823      	ldr	r3, [r4, #0]
    3046:	4620      	mov	r0, r4
    3048:	691b      	ldr	r3, [r3, #16]
    304a:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    304c:	3501      	adds	r5, #1
    304e:	3410      	adds	r4, #16
    3050:	e7e5      	b.n	301e <z_impl_log_panic+0x1e>
}
    3052:	b002      	add	sp, #8
    3054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3058:	200036b0 	.word	0x200036b0
    305c:	20001955 	.word	0x20001955
    3060:	0000b684 	.word	0x0000b684
    3064:	0000b694 	.word	0x0000b694

00003068 <log_process_thread_func>:
{
    3068:	b507      	push	{r0, r1, r2, lr}
    306a:	4b0d      	ldr	r3, [pc, #52]	; (30a0 <log_process_thread_func+0x38>)
    306c:	681b      	ldr	r3, [r3, #0]
    306e:	9301      	str	r3, [sp, #4]
	log_init();
    3070:	f7ff ff90 	bl	2f94 <log_init>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
    3074:	f007 fd54 	bl	ab20 <z_impl_k_current_get>
	proc_tid = process_tid;
    3078:	4a0a      	ldr	r2, [pc, #40]	; (30a4 <log_process_thread_func+0x3c>)
    307a:	6010      	str	r0, [r2, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    307c:	b128      	cbz	r0, 308a <log_process_thread_func+0x22>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    307e:	4b0a      	ldr	r3, [pc, #40]	; (30a8 <log_process_thread_func+0x40>)
	    process_tid &&
    3080:	681b      	ldr	r3, [r3, #0]
    3082:	2b09      	cmp	r3, #9
    3084:	dd01      	ble.n	308a <log_process_thread_func+0x22>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread)
    3086:	f007 fd15 	bl	aab4 <z_impl_k_wakeup>
    308a:	2000      	movs	r0, #0
    308c:	f7ff fdfa 	bl	2c84 <z_impl_log_process>
		if (log_process(false) == false) {
    3090:	2800      	cmp	r0, #0
    3092:	d1fa      	bne.n	308a <log_process_thread_func+0x22>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
    3094:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    3098:	f007 fcb2 	bl	aa00 <z_impl_k_sleep>
    309c:	e7f5      	b.n	308a <log_process_thread_func+0x22>
    309e:	bf00      	nop
    30a0:	200036b0 	.word	0x200036b0
    30a4:	200002ec 	.word	0x200002ec
    30a8:	20000250 	.word	0x20000250

000030ac <log_is_strdup>:
{
    30ac:	b507      	push	{r0, r1, r2, lr}
    30ae:	4b0b      	ldr	r3, [pc, #44]	; (30dc <log_is_strdup+0x30>)
    30b0:	681a      	ldr	r2, [r3, #0]
    30b2:	9201      	str	r2, [sp, #4]
	return ((char *)buf >= pool_first->buf) &&
    30b4:	4a0a      	ldr	r2, [pc, #40]	; (30e0 <log_is_strdup+0x34>)
    30b6:	4290      	cmp	r0, r2
    30b8:	d30a      	bcc.n	30d0 <log_is_strdup+0x24>
    30ba:	3278      	adds	r2, #120	; 0x78
    30bc:	4290      	cmp	r0, r2
    30be:	bf8c      	ite	hi
    30c0:	2000      	movhi	r0, #0
    30c2:	2001      	movls	r0, #1
}
    30c4:	9a01      	ldr	r2, [sp, #4]
    30c6:	681b      	ldr	r3, [r3, #0]
    30c8:	429a      	cmp	r2, r3
    30ca:	d003      	beq.n	30d4 <log_is_strdup+0x28>
    30cc:	f007 ffa6 	bl	b01c <_StackCheckHandler>
	return ((char *)buf >= pool_first->buf) &&
    30d0:	2000      	movs	r0, #0
    30d2:	e7f7      	b.n	30c4 <log_is_strdup+0x18>
}
    30d4:	b003      	add	sp, #12
    30d6:	f85d fb04 	ldr.w	pc, [sp], #4
    30da:	bf00      	nop
    30dc:	200036b0 	.word	0x200036b0
    30e0:	20003214 	.word	0x20003214

000030e4 <log_free>:
{
    30e4:	b513      	push	{r0, r1, r4, lr}
    30e6:	4c0f      	ldr	r4, [pc, #60]	; (3124 <log_free+0x40>)
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    30e8:	3804      	subs	r0, #4
{
    30ea:	6822      	ldr	r2, [r4, #0]
    30ec:	9201      	str	r2, [sp, #4]
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    30ee:	9000      	str	r0, [sp, #0]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    30f0:	f3bf 8f5b 	dmb	ish
    30f4:	e850 2f00 	ldrex	r2, [r0]
    30f8:	1e53      	subs	r3, r2, #1
    30fa:	e840 3100 	strex	r1, r3, [r0]
    30fe:	2900      	cmp	r1, #0
    3100:	d1f8      	bne.n	30f4 <log_free+0x10>
    3102:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    3106:	2a01      	cmp	r2, #1
    3108:	d103      	bne.n	3112 <log_free+0x2e>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    310a:	4669      	mov	r1, sp
    310c:	4806      	ldr	r0, [pc, #24]	; (3128 <log_free+0x44>)
    310e:	f006 fc17 	bl	9940 <k_mem_slab_free>
}
    3112:	9a01      	ldr	r2, [sp, #4]
    3114:	6823      	ldr	r3, [r4, #0]
    3116:	429a      	cmp	r2, r3
    3118:	d001      	beq.n	311e <log_free+0x3a>
    311a:	f007 ff7f 	bl	b01c <_StackCheckHandler>
    311e:	b002      	add	sp, #8
    3120:	bd10      	pop	{r4, pc}
    3122:	bf00      	nop
    3124:	200036b0 	.word	0x200036b0
    3128:	20000264 	.word	0x20000264

0000312c <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    u8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
    312c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    3130:	460e      	mov	r6, r1
    3132:	492d      	ldr	r1, [pc, #180]	; (31e8 <log_msg_hexdump_data_op+0xbc>)
    3134:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
    3138:	461c      	mov	r4, r3
    313a:	680b      	ldr	r3, [r1, #0]
    313c:	9301      	str	r3, [sp, #4]
	u32_t available_len = msg->hdr.params.hexdump.length;
    313e:	8903      	ldrh	r3, [r0, #8]
    3140:	089b      	lsrs	r3, r3, #2
	u8_t *head_data;
	u32_t chunk_len;
	u32_t req_len;
	u32_t cpy_len;

	if (offset >= available_len) {
    3142:	42a3      	cmp	r3, r4
    3144:	4689      	mov	r9, r1
    3146:	d808      	bhi.n	315a <log_msg_hexdump_data_op+0x2e>
		*length = 0;
    3148:	2300      	movs	r3, #0
    314a:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
    314c:	9a01      	ldr	r2, [sp, #4]
    314e:	f8d9 3000 	ldr.w	r3, [r9]
    3152:	429a      	cmp	r2, r3
    3154:	d045      	beq.n	31e2 <log_msg_hexdump_data_op+0xb6>
    3156:	f007 ff61 	bl	b01c <_StackCheckHandler>
	if ((offset + *length) > available_len) {
    315a:	6811      	ldr	r1, [r2, #0]
    315c:	4421      	add	r1, r4
    315e:	4299      	cmp	r1, r3
		*length = available_len - offset;
    3160:	bf84      	itt	hi
    3162:	1b19      	subhi	r1, r3, r4
    3164:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    3166:	2b0c      	cmp	r3, #12
	req_len = *length;
    3168:	f8d2 a000 	ldr.w	sl, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    316c:	d92a      	bls.n	31c4 <log_msg_hexdump_data_op+0x98>
	if (offset < chunk_len) {
    316e:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
    3170:	6947      	ldr	r7, [r0, #20]
	if (offset < chunk_len) {
    3172:	d82d      	bhi.n	31d0 <log_msg_hexdump_data_op+0xa4>
		head_data = msg->payload.ext.data.bytes;
    3174:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
    3176:	2308      	movs	r3, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    3178:	4553      	cmp	r3, sl
    317a:	bf28      	it	cs
    317c:	4653      	movcs	r3, sl
    317e:	461d      	mov	r5, r3
		if (put_op) {
    3180:	4420      	add	r0, r4
			(void)memcpy(&head_data[offset], data, cpy_len);
    3182:	461a      	mov	r2, r3
		if (put_op) {
    3184:	f1b8 0f00 	cmp.w	r8, #0
    3188:	d01f      	beq.n	31ca <log_msg_hexdump_data_op+0x9e>
			(void)memcpy(&head_data[offset], data, cpy_len);
    318a:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
    318c:	f004 fdc4 	bl	7d18 <memcpy>
		req_len -= cpy_len;
    3190:	ebaa 0a05 	sub.w	sl, sl, r5
		data += cpy_len;
    3194:	442e      	add	r6, r5
	while (req_len > 0) {
    3196:	f1ba 0f00 	cmp.w	sl, #0
    319a:	d0d7      	beq.n	314c <log_msg_hexdump_data_op+0x20>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
    319c:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    31a0:	4555      	cmp	r5, sl
    31a2:	bf28      	it	cs
    31a4:	4655      	movcs	r5, sl
		if (put_op) {
    31a6:	1d20      	adds	r0, r4, #4
    31a8:	4438      	add	r0, r7
			(void)memcpy(&cont->payload.bytes[offset],
    31aa:	462a      	mov	r2, r5
		if (put_op) {
    31ac:	f1b8 0f00 	cmp.w	r8, #0
    31b0:	d014      	beq.n	31dc <log_msg_hexdump_data_op+0xb0>
			(void)memcpy(&cont->payload.bytes[offset],
    31b2:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
    31b4:	f004 fdb0 	bl	7d18 <memcpy>
		req_len -= cpy_len;
    31b8:	ebaa 0a05 	sub.w	sl, sl, r5
		cont = cont->next;
    31bc:	683f      	ldr	r7, [r7, #0]
		data += cpy_len;
    31be:	442e      	add	r6, r5
		offset = 0;
    31c0:	2400      	movs	r4, #0
    31c2:	e7e8      	b.n	3196 <log_msg_hexdump_data_op+0x6a>
		head_data = msg->payload.single.bytes;
    31c4:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
    31c6:	2700      	movs	r7, #0
    31c8:	e7d6      	b.n	3178 <log_msg_hexdump_data_op+0x4c>
			(void)memcpy(data, &head_data[offset], cpy_len);
    31ca:	4601      	mov	r1, r0
    31cc:	4630      	mov	r0, r6
    31ce:	e7dd      	b.n	318c <log_msg_hexdump_data_op+0x60>
		offset -= chunk_len;
    31d0:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
    31d2:	2c1b      	cmp	r4, #27
    31d4:	d9df      	bls.n	3196 <log_msg_hexdump_data_op+0x6a>
			cont = cont->next;
    31d6:	683f      	ldr	r7, [r7, #0]
			offset -= chunk_len;
    31d8:	3c1c      	subs	r4, #28
    31da:	e7fa      	b.n	31d2 <log_msg_hexdump_data_op+0xa6>
			(void)memcpy(data, &cont->payload.bytes[offset],
    31dc:	4601      	mov	r1, r0
    31de:	4630      	mov	r0, r6
    31e0:	e7e8      	b.n	31b4 <log_msg_hexdump_data_op+0x88>
}
    31e2:	b002      	add	sp, #8
    31e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    31e8:	200036b0 	.word	0x200036b0

000031ec <log_msg_pool_init>:
{
    31ec:	b507      	push	{r0, r1, r2, lr}
    31ee:	4b09      	ldr	r3, [pc, #36]	; (3214 <log_msg_pool_init+0x28>)
    31f0:	681a      	ldr	r2, [r3, #0]
    31f2:	9201      	str	r2, [sp, #4]
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    31f4:	9a01      	ldr	r2, [sp, #4]
    31f6:	681b      	ldr	r3, [r3, #0]
    31f8:	429a      	cmp	r2, r3
    31fa:	d001      	beq.n	3200 <log_msg_pool_init+0x14>
    31fc:	f007 ff0e 	bl	b01c <_StackCheckHandler>
    3200:	2320      	movs	r3, #32
    3202:	4905      	ldr	r1, [pc, #20]	; (3218 <log_msg_pool_init+0x2c>)
    3204:	4805      	ldr	r0, [pc, #20]	; (321c <log_msg_pool_init+0x30>)
    3206:	461a      	mov	r2, r3
}
    3208:	b003      	add	sp, #12
    320a:	f85d eb04 	ldr.w	lr, [sp], #4
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    320e:	f006 bb41 	b.w	9894 <k_mem_slab_init>
    3212:	bf00      	nop
    3214:	200036b0 	.word	0x200036b0
    3218:	200032b0 	.word	0x200032b0
    321c:	200002f0 	.word	0x200002f0

00003220 <log_msg_get>:
{
    3220:	b507      	push	{r0, r1, r2, lr}
    3222:	4b0c      	ldr	r3, [pc, #48]	; (3254 <log_msg_get+0x34>)
    3224:	681a      	ldr	r2, [r3, #0]
    3226:	9201      	str	r2, [sp, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    3228:	3004      	adds	r0, #4
    322a:	f3bf 8f5b 	dmb	ish
    322e:	e850 2f00 	ldrex	r2, [r0]
    3232:	3201      	adds	r2, #1
    3234:	e840 2100 	strex	r1, r2, [r0]
    3238:	2900      	cmp	r1, #0
    323a:	d1f8      	bne.n	322e <log_msg_get+0xe>
    323c:	f3bf 8f5b 	dmb	ish
}
    3240:	9a01      	ldr	r2, [sp, #4]
    3242:	681b      	ldr	r3, [r3, #0]
    3244:	429a      	cmp	r2, r3
    3246:	d001      	beq.n	324c <log_msg_get+0x2c>
    3248:	f007 fee8 	bl	b01c <_StackCheckHandler>
    324c:	b003      	add	sp, #12
    324e:	f85d fb04 	ldr.w	pc, [sp], #4
    3252:	bf00      	nop
    3254:	200036b0 	.word	0x200036b0

00003258 <log_msg_no_space_handle>:
{
    3258:	b573      	push	{r0, r1, r4, r5, r6, lr}
    325a:	4c0e      	ldr	r4, [pc, #56]	; (3294 <log_msg_no_space_handle+0x3c>)
			err = k_mem_slab_alloc(&log_msg_pool,
    325c:	4e0e      	ldr	r6, [pc, #56]	; (3298 <log_msg_no_space_handle+0x40>)
{
    325e:	6822      	ldr	r2, [r4, #0]
    3260:	9201      	str	r2, [sp, #4]
	union log_msg_chunk *msg = NULL;
    3262:	2200      	movs	r2, #0
    3264:	9200      	str	r2, [sp, #0]
    3266:	2001      	movs	r0, #1
    3268:	f7ff fd0c 	bl	2c84 <z_impl_log_process>
    326c:	4605      	mov	r5, r0
			log_dropped();
    326e:	f7ff fe39 	bl	2ee4 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    3272:	2200      	movs	r2, #0
    3274:	4669      	mov	r1, sp
    3276:	4630      	mov	r0, r6
    3278:	f006 fb2a 	bl	98d0 <k_mem_slab_alloc>
		} while ((err != 0) && more);
    327c:	b108      	cbz	r0, 3282 <log_msg_no_space_handle+0x2a>
    327e:	2d00      	cmp	r5, #0
    3280:	d1f1      	bne.n	3266 <log_msg_no_space_handle+0xe>
}
    3282:	9a01      	ldr	r2, [sp, #4]
    3284:	6823      	ldr	r3, [r4, #0]
    3286:	9800      	ldr	r0, [sp, #0]
    3288:	429a      	cmp	r2, r3
    328a:	d001      	beq.n	3290 <log_msg_no_space_handle+0x38>
    328c:	f007 fec6 	bl	b01c <_StackCheckHandler>
    3290:	b002      	add	sp, #8
    3292:	bd70      	pop	{r4, r5, r6, pc}
    3294:	200036b0 	.word	0x200036b0
    3298:	200002f0 	.word	0x200002f0

0000329c <log_msg_nargs_get>:
{
    329c:	b507      	push	{r0, r1, r2, lr}
    329e:	4b07      	ldr	r3, [pc, #28]	; (32bc <log_msg_nargs_get+0x20>)
	return msg->hdr.params.std.nargs;
    32a0:	7a40      	ldrb	r0, [r0, #9]
{
    32a2:	681a      	ldr	r2, [r3, #0]
    32a4:	9201      	str	r2, [sp, #4]
}
    32a6:	9a01      	ldr	r2, [sp, #4]
    32a8:	681b      	ldr	r3, [r3, #0]
    32aa:	429a      	cmp	r2, r3
    32ac:	ea4f 1010 	mov.w	r0, r0, lsr #4
    32b0:	d001      	beq.n	32b6 <log_msg_nargs_get+0x1a>
    32b2:	f007 feb3 	bl	b01c <_StackCheckHandler>
    32b6:	b003      	add	sp, #12
    32b8:	f85d fb04 	ldr.w	pc, [sp], #4
    32bc:	200036b0 	.word	0x200036b0

000032c0 <log_msg_arg_get>:
{
    32c0:	b513      	push	{r0, r1, r4, lr}
	if (arg_idx >= msg->hdr.params.std.nargs) {
    32c2:	7a44      	ldrb	r4, [r0, #9]
{
    32c4:	4b13      	ldr	r3, [pc, #76]	; (3314 <log_msg_arg_get+0x54>)
	if (arg_idx >= msg->hdr.params.std.nargs) {
    32c6:	0924      	lsrs	r4, r4, #4
{
    32c8:	681a      	ldr	r2, [r3, #0]
    32ca:	9201      	str	r2, [sp, #4]
	if (arg_idx >= msg->hdr.params.std.nargs) {
    32cc:	428c      	cmp	r4, r1
    32ce:	461a      	mov	r2, r3
    32d0:	d91b      	bls.n	330a <log_msg_arg_get+0x4a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
    32d2:	2c03      	cmp	r4, #3
    32d4:	d808      	bhi.n	32e8 <log_msg_arg_get+0x28>
		arg = msg->payload.single.args[arg_idx];
    32d6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    32da:	6948      	ldr	r0, [r1, #20]
}
    32dc:	9901      	ldr	r1, [sp, #4]
    32de:	6813      	ldr	r3, [r2, #0]
    32e0:	4299      	cmp	r1, r3
    32e2:	d014      	beq.n	330e <log_msg_arg_get+0x4e>
    32e4:	f007 fe9a 	bl	b01c <_StackCheckHandler>
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
    32e8:	2901      	cmp	r1, #1
    32ea:	d803      	bhi.n	32f4 <log_msg_arg_get+0x34>
		return msg->payload.ext.data.args[arg_idx];
    32ec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    32f0:	6988      	ldr	r0, [r1, #24]
    32f2:	e7f3      	b.n	32dc <log_msg_arg_get+0x1c>
	cont = msg->payload.ext.next;
    32f4:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
    32f6:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
    32f8:	2906      	cmp	r1, #6
    32fa:	d803      	bhi.n	3304 <log_msg_arg_get+0x44>
	return cont->payload.args[arg_idx];
    32fc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    3300:	6848      	ldr	r0, [r1, #4]
    3302:	e7eb      	b.n	32dc <log_msg_arg_get+0x1c>
		arg_idx -= ARGS_CONT_MSG;
    3304:	3907      	subs	r1, #7
		cont = cont->next;
    3306:	681b      	ldr	r3, [r3, #0]
    3308:	e7f6      	b.n	32f8 <log_msg_arg_get+0x38>
		return 0;
    330a:	2000      	movs	r0, #0
    330c:	e7e6      	b.n	32dc <log_msg_arg_get+0x1c>
}
    330e:	b002      	add	sp, #8
    3310:	bd10      	pop	{r4, pc}
    3312:	bf00      	nop
    3314:	200036b0 	.word	0x200036b0

00003318 <msg_free>:
{
    3318:	b5f0      	push	{r4, r5, r6, r7, lr}
    331a:	4e1c      	ldr	r6, [pc, #112]	; (338c <msg_free+0x74>)
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    331c:	7a04      	ldrb	r4, [r0, #8]
	u32_t nargs = msg->hdr.params.std.nargs;
    331e:	7a45      	ldrb	r5, [r0, #9]
{
    3320:	6832      	ldr	r2, [r6, #0]
    3322:	b085      	sub	sp, #20
	if (log_msg_is_std(msg) && nargs) {
    3324:	f014 0401 	ands.w	r4, r4, #1
{
    3328:	9001      	str	r0, [sp, #4]
    332a:	9203      	str	r2, [sp, #12]
	u32_t nargs = msg->hdr.params.std.nargs;
    332c:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
    3330:	d012      	beq.n	3358 <msg_free+0x40>
	if (msg->hdr.params.generic.ext == 1) {
    3332:	9b01      	ldr	r3, [sp, #4]
    3334:	7a1a      	ldrb	r2, [r3, #8]
    3336:	0792      	lsls	r2, r2, #30
    3338:	d504      	bpl.n	3344 <msg_free+0x2c>
		cont_free(msg->payload.ext.next);
    333a:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    333c:	4c14      	ldr	r4, [pc, #80]	; (3390 <msg_free+0x78>)
    333e:	9302      	str	r3, [sp, #8]
	while (cont != NULL) {
    3340:	9b02      	ldr	r3, [sp, #8]
    3342:	b9d3      	cbnz	r3, 337a <msg_free+0x62>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    3344:	a901      	add	r1, sp, #4
    3346:	4812      	ldr	r0, [pc, #72]	; (3390 <msg_free+0x78>)
    3348:	f006 fafa 	bl	9940 <k_mem_slab_free>
}
    334c:	9a03      	ldr	r2, [sp, #12]
    334e:	6833      	ldr	r3, [r6, #0]
    3350:	429a      	cmp	r2, r3
    3352:	d019      	beq.n	3388 <msg_free+0x70>
    3354:	f007 fe62 	bl	b01c <_StackCheckHandler>
	if (log_msg_is_std(msg) && nargs) {
    3358:	2d00      	cmp	r5, #0
    335a:	d0ea      	beq.n	3332 <msg_free+0x1a>
		for (i = 0; i < nargs; i++) {
    335c:	42a5      	cmp	r5, r4
    335e:	9801      	ldr	r0, [sp, #4]
    3360:	d9e7      	bls.n	3332 <msg_free+0x1a>
			void *buf = (void *)log_msg_arg_get(msg, i);
    3362:	4621      	mov	r1, r4
    3364:	f7ff ffac 	bl	32c0 <log_msg_arg_get>
    3368:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    336a:	f7ff fe9f 	bl	30ac <log_is_strdup>
    336e:	b110      	cbz	r0, 3376 <msg_free+0x5e>
				log_free(buf);
    3370:	4638      	mov	r0, r7
    3372:	f7ff feb7 	bl	30e4 <log_free>
		for (i = 0; i < nargs; i++) {
    3376:	3401      	adds	r4, #1
    3378:	e7f0      	b.n	335c <msg_free+0x44>
		next = cont->next;
    337a:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    337c:	a902      	add	r1, sp, #8
    337e:	4620      	mov	r0, r4
    3380:	f006 fade 	bl	9940 <k_mem_slab_free>
		cont = next;
    3384:	9502      	str	r5, [sp, #8]
    3386:	e7db      	b.n	3340 <msg_free+0x28>
}
    3388:	b005      	add	sp, #20
    338a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    338c:	200036b0 	.word	0x200036b0
    3390:	200002f0 	.word	0x200002f0

00003394 <log_msg_put>:
{
    3394:	b507      	push	{r0, r1, r2, lr}
    3396:	4b13      	ldr	r3, [pc, #76]	; (33e4 <log_msg_put+0x50>)
    3398:	6819      	ldr	r1, [r3, #0]
    339a:	9101      	str	r1, [sp, #4]
    339c:	4602      	mov	r2, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    339e:	1d01      	adds	r1, r0, #4
    33a0:	f3bf 8f5b 	dmb	ish
    33a4:	e851 cf00 	ldrex	ip, [r1]
    33a8:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    33ac:	e841 ce00 	strex	lr, ip, [r1]
    33b0:	f1be 0f00 	cmp.w	lr, #0
    33b4:	d1f6      	bne.n	33a4 <log_msg_put+0x10>
    33b6:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
    33ba:	6852      	ldr	r2, [r2, #4]
    33bc:	b952      	cbnz	r2, 33d4 <log_msg_put+0x40>
		msg_free(msg);
    33be:	9a01      	ldr	r2, [sp, #4]
    33c0:	681b      	ldr	r3, [r3, #0]
    33c2:	429a      	cmp	r2, r3
    33c4:	d001      	beq.n	33ca <log_msg_put+0x36>
}
    33c6:	f007 fe29 	bl	b01c <_StackCheckHandler>
    33ca:	b003      	add	sp, #12
    33cc:	f85d eb04 	ldr.w	lr, [sp], #4
		msg_free(msg);
    33d0:	f7ff bfa2 	b.w	3318 <msg_free>
}
    33d4:	9a01      	ldr	r2, [sp, #4]
    33d6:	681b      	ldr	r3, [r3, #0]
    33d8:	429a      	cmp	r2, r3
    33da:	d1f4      	bne.n	33c6 <log_msg_put+0x32>
    33dc:	b003      	add	sp, #12
    33de:	f85d fb04 	ldr.w	pc, [sp], #4
    33e2:	bf00      	nop
    33e4:	200036b0 	.word	0x200036b0

000033e8 <log_msg_str_get>:
{
    33e8:	b507      	push	{r0, r1, r2, lr}
    33ea:	4b06      	ldr	r3, [pc, #24]	; (3404 <log_msg_str_get+0x1c>)
}
    33ec:	6900      	ldr	r0, [r0, #16]
{
    33ee:	681a      	ldr	r2, [r3, #0]
    33f0:	9201      	str	r2, [sp, #4]
}
    33f2:	9a01      	ldr	r2, [sp, #4]
    33f4:	681b      	ldr	r3, [r3, #0]
    33f6:	429a      	cmp	r2, r3
    33f8:	d001      	beq.n	33fe <log_msg_str_get+0x16>
    33fa:	f007 fe0f 	bl	b01c <_StackCheckHandler>
    33fe:	b003      	add	sp, #12
    3400:	f85d fb04 	ldr.w	pc, [sp], #4
    3404:	200036b0 	.word	0x200036b0

00003408 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      u8_t *data,
			      size_t *length,
			      size_t offset)
{
    3408:	b530      	push	{r4, r5, lr}
    340a:	4c08      	ldr	r4, [pc, #32]	; (342c <log_msg_hexdump_data_get+0x24>)
    340c:	b085      	sub	sp, #20
    340e:	6825      	ldr	r5, [r4, #0]
    3410:	9503      	str	r5, [sp, #12]
	log_msg_hexdump_data_op(msg, data, length, offset, false);
    3412:	2500      	movs	r5, #0
    3414:	9500      	str	r5, [sp, #0]
    3416:	f7ff fe89 	bl	312c <log_msg_hexdump_data_op>
}
    341a:	9a03      	ldr	r2, [sp, #12]
    341c:	6823      	ldr	r3, [r4, #0]
    341e:	429a      	cmp	r2, r3
    3420:	d001      	beq.n	3426 <log_msg_hexdump_data_get+0x1e>
    3422:	f007 fdfb 	bl	b01c <_StackCheckHandler>
    3426:	b005      	add	sp, #20
    3428:	bd30      	pop	{r4, r5, pc}
    342a:	bf00      	nop
    342c:	200036b0 	.word	0x200036b0

00003430 <buffer_write>:
	return length;
}

static void buffer_write(log_output_func_t outf, u8_t *buf, size_t len,
			 void *ctx)
{
    3430:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3434:	4c0b      	ldr	r4, [pc, #44]	; (3464 <buffer_write+0x34>)
    3436:	4698      	mov	r8, r3
    3438:	6823      	ldr	r3, [r4, #0]
    343a:	9301      	str	r3, [sp, #4]
    343c:	4607      	mov	r7, r0
    343e:	460e      	mov	r6, r1
    3440:	4615      	mov	r5, r2
	int processed;

	do {
		processed = outf(buf, len, ctx);
    3442:	4629      	mov	r1, r5
    3444:	4630      	mov	r0, r6
    3446:	4642      	mov	r2, r8
    3448:	47b8      	blx	r7
		len -= processed;
		buf += processed;
	} while (len != 0);
    344a:	1a2d      	subs	r5, r5, r0
		buf += processed;
    344c:	4406      	add	r6, r0
	} while (len != 0);
    344e:	d1f8      	bne.n	3442 <buffer_write+0x12>
}
    3450:	9a01      	ldr	r2, [sp, #4]
    3452:	6823      	ldr	r3, [r4, #0]
    3454:	429a      	cmp	r2, r3
    3456:	d001      	beq.n	345c <buffer_write+0x2c>
    3458:	f007 fde0 	bl	b01c <_StackCheckHandler>
    345c:	b002      	add	sp, #8
    345e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3462:	bf00      	nop
    3464:	200036b0 	.word	0x200036b0

00003468 <print_formatted>:
{
    3468:	b40e      	push	{r1, r2, r3}
    346a:	b517      	push	{r0, r1, r2, r4, lr}
    346c:	4c0b      	ldr	r4, [pc, #44]	; (349c <print_formatted+0x34>)
    346e:	ab05      	add	r3, sp, #20
    3470:	6821      	ldr	r1, [r4, #0]
    3472:	f853 2b04 	ldr.w	r2, [r3], #4
    3476:	9101      	str	r1, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
    3478:	4601      	mov	r1, r0
    347a:	4809      	ldr	r0, [pc, #36]	; (34a0 <print_formatted+0x38>)
	va_start(args, fmt);
    347c:	9300      	str	r3, [sp, #0]
	z_vprintk(out_func, (void *)log_output, fmt, args);
    347e:	f7fd fb8b 	bl	b98 <z_vprintk>
}
    3482:	9a01      	ldr	r2, [sp, #4]
    3484:	6823      	ldr	r3, [r4, #0]
    3486:	429a      	cmp	r2, r3
    3488:	f04f 0000 	mov.w	r0, #0
    348c:	d001      	beq.n	3492 <print_formatted+0x2a>
    348e:	f007 fdc5 	bl	b01c <_StackCheckHandler>
    3492:	b003      	add	sp, #12
    3494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3498:	b003      	add	sp, #12
    349a:	4770      	bx	lr
    349c:	200036b0 	.word	0x200036b0
    34a0:	00003a19 	.word	0x00003a19

000034a4 <std_print>:
	}
}

static void std_print(struct log_msg *msg,
		      const struct log_output *log_output)
{
    34a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    34a8:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 377c <std_print+0x2d8>
    34ac:	b091      	sub	sp, #68	; 0x44
    34ae:	af0e      	add	r7, sp, #56	; 0x38
    34b0:	f8db 3000 	ldr.w	r3, [fp]
    34b4:	607b      	str	r3, [r7, #4]
    34b6:	4681      	mov	r9, r0
    34b8:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
    34ba:	f7ff ff95 	bl	33e8 <log_msg_str_get>
    34be:	4606      	mov	r6, r0
	u32_t nargs = log_msg_nargs_get(msg);
    34c0:	4648      	mov	r0, r9
    34c2:	f7ff feeb 	bl	329c <log_msg_nargs_get>
	u32_t *args = alloca(sizeof(u32_t)*nargs);
    34c6:	0083      	lsls	r3, r0, #2
    34c8:	3307      	adds	r3, #7
    34ca:	f023 0307 	bic.w	r3, r3, #7
    34ce:	ebad 0d03 	sub.w	sp, sp, r3
	u32_t nargs = log_msg_nargs_get(msg);
    34d2:	4682      	mov	sl, r0
	u32_t *args = alloca(sizeof(u32_t)*nargs);
    34d4:	ac0e      	add	r4, sp, #56	; 0x38
	int i;

	for (i = 0; i < nargs; i++) {
    34d6:	f04f 0800 	mov.w	r8, #0
    34da:	45d0      	cmp	r8, sl
    34dc:	d116      	bne.n	350c <std_print+0x68>
		args[i] = log_msg_arg_get(msg, i);
	}

	switch (log_msg_nargs_get(msg)) {
    34de:	4648      	mov	r0, r9
    34e0:	f7ff fedc 	bl	329c <log_msg_nargs_get>
    34e4:	280f      	cmp	r0, #15
    34e6:	d81e      	bhi.n	3526 <std_print+0x82>
    34e8:	e8df f010 	tbh	[pc, r0, lsl #1]
    34ec:	00250019 	.word	0x00250019
    34f0:	0032002b 	.word	0x0032002b
    34f4:	0046003b 	.word	0x0046003b
    34f8:	00620053 	.word	0x00620053
    34fc:	00860073 	.word	0x00860073
    3500:	00b2009b 	.word	0x00b2009b
    3504:	00e600cb 	.word	0x00e600cb
    3508:	01220103 	.word	0x01220103
		args[i] = log_msg_arg_get(msg, i);
    350c:	4641      	mov	r1, r8
    350e:	4648      	mov	r0, r9
    3510:	f7ff fed6 	bl	32c0 <log_msg_arg_get>
    3514:	f844 0028 	str.w	r0, [r4, r8, lsl #2]
	for (i = 0; i < nargs; i++) {
    3518:	f108 0801 	add.w	r8, r8, #1
    351c:	e7dd      	b.n	34da <std_print+0x36>
	case 0:
		print_formatted(log_output, str);
    351e:	4631      	mov	r1, r6
    3520:	4628      	mov	r0, r5
    3522:	f7ff ffa1 	bl	3468 <print_formatted>
	default:
		/* Unsupported number of arguments. */
		__ASSERT_NO_MSG(true);
		break;
	}
}
    3526:	687a      	ldr	r2, [r7, #4]
    3528:	f8db 3000 	ldr.w	r3, [fp]
    352c:	429a      	cmp	r2, r3
    352e:	f000 8120 	beq.w	3772 <std_print+0x2ce>
    3532:	f007 fd73 	bl	b01c <_StackCheckHandler>
		print_formatted(log_output, str, args[0]);
    3536:	6822      	ldr	r2, [r4, #0]
    3538:	4631      	mov	r1, r6
    353a:	4628      	mov	r0, r5
    353c:	f7ff ff94 	bl	3468 <print_formatted>
		break;
    3540:	e7f1      	b.n	3526 <std_print+0x82>
		print_formatted(log_output, str, args[0], args[1]);
    3542:	e9d4 2300 	ldrd	r2, r3, [r4]
    3546:	4631      	mov	r1, r6
    3548:	4628      	mov	r0, r5
    354a:	f7ff ff8d 	bl	3468 <print_formatted>
		break;
    354e:	e7ea      	b.n	3526 <std_print+0x82>
		print_formatted(log_output, str, args[0], args[1], args[2]);
    3550:	68a3      	ldr	r3, [r4, #8]
    3552:	9300      	str	r3, [sp, #0]
    3554:	e9d4 2300 	ldrd	r2, r3, [r4]
    3558:	4631      	mov	r1, r6
    355a:	4628      	mov	r0, r5
    355c:	f7ff ff84 	bl	3468 <print_formatted>
		break;
    3560:	e7e1      	b.n	3526 <std_print+0x82>
		print_formatted(log_output, str, args[0], args[1], args[2],
    3562:	68e3      	ldr	r3, [r4, #12]
    3564:	9301      	str	r3, [sp, #4]
    3566:	68a3      	ldr	r3, [r4, #8]
    3568:	9300      	str	r3, [sp, #0]
    356a:	e9d4 2300 	ldrd	r2, r3, [r4]
    356e:	4631      	mov	r1, r6
    3570:	4628      	mov	r0, r5
    3572:	f7ff ff79 	bl	3468 <print_formatted>
		break;
    3576:	e7d6      	b.n	3526 <std_print+0x82>
		print_formatted(log_output, str, args[0], args[1], args[2],
    3578:	6923      	ldr	r3, [r4, #16]
    357a:	9302      	str	r3, [sp, #8]
    357c:	68e3      	ldr	r3, [r4, #12]
    357e:	9301      	str	r3, [sp, #4]
    3580:	68a3      	ldr	r3, [r4, #8]
    3582:	9300      	str	r3, [sp, #0]
    3584:	e9d4 2300 	ldrd	r2, r3, [r4]
    3588:	4631      	mov	r1, r6
    358a:	4628      	mov	r0, r5
    358c:	f7ff ff6c 	bl	3468 <print_formatted>
		break;
    3590:	e7c9      	b.n	3526 <std_print+0x82>
		print_formatted(log_output, str, args[0], args[1], args[2],
    3592:	6963      	ldr	r3, [r4, #20]
    3594:	9303      	str	r3, [sp, #12]
    3596:	6923      	ldr	r3, [r4, #16]
    3598:	9302      	str	r3, [sp, #8]
    359a:	68e3      	ldr	r3, [r4, #12]
    359c:	9301      	str	r3, [sp, #4]
    359e:	68a3      	ldr	r3, [r4, #8]
    35a0:	9300      	str	r3, [sp, #0]
    35a2:	e9d4 2300 	ldrd	r2, r3, [r4]
    35a6:	4631      	mov	r1, r6
    35a8:	4628      	mov	r0, r5
    35aa:	f7ff ff5d 	bl	3468 <print_formatted>
		break;
    35ae:	e7ba      	b.n	3526 <std_print+0x82>
		print_formatted(log_output, str, args[0], args[1], args[2],
    35b0:	69a3      	ldr	r3, [r4, #24]
    35b2:	9304      	str	r3, [sp, #16]
    35b4:	6963      	ldr	r3, [r4, #20]
    35b6:	9303      	str	r3, [sp, #12]
    35b8:	6923      	ldr	r3, [r4, #16]
    35ba:	9302      	str	r3, [sp, #8]
    35bc:	68e3      	ldr	r3, [r4, #12]
    35be:	9301      	str	r3, [sp, #4]
    35c0:	68a3      	ldr	r3, [r4, #8]
    35c2:	9300      	str	r3, [sp, #0]
    35c4:	e9d4 2300 	ldrd	r2, r3, [r4]
    35c8:	4631      	mov	r1, r6
    35ca:	4628      	mov	r0, r5
    35cc:	f7ff ff4c 	bl	3468 <print_formatted>
		break;
    35d0:	e7a9      	b.n	3526 <std_print+0x82>
		print_formatted(log_output, str, args[0], args[1], args[2],
    35d2:	69e3      	ldr	r3, [r4, #28]
    35d4:	9305      	str	r3, [sp, #20]
    35d6:	69a3      	ldr	r3, [r4, #24]
    35d8:	9304      	str	r3, [sp, #16]
    35da:	6963      	ldr	r3, [r4, #20]
    35dc:	9303      	str	r3, [sp, #12]
    35de:	6923      	ldr	r3, [r4, #16]
    35e0:	9302      	str	r3, [sp, #8]
    35e2:	68e3      	ldr	r3, [r4, #12]
    35e4:	9301      	str	r3, [sp, #4]
    35e6:	68a3      	ldr	r3, [r4, #8]
    35e8:	9300      	str	r3, [sp, #0]
    35ea:	e9d4 2300 	ldrd	r2, r3, [r4]
    35ee:	4631      	mov	r1, r6
    35f0:	4628      	mov	r0, r5
    35f2:	f7ff ff39 	bl	3468 <print_formatted>
		break;
    35f6:	e796      	b.n	3526 <std_print+0x82>
		print_formatted(log_output, str, args[0], args[1], args[2],
    35f8:	6a23      	ldr	r3, [r4, #32]
    35fa:	9306      	str	r3, [sp, #24]
    35fc:	69e3      	ldr	r3, [r4, #28]
    35fe:	9305      	str	r3, [sp, #20]
    3600:	69a3      	ldr	r3, [r4, #24]
    3602:	9304      	str	r3, [sp, #16]
    3604:	6963      	ldr	r3, [r4, #20]
    3606:	9303      	str	r3, [sp, #12]
    3608:	6923      	ldr	r3, [r4, #16]
    360a:	9302      	str	r3, [sp, #8]
    360c:	68e3      	ldr	r3, [r4, #12]
    360e:	9301      	str	r3, [sp, #4]
    3610:	68a3      	ldr	r3, [r4, #8]
    3612:	9300      	str	r3, [sp, #0]
    3614:	e9d4 2300 	ldrd	r2, r3, [r4]
    3618:	4631      	mov	r1, r6
    361a:	4628      	mov	r0, r5
    361c:	f7ff ff24 	bl	3468 <print_formatted>
		break;
    3620:	e781      	b.n	3526 <std_print+0x82>
		print_formatted(log_output, str, args[0], args[1], args[2],
    3622:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3624:	9307      	str	r3, [sp, #28]
    3626:	6a23      	ldr	r3, [r4, #32]
    3628:	9306      	str	r3, [sp, #24]
    362a:	69e3      	ldr	r3, [r4, #28]
    362c:	9305      	str	r3, [sp, #20]
    362e:	69a3      	ldr	r3, [r4, #24]
    3630:	9304      	str	r3, [sp, #16]
    3632:	6963      	ldr	r3, [r4, #20]
    3634:	9303      	str	r3, [sp, #12]
    3636:	6923      	ldr	r3, [r4, #16]
    3638:	9302      	str	r3, [sp, #8]
    363a:	68e3      	ldr	r3, [r4, #12]
    363c:	9301      	str	r3, [sp, #4]
    363e:	68a3      	ldr	r3, [r4, #8]
    3640:	9300      	str	r3, [sp, #0]
    3642:	e9d4 2300 	ldrd	r2, r3, [r4]
    3646:	4631      	mov	r1, r6
    3648:	4628      	mov	r0, r5
    364a:	f7ff ff0d 	bl	3468 <print_formatted>
		break;
    364e:	e76a      	b.n	3526 <std_print+0x82>
		print_formatted(log_output, str, args[0], args[1], args[2],
    3650:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3652:	9308      	str	r3, [sp, #32]
    3654:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3656:	9307      	str	r3, [sp, #28]
    3658:	6a23      	ldr	r3, [r4, #32]
    365a:	9306      	str	r3, [sp, #24]
    365c:	69e3      	ldr	r3, [r4, #28]
    365e:	9305      	str	r3, [sp, #20]
    3660:	69a3      	ldr	r3, [r4, #24]
    3662:	9304      	str	r3, [sp, #16]
    3664:	6963      	ldr	r3, [r4, #20]
    3666:	9303      	str	r3, [sp, #12]
    3668:	6923      	ldr	r3, [r4, #16]
    366a:	9302      	str	r3, [sp, #8]
    366c:	68e3      	ldr	r3, [r4, #12]
    366e:	9301      	str	r3, [sp, #4]
    3670:	68a3      	ldr	r3, [r4, #8]
    3672:	9300      	str	r3, [sp, #0]
    3674:	e9d4 2300 	ldrd	r2, r3, [r4]
    3678:	4631      	mov	r1, r6
    367a:	4628      	mov	r0, r5
    367c:	f7ff fef4 	bl	3468 <print_formatted>
		break;
    3680:	e751      	b.n	3526 <std_print+0x82>
		print_formatted(log_output, str, args[0], args[1], args[2],
    3682:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3684:	9309      	str	r3, [sp, #36]	; 0x24
    3686:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3688:	9308      	str	r3, [sp, #32]
    368a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    368c:	9307      	str	r3, [sp, #28]
    368e:	6a23      	ldr	r3, [r4, #32]
    3690:	9306      	str	r3, [sp, #24]
    3692:	69e3      	ldr	r3, [r4, #28]
    3694:	9305      	str	r3, [sp, #20]
    3696:	69a3      	ldr	r3, [r4, #24]
    3698:	9304      	str	r3, [sp, #16]
    369a:	6963      	ldr	r3, [r4, #20]
    369c:	9303      	str	r3, [sp, #12]
    369e:	6923      	ldr	r3, [r4, #16]
    36a0:	9302      	str	r3, [sp, #8]
    36a2:	68e3      	ldr	r3, [r4, #12]
    36a4:	9301      	str	r3, [sp, #4]
    36a6:	68a3      	ldr	r3, [r4, #8]
    36a8:	9300      	str	r3, [sp, #0]
    36aa:	e9d4 2300 	ldrd	r2, r3, [r4]
    36ae:	4631      	mov	r1, r6
    36b0:	4628      	mov	r0, r5
    36b2:	f7ff fed9 	bl	3468 <print_formatted>
		break;
    36b6:	e736      	b.n	3526 <std_print+0x82>
		print_formatted(log_output, str, args[0], args[1], args[2],
    36b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    36ba:	930a      	str	r3, [sp, #40]	; 0x28
    36bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    36be:	9309      	str	r3, [sp, #36]	; 0x24
    36c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    36c2:	9308      	str	r3, [sp, #32]
    36c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    36c6:	9307      	str	r3, [sp, #28]
    36c8:	6a23      	ldr	r3, [r4, #32]
    36ca:	9306      	str	r3, [sp, #24]
    36cc:	69e3      	ldr	r3, [r4, #28]
    36ce:	9305      	str	r3, [sp, #20]
    36d0:	69a3      	ldr	r3, [r4, #24]
    36d2:	9304      	str	r3, [sp, #16]
    36d4:	6963      	ldr	r3, [r4, #20]
    36d6:	9303      	str	r3, [sp, #12]
    36d8:	6923      	ldr	r3, [r4, #16]
    36da:	9302      	str	r3, [sp, #8]
    36dc:	68e3      	ldr	r3, [r4, #12]
    36de:	9301      	str	r3, [sp, #4]
    36e0:	68a3      	ldr	r3, [r4, #8]
    36e2:	9300      	str	r3, [sp, #0]
    36e4:	e9d4 2300 	ldrd	r2, r3, [r4]
    36e8:	4631      	mov	r1, r6
    36ea:	4628      	mov	r0, r5
    36ec:	f7ff febc 	bl	3468 <print_formatted>
		break;
    36f0:	e719      	b.n	3526 <std_print+0x82>
		print_formatted(log_output, str, args[0], args[1], args[2],
    36f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    36f4:	930b      	str	r3, [sp, #44]	; 0x2c
    36f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    36f8:	930a      	str	r3, [sp, #40]	; 0x28
    36fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    36fc:	9309      	str	r3, [sp, #36]	; 0x24
    36fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3700:	9308      	str	r3, [sp, #32]
    3702:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3704:	9307      	str	r3, [sp, #28]
    3706:	6a23      	ldr	r3, [r4, #32]
    3708:	9306      	str	r3, [sp, #24]
    370a:	69e3      	ldr	r3, [r4, #28]
    370c:	9305      	str	r3, [sp, #20]
    370e:	69a3      	ldr	r3, [r4, #24]
    3710:	9304      	str	r3, [sp, #16]
    3712:	6963      	ldr	r3, [r4, #20]
    3714:	9303      	str	r3, [sp, #12]
    3716:	6923      	ldr	r3, [r4, #16]
    3718:	9302      	str	r3, [sp, #8]
    371a:	68e3      	ldr	r3, [r4, #12]
    371c:	9301      	str	r3, [sp, #4]
    371e:	68a3      	ldr	r3, [r4, #8]
    3720:	9300      	str	r3, [sp, #0]
    3722:	e9d4 2300 	ldrd	r2, r3, [r4]
    3726:	4631      	mov	r1, r6
    3728:	4628      	mov	r0, r5
    372a:	f7ff fe9d 	bl	3468 <print_formatted>
		break;
    372e:	e6fa      	b.n	3526 <std_print+0x82>
		print_formatted(log_output, str, args[0], args[1], args[2],
    3730:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3732:	930c      	str	r3, [sp, #48]	; 0x30
    3734:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3736:	930b      	str	r3, [sp, #44]	; 0x2c
    3738:	6b23      	ldr	r3, [r4, #48]	; 0x30
    373a:	930a      	str	r3, [sp, #40]	; 0x28
    373c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    373e:	9309      	str	r3, [sp, #36]	; 0x24
    3740:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3742:	9308      	str	r3, [sp, #32]
    3744:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3746:	9307      	str	r3, [sp, #28]
    3748:	6a23      	ldr	r3, [r4, #32]
    374a:	9306      	str	r3, [sp, #24]
    374c:	69e3      	ldr	r3, [r4, #28]
    374e:	9305      	str	r3, [sp, #20]
    3750:	69a3      	ldr	r3, [r4, #24]
    3752:	9304      	str	r3, [sp, #16]
    3754:	6963      	ldr	r3, [r4, #20]
    3756:	9303      	str	r3, [sp, #12]
    3758:	6923      	ldr	r3, [r4, #16]
    375a:	9302      	str	r3, [sp, #8]
    375c:	68e3      	ldr	r3, [r4, #12]
    375e:	9301      	str	r3, [sp, #4]
    3760:	68a3      	ldr	r3, [r4, #8]
    3762:	9300      	str	r3, [sp, #0]
    3764:	e9d4 2300 	ldrd	r2, r3, [r4]
    3768:	4631      	mov	r1, r6
    376a:	4628      	mov	r0, r5
    376c:	f7ff fe7c 	bl	3468 <print_formatted>
}
    3770:	e6d9      	b.n	3526 <std_print+0x82>
    3772:	370c      	adds	r7, #12
    3774:	46bd      	mov	sp, r7
    3776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    377a:	bf00      	nop
    377c:	200036b0 	.word	0x200036b0

00003780 <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
    3780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3784:	b089      	sub	sp, #36	; 0x24
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    3786:	f011 0602 	ands.w	r6, r1, #2
{
    378a:	9205      	str	r2, [sp, #20]
    378c:	4a3d      	ldr	r2, [pc, #244]	; (3884 <prefix_print+0x104>)
    378e:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    3792:	6812      	ldr	r2, [r2, #0]
    3794:	9207      	str	r2, [sp, #28]
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    3796:	f001 0201 	and.w	r2, r1, #1
{
    379a:	4607      	mov	r7, r0
    379c:	f89d a04c 	ldrb.w	sl, [sp, #76]	; 0x4c
    37a0:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    37a4:	9204      	str	r2, [sp, #16]
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    37a6:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    37aa:	d007      	beq.n	37bc <prefix_print+0x3c>
	if (!format) {
    37ac:	f011 0f44 	tst.w	r1, #68	; 0x44
    37b0:	d138      	bne.n	3824 <prefix_print+0xa4>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    37b2:	461a      	mov	r2, r3
    37b4:	4934      	ldr	r1, [pc, #208]	; (3888 <prefix_print+0x108>)
    37b6:	f7ff fe57 	bl	3468 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
    37ba:	4606      	mov	r6, r0
	if (color) {
    37bc:	9b04      	ldr	r3, [sp, #16]
    37be:	b153      	cbz	r3, 37d6 <prefix_print+0x56>
		const char *color = start && (colors[level] != NULL) ?
    37c0:	4b32      	ldr	r3, [pc, #200]	; (388c <prefix_print+0x10c>)
		print_formatted(log_output, "%s", color);
    37c2:	4933      	ldr	r1, [pc, #204]	; (3890 <prefix_print+0x110>)
		const char *color = start && (colors[level] != NULL) ?
    37c4:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
		print_formatted(log_output, "%s", color);
    37c8:	4b32      	ldr	r3, [pc, #200]	; (3894 <prefix_print+0x114>)
    37ca:	4638      	mov	r0, r7
    37cc:	2a00      	cmp	r2, #0
    37ce:	bf08      	it	eq
    37d0:	461a      	moveq	r2, r3
    37d2:	f7ff fe49 	bl	3468 <print_formatted>
	if (level_on) {
    37d6:	b13d      	cbz	r5, 37e8 <prefix_print+0x68>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    37d8:	4b2f      	ldr	r3, [pc, #188]	; (3898 <prefix_print+0x118>)
    37da:	4930      	ldr	r1, [pc, #192]	; (389c <prefix_print+0x11c>)
    37dc:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
    37e0:	4638      	mov	r0, r7
    37e2:	f7ff fe41 	bl	3468 <print_formatted>
    37e6:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    37e8:	9b05      	ldr	r3, [sp, #20]
    37ea:	2b00      	cmp	r3, #0
    37ec:	d044      	beq.n	3878 <prefix_print+0xf8>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    37ee:	2301      	movs	r3, #1
    37f0:	fa03 f808 	lsl.w	r8, r3, r8
	total += print_formatted(log_output,
    37f4:	4b2a      	ldr	r3, [pc, #168]	; (38a0 <prefix_print+0x120>)
    37f6:	4c2b      	ldr	r4, [pc, #172]	; (38a4 <prefix_print+0x124>)
    37f8:	f018 0f10 	tst.w	r8, #16
    37fc:	bf18      	it	ne
    37fe:	461c      	movne	r4, r3
    3800:	4649      	mov	r1, r9
    3802:	4650      	mov	r0, sl
    3804:	f7ff fb8c 	bl	2f20 <log_source_name_get>
    3808:	4621      	mov	r1, r4
    380a:	4602      	mov	r2, r0
    380c:	4638      	mov	r0, r7
    380e:	f7ff fe2b 	bl	3468 <print_formatted>
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
    3812:	4b1c      	ldr	r3, [pc, #112]	; (3884 <prefix_print+0x104>)
    3814:	9a07      	ldr	r2, [sp, #28]
    3816:	681b      	ldr	r3, [r3, #0]
	total += print_formatted(log_output,
    3818:	4428      	add	r0, r5
}
    381a:	429a      	cmp	r2, r3
    381c:	4430      	add	r0, r6
    381e:	d02d      	beq.n	387c <prefix_print+0xfc>
    3820:	f007 fbfc 	bl	b01c <_StackCheckHandler>
	} else if (freq != 0U) {
    3824:	4a20      	ldr	r2, [pc, #128]	; (38a8 <prefix_print+0x128>)
    3826:	6811      	ldr	r1, [r2, #0]
    3828:	b321      	cbz	r1, 3874 <prefix_print+0xf4>
		timestamp /= timestamp_div;
    382a:	4a20      	ldr	r2, [pc, #128]	; (38ac <prefix_print+0x12c>)
    382c:	f44f 6c61 	mov.w	ip, #3600	; 0xe10
    3830:	6814      	ldr	r4, [r2, #0]
    3832:	fbb3 f3f4 	udiv	r3, r3, r4
		ms = (remainder * 1000U) / freq;
    3836:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
		seconds = timestamp / freq;
    383a:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    383e:	fbb4 f2fc 	udiv	r2, r4, ip
    3842:	fb0c 4c12 	mls	ip, ip, r2, r4
		remainder = timestamp % freq;
    3846:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    384a:	4374      	muls	r4, r6
		mins = seconds / 60U;
    384c:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    3850:	fbb4 fbf1 	udiv	fp, r4, r1
    3854:	fb01 441b 	mls	r4, r1, fp, r4
		mins = seconds / 60U;
    3858:	fbbc f3fe 	udiv	r3, ip, lr
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    385c:	4374      	muls	r4, r6
    385e:	fbb4 f4f1 	udiv	r4, r4, r1
			length = print_formatted(log_output,
    3862:	fb0e c113 	mls	r1, lr, r3, ip
    3866:	9100      	str	r1, [sp, #0]
    3868:	e9cd b401 	strd	fp, r4, [sp, #4]
    386c:	4910      	ldr	r1, [pc, #64]	; (38b0 <prefix_print+0x130>)
    386e:	f7ff fdfb 	bl	3468 <print_formatted>
    3872:	e7a2      	b.n	37ba <prefix_print+0x3a>
		length = 0;
    3874:	4608      	mov	r0, r1
    3876:	e7a0      	b.n	37ba <prefix_print+0x3a>
	total += print_formatted(log_output,
    3878:	4c0a      	ldr	r4, [pc, #40]	; (38a4 <prefix_print+0x124>)
    387a:	e7c1      	b.n	3800 <prefix_print+0x80>
}
    387c:	b009      	add	sp, #36	; 0x24
    387e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3882:	bf00      	nop
    3884:	200036b0 	.word	0x200036b0
    3888:	0000b8fd 	.word	0x0000b8fd
    388c:	0000b750 	.word	0x0000b750
    3890:	0000b922 	.word	0x0000b922
    3894:	0000b8ef 	.word	0x0000b8ef
    3898:	0000b764 	.word	0x0000b764
    389c:	0000b925 	.word	0x0000b925
    38a0:	0000b8f9 	.word	0x0000b8f9
    38a4:	0000b8f4 	.word	0x0000b8f4
    38a8:	2000030c 	.word	0x2000030c
    38ac:	20000310 	.word	0x20000310
    38b0:	0000b906 	.word	0x0000b906

000038b4 <hexdump_line_print>:
{
    38b4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    38b8:	4e2a      	ldr	r6, [pc, #168]	; (3964 <hexdump_line_print+0xb0>)
    38ba:	4699      	mov	r9, r3
    38bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    38be:	4690      	mov	r8, r2
    38c0:	6832      	ldr	r2, [r6, #0]
    38c2:	9201      	str	r2, [sp, #4]
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    38c4:	06da      	lsls	r2, r3, #27
{
    38c6:	4604      	mov	r4, r0
    38c8:	460f      	mov	r7, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    38ca:	d405      	bmi.n	38d8 <hexdump_line_print+0x24>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    38cc:	069b      	lsls	r3, r3, #26
		print_formatted(ctx, "\n");
    38ce:	bf4c      	ite	mi
    38d0:	4925      	ldrmi	r1, [pc, #148]	; (3968 <hexdump_line_print+0xb4>)
		print_formatted(ctx, "\r\n");
    38d2:	4926      	ldrpl	r1, [pc, #152]	; (396c <hexdump_line_print+0xb8>)
    38d4:	f7ff fdc8 	bl	3468 <print_formatted>
		print_formatted(log_output, " ");
    38d8:	f8df a098 	ldr.w	sl, [pc, #152]	; 3974 <hexdump_line_print+0xc0>
{
    38dc:	2500      	movs	r5, #0
	for (int i = 0; i < prefix_offset; i++) {
    38de:	454d      	cmp	r5, r9
    38e0:	db2c      	blt.n	393c <hexdump_line_print+0x88>
			print_formatted(log_output, "   ");
    38e2:	f8df 9094 	ldr.w	r9, [pc, #148]	; 3978 <hexdump_line_print+0xc4>
			print_formatted(log_output, "%02x ", data[i]);
    38e6:	f8df a094 	ldr.w	sl, [pc, #148]	; 397c <hexdump_line_print+0xc8>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    38ea:	2500      	movs	r5, #0
		if (i < length) {
    38ec:	45a8      	cmp	r8, r5
    38ee:	d92b      	bls.n	3948 <hexdump_line_print+0x94>
			print_formatted(log_output, "%02x ", data[i]);
    38f0:	5d7a      	ldrb	r2, [r7, r5]
    38f2:	4651      	mov	r1, sl
    38f4:	4620      	mov	r0, r4
    38f6:	f7ff fdb7 	bl	3468 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    38fa:	3501      	adds	r5, #1
    38fc:	2d08      	cmp	r5, #8
    38fe:	d1f5      	bne.n	38ec <hexdump_line_print+0x38>
	print_formatted(log_output, "|");
    3900:	491b      	ldr	r1, [pc, #108]	; (3970 <hexdump_line_print+0xbc>)
			print_formatted(log_output, " ");
    3902:	f8df 9070 	ldr.w	r9, [pc, #112]	; 3974 <hexdump_line_print+0xc0>
			print_formatted(log_output, "%c",
    3906:	f8df a078 	ldr.w	sl, [pc, #120]	; 3980 <hexdump_line_print+0xcc>
	print_formatted(log_output, "|");
    390a:	4620      	mov	r0, r4
    390c:	f7ff fdac 	bl	3468 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3910:	2500      	movs	r5, #0
		if (i < length) {
    3912:	45a8      	cmp	r8, r5
    3914:	d91d      	bls.n	3952 <hexdump_line_print+0x9e>
			      isprint((int)c) ? c : '.');
    3916:	5d7a      	ldrb	r2, [r7, r5]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    3918:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(log_output, "%c",
    391c:	2b5f      	cmp	r3, #95	; 0x5f
    391e:	bf28      	it	cs
    3920:	222e      	movcs	r2, #46	; 0x2e
    3922:	4651      	mov	r1, sl
    3924:	4620      	mov	r0, r4
    3926:	f7ff fd9f 	bl	3468 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    392a:	3501      	adds	r5, #1
    392c:	2d08      	cmp	r5, #8
    392e:	d1f0      	bne.n	3912 <hexdump_line_print+0x5e>
}
    3930:	9a01      	ldr	r2, [sp, #4]
    3932:	6833      	ldr	r3, [r6, #0]
    3934:	429a      	cmp	r2, r3
    3936:	d011      	beq.n	395c <hexdump_line_print+0xa8>
    3938:	f007 fb70 	bl	b01c <_StackCheckHandler>
		print_formatted(log_output, " ");
    393c:	4651      	mov	r1, sl
    393e:	4620      	mov	r0, r4
    3940:	f7ff fd92 	bl	3468 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    3944:	3501      	adds	r5, #1
    3946:	e7ca      	b.n	38de <hexdump_line_print+0x2a>
			print_formatted(log_output, "   ");
    3948:	4649      	mov	r1, r9
    394a:	4620      	mov	r0, r4
    394c:	f7ff fd8c 	bl	3468 <print_formatted>
    3950:	e7d3      	b.n	38fa <hexdump_line_print+0x46>
			print_formatted(log_output, " ");
    3952:	4649      	mov	r1, r9
    3954:	4620      	mov	r0, r4
    3956:	f7ff fd87 	bl	3468 <print_formatted>
    395a:	e7e6      	b.n	392a <hexdump_line_print+0x76>
}
    395c:	b002      	add	sp, #8
    395e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3962:	bf00      	nop
    3964:	200036b0 	.word	0x200036b0
    3968:	0000b8b4 	.word	0x0000b8b4
    396c:	0000b8b3 	.word	0x0000b8b3
    3970:	0000b8c0 	.word	0x0000b8c0
    3974:	0000b8be 	.word	0x0000b8be
    3978:	0000b8bc 	.word	0x0000b8bc
    397c:	0000b8b6 	.word	0x0000b8b6
    3980:	0000b8c2 	.word	0x0000b8c2

00003984 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
    3984:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3986:	4c12      	ldr	r4, [pc, #72]	; (39d0 <postfix_print+0x4c>)
    3988:	6823      	ldr	r3, [r4, #0]
    398a:	9301      	str	r3, [sp, #4]
	if (color) {
    398c:	07cb      	lsls	r3, r1, #31
{
    398e:	4606      	mov	r6, r0
    3990:	460d      	mov	r5, r1
	if (color) {
    3992:	d503      	bpl.n	399c <postfix_print+0x18>
		print_formatted(log_output, "%s", color);
    3994:	4a0f      	ldr	r2, [pc, #60]	; (39d4 <postfix_print+0x50>)
    3996:	4910      	ldr	r1, [pc, #64]	; (39d8 <postfix_print+0x54>)
    3998:	f7ff fd66 	bl	3468 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    399c:	06e8      	lsls	r0, r5, #27
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    399e:	9a01      	ldr	r2, [sp, #4]
    39a0:	6823      	ldr	r3, [r4, #0]
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    39a2:	d410      	bmi.n	39c6 <postfix_print+0x42>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    39a4:	06a9      	lsls	r1, r5, #26
    39a6:	d50a      	bpl.n	39be <postfix_print+0x3a>
		print_formatted(ctx, "\n");
    39a8:	429a      	cmp	r2, r3
    39aa:	d001      	beq.n	39b0 <postfix_print+0x2c>
}
    39ac:	f007 fb36 	bl	b01c <_StackCheckHandler>
		print_formatted(ctx, "\n");
    39b0:	490a      	ldr	r1, [pc, #40]	; (39dc <postfix_print+0x58>)
		print_formatted(ctx, "\r\n");
    39b2:	4630      	mov	r0, r6
}
    39b4:	b002      	add	sp, #8
    39b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		print_formatted(ctx, "\r\n");
    39ba:	f7ff bd55 	b.w	3468 <print_formatted>
    39be:	429a      	cmp	r2, r3
    39c0:	d1f4      	bne.n	39ac <postfix_print+0x28>
    39c2:	4907      	ldr	r1, [pc, #28]	; (39e0 <postfix_print+0x5c>)
    39c4:	e7f5      	b.n	39b2 <postfix_print+0x2e>
}
    39c6:	429a      	cmp	r2, r3
    39c8:	d1f0      	bne.n	39ac <postfix_print+0x28>
    39ca:	b002      	add	sp, #8
    39cc:	bd70      	pop	{r4, r5, r6, pc}
    39ce:	bf00      	nop
    39d0:	200036b0 	.word	0x200036b0
    39d4:	0000b8ef 	.word	0x0000b8ef
    39d8:	0000b922 	.word	0x0000b922
    39dc:	0000b8b4 	.word	0x0000b8b4
    39e0:	0000b8b3 	.word	0x0000b8b3

000039e4 <log_output_flush>:
{
    39e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    39e6:	4d0b      	ldr	r5, [pc, #44]	; (3a14 <log_output_flush+0x30>)
		     log_output->control_block->offset,
    39e8:	6842      	ldr	r2, [r0, #4]
{
    39ea:	682b      	ldr	r3, [r5, #0]
    39ec:	9301      	str	r3, [sp, #4]
    39ee:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
    39f0:	e9d2 2300 	ldrd	r2, r3, [r2]
    39f4:	6881      	ldr	r1, [r0, #8]
    39f6:	6800      	ldr	r0, [r0, #0]
    39f8:	f7ff fd1a 	bl	3430 <buffer_write>
	log_output->control_block->offset = 0;
    39fc:	6863      	ldr	r3, [r4, #4]
    39fe:	2200      	movs	r2, #0
    3a00:	601a      	str	r2, [r3, #0]
}
    3a02:	9a01      	ldr	r2, [sp, #4]
    3a04:	682b      	ldr	r3, [r5, #0]
    3a06:	429a      	cmp	r2, r3
    3a08:	d001      	beq.n	3a0e <log_output_flush+0x2a>
    3a0a:	f007 fb07 	bl	b01c <_StackCheckHandler>
    3a0e:	b003      	add	sp, #12
    3a10:	bd30      	pop	{r4, r5, pc}
    3a12:	bf00      	nop
    3a14:	200036b0 	.word	0x200036b0

00003a18 <out_func>:
{
    3a18:	b513      	push	{r0, r1, r4, lr}
    3a1a:	4c0d      	ldr	r4, [pc, #52]	; (3a50 <out_func+0x38>)
    3a1c:	6822      	ldr	r2, [r4, #0]
    3a1e:	9201      	str	r2, [sp, #4]
	out_ctx->buf[out_ctx->control_block->offset] = (u8_t)c;
    3a20:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    3a24:	6812      	ldr	r2, [r2, #0]
    3a26:	5498      	strb	r0, [r3, r2]
	out_ctx->control_block->offset++;
    3a28:	6848      	ldr	r0, [r1, #4]
    3a2a:	6802      	ldr	r2, [r0, #0]
    3a2c:	3201      	adds	r2, #1
    3a2e:	6002      	str	r2, [r0, #0]
	if (out_ctx->control_block->offset == out_ctx->size) {
    3a30:	68c8      	ldr	r0, [r1, #12]
    3a32:	4282      	cmp	r2, r0
    3a34:	d102      	bne.n	3a3c <out_func+0x24>
		log_output_flush(out_ctx);
    3a36:	4608      	mov	r0, r1
    3a38:	f7ff ffd4 	bl	39e4 <log_output_flush>
}
    3a3c:	9a01      	ldr	r2, [sp, #4]
    3a3e:	6823      	ldr	r3, [r4, #0]
    3a40:	429a      	cmp	r2, r3
    3a42:	f04f 0000 	mov.w	r0, #0
    3a46:	d001      	beq.n	3a4c <out_func+0x34>
    3a48:	f007 fae8 	bl	b01c <_StackCheckHandler>
    3a4c:	b002      	add	sp, #8
    3a4e:	bd10      	pop	{r4, pc}
    3a50:	200036b0 	.word	0x200036b0

00003a54 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    u32_t flags)
{
    3a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a58:	4f3c      	ldr	r7, [pc, #240]	; (3b4c <log_output_msg_process+0xf8>)
    3a5a:	b089      	sub	sp, #36	; 0x24
    3a5c:	683b      	ldr	r3, [r7, #0]
    3a5e:	9307      	str	r3, [sp, #28]
	return msg->hdr.ids.level;
    3a60:	7a8b      	ldrb	r3, [r1, #10]
	u16_t source_id = (u16_t)log_msg_source_id_get(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	int prefix_offset;

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    3a62:	f013 0407 	ands.w	r4, r3, #7
{
    3a66:	4690      	mov	r8, r2
    3a68:	4605      	mov	r5, r0
    3a6a:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    3a6c:	7a0a      	ldrb	r2, [r1, #8]
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    3a6e:	d01c      	beq.n	3aaa <log_output_msg_process+0x56>
	return msg->hdr.ids.source_id;
    3a70:	8949      	ldrh	r1, [r1, #10]
    3a72:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    3a76:	0989      	lsrs	r1, r1, #6
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    3a78:	43d2      	mvns	r2, r2
    3a7a:	9102      	str	r1, [sp, #8]
    3a7c:	e9cd 4300 	strd	r4, r3, [sp]
    3a80:	f002 0201 	and.w	r2, r2, #1
    3a84:	68f3      	ldr	r3, [r6, #12]
    3a86:	4641      	mov	r1, r8
    3a88:	f7ff fe7a 	bl	3780 <prefix_print>
    3a8c:	4682      	mov	sl, r0
    3a8e:	7a33      	ldrb	r3, [r6, #8]
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    3a90:	07da      	lsls	r2, r3, #31
    3a92:	d40c      	bmi.n	3aae <log_output_msg_process+0x5a>
		std_print(msg, log_output);
    3a94:	4629      	mov	r1, r5
    3a96:	4630      	mov	r0, r6
    3a98:	f7ff fd04 	bl	34a4 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    3a9c:	b34c      	cbz	r4, 3af2 <log_output_msg_process+0x9e>
		postfix_print(log_output, flags, level);
    3a9e:	4622      	mov	r2, r4
    3aa0:	4641      	mov	r1, r8
    3aa2:	4628      	mov	r0, r5
    3aa4:	f7ff ff6e 	bl	3984 <postfix_print>
    3aa8:	e023      	b.n	3af2 <log_output_msg_process+0x9e>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    3aaa:	46a2      	mov	sl, r4
    3aac:	e7ef      	b.n	3a8e <log_output_msg_process+0x3a>
	} else if (raw_string) {
    3aae:	bb4c      	cbnz	r4, 3b04 <log_output_msg_process+0xb0>
	size_t offset = 0;
    3ab0:	46a0      	mov	r8, r4
		length = log_output->size;
    3ab2:	68eb      	ldr	r3, [r5, #12]
    3ab4:	9304      	str	r3, [sp, #16]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    3ab6:	aa04      	add	r2, sp, #16
    3ab8:	4643      	mov	r3, r8
    3aba:	68a9      	ldr	r1, [r5, #8]
    3abc:	4630      	mov	r0, r6
    3abe:	f7ff fca3 	bl	3408 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    3ac2:	9a04      	ldr	r2, [sp, #16]
    3ac4:	686b      	ldr	r3, [r5, #4]
    3ac6:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    3ac8:	b13a      	cbz	r2, 3ada <log_output_msg_process+0x86>
			eol = (log_output->buf[length - 1] == '\n');
    3aca:	68ab      	ldr	r3, [r5, #8]
    3acc:	4413      	add	r3, r2
    3ace:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    3ad2:	f1a4 030a 	sub.w	r3, r4, #10
    3ad6:	425c      	negs	r4, r3
    3ad8:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    3ada:	4628      	mov	r0, r5
    3adc:	f7ff ff82 	bl	39e4 <log_output_flush>
		offset += length;
    3ae0:	9b04      	ldr	r3, [sp, #16]
    3ae2:	4498      	add	r8, r3
	} while (length > 0);
    3ae4:	2b00      	cmp	r3, #0
    3ae6:	d1e4      	bne.n	3ab2 <log_output_msg_process+0x5e>
	if (eol) {
    3ae8:	b11c      	cbz	r4, 3af2 <log_output_msg_process+0x9e>
		print_formatted(log_output, "\r");
    3aea:	4919      	ldr	r1, [pc, #100]	; (3b50 <log_output_msg_process+0xfc>)
    3aec:	4628      	mov	r0, r5
    3aee:	f7ff fcbb 	bl	3468 <print_formatted>
	}

	log_output_flush(log_output);
    3af2:	4628      	mov	r0, r5
    3af4:	f7ff ff76 	bl	39e4 <log_output_flush>
}
    3af8:	9a07      	ldr	r2, [sp, #28]
    3afa:	683b      	ldr	r3, [r7, #0]
    3afc:	429a      	cmp	r2, r3
    3afe:	d022      	beq.n	3b46 <log_output_msg_process+0xf2>
    3b00:	f007 fa8c 	bl	b01c <_StackCheckHandler>
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    3b04:	4630      	mov	r0, r6
    3b06:	f7ff fc6f 	bl	33e8 <log_msg_str_get>
    3b0a:	4912      	ldr	r1, [pc, #72]	; (3b54 <log_output_msg_process+0x100>)
    3b0c:	4602      	mov	r2, r0
    3b0e:	4628      	mov	r0, r5
    3b10:	f7ff fcaa 	bl	3468 <print_formatted>
	u32_t offset = 0U;
    3b14:	f04f 0900 	mov.w	r9, #0
		length = sizeof(buf);
    3b18:	f04f 0b08 	mov.w	fp, #8
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    3b1c:	aa04      	add	r2, sp, #16
    3b1e:	464b      	mov	r3, r9
    3b20:	a905      	add	r1, sp, #20
    3b22:	4630      	mov	r0, r6
		length = sizeof(buf);
    3b24:	f8cd b010 	str.w	fp, [sp, #16]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    3b28:	f7ff fc6e 	bl	3408 <log_msg_hexdump_data_get>
		if (length) {
    3b2c:	9a04      	ldr	r2, [sp, #16]
    3b2e:	2a00      	cmp	r2, #0
    3b30:	d0b5      	beq.n	3a9e <log_output_msg_process+0x4a>
			hexdump_line_print(log_output, buf, length,
    3b32:	4653      	mov	r3, sl
    3b34:	f8cd 8000 	str.w	r8, [sp]
    3b38:	a905      	add	r1, sp, #20
    3b3a:	4628      	mov	r0, r5
    3b3c:	f7ff feba 	bl	38b4 <hexdump_line_print>
			offset += length;
    3b40:	9b04      	ldr	r3, [sp, #16]
    3b42:	4499      	add	r9, r3
    3b44:	e7ea      	b.n	3b1c <log_output_msg_process+0xc8>
}
    3b46:	b009      	add	sp, #36	; 0x24
    3b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b4c:	200036b0 	.word	0x200036b0
    3b50:	0000b8c5 	.word	0x0000b8c5
    3b54:	0000b922 	.word	0x0000b922

00003b58 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, u32_t cnt)
{
    3b58:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b5a:	4e16      	ldr	r6, [pc, #88]	; (3bb4 <log_output_dropped_process+0x5c>)
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
	struct device *dev = (struct device *)log_output->control_block->ctx;

	cnt = MIN(cnt, 9999);
	len = snprintf(buf, sizeof(buf), "%d", cnt);
    3b5c:	4a16      	ldr	r2, [pc, #88]	; (3bb8 <log_output_dropped_process+0x60>)
{
    3b5e:	6833      	ldr	r3, [r6, #0]
    3b60:	b085      	sub	sp, #20
    3b62:	9303      	str	r3, [sp, #12]
	struct device *dev = (struct device *)log_output->control_block->ctx;
    3b64:	e9d0 4300 	ldrd	r4, r3, [r0]
    3b68:	685d      	ldr	r5, [r3, #4]
	len = snprintf(buf, sizeof(buf), "%d", cnt);
    3b6a:	f242 730f 	movw	r3, #9999	; 0x270f
    3b6e:	428b      	cmp	r3, r1
    3b70:	bf28      	it	cs
    3b72:	460b      	movcs	r3, r1
    3b74:	a801      	add	r0, sp, #4
    3b76:	2105      	movs	r1, #5
    3b78:	f004 fdd6 	bl	8728 <snprintf>

	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
    3b7c:	462b      	mov	r3, r5
	len = snprintf(buf, sizeof(buf), "%d", cnt);
    3b7e:	4607      	mov	r7, r0
	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
    3b80:	220b      	movs	r2, #11
    3b82:	490e      	ldr	r1, [pc, #56]	; (3bbc <log_output_dropped_process+0x64>)
    3b84:	4620      	mov	r0, r4
    3b86:	f7ff fc53 	bl	3430 <buffer_write>
	buffer_write(outf, buf, len, dev);
    3b8a:	462b      	mov	r3, r5
    3b8c:	463a      	mov	r2, r7
    3b8e:	a901      	add	r1, sp, #4
    3b90:	4620      	mov	r0, r4
    3b92:	f7ff fc4d 	bl	3430 <buffer_write>
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
    3b96:	462b      	mov	r3, r5
    3b98:	221b      	movs	r2, #27
    3b9a:	4909      	ldr	r1, [pc, #36]	; (3bc0 <log_output_dropped_process+0x68>)
    3b9c:	4620      	mov	r0, r4
    3b9e:	f7ff fc47 	bl	3430 <buffer_write>
}
    3ba2:	9a03      	ldr	r2, [sp, #12]
    3ba4:	6833      	ldr	r3, [r6, #0]
    3ba6:	429a      	cmp	r2, r3
    3ba8:	d001      	beq.n	3bae <log_output_dropped_process+0x56>
    3baa:	f007 fa37 	bl	b01c <_StackCheckHandler>
    3bae:	b005      	add	sp, #20
    3bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3bb2:	bf00      	nop
    3bb4:	200036b0 	.word	0x200036b0
    3bb8:	0000bdc5 	.word	0x0000bdc5
    3bbc:	0000b8e3 	.word	0x0000b8e3
    3bc0:	0000b8c7 	.word	0x0000b8c7

00003bc4 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(u32_t frequency)
{
    3bc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3bc6:	4a0d      	ldr	r2, [pc, #52]	; (3bfc <log_output_timestamp_freq_set+0x38>)
	timestamp_div = 1U;
    3bc8:	490d      	ldr	r1, [pc, #52]	; (3c00 <log_output_timestamp_freq_set+0x3c>)
{
    3bca:	6813      	ldr	r3, [r2, #0]
    3bcc:	9301      	str	r3, [sp, #4]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    3bce:	4d0d      	ldr	r5, [pc, #52]	; (3c04 <log_output_timestamp_freq_set+0x40>)
	timestamp_div = 1U;
    3bd0:	2301      	movs	r3, #1
    3bd2:	600b      	str	r3, [r1, #0]
	while (frequency > 1000000) {
    3bd4:	2400      	movs	r4, #0
    3bd6:	42a8      	cmp	r0, r5
    3bd8:	d809      	bhi.n	3bee <log_output_timestamp_freq_set+0x2a>
    3bda:	b104      	cbz	r4, 3bde <log_output_timestamp_freq_set+0x1a>
    3bdc:	600b      	str	r3, [r1, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    3bde:	4b0a      	ldr	r3, [pc, #40]	; (3c08 <log_output_timestamp_freq_set+0x44>)
}
    3be0:	9901      	ldr	r1, [sp, #4]
	freq = frequency;
    3be2:	6018      	str	r0, [r3, #0]
}
    3be4:	6813      	ldr	r3, [r2, #0]
    3be6:	4299      	cmp	r1, r3
    3be8:	d005      	beq.n	3bf6 <log_output_timestamp_freq_set+0x32>
    3bea:	f007 fa17 	bl	b01c <_StackCheckHandler>
		frequency /= 2U;
    3bee:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    3bf0:	005b      	lsls	r3, r3, #1
    3bf2:	2401      	movs	r4, #1
    3bf4:	e7ef      	b.n	3bd6 <log_output_timestamp_freq_set+0x12>
}
    3bf6:	b003      	add	sp, #12
    3bf8:	bd30      	pop	{r4, r5, pc}
    3bfa:	bf00      	nop
    3bfc:	200036b0 	.word	0x200036b0
    3c00:	20000310 	.word	0x20000310
    3c04:	000f4240 	.word	0x000f4240
    3c08:	2000030c 	.word	0x2000030c

00003c0c <char_out>:
#include <device.h>
#include <uart.h>
#include <assert.h>

static int char_out(u8_t *data, size_t length, void *ctx)
{
    3c0c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3c10:	4c0d      	ldr	r4, [pc, #52]	; (3c48 <char_out+0x3c>)
    3c12:	4617      	mov	r7, r2
    3c14:	6822      	ldr	r2, [r4, #0]
    3c16:	9201      	str	r2, [sp, #4]
    3c18:	460e      	mov	r6, r1
    3c1a:	4605      	mov	r5, r0
    3c1c:	eb00 0801 	add.w	r8, r0, r1
	struct device *dev = (struct device *)ctx;

	for (size_t i = 0; i < length; i++) {
    3c20:	4545      	cmp	r5, r8
    3c22:	d106      	bne.n	3c32 <char_out+0x26>
		uart_poll_out(dev, data[i]);
	}

	return length;
}
    3c24:	9a01      	ldr	r2, [sp, #4]
    3c26:	6823      	ldr	r3, [r4, #0]
    3c28:	429a      	cmp	r2, r3
    3c2a:	4630      	mov	r0, r6
    3c2c:	d008      	beq.n	3c40 <char_out+0x34>
    3c2e:	f007 f9f5 	bl	b01c <_StackCheckHandler>
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
    3c32:	687b      	ldr	r3, [r7, #4]
    3c34:	f815 1b01 	ldrb.w	r1, [r5], #1
    3c38:	685b      	ldr	r3, [r3, #4]
    3c3a:	4638      	mov	r0, r7
    3c3c:	4798      	blx	r3
    3c3e:	e7ef      	b.n	3c20 <char_out+0x14>
    3c40:	b002      	add	sp, #8
    3c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3c46:	bf00      	nop
    3c48:	200036b0 	.word	0x200036b0

00003c4c <log_backend_uart_init>:
	log_msg_put(msg);

}

static void log_backend_uart_init(void)
{
    3c4c:	b513      	push	{r0, r1, r4, lr}
    3c4e:	4c08      	ldr	r4, [pc, #32]	; (3c70 <log_backend_uart_init+0x24>)

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE1(K_SYSCALL_DEVICE_GET_BINDING, device_get_binding, struct device *, const char *, name)
    3c50:	4808      	ldr	r0, [pc, #32]	; (3c74 <log_backend_uart_init+0x28>)
    3c52:	6823      	ldr	r3, [r4, #0]
    3c54:	9301      	str	r3, [sp, #4]
    3c56:	f005 fc63 	bl	9520 <z_impl_device_get_binding>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
    3c5a:	4b07      	ldr	r3, [pc, #28]	; (3c78 <log_backend_uart_init+0x2c>)

	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	assert(dev);

	log_output_ctx_set(&log_output, dev);
}
    3c5c:	9a01      	ldr	r2, [sp, #4]
    3c5e:	6058      	str	r0, [r3, #4]
    3c60:	6823      	ldr	r3, [r4, #0]
    3c62:	429a      	cmp	r2, r3
    3c64:	d001      	beq.n	3c6a <log_backend_uart_init+0x1e>
    3c66:	f007 f9d9 	bl	b01c <_StackCheckHandler>
    3c6a:	b002      	add	sp, #8
    3c6c:	bd10      	pop	{r4, pc}
    3c6e:	bf00      	nop
    3c70:	200036b0 	.word	0x200036b0
    3c74:	0000b94b 	.word	0x0000b94b
    3c78:	2000031c 	.word	0x2000031c

00003c7c <panic>:

static void panic(struct log_backend const *const backend)
{
    3c7c:	b507      	push	{r0, r1, r2, lr}
    3c7e:	4b07      	ldr	r3, [pc, #28]	; (3c9c <panic+0x20>)
    3c80:	681a      	ldr	r2, [r3, #0]
    3c82:	9201      	str	r2, [sp, #4]
	log_output_flush(&log_output);
    3c84:	9a01      	ldr	r2, [sp, #4]
    3c86:	681b      	ldr	r3, [r3, #0]
    3c88:	429a      	cmp	r2, r3
    3c8a:	d001      	beq.n	3c90 <panic+0x14>
    3c8c:	f007 f9c6 	bl	b01c <_StackCheckHandler>
    3c90:	4803      	ldr	r0, [pc, #12]	; (3ca0 <panic+0x24>)
}
    3c92:	b003      	add	sp, #12
    3c94:	f85d eb04 	ldr.w	lr, [sp], #4
	log_output_flush(&log_output);
    3c98:	f7ff bea4 	b.w	39e4 <log_output_flush>
    3c9c:	200036b0 	.word	0x200036b0
    3ca0:	0000b790 	.word	0x0000b790

00003ca4 <dropped>:

static void dropped(const struct log_backend *const backend, u32_t cnt)
{
    3ca4:	b507      	push	{r0, r1, r2, lr}
    3ca6:	4b07      	ldr	r3, [pc, #28]	; (3cc4 <dropped+0x20>)
    3ca8:	681a      	ldr	r2, [r3, #0]
    3caa:	9201      	str	r2, [sp, #4]
	ARG_UNUSED(backend);

	log_output_dropped_process(&log_output, cnt);
    3cac:	9a01      	ldr	r2, [sp, #4]
    3cae:	681b      	ldr	r3, [r3, #0]
    3cb0:	429a      	cmp	r2, r3
    3cb2:	d001      	beq.n	3cb8 <dropped+0x14>
    3cb4:	f007 f9b2 	bl	b01c <_StackCheckHandler>
    3cb8:	4803      	ldr	r0, [pc, #12]	; (3cc8 <dropped+0x24>)
}
    3cba:	b003      	add	sp, #12
    3cbc:	f85d eb04 	ldr.w	lr, [sp], #4
	log_output_dropped_process(&log_output, cnt);
    3cc0:	f7ff bf4a 	b.w	3b58 <log_output_dropped_process>
    3cc4:	200036b0 	.word	0x200036b0
    3cc8:	0000b790 	.word	0x0000b790

00003ccc <put>:
{
    3ccc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3cce:	4d0c      	ldr	r5, [pc, #48]	; (3d00 <put+0x34>)
	log_msg_get(msg);
    3cd0:	4608      	mov	r0, r1
{
    3cd2:	682b      	ldr	r3, [r5, #0]
    3cd4:	9301      	str	r3, [sp, #4]
    3cd6:	460c      	mov	r4, r1
	log_msg_get(msg);
    3cd8:	f7ff faa2 	bl	3220 <log_msg_get>
	log_output_msg_process(&log_output, msg, flags);
    3cdc:	220f      	movs	r2, #15
    3cde:	4621      	mov	r1, r4
    3ce0:	4808      	ldr	r0, [pc, #32]	; (3d04 <put+0x38>)
    3ce2:	f7ff feb7 	bl	3a54 <log_output_msg_process>
	log_msg_put(msg);
    3ce6:	9a01      	ldr	r2, [sp, #4]
    3ce8:	682b      	ldr	r3, [r5, #0]
    3cea:	429a      	cmp	r2, r3
    3cec:	d001      	beq.n	3cf2 <put+0x26>
    3cee:	f007 f995 	bl	b01c <_StackCheckHandler>
    3cf2:	4620      	mov	r0, r4
}
    3cf4:	b003      	add	sp, #12
    3cf6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	log_msg_put(msg);
    3cfa:	f7ff bb4b 	b.w	3394 <log_msg_put>
    3cfe:	bf00      	nop
    3d00:	200036b0 	.word	0x200036b0
    3d04:	0000b790 	.word	0x0000b790

00003d08 <disk_init>:
	k_mutex_unlock(&mutex);
	return rc;
}

static int disk_init(struct device *dev)
{
    3d08:	b513      	push	{r0, r1, r4, lr}
    3d0a:	4c09      	ldr	r4, [pc, #36]	; (3d30 <disk_init+0x28>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex)
    3d0c:	4809      	ldr	r0, [pc, #36]	; (3d34 <disk_init+0x2c>)
    3d0e:	6823      	ldr	r3, [r4, #0]
    3d10:	9301      	str	r3, [sp, #4]
    3d12:	f005 ff93 	bl	9c3c <z_impl_k_mutex_init>
	list->head = (sys_dnode_t *)list;
    3d16:	4b08      	ldr	r3, [pc, #32]	; (3d38 <disk_init+0x30>)
	ARG_UNUSED(dev);

	k_mutex_init(&mutex);
	sys_dlist_init(&disk_access_list);
	return 0;
}
    3d18:	9a01      	ldr	r2, [sp, #4]
	list->tail = (sys_dnode_t *)list;
    3d1a:	e9c3 3300 	strd	r3, r3, [r3]
    3d1e:	6823      	ldr	r3, [r4, #0]
    3d20:	429a      	cmp	r2, r3
    3d22:	f04f 0000 	mov.w	r0, #0
    3d26:	d001      	beq.n	3d2c <disk_init+0x24>
    3d28:	f007 f978 	bl	b01c <_StackCheckHandler>
    3d2c:	b002      	add	sp, #8
    3d2e:	bd10      	pop	{r4, pc}
    3d30:	200036b0 	.word	0x200036b0
    3d34:	20000330 	.word	0x20000330
    3d38:	20000328 	.word	0x20000328

00003d3c <disk_access_get_di>:
{
    3d3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3d40:	4e19      	ldr	r6, [pc, #100]	; (3da8 <disk_access_get_di+0x6c>)
    3d42:	6833      	ldr	r3, [r6, #0]
    3d44:	9301      	str	r3, [sp, #4]
    3d46:	4680      	mov	r8, r0
	size_t name_len = strlen(name);
    3d48:	f003 ff76 	bl	7c38 <strlen>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
    3d4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3d50:	4607      	mov	r7, r0
    3d52:	4816      	ldr	r0, [pc, #88]	; (3dac <disk_access_get_di+0x70>)
    3d54:	f005 ff86 	bl	9c64 <z_impl_k_mutex_lock>
	return list->head == list;
    3d58:	4b15      	ldr	r3, [pc, #84]	; (3db0 <disk_access_get_di+0x74>)
    3d5a:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3d5c:	429c      	cmp	r4, r3
    3d5e:	461d      	mov	r5, r3
    3d60:	d113      	bne.n	3d8a <disk_access_get_di+0x4e>
	struct disk_info *disk = NULL, *itr;
    3d62:	2400      	movs	r4, #0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
    3d64:	4811      	ldr	r0, [pc, #68]	; (3dac <disk_access_get_di+0x70>)
    3d66:	f005 fff9 	bl	9d5c <z_impl_k_mutex_unlock>
}
    3d6a:	9a01      	ldr	r2, [sp, #4]
    3d6c:	6833      	ldr	r3, [r6, #0]
    3d6e:	429a      	cmp	r2, r3
    3d70:	4620      	mov	r0, r4
    3d72:	d015      	beq.n	3da0 <disk_access_get_di+0x64>
    3d74:	f007 f952 	bl	b01c <_StackCheckHandler>
		if (strlen(itr->name) != name_len) {
    3d78:	68a0      	ldr	r0, [r4, #8]
    3d7a:	f003 ff5d 	bl	7c38 <strlen>
    3d7e:	42b8      	cmp	r0, r7
    3d80:	d006      	beq.n	3d90 <disk_access_get_di+0x54>
	return (node == list->tail) ? NULL : node->next;
    3d82:	686b      	ldr	r3, [r5, #4]
    3d84:	429c      	cmp	r4, r3
    3d86:	d0ec      	beq.n	3d62 <disk_access_get_di+0x26>
    3d88:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_NODE(&disk_access_list, node) {
    3d8a:	2c00      	cmp	r4, #0
    3d8c:	d1f4      	bne.n	3d78 <disk_access_get_di+0x3c>
    3d8e:	e7e8      	b.n	3d62 <disk_access_get_di+0x26>
		if (strncmp(name, itr->name, name_len) == 0) {
    3d90:	463a      	mov	r2, r7
    3d92:	68a1      	ldr	r1, [r4, #8]
    3d94:	4640      	mov	r0, r8
    3d96:	f003 ff7f 	bl	7c98 <strncmp>
    3d9a:	2800      	cmp	r0, #0
    3d9c:	d1f1      	bne.n	3d82 <disk_access_get_di+0x46>
    3d9e:	e7e1      	b.n	3d64 <disk_access_get_di+0x28>
}
    3da0:	b002      	add	sp, #8
    3da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3da6:	bf00      	nop
    3da8:	200036b0 	.word	0x200036b0
    3dac:	20000330 	.word	0x20000330
    3db0:	20000328 	.word	0x20000328

00003db4 <disk_access_init>:
{
    3db4:	b513      	push	{r0, r1, r4, lr}
    3db6:	4c0e      	ldr	r4, [pc, #56]	; (3df0 <disk_access_init+0x3c>)
    3db8:	6823      	ldr	r3, [r4, #0]
    3dba:	9301      	str	r3, [sp, #4]
	struct disk_info *disk = disk_access_get_di(pdrv);
    3dbc:	f7ff ffbe 	bl	3d3c <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
    3dc0:	4621      	mov	r1, r4
    3dc2:	b168      	cbz	r0, 3de0 <disk_access_init+0x2c>
    3dc4:	68c3      	ldr	r3, [r0, #12]
    3dc6:	b15b      	cbz	r3, 3de0 <disk_access_init+0x2c>
				(disk->ops->init != NULL)) {
    3dc8:	681b      	ldr	r3, [r3, #0]
	if ((disk != NULL) && (disk->ops != NULL) &&
    3dca:	b14b      	cbz	r3, 3de0 <disk_access_init+0x2c>
		rc = disk->ops->init(disk);
    3dcc:	9901      	ldr	r1, [sp, #4]
    3dce:	6822      	ldr	r2, [r4, #0]
    3dd0:	4291      	cmp	r1, r2
    3dd2:	d001      	beq.n	3dd8 <disk_access_init+0x24>
}
    3dd4:	f007 f922 	bl	b01c <_StackCheckHandler>
    3dd8:	b002      	add	sp, #8
    3dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rc = disk->ops->init(disk);
    3dde:	4718      	bx	r3
}
    3de0:	9a01      	ldr	r2, [sp, #4]
    3de2:	680b      	ldr	r3, [r1, #0]
    3de4:	429a      	cmp	r2, r3
    3de6:	f06f 0015 	mvn.w	r0, #21
    3dea:	d1f3      	bne.n	3dd4 <disk_access_init+0x20>
    3dec:	b002      	add	sp, #8
    3dee:	bd10      	pop	{r4, pc}
    3df0:	200036b0 	.word	0x200036b0

00003df4 <disk_access_status>:
{
    3df4:	b513      	push	{r0, r1, r4, lr}
    3df6:	4c0e      	ldr	r4, [pc, #56]	; (3e30 <disk_access_status+0x3c>)
    3df8:	6823      	ldr	r3, [r4, #0]
    3dfa:	9301      	str	r3, [sp, #4]
	struct disk_info *disk = disk_access_get_di(pdrv);
    3dfc:	f7ff ff9e 	bl	3d3c <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
    3e00:	4621      	mov	r1, r4
    3e02:	b168      	cbz	r0, 3e20 <disk_access_status+0x2c>
    3e04:	68c3      	ldr	r3, [r0, #12]
    3e06:	b15b      	cbz	r3, 3e20 <disk_access_status+0x2c>
				(disk->ops->status != NULL)) {
    3e08:	685b      	ldr	r3, [r3, #4]
	if ((disk != NULL) && (disk->ops != NULL) &&
    3e0a:	b14b      	cbz	r3, 3e20 <disk_access_status+0x2c>
		rc = disk->ops->status(disk);
    3e0c:	9901      	ldr	r1, [sp, #4]
    3e0e:	6822      	ldr	r2, [r4, #0]
    3e10:	4291      	cmp	r1, r2
    3e12:	d001      	beq.n	3e18 <disk_access_status+0x24>
}
    3e14:	f007 f902 	bl	b01c <_StackCheckHandler>
    3e18:	b002      	add	sp, #8
    3e1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rc = disk->ops->status(disk);
    3e1e:	4718      	bx	r3
}
    3e20:	9a01      	ldr	r2, [sp, #4]
    3e22:	680b      	ldr	r3, [r1, #0]
    3e24:	429a      	cmp	r2, r3
    3e26:	f06f 0015 	mvn.w	r0, #21
    3e2a:	d1f3      	bne.n	3e14 <disk_access_status+0x20>
    3e2c:	b002      	add	sp, #8
    3e2e:	bd10      	pop	{r4, pc}
    3e30:	200036b0 	.word	0x200036b0

00003e34 <disk_access_read>:
{
    3e34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    3e38:	4c12      	ldr	r4, [pc, #72]	; (3e84 <disk_access_read+0x50>)
    3e3a:	4699      	mov	r9, r3
    3e3c:	6823      	ldr	r3, [r4, #0]
    3e3e:	9301      	str	r3, [sp, #4]
    3e40:	460f      	mov	r7, r1
    3e42:	4690      	mov	r8, r2
	struct disk_info *disk = disk_access_get_di(pdrv);
    3e44:	f7ff ff7a 	bl	3d3c <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
    3e48:	4626      	mov	r6, r4
    3e4a:	b188      	cbz	r0, 3e70 <disk_access_read+0x3c>
    3e4c:	68c5      	ldr	r5, [r0, #12]
    3e4e:	b17d      	cbz	r5, 3e70 <disk_access_read+0x3c>
				(disk->ops->read != NULL)) {
    3e50:	68ad      	ldr	r5, [r5, #8]
	if ((disk != NULL) && (disk->ops != NULL) &&
    3e52:	b16d      	cbz	r5, 3e70 <disk_access_read+0x3c>
		rc = disk->ops->read(disk, data_buf, start_sector, num_sector);
    3e54:	9a01      	ldr	r2, [sp, #4]
    3e56:	6823      	ldr	r3, [r4, #0]
    3e58:	429a      	cmp	r2, r3
    3e5a:	d001      	beq.n	3e60 <disk_access_read+0x2c>
}
    3e5c:	f007 f8de 	bl	b01c <_StackCheckHandler>
		rc = disk->ops->read(disk, data_buf, start_sector, num_sector);
    3e60:	464b      	mov	r3, r9
    3e62:	4642      	mov	r2, r8
    3e64:	4639      	mov	r1, r7
    3e66:	46ac      	mov	ip, r5
}
    3e68:	b003      	add	sp, #12
    3e6a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		rc = disk->ops->read(disk, data_buf, start_sector, num_sector);
    3e6e:	4760      	bx	ip
}
    3e70:	9a01      	ldr	r2, [sp, #4]
    3e72:	6833      	ldr	r3, [r6, #0]
    3e74:	429a      	cmp	r2, r3
    3e76:	f06f 0015 	mvn.w	r0, #21
    3e7a:	d1ef      	bne.n	3e5c <disk_access_read+0x28>
    3e7c:	b003      	add	sp, #12
    3e7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3e82:	bf00      	nop
    3e84:	200036b0 	.word	0x200036b0

00003e88 <disk_access_write>:
{
    3e88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    3e8c:	4c12      	ldr	r4, [pc, #72]	; (3ed8 <disk_access_write+0x50>)
    3e8e:	4699      	mov	r9, r3
    3e90:	6823      	ldr	r3, [r4, #0]
    3e92:	9301      	str	r3, [sp, #4]
    3e94:	460f      	mov	r7, r1
    3e96:	4690      	mov	r8, r2
	struct disk_info *disk = disk_access_get_di(pdrv);
    3e98:	f7ff ff50 	bl	3d3c <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
    3e9c:	4626      	mov	r6, r4
    3e9e:	b188      	cbz	r0, 3ec4 <disk_access_write+0x3c>
    3ea0:	68c5      	ldr	r5, [r0, #12]
    3ea2:	b17d      	cbz	r5, 3ec4 <disk_access_write+0x3c>
				(disk->ops->write != NULL)) {
    3ea4:	68ed      	ldr	r5, [r5, #12]
	if ((disk != NULL) && (disk->ops != NULL) &&
    3ea6:	b16d      	cbz	r5, 3ec4 <disk_access_write+0x3c>
		rc = disk->ops->write(disk, data_buf, start_sector, num_sector);
    3ea8:	9a01      	ldr	r2, [sp, #4]
    3eaa:	6823      	ldr	r3, [r4, #0]
    3eac:	429a      	cmp	r2, r3
    3eae:	d001      	beq.n	3eb4 <disk_access_write+0x2c>
}
    3eb0:	f007 f8b4 	bl	b01c <_StackCheckHandler>
		rc = disk->ops->write(disk, data_buf, start_sector, num_sector);
    3eb4:	464b      	mov	r3, r9
    3eb6:	4642      	mov	r2, r8
    3eb8:	4639      	mov	r1, r7
    3eba:	46ac      	mov	ip, r5
}
    3ebc:	b003      	add	sp, #12
    3ebe:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		rc = disk->ops->write(disk, data_buf, start_sector, num_sector);
    3ec2:	4760      	bx	ip
}
    3ec4:	9a01      	ldr	r2, [sp, #4]
    3ec6:	6833      	ldr	r3, [r6, #0]
    3ec8:	429a      	cmp	r2, r3
    3eca:	f06f 0015 	mvn.w	r0, #21
    3ece:	d1ef      	bne.n	3eb0 <disk_access_write+0x28>
    3ed0:	b003      	add	sp, #12
    3ed2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3ed6:	bf00      	nop
    3ed8:	200036b0 	.word	0x200036b0

00003edc <disk_access_ioctl>:
{
    3edc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3ede:	4c10      	ldr	r4, [pc, #64]	; (3f20 <disk_access_ioctl+0x44>)
    3ee0:	6823      	ldr	r3, [r4, #0]
    3ee2:	9301      	str	r3, [sp, #4]
    3ee4:	460e      	mov	r6, r1
    3ee6:	4617      	mov	r7, r2
	struct disk_info *disk = disk_access_get_di(pdrv);
    3ee8:	f7ff ff28 	bl	3d3c <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
    3eec:	4625      	mov	r5, r4
    3eee:	b178      	cbz	r0, 3f10 <disk_access_ioctl+0x34>
    3ef0:	68c3      	ldr	r3, [r0, #12]
    3ef2:	b16b      	cbz	r3, 3f10 <disk_access_ioctl+0x34>
				(disk->ops->ioctl != NULL)) {
    3ef4:	691b      	ldr	r3, [r3, #16]
	if ((disk != NULL) && (disk->ops != NULL) &&
    3ef6:	b15b      	cbz	r3, 3f10 <disk_access_ioctl+0x34>
		rc = disk->ops->ioctl(disk, cmd, buf);
    3ef8:	9901      	ldr	r1, [sp, #4]
    3efa:	6822      	ldr	r2, [r4, #0]
    3efc:	4291      	cmp	r1, r2
    3efe:	d001      	beq.n	3f04 <disk_access_ioctl+0x28>
}
    3f00:	f007 f88c 	bl	b01c <_StackCheckHandler>
		rc = disk->ops->ioctl(disk, cmd, buf);
    3f04:	463a      	mov	r2, r7
    3f06:	4631      	mov	r1, r6
}
    3f08:	b003      	add	sp, #12
    3f0a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		rc = disk->ops->ioctl(disk, cmd, buf);
    3f0e:	4718      	bx	r3
}
    3f10:	9a01      	ldr	r2, [sp, #4]
    3f12:	682b      	ldr	r3, [r5, #0]
    3f14:	429a      	cmp	r2, r3
    3f16:	f06f 0015 	mvn.w	r0, #21
    3f1a:	d1f1      	bne.n	3f00 <disk_access_ioctl+0x24>
    3f1c:	b003      	add	sp, #12
    3f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f20:	200036b0 	.word	0x200036b0

00003f24 <disk_access_register>:
{
    3f24:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3f26:	4d20      	ldr	r5, [pc, #128]	; (3fa8 <disk_access_register+0x84>)
    3f28:	4604      	mov	r4, r0
    3f2a:	682b      	ldr	r3, [r5, #0]
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
    3f2c:	481f      	ldr	r0, [pc, #124]	; (3fac <disk_access_register+0x88>)
    3f2e:	9301      	str	r3, [sp, #4]
    3f30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3f34:	f005 fe96 	bl	9c64 <z_impl_k_mutex_lock>
	if ((disk == NULL) || (disk->name == NULL)) {
    3f38:	b10c      	cbz	r4, 3f3e <disk_access_register+0x1a>
    3f3a:	68a0      	ldr	r0, [r4, #8]
    3f3c:	b9c8      	cbnz	r0, 3f72 <disk_access_register+0x4e>
		LOG_ERR("invalid disk interface!!");
    3f3e:	2301      	movs	r3, #1
    3f40:	f04f 0100 	mov.w	r1, #0
    3f44:	f363 0107 	bfi	r1, r3, #0, #8
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    3f48:	4a19      	ldr	r2, [pc, #100]	; (3fb0 <disk_access_register+0x8c>)
    3f4a:	4b1a      	ldr	r3, [pc, #104]	; (3fb4 <disk_access_register+0x90>)
    3f4c:	481a      	ldr	r0, [pc, #104]	; (3fb8 <disk_access_register+0x94>)
    3f4e:	1a9b      	subs	r3, r3, r2
    3f50:	08db      	lsrs	r3, r3, #3
    3f52:	f363 118f 	bfi	r1, r3, #6, #10
		LOG_ERR("disk interface already registered!!");
    3f56:	f7fe ff57 	bl	2e08 <log_0>
		rc = -EINVAL;
    3f5a:	f06f 0415 	mvn.w	r4, #21
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
    3f5e:	4813      	ldr	r0, [pc, #76]	; (3fac <disk_access_register+0x88>)
    3f60:	f005 fefc 	bl	9d5c <z_impl_k_mutex_unlock>
}
    3f64:	9a01      	ldr	r2, [sp, #4]
    3f66:	682b      	ldr	r3, [r5, #0]
    3f68:	429a      	cmp	r2, r3
    3f6a:	4620      	mov	r0, r4
    3f6c:	d01a      	beq.n	3fa4 <disk_access_register+0x80>
    3f6e:	f007 f855 	bl	b01c <_StackCheckHandler>
	if (disk_access_get_di(disk->name) != NULL) {
    3f72:	f7ff fee3 	bl	3d3c <disk_access_get_di>
    3f76:	b160      	cbz	r0, 3f92 <disk_access_register+0x6e>
		LOG_ERR("disk interface already registered!!");
    3f78:	2301      	movs	r3, #1
    3f7a:	f04f 0100 	mov.w	r1, #0
    3f7e:	f363 0107 	bfi	r1, r3, #0, #8
    3f82:	4a0b      	ldr	r2, [pc, #44]	; (3fb0 <disk_access_register+0x8c>)
    3f84:	4b0b      	ldr	r3, [pc, #44]	; (3fb4 <disk_access_register+0x90>)
    3f86:	480d      	ldr	r0, [pc, #52]	; (3fbc <disk_access_register+0x98>)
    3f88:	1a9b      	subs	r3, r3, r2
    3f8a:	08db      	lsrs	r3, r3, #3
    3f8c:	f363 118f 	bfi	r1, r3, #6, #10
    3f90:	e7e1      	b.n	3f56 <disk_access_register+0x32>
	node->next = list;
    3f92:	4b0b      	ldr	r3, [pc, #44]	; (3fc0 <disk_access_register+0x9c>)
    3f94:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
    3f96:	685a      	ldr	r2, [r3, #4]
    3f98:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
    3f9a:	685a      	ldr	r2, [r3, #4]
    3f9c:	6014      	str	r4, [r2, #0]
	list->tail = node;
    3f9e:	605c      	str	r4, [r3, #4]
	int rc = 0;
    3fa0:	4604      	mov	r4, r0
    3fa2:	e7dc      	b.n	3f5e <disk_access_register+0x3a>
}
    3fa4:	b003      	add	sp, #12
    3fa6:	bd30      	pop	{r4, r5, pc}
    3fa8:	200036b0 	.word	0x200036b0
    3fac:	20000330 	.word	0x20000330
    3fb0:	0000b634 	.word	0x0000b634
    3fb4:	0000b634 	.word	0x0000b634
    3fb8:	0000b963 	.word	0x0000b963
    3fbc:	0000b97c 	.word	0x0000b97c
    3fc0:	20000328 	.word	0x20000328

00003fc4 <disk_ram_access_status>:

	return &ramdisk_buf[(lba * RAMDISK_SECTOR_SIZE)];
}

static int disk_ram_access_status(struct disk_info *disk)
{
    3fc4:	b507      	push	{r0, r1, r2, lr}
    3fc6:	4b07      	ldr	r3, [pc, #28]	; (3fe4 <disk_ram_access_status+0x20>)
    3fc8:	681a      	ldr	r2, [r3, #0]
    3fca:	9201      	str	r2, [sp, #4]
	return DISK_STATUS_OK;
}
    3fcc:	9a01      	ldr	r2, [sp, #4]
    3fce:	681b      	ldr	r3, [r3, #0]
    3fd0:	429a      	cmp	r2, r3
    3fd2:	f04f 0000 	mov.w	r0, #0
    3fd6:	d001      	beq.n	3fdc <disk_ram_access_status+0x18>
    3fd8:	f007 f820 	bl	b01c <_StackCheckHandler>
    3fdc:	b003      	add	sp, #12
    3fde:	f85d fb04 	ldr.w	pc, [sp], #4
    3fe2:	bf00      	nop
    3fe4:	200036b0 	.word	0x200036b0

00003fe8 <disk_ram_access_ioctl>:

	return 0;
}

static int disk_ram_access_ioctl(struct disk_info *disk, u8_t cmd, void *buff)
{
    3fe8:	b507      	push	{r0, r1, r2, lr}
    3fea:	4b0f      	ldr	r3, [pc, #60]	; (4028 <disk_ram_access_ioctl+0x40>)
	switch (cmd) {
    3fec:	3901      	subs	r1, #1
{
    3fee:	6818      	ldr	r0, [r3, #0]
    3ff0:	9001      	str	r0, [sp, #4]
	switch (cmd) {
    3ff2:	2904      	cmp	r1, #4
    3ff4:	d812      	bhi.n	401c <disk_ram_access_ioctl+0x34>
    3ff6:	e8df f001 	tbb	[pc, r1]
    3ffa:	0c03      	.short	0x0c03
    3ffc:	0f11      	.short	0x0f11
    3ffe:	05          	.byte	0x05
    3fff:	00          	.byte	0x00
	case DISK_IOCTL_CTRL_SYNC:
		break;
	case DISK_IOCTL_GET_SECTOR_COUNT:
		*(u32_t *)buff = RAMDISK_VOLUME_SIZE / RAMDISK_SECTOR_SIZE;
    4000:	2120      	movs	r1, #32
		break;
	case DISK_IOCTL_GET_SECTOR_SIZE:
		*(u32_t *)buff = RAMDISK_SECTOR_SIZE;
		break;
	case DISK_IOCTL_GET_ERASE_BLOCK_SZ:
		*(u32_t *)buff  = 1U;
    4002:	6011      	str	r1, [r2, #0]
		break;
	default:
		return -EINVAL;
	}

	return 0;
    4004:	2000      	movs	r0, #0
}
    4006:	9a01      	ldr	r2, [sp, #4]
    4008:	681b      	ldr	r3, [r3, #0]
    400a:	429a      	cmp	r2, r3
    400c:	d009      	beq.n	4022 <disk_ram_access_ioctl+0x3a>
    400e:	f007 f805 	bl	b01c <_StackCheckHandler>
		*(u32_t *)buff = RAMDISK_SECTOR_SIZE;
    4012:	f44f 7100 	mov.w	r1, #512	; 0x200
    4016:	e7f4      	b.n	4002 <disk_ram_access_ioctl+0x1a>
		*(u32_t *)buff  = 1U;
    4018:	2101      	movs	r1, #1
    401a:	e7f2      	b.n	4002 <disk_ram_access_ioctl+0x1a>
		return -EINVAL;
    401c:	f06f 0015 	mvn.w	r0, #21
    4020:	e7f1      	b.n	4006 <disk_ram_access_ioctl+0x1e>
}
    4022:	b003      	add	sp, #12
    4024:	f85d fb04 	ldr.w	pc, [sp], #4
    4028:	200036b0 	.word	0x200036b0

0000402c <disk_ram_init>:
	.name = CONFIG_DISK_RAM_VOLUME_NAME,
	.ops = &ram_disk_ops,
};

static int disk_ram_init(struct device *dev)
{
    402c:	b507      	push	{r0, r1, r2, lr}
    402e:	4b07      	ldr	r3, [pc, #28]	; (404c <disk_ram_init+0x20>)
    4030:	681a      	ldr	r2, [r3, #0]
    4032:	9201      	str	r2, [sp, #4]
	ARG_UNUSED(dev);

	return disk_access_register(&ram_disk);
    4034:	9a01      	ldr	r2, [sp, #4]
    4036:	681b      	ldr	r3, [r3, #0]
    4038:	429a      	cmp	r2, r3
    403a:	d001      	beq.n	4040 <disk_ram_init+0x14>
    403c:	f006 ffee 	bl	b01c <_StackCheckHandler>
    4040:	4803      	ldr	r0, [pc, #12]	; (4050 <disk_ram_init+0x24>)
}
    4042:	b003      	add	sp, #12
    4044:	f85d eb04 	ldr.w	lr, [sp], #4
	return disk_access_register(&ram_disk);
    4048:	f7ff bf6c 	b.w	3f24 <disk_access_register>
    404c:	200036b0 	.word	0x200036b0
    4050:	200036c0 	.word	0x200036c0

00004054 <disk_ram_access_write>:
{
    4054:	b513      	push	{r0, r1, r4, lr}
    4056:	4c09      	ldr	r4, [pc, #36]	; (407c <disk_ram_access_write+0x28>)
    4058:	6820      	ldr	r0, [r4, #0]
    405a:	9001      	str	r0, [sp, #4]
	return &ramdisk_buf[(lba * RAMDISK_SECTOR_SIZE)];
    405c:	4808      	ldr	r0, [pc, #32]	; (4080 <disk_ram_access_write+0x2c>)
    405e:	eb00 2042 	add.w	r0, r0, r2, lsl #9
	memcpy(lba_to_address(sector), buff, count * RAMDISK_SECTOR_SIZE);
    4062:	025a      	lsls	r2, r3, #9
    4064:	f003 fe58 	bl	7d18 <memcpy>
}
    4068:	9a01      	ldr	r2, [sp, #4]
    406a:	6823      	ldr	r3, [r4, #0]
    406c:	429a      	cmp	r2, r3
    406e:	f04f 0000 	mov.w	r0, #0
    4072:	d001      	beq.n	4078 <disk_ram_access_write+0x24>
    4074:	f006 ffd2 	bl	b01c <_StackCheckHandler>
    4078:	b002      	add	sp, #8
    407a:	bd10      	pop	{r4, pc}
    407c:	200036b0 	.word	0x200036b0
    4080:	200036f4 	.word	0x200036f4

00004084 <disk_ram_access_read>:
{
    4084:	b513      	push	{r0, r1, r4, lr}
    4086:	4c0a      	ldr	r4, [pc, #40]	; (40b0 <disk_ram_access_read+0x2c>)
    4088:	4608      	mov	r0, r1
    408a:	6821      	ldr	r1, [r4, #0]
    408c:	9101      	str	r1, [sp, #4]
	return &ramdisk_buf[(lba * RAMDISK_SECTOR_SIZE)];
    408e:	4909      	ldr	r1, [pc, #36]	; (40b4 <disk_ram_access_read+0x30>)
    4090:	eb01 2142 	add.w	r1, r1, r2, lsl #9
	memcpy(buff, lba_to_address(sector), count * RAMDISK_SECTOR_SIZE);
    4094:	025a      	lsls	r2, r3, #9
    4096:	f003 fe3f 	bl	7d18 <memcpy>
}
    409a:	9a01      	ldr	r2, [sp, #4]
    409c:	6823      	ldr	r3, [r4, #0]
    409e:	429a      	cmp	r2, r3
    40a0:	f04f 0000 	mov.w	r0, #0
    40a4:	d001      	beq.n	40aa <disk_ram_access_read+0x26>
    40a6:	f006 ffb9 	bl	b01c <_StackCheckHandler>
    40aa:	b002      	add	sp, #8
    40ac:	bd10      	pop	{r4, pc}
    40ae:	bf00      	nop
    40b0:	200036b0 	.word	0x200036b0
    40b4:	200036f4 	.word	0x200036f4

000040b8 <disk_ram_access_init>:
    40b8:	b507      	push	{r0, r1, r2, lr}
    40ba:	4b07      	ldr	r3, [pc, #28]	; (40d8 <disk_ram_access_init+0x20>)
    40bc:	681a      	ldr	r2, [r3, #0]
    40be:	9201      	str	r2, [sp, #4]
    40c0:	9a01      	ldr	r2, [sp, #4]
    40c2:	681b      	ldr	r3, [r3, #0]
    40c4:	429a      	cmp	r2, r3
    40c6:	f04f 0000 	mov.w	r0, #0
    40ca:	d001      	beq.n	40d0 <disk_ram_access_init+0x18>
    40cc:	f006 ffa6 	bl	b01c <_StackCheckHandler>
    40d0:	b003      	add	sp, #12
    40d2:	f85d fb04 	ldr.w	pc, [sp], #4
    40d6:	bf00      	nop
    40d8:	200036b0 	.word	0x200036b0

000040dc <usb_handle_vendor_request>:
	return rc;
}

static int usb_handle_vendor_request(struct usb_setup_packet *setup,
				     s32_t *len, u8_t **data_buf)
{
    40dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    40de:	4b0c      	ldr	r3, [pc, #48]	; (4110 <usb_handle_vendor_request+0x34>)
    40e0:	681c      	ldr	r4, [r3, #0]
    40e2:	9401      	str	r4, [sp, #4]
		if (!usb_handle_os_desc_feature(setup, len, data_buf)) {
			return 0;
		}
	}

	if (usb_dev.vendor_req_handler) {
    40e4:	4c0b      	ldr	r4, [pc, #44]	; (4114 <usb_handle_vendor_request+0x38>)
    40e6:	69a4      	ldr	r4, [r4, #24]
    40e8:	b154      	cbz	r4, 4100 <usb_handle_vendor_request+0x24>
		return usb_dev.vendor_req_handler(setup, len, data_buf);
    40ea:	9d01      	ldr	r5, [sp, #4]
    40ec:	681b      	ldr	r3, [r3, #0]
    40ee:	429d      	cmp	r5, r3
    40f0:	d001      	beq.n	40f6 <usb_handle_vendor_request+0x1a>
	}

	return -ENOTSUP;
}
    40f2:	f006 ff93 	bl	b01c <_StackCheckHandler>
		return usb_dev.vendor_req_handler(setup, len, data_buf);
    40f6:	4623      	mov	r3, r4
}
    40f8:	b003      	add	sp, #12
    40fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return usb_dev.vendor_req_handler(setup, len, data_buf);
    40fe:	4718      	bx	r3
}
    4100:	9a01      	ldr	r2, [sp, #4]
    4102:	681b      	ldr	r3, [r3, #0]
    4104:	429a      	cmp	r2, r3
    4106:	f06f 0022 	mvn.w	r0, #34	; 0x22
    410a:	d1f2      	bne.n	40f2 <usb_handle_vendor_request+0x16>
    410c:	b003      	add	sp, #12
    410e:	bd30      	pop	{r4, r5, pc}
    4110:	200036b0 	.word	0x200036b0
    4114:	20000344 	.word	0x20000344

00004118 <forward_status_cb>:
{
	usb_dev.status_callback = cb;
}

static void forward_status_cb(enum usb_dc_status_code status, const u8_t *param)
{
    4118:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    411c:	4d11      	ldr	r5, [pc, #68]	; (4164 <forward_status_cb+0x4c>)
	size_t size = (__usb_data_end - __usb_data_start);
    411e:	4c12      	ldr	r4, [pc, #72]	; (4168 <forward_status_cb+0x50>)
{
    4120:	682b      	ldr	r3, [r5, #0]
    4122:	9301      	str	r3, [sp, #4]
	size_t size = (__usb_data_end - __usb_data_start);
    4124:	4b11      	ldr	r3, [pc, #68]	; (416c <forward_status_cb+0x54>)
{
    4126:	460f      	mov	r7, r1
	size_t size = (__usb_data_end - __usb_data_start);
    4128:	1b1b      	subs	r3, r3, r4
    412a:	4911      	ldr	r1, [pc, #68]	; (4170 <forward_status_cb+0x58>)
    412c:	109b      	asrs	r3, r3, #2
{
    412e:	4606      	mov	r6, r0
	size_t size = (__usb_data_end - __usb_data_start);
    4130:	fb01 f803 	mul.w	r8, r1, r3

	for (size_t i = 0; i < size; i++) {
    4134:	f04f 0900 	mov.w	r9, #0
    4138:	45c1      	cmp	r9, r8
    413a:	d105      	bne.n	4148 <forward_status_cb+0x30>

		if (cfg->cb_usb_status) {
			cfg->cb_usb_status(cfg, status, param);
		}
	}
}
    413c:	9a01      	ldr	r2, [sp, #4]
    413e:	682b      	ldr	r3, [r5, #0]
    4140:	429a      	cmp	r2, r3
    4142:	d00b      	beq.n	415c <forward_status_cb+0x44>
    4144:	f006 ff6a 	bl	b01c <_StackCheckHandler>
		if (cfg->cb_usb_status) {
    4148:	68e3      	ldr	r3, [r4, #12]
    414a:	b11b      	cbz	r3, 4154 <forward_status_cb+0x3c>
			cfg->cb_usb_status(cfg, status, param);
    414c:	463a      	mov	r2, r7
    414e:	4631      	mov	r1, r6
    4150:	4620      	mov	r0, r4
    4152:	4798      	blx	r3
	for (size_t i = 0; i < size; i++) {
    4154:	f109 0901 	add.w	r9, r9, #1
    4158:	342c      	adds	r4, #44	; 0x2c
    415a:	e7ed      	b.n	4138 <forward_status_cb+0x20>
}
    415c:	b003      	add	sp, #12
    415e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4162:	bf00      	nop
    4164:	200036b0 	.word	0x200036b0
    4168:	200078a0 	.word	0x200078a0
    416c:	200078cc 	.word	0x200078cc
    4170:	ba2e8ba3 	.word	0xba2e8ba3

00004174 <usb_data_to_host>:
{
    4174:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4176:	4d14      	ldr	r5, [pc, #80]	; (41c8 <usb_data_to_host+0x54>)
	u32_t chunk = usb_dev.data_buf_residue;
    4178:	4c14      	ldr	r4, [pc, #80]	; (41cc <usb_data_to_host+0x58>)
{
    417a:	682b      	ldr	r3, [r5, #0]
	u32_t chunk = usb_dev.data_buf_residue;
    417c:	68e2      	ldr	r2, [r4, #12]
{
    417e:	9301      	str	r3, [sp, #4]
    4180:	4606      	mov	r6, r0
	usb_dc_ep_write(USB_CONTROL_IN_EP0, usb_dev.data_buf, chunk, &chunk);
    4182:	466b      	mov	r3, sp
    4184:	68a1      	ldr	r1, [r4, #8]
	u32_t chunk = usb_dev.data_buf_residue;
    4186:	9200      	str	r2, [sp, #0]
	usb_dc_ep_write(USB_CONTROL_IN_EP0, usb_dev.data_buf, chunk, &chunk);
    4188:	2080      	movs	r0, #128	; 0x80
    418a:	f002 fcc9 	bl	6b20 <usb_dc_ep_write>
	usb_dev.data_buf += chunk;
    418e:	9a00      	ldr	r2, [sp, #0]
    4190:	68a3      	ldr	r3, [r4, #8]
    4192:	4413      	add	r3, r2
    4194:	60a3      	str	r3, [r4, #8]
	usb_dev.data_buf_residue -= chunk;
    4196:	68e3      	ldr	r3, [r4, #12]
    4198:	1a9b      	subs	r3, r3, r2
    419a:	60e3      	str	r3, [r4, #12]
	if (!usb_dev.data_buf_residue && chunk == USB_MAX_CTRL_MPS
    419c:	b95b      	cbnz	r3, 41b6 <usb_data_to_host+0x42>
    419e:	2a40      	cmp	r2, #64	; 0x40
    41a0:	d109      	bne.n	41b6 <usb_data_to_host+0x42>
	    && len > chunk) {
    41a2:	2e40      	cmp	r6, #64	; 0x40
    41a4:	d907      	bls.n	41b6 <usb_data_to_host+0x42>
			ret = usb_dc_ep_write(USB_CONTROL_IN_EP0, NULL, 0,
    41a6:	2300      	movs	r3, #0
    41a8:	461a      	mov	r2, r3
    41aa:	4619      	mov	r1, r3
    41ac:	2080      	movs	r0, #128	; 0x80
    41ae:	f002 fcb7 	bl	6b20 <usb_dc_ep_write>
		} while (ret == -EAGAIN);
    41b2:	300b      	adds	r0, #11
    41b4:	d0f7      	beq.n	41a6 <usb_data_to_host+0x32>
}
    41b6:	9a01      	ldr	r2, [sp, #4]
    41b8:	682b      	ldr	r3, [r5, #0]
    41ba:	429a      	cmp	r2, r3
    41bc:	d001      	beq.n	41c2 <usb_data_to_host+0x4e>
    41be:	f006 ff2d 	bl	b01c <_StackCheckHandler>
    41c2:	b002      	add	sp, #8
    41c4:	bd70      	pop	{r4, r5, r6, pc}
    41c6:	bf00      	nop
    41c8:	200036b0 	.word	0x200036b0
    41cc:	20000344 	.word	0x20000344

000041d0 <usb_handle_standard_request>:
{
    41d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    41d4:	4da6      	ldr	r5, [pc, #664]	; (4470 <usb_handle_standard_request+0x2a0>)
	if (usb_dev.custom_req_handler &&
    41d6:	4ea7      	ldr	r6, [pc, #668]	; (4474 <usb_handle_standard_request+0x2a4>)
{
    41d8:	682b      	ldr	r3, [r5, #0]
    41da:	b087      	sub	sp, #28
    41dc:	4680      	mov	r8, r0
    41de:	9305      	str	r3, [sp, #20]
	if (usb_dev.custom_req_handler &&
    41e0:	6973      	ldr	r3, [r6, #20]
{
    41e2:	460f      	mov	r7, r1
    41e4:	4614      	mov	r4, r2
	if (usb_dev.custom_req_handler &&
    41e6:	b98b      	cbnz	r3, 420c <usb_handle_standard_request+0x3c>
	switch (REQTYPE_GET_RECIP(setup->bmRequestType)) {
    41e8:	f898 9000 	ldrb.w	r9, [r8]
    41ec:	f009 091f 	and.w	r9, r9, #31
    41f0:	f1b9 0f01 	cmp.w	r9, #1
    41f4:	f000 80ab 	beq.w	434e <usb_handle_standard_request+0x17e>
    41f8:	f1b9 0f00 	cmp.w	r9, #0
    41fc:	d010      	beq.n	4220 <usb_handle_standard_request+0x50>
    41fe:	f1b9 0f02 	cmp.w	r9, #2
    4202:	f000 80f6 	beq.w	43f2 <usb_handle_standard_request+0x222>
		rc = -EINVAL;
    4206:	f06f 0015 	mvn.w	r0, #21
    420a:	e002      	b.n	4212 <usb_handle_standard_request+0x42>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    420c:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    420e:	2800      	cmp	r0, #0
    4210:	d1ea      	bne.n	41e8 <usb_handle_standard_request+0x18>
}
    4212:	9a05      	ldr	r2, [sp, #20]
    4214:	682b      	ldr	r3, [r5, #0]
    4216:	429a      	cmp	r2, r3
    4218:	f000 8126 	beq.w	4468 <usb_handle_standard_request+0x298>
    421c:	f006 fefe 	bl	b01c <_StackCheckHandler>
	switch (setup->bRequest) {
    4220:	f898 2001 	ldrb.w	r2, [r8, #1]
	u16_t value = sys_le16_to_cpu(setup->wValue);
    4224:	f8b8 0002 	ldrh.w	r0, [r8, #2]
	u8_t *data = *data_buf;
    4228:	6823      	ldr	r3, [r4, #0]
	switch (setup->bRequest) {
    422a:	2a09      	cmp	r2, #9
    422c:	d8eb      	bhi.n	4206 <usb_handle_standard_request+0x36>
    422e:	a101      	add	r1, pc, #4	; (adr r1, 4234 <usb_handle_standard_request+0x64>)
    4230:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    4234:	0000425d 	.word	0x0000425d
    4238:	00004335 	.word	0x00004335
    423c:	00004207 	.word	0x00004207
    4240:	00004343 	.word	0x00004343
    4244:	00004207 	.word	0x00004207
    4248:	00004277 	.word	0x00004277
    424c:	00004281 	.word	0x00004281
    4250:	00004207 	.word	0x00004207
    4254:	000042b1 	.word	0x000042b1
    4258:	000042bb 	.word	0x000042bb
		data[0] = 0U;
    425c:	2000      	movs	r0, #0
    425e:	7018      	strb	r0, [r3, #0]
		data[1] = 0U;
    4260:	7058      	strb	r0, [r3, #1]
			data[0] |= (usb_dev.remote_wakeup ?
    4262:	f896 204e 	ldrb.w	r2, [r6, #78]	; 0x4e
    4266:	4282      	cmp	r2, r0
    4268:	bf14      	ite	ne
    426a:	2202      	movne	r2, #2
    426c:	4602      	moveq	r2, r0
    426e:	701a      	strb	r2, [r3, #0]
		*len = 2;
    4270:	2302      	movs	r3, #2
    4272:	603b      	str	r3, [r7, #0]
		break;
    4274:	e7cd      	b.n	4212 <usb_handle_standard_request+0x42>
		usb_dc_set_address(value);
    4276:	b2c0      	uxtb	r0, r0
    4278:	f002 faf8 	bl	686c <usb_dc_set_address>
	int rc = 0;
    427c:	2000      	movs	r0, #0
    427e:	e7c8      	b.n	4212 <usb_handle_standard_request+0x42>
	type = GET_DESC_TYPE(type_index);
    4280:	0a02      	lsrs	r2, r0, #8
	if ((type == DESC_INTERFACE) || (type == DESC_ENDPOINT) ||
    4282:	1f13      	subs	r3, r2, #4
    4284:	2b01      	cmp	r3, #1
    4286:	d9be      	bls.n	4206 <usb_handle_standard_request+0x36>
    4288:	2a07      	cmp	r2, #7
    428a:	d8bc      	bhi.n	4206 <usb_handle_standard_request+0x36>
	p = (u8_t *)usb_dev.descriptors;
    428c:	6a33      	ldr	r3, [r6, #32]
	cur_index = 0;
    428e:	2100      	movs	r1, #0
			if (cur_index == index) {
    4290:	b2c0      	uxtb	r0, r0
	while (p[DESC_bLength] != 0U) {
    4292:	781e      	ldrb	r6, [r3, #0]
    4294:	2e00      	cmp	r6, #0
    4296:	d0b6      	beq.n	4206 <usb_handle_standard_request+0x36>
		if (p[DESC_bDescriptorType] == type) {
    4298:	f893 c001 	ldrb.w	ip, [r3, #1]
    429c:	4594      	cmp	ip, r2
    429e:	d103      	bne.n	42a8 <usb_handle_standard_request+0xd8>
			if (cur_index == index) {
    42a0:	4288      	cmp	r0, r1
    42a2:	f000 80da 	beq.w	445a <usb_handle_standard_request+0x28a>
			cur_index++;
    42a6:	3101      	adds	r1, #1
		p += p[DESC_bLength];
    42a8:	4433      	add	r3, r6
    42aa:	e7f2      	b.n	4292 <usb_handle_standard_request+0xc2>
			*len = p[DESC_bLength];
    42ac:	781b      	ldrb	r3, [r3, #0]
    42ae:	e0d9      	b.n	4464 <usb_handle_standard_request+0x294>
		data[0] = usb_dev.configuration;
    42b0:	f896 204d 	ldrb.w	r2, [r6, #77]	; 0x4d
    42b4:	701a      	strb	r2, [r3, #0]
		*len = 1;
    42b6:	2301      	movs	r3, #1
    42b8:	e0d4      	b.n	4464 <usb_handle_standard_request+0x294>
		if (!usb_set_configuration(value, 0)) {
    42ba:	b2c4      	uxtb	r4, r0
    42bc:	f88d 400b 	strb.w	r4, [sp, #11]
	if (config_index == 0U) {
    42c0:	b15c      	cbz	r4, 42da <usb_handle_standard_request+0x10a>
	cur_alt_setting = 0xFF;
    42c2:	f04f 08ff 	mov.w	r8, #255	; 0xff
	p = (u8_t *)usb_dev.descriptors;
    42c6:	6a37      	ldr	r7, [r6, #32]
	cur_config = 0xFF;
    42c8:	46c1      	mov	r9, r8
	while (p[DESC_bLength] != 0U) {
    42ca:	783b      	ldrb	r3, [r7, #0]
    42cc:	b943      	cbnz	r3, 42e0 <usb_handle_standard_request+0x110>
	if (usb_dev.status_callback) {
    42ce:	69f3      	ldr	r3, [r6, #28]
    42d0:	b11b      	cbz	r3, 42da <usb_handle_standard_request+0x10a>
		usb_dev.status_callback(USB_DC_CONFIGURED, &config_index);
    42d2:	f10d 010b 	add.w	r1, sp, #11
    42d6:	2003      	movs	r0, #3
    42d8:	4798      	blx	r3
			usb_dev.configuration = value;
    42da:	f886 404d 	strb.w	r4, [r6, #77]	; 0x4d
	return ret;
    42de:	e7cd      	b.n	427c <usb_handle_standard_request+0xac>
		switch (p[DESC_bDescriptorType]) {
    42e0:	787b      	ldrb	r3, [r7, #1]
    42e2:	2b04      	cmp	r3, #4
    42e4:	d008      	beq.n	42f8 <usb_handle_standard_request+0x128>
    42e6:	2b05      	cmp	r3, #5
    42e8:	d009      	beq.n	42fe <usb_handle_standard_request+0x12e>
    42ea:	2b02      	cmp	r3, #2
    42ec:	d101      	bne.n	42f2 <usb_handle_standard_request+0x122>
			cur_config = p[CONF_DESC_bConfigurationValue];
    42ee:	f897 9005 	ldrb.w	r9, [r7, #5]
		p += p[DESC_bLength];
    42f2:	783b      	ldrb	r3, [r7, #0]
    42f4:	441f      	add	r7, r3
    42f6:	e7e8      	b.n	42ca <usb_handle_standard_request+0xfa>
			cur_alt_setting =
    42f8:	f897 8003 	ldrb.w	r8, [r7, #3]
			break;
    42fc:	e7f9      	b.n	42f2 <usb_handle_standard_request+0x122>
			if ((cur_config == config_index) &&
    42fe:	f89d 300b 	ldrb.w	r3, [sp, #11]
    4302:	454b      	cmp	r3, r9
    4304:	d1f5      	bne.n	42f2 <usb_handle_standard_request+0x122>
    4306:	f1b8 0f00 	cmp.w	r8, #0
    430a:	d1f2      	bne.n	42f2 <usb_handle_standard_request+0x122>
				    p[ENDP_DESC_bmAttributes];
    430c:	78fb      	ldrb	r3, [r7, #3]
				ep_cfg.ep_type =
    430e:	f88d 3010 	strb.w	r3, [sp, #16]
				    (p[ENDP_DESC_wMaxPacketSize + 1]
    4312:	797a      	ldrb	r2, [r7, #5]
				    (p[ENDP_DESC_wMaxPacketSize]) |
    4314:	793b      	ldrb	r3, [r7, #4]
    4316:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				ep_cfg.ep_mps =
    431a:	f8ad 300e 	strh.w	r3, [sp, #14]
				ep_cfg.ep_addr =
    431e:	78bb      	ldrb	r3, [r7, #2]
    4320:	f88d 300c 	strb.w	r3, [sp, #12]
				usb_dc_ep_configure(&ep_cfg);
    4324:	a803      	add	r0, sp, #12
    4326:	f002 fb01 	bl	692c <usb_dc_ep_configure>
				usb_dc_ep_enable(ep_cfg.ep_addr);
    432a:	f89d 000c 	ldrb.w	r0, [sp, #12]
    432e:	f002 fbcd 	bl	6acc <usb_dc_ep_enable>
    4332:	e7de      	b.n	42f2 <usb_handle_standard_request+0x122>
			if (value == FEA_REMOTE_WAKEUP) {
    4334:	2801      	cmp	r0, #1
    4336:	f47f af66 	bne.w	4206 <usb_handle_standard_request+0x36>
				usb_dev.remote_wakeup = false;
    433a:	2000      	movs	r0, #0
    433c:	f886 004e 	strb.w	r0, [r6, #78]	; 0x4e
	return ret;
    4340:	e767      	b.n	4212 <usb_handle_standard_request+0x42>
			if (value == FEA_REMOTE_WAKEUP) {
    4342:	2801      	cmp	r0, #1
    4344:	f47f af5f 	bne.w	4206 <usb_handle_standard_request+0x36>
				usb_dev.remote_wakeup = true;
    4348:	f886 004e 	strb.w	r0, [r6, #78]	; 0x4e
	return ret;
    434c:	e796      	b.n	427c <usb_handle_standard_request+0xac>
	switch (setup->bRequest) {
    434e:	f898 0001 	ldrb.w	r0, [r8, #1]
		if (usb_handle_std_interface_req(setup, len, data_buf) == false)
    4352:	6823      	ldr	r3, [r4, #0]
	switch (setup->bRequest) {
    4354:	280a      	cmp	r0, #10
    4356:	d007      	beq.n	4368 <usb_handle_standard_request+0x198>
    4358:	280b      	cmp	r0, #11
    435a:	d00a      	beq.n	4372 <usb_handle_standard_request+0x1a2>
    435c:	2800      	cmp	r0, #0
    435e:	f47f af52 	bne.w	4206 <usb_handle_standard_request+0x36>
		data[0] = 0U;
    4362:	7018      	strb	r0, [r3, #0]
		data[1] = 0U;
    4364:	7058      	strb	r0, [r3, #1]
    4366:	e783      	b.n	4270 <usb_handle_standard_request+0xa0>
		data[0] = 0U;
    4368:	2000      	movs	r0, #0
    436a:	7018      	strb	r0, [r3, #0]
		*len = 1;
    436c:	f8c7 9000 	str.w	r9, [r7]
		break;
    4370:	e74f      	b.n	4212 <usb_handle_standard_request+0x42>
		usb_set_interface(sys_le16_to_cpu(setup->wIndex),
    4372:	f898 b004 	ldrb.w	fp, [r8, #4]
    4376:	f898 2002 	ldrb.w	r2, [r8, #2]
	const u8_t *p = usb_dev.descriptors;
    437a:	6a34      	ldr	r4, [r6, #32]
	u8_t cur_iface = 0xFF;
    437c:	f04f 08ff 	mov.w	r8, #255	; 0xff
	u8_t cur_alt_setting = 0xFF;
    4380:	46c2      	mov	sl, r8
	const u8_t *if_desc = NULL;
    4382:	f04f 0900 	mov.w	r9, #0
	while (p[DESC_bLength] != 0U) {
    4386:	7823      	ldrb	r3, [r4, #0]
    4388:	b93b      	cbnz	r3, 439a <usb_handle_standard_request+0x1ca>
	if (usb_dev.status_callback) {
    438a:	69f3      	ldr	r3, [r6, #28]
    438c:	b113      	cbz	r3, 4394 <usb_handle_standard_request+0x1c4>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    438e:	4649      	mov	r1, r9
    4390:	2007      	movs	r0, #7
    4392:	4798      	blx	r3
		*len = 0;
    4394:	2000      	movs	r0, #0
    4396:	6038      	str	r0, [r7, #0]
		break;
    4398:	e73b      	b.n	4212 <usb_handle_standard_request+0x42>
		switch (p[DESC_bDescriptorType]) {
    439a:	7863      	ldrb	r3, [r4, #1]
    439c:	2b04      	cmp	r3, #4
    439e:	d004      	beq.n	43aa <usb_handle_standard_request+0x1da>
    43a0:	2b05      	cmp	r3, #5
    43a2:	d00c      	beq.n	43be <usb_handle_standard_request+0x1ee>
		p += p[DESC_bLength];
    43a4:	7823      	ldrb	r3, [r4, #0]
    43a6:	441c      	add	r4, r3
    43a8:	e7ed      	b.n	4386 <usb_handle_standard_request+0x1b6>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    43aa:	f894 8002 	ldrb.w	r8, [r4, #2]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    43ae:	f894 a003 	ldrb.w	sl, [r4, #3]
			if (cur_iface == iface &&
    43b2:	45c3      	cmp	fp, r8
    43b4:	d1f6      	bne.n	43a4 <usb_handle_standard_request+0x1d4>
    43b6:	4552      	cmp	r2, sl
    43b8:	bf08      	it	eq
    43ba:	46a1      	moveq	r9, r4
    43bc:	e7f2      	b.n	43a4 <usb_handle_standard_request+0x1d4>
			if ((cur_iface != iface) ||
    43be:	45c3      	cmp	fp, r8
    43c0:	d1f0      	bne.n	43a4 <usb_handle_standard_request+0x1d4>
    43c2:	4552      	cmp	r2, sl
    43c4:	d1ee      	bne.n	43a4 <usb_handle_standard_request+0x1d4>
			ep_cfg.ep_type = p[ENDP_DESC_bmAttributes];
    43c6:	78e3      	ldrb	r3, [r4, #3]
    43c8:	f88d 3010 	strb.w	r3, [sp, #16]
				(p[ENDP_DESC_wMaxPacketSize + 1] << 8);
    43cc:	7961      	ldrb	r1, [r4, #5]
			ep_cfg.ep_mps = (p[ENDP_DESC_wMaxPacketSize]) |
    43ce:	7923      	ldrb	r3, [r4, #4]
    43d0:	9201      	str	r2, [sp, #4]
    43d2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    43d6:	f8ad 300e 	strh.w	r3, [sp, #14]
			ep_cfg.ep_addr = p[ENDP_DESC_bEndpointAddress];
    43da:	78a3      	ldrb	r3, [r4, #2]
    43dc:	f88d 300c 	strb.w	r3, [sp, #12]
			usb_dc_ep_configure(&ep_cfg);
    43e0:	a803      	add	r0, sp, #12
    43e2:	f002 faa3 	bl	692c <usb_dc_ep_configure>
			usb_dc_ep_enable(ep_cfg.ep_addr);
    43e6:	f89d 000c 	ldrb.w	r0, [sp, #12]
    43ea:	f002 fb6f 	bl	6acc <usb_dc_ep_enable>
    43ee:	9a01      	ldr	r2, [sp, #4]
			LOG_DBG("Found: ep_addr 0x%x", ep_cfg.ep_addr);
    43f0:	e7d8      	b.n	43a4 <usb_handle_standard_request+0x1d4>
	switch (setup->bRequest) {
    43f2:	f898 3001 	ldrb.w	r3, [r8, #1]
	u8_t ep = sys_le16_to_cpu(setup->wIndex);
    43f6:	f898 0004 	ldrb.w	r0, [r8, #4]
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false)
    43fa:	f8d4 a000 	ldr.w	sl, [r4]
	u8_t ep = sys_le16_to_cpu(setup->wIndex);
    43fe:	f88d 000c 	strb.w	r0, [sp, #12]
	switch (setup->bRequest) {
    4402:	2b01      	cmp	r3, #1
    4404:	d01a      	beq.n	443c <usb_handle_standard_request+0x26c>
    4406:	b25c      	sxtb	r4, r3
    4408:	b184      	cbz	r4, 442c <usb_handle_standard_request+0x25c>
    440a:	2b03      	cmp	r3, #3
    440c:	f47f aefb 	bne.w	4206 <usb_handle_standard_request+0x36>
		if (sys_le16_to_cpu(setup->wValue) == FEA_ENDPOINT_HALT) {
    4410:	f8b8 4002 	ldrh.w	r4, [r8, #2]
    4414:	2c00      	cmp	r4, #0
    4416:	f47f aef6 	bne.w	4206 <usb_handle_standard_request+0x36>
			usb_dc_ep_set_stall(ep);
    441a:	f002 fac7 	bl	69ac <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    441e:	69f3      	ldr	r3, [r6, #28]
    4420:	2b00      	cmp	r3, #0
    4422:	f43f af2b 	beq.w	427c <usb_handle_standard_request+0xac>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    4426:	a903      	add	r1, sp, #12
    4428:	2008      	movs	r0, #8
    442a:	e014      	b.n	4456 <usb_handle_standard_request+0x286>
		usb_dc_ep_is_stalled(ep, &data[0]);
    442c:	4651      	mov	r1, sl
    442e:	f002 fb27 	bl	6a80 <usb_dc_ep_is_stalled>
		data[1] = 0U;
    4432:	f88a 4001 	strb.w	r4, [sl, #1]
		*len = 2;
    4436:	f8c7 9000 	str.w	r9, [r7]
		break;
    443a:	e71f      	b.n	427c <usb_handle_standard_request+0xac>
		if (sys_le16_to_cpu(setup->wValue) == FEA_ENDPOINT_HALT) {
    443c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
    4440:	2c00      	cmp	r4, #0
    4442:	f47f aee0 	bne.w	4206 <usb_handle_standard_request+0x36>
			usb_dc_ep_clear_stall(ep);
    4446:	f002 faf7 	bl	6a38 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    444a:	69f3      	ldr	r3, [r6, #28]
    444c:	2b00      	cmp	r3, #0
    444e:	f43f af15 	beq.w	427c <usb_handle_standard_request+0xac>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    4452:	a903      	add	r1, sp, #12
    4454:	2009      	movs	r0, #9
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    4456:	4798      	blx	r3
    4458:	e710      	b.n	427c <usb_handle_standard_request+0xac>
		if (type == DESC_CONFIGURATION) {
    445a:	2a02      	cmp	r2, #2
		*data = p;
    445c:	6023      	str	r3, [r4, #0]
		if (type == DESC_CONFIGURATION) {
    445e:	f47f af25 	bne.w	42ac <usb_handle_standard_request+0xdc>
			*len = (p[CONF_DESC_wTotalLength]) |
    4462:	885b      	ldrh	r3, [r3, #2]
    4464:	603b      	str	r3, [r7, #0]
    4466:	e709      	b.n	427c <usb_handle_standard_request+0xac>
}
    4468:	b007      	add	sp, #28
    446a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    446e:	bf00      	nop
    4470:	200036b0 	.word	0x200036b0
    4474:	20000344 	.word	0x20000344

00004478 <usb_handle_request.constprop.7>:
static bool usb_handle_request(struct usb_setup_packet *setup,
    4478:	b513      	push	{r0, r1, r4, lr}
    447a:	4c0e      	ldr	r4, [pc, #56]	; (44b4 <usb_handle_request.constprop.7+0x3c>)
	usb_request_handler handler = usb_dev.req_handlers[type];
    447c:	480e      	ldr	r0, [pc, #56]	; (44b8 <usb_handle_request.constprop.7+0x40>)
static bool usb_handle_request(struct usb_setup_packet *setup,
    447e:	6823      	ldr	r3, [r4, #0]
    4480:	9301      	str	r3, [sp, #4]
	u32_t type = REQTYPE_GET_TYPE(setup->bmRequestType);
    4482:	7803      	ldrb	r3, [r0, #0]
    4484:	f3c3 1341 	ubfx	r3, r3, #5, #2
	usb_request_handler handler = usb_dev.req_handlers[type];
    4488:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	if (handler == NULL) {
    448e:	b163      	cbz	r3, 44aa <usb_handle_request.constprop.7+0x32>
	if ((*handler)(setup, len, data) < 0) {
    4490:	f100 0208 	add.w	r2, r0, #8
    4494:	f100 0110 	add.w	r1, r0, #16
    4498:	4798      	blx	r3
    449a:	43c0      	mvns	r0, r0
    449c:	0fc0      	lsrs	r0, r0, #31
}
    449e:	9a01      	ldr	r2, [sp, #4]
    44a0:	6823      	ldr	r3, [r4, #0]
    44a2:	429a      	cmp	r2, r3
    44a4:	d003      	beq.n	44ae <usb_handle_request.constprop.7+0x36>
    44a6:	f006 fdb9 	bl	b01c <_StackCheckHandler>
		return false;
    44aa:	4618      	mov	r0, r3
    44ac:	e7f7      	b.n	449e <usb_handle_request.constprop.7+0x26>
}
    44ae:	b002      	add	sp, #8
    44b0:	bd10      	pop	{r4, pc}
    44b2:	bf00      	nop
    44b4:	200036b0 	.word	0x200036b0
    44b8:	20000344 	.word	0x20000344

000044bc <usb_handle_control_transfer>:
{
    44bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    44be:	4e36      	ldr	r6, [pc, #216]	; (4598 <usb_handle_control_transfer+0xdc>)
    44c0:	6832      	ldr	r2, [r6, #0]
    44c2:	9201      	str	r2, [sp, #4]
	u32_t chunk = 0U;
    44c4:	2200      	movs	r2, #0
{
    44c6:	460b      	mov	r3, r1
	u32_t chunk = 0U;
    44c8:	9200      	str	r2, [sp, #0]
	if (ep == USB_CONTROL_OUT_EP0 && ep_status == USB_DC_EP_SETUP) {
    44ca:	4605      	mov	r5, r0
    44cc:	2800      	cmp	r0, #0
    44ce:	d158      	bne.n	4582 <usb_handle_control_transfer+0xc6>
    44d0:	4c32      	ldr	r4, [pc, #200]	; (459c <usb_handle_control_transfer+0xe0>)
    44d2:	bb61      	cbnz	r1, 452e <usb_handle_control_transfer+0x72>
		if (usb_dc_ep_read(ep,
    44d4:	2208      	movs	r2, #8
    44d6:	4621      	mov	r1, r4
    44d8:	f002 fc46 	bl	6d68 <usb_dc_ep_read>
    44dc:	2800      	cmp	r0, #0
    44de:	da08      	bge.n	44f2 <usb_handle_control_transfer+0x36>
			usb_dc_ep_set_stall(USB_CONTROL_IN_EP0);
    44e0:	2080      	movs	r0, #128	; 0x80
    44e2:	f002 fa63 	bl	69ac <usb_dc_ep_set_stall>
}
    44e6:	9a01      	ldr	r2, [sp, #4]
    44e8:	6833      	ldr	r3, [r6, #0]
    44ea:	429a      	cmp	r2, r3
    44ec:	d051      	beq.n	4592 <usb_handle_control_transfer+0xd6>
    44ee:	f006 fd95 	bl	b01c <_StackCheckHandler>
		type = REQTYPE_GET_TYPE(setup->bmRequestType);
    44f2:	7822      	ldrb	r2, [r4, #0]
		length = sys_le16_to_cpu(setup->wLength);
    44f4:	88e5      	ldrh	r5, [r4, #6]
		type = REQTYPE_GET_TYPE(setup->bmRequestType);
    44f6:	f3c2 1341 	ubfx	r3, r2, #5, #2
		usb_dev.data_buf = usb_dev.data_store[type];
    44fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    44fe:	6b58      	ldr	r0, [r3, #52]	; 0x34
    4500:	60a0      	str	r0, [r4, #8]
		if (!usb_dev.data_buf) {
    4502:	b910      	cbnz	r0, 450a <usb_handle_control_transfer+0x4e>
			usb_dc_ep_set_stall(USB_CONTROL_OUT_EP0);
    4504:	f002 fa52 	bl	69ac <usb_dc_ep_set_stall>
    4508:	e7ea      	b.n	44e0 <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_len = length;
    450a:	e9c4 5503 	strd	r5, r5, [r4, #12]
		if (length &&
    450e:	b10d      	cbz	r5, 4514 <usb_handle_control_transfer+0x58>
    4510:	09d3      	lsrs	r3, r2, #7
    4512:	d0e8      	beq.n	44e6 <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
    4514:	f7ff ffb0 	bl	4478 <usb_handle_request.constprop.7>
    4518:	2800      	cmp	r0, #0
    451a:	d0e1      	beq.n	44e0 <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len, length);
    451c:	6923      	ldr	r3, [r4, #16]
    451e:	42ab      	cmp	r3, r5
    4520:	bfd4      	ite	le
    4522:	60e3      	strle	r3, [r4, #12]
    4524:	60e5      	strgt	r5, [r4, #12]
		usb_data_to_host(length);
    4526:	4628      	mov	r0, r5
			usb_data_to_host(sys_le16_to_cpu(setup->wLength));
    4528:	f7ff fe24 	bl	4174 <usb_data_to_host>
		__ASSERT_NO_MSG(false);
    452c:	e7db      	b.n	44e6 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
    452e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
    4532:	2a00      	cmp	r2, #0
			if (usb_dc_ep_read(USB_CONTROL_OUT_EP0,
    4534:	466b      	mov	r3, sp
		if (usb_dev.data_buf_residue <= 0) {
    4536:	dc05      	bgt.n	4544 <usb_handle_control_transfer+0x88>
			if (usb_dc_ep_read(USB_CONTROL_OUT_EP0,
    4538:	4602      	mov	r2, r0
    453a:	f002 fc15 	bl	6d68 <usb_dc_ep_read>
    453e:	2800      	cmp	r0, #0
    4540:	dad1      	bge.n	44e6 <usb_handle_control_transfer+0x2a>
    4542:	e7cd      	b.n	44e0 <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_OUT_EP0,
    4544:	f002 fc10 	bl	6d68 <usb_dc_ep_read>
    4548:	2800      	cmp	r0, #0
    454a:	da04      	bge.n	4556 <usb_handle_control_transfer+0x9a>
			usb_dc_ep_set_stall(USB_CONTROL_IN_EP0);
    454c:	2080      	movs	r0, #128	; 0x80
    454e:	f002 fa2d 	bl	69ac <usb_dc_ep_set_stall>
			usb_dc_ep_set_stall(USB_CONTROL_OUT_EP0);
    4552:	4628      	mov	r0, r5
    4554:	e7c5      	b.n	44e2 <usb_handle_control_transfer+0x26>
		usb_dev.data_buf += chunk;
    4556:	9900      	ldr	r1, [sp, #0]
    4558:	68a2      	ldr	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    455a:	68e3      	ldr	r3, [r4, #12]
		usb_dev.data_buf += chunk;
    455c:	440a      	add	r2, r1
		usb_dev.data_buf_residue -= chunk;
    455e:	1a5b      	subs	r3, r3, r1
		usb_dev.data_buf += chunk;
    4560:	60a2      	str	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    4562:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
    4564:	2b00      	cmp	r3, #0
    4566:	d1be      	bne.n	44e6 <usb_handle_control_transfer+0x2a>
			type = REQTYPE_GET_TYPE(setup->bmRequestType);
    4568:	7823      	ldrb	r3, [r4, #0]
    456a:	f3c3 1341 	ubfx	r3, r3, #5, #2
			usb_dev.data_buf = usb_dev.data_store[type];
    456e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    4572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4574:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
    4576:	f7ff ff7f 	bl	4478 <usb_handle_request.constprop.7>
    457a:	2800      	cmp	r0, #0
    457c:	d0b0      	beq.n	44e0 <usb_handle_control_transfer+0x24>
			usb_data_to_host(sys_le16_to_cpu(setup->wLength));
    457e:	88e0      	ldrh	r0, [r4, #6]
    4580:	e7d2      	b.n	4528 <usb_handle_control_transfer+0x6c>
	} else if (ep == USB_CONTROL_IN_EP0) {
    4582:	2880      	cmp	r0, #128	; 0x80
    4584:	d1af      	bne.n	44e6 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0) {
    4586:	4b05      	ldr	r3, [pc, #20]	; (459c <usb_handle_control_transfer+0xe0>)
    4588:	68da      	ldr	r2, [r3, #12]
    458a:	2a00      	cmp	r2, #0
    458c:	d0ab      	beq.n	44e6 <usb_handle_control_transfer+0x2a>
			usb_data_to_host(sys_le16_to_cpu(setup->wLength));
    458e:	88d8      	ldrh	r0, [r3, #6]
    4590:	e7ca      	b.n	4528 <usb_handle_control_transfer+0x6c>
}
    4592:	b002      	add	sp, #8
    4594:	bd70      	pop	{r4, r5, r6, pc}
    4596:	bf00      	nop
    4598:	200036b0 	.word	0x200036b0
    459c:	20000344 	.word	0x20000344

000045a0 <k_work_submit_to_queue.constprop.9>:
 * @param work Address of work item.
 *
 * @return N/A
 * @req K-WORK-001
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
    45a0:	b507      	push	{r0, r1, r2, lr}
    45a2:	4b13      	ldr	r3, [pc, #76]	; (45f0 <k_work_submit_to_queue.constprop.9+0x50>)
    45a4:	681a      	ldr	r2, [r3, #0]
    45a6:	9201      	str	r2, [sp, #4]
    45a8:	4601      	mov	r1, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    45aa:	f100 0208 	add.w	r2, r0, #8
    45ae:	f3bf 8f5b 	dmb	ish
    45b2:	e852 0f00 	ldrex	r0, [r2]
    45b6:	f040 0c01 	orr.w	ip, r0, #1
    45ba:	e842 ce00 	strex	lr, ip, [r2]
    45be:	f1be 0f00 	cmp.w	lr, #0
    45c2:	d1f6      	bne.n	45b2 <k_work_submit_to_queue.constprop.9+0x12>
    45c4:	f3bf 8f5b 	dmb	ish
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    45c8:	07c0      	lsls	r0, r0, #31
		k_queue_append(&work_q->queue, work);
    45ca:	9a01      	ldr	r2, [sp, #4]
    45cc:	681b      	ldr	r3, [r3, #0]
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    45ce:	d409      	bmi.n	45e4 <k_work_submit_to_queue.constprop.9+0x44>
		k_queue_append(&work_q->queue, work);
    45d0:	429a      	cmp	r2, r3
    45d2:	d001      	beq.n	45d8 <k_work_submit_to_queue.constprop.9+0x38>
	}
}
    45d4:	f006 fd22 	bl	b01c <_StackCheckHandler>
		k_queue_append(&work_q->queue, work);
    45d8:	4806      	ldr	r0, [pc, #24]	; (45f4 <k_work_submit_to_queue.constprop.9+0x54>)
}
    45da:	b003      	add	sp, #12
    45dc:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
    45e0:	f005 bcba 	b.w	9f58 <k_queue_append>
}
    45e4:	429a      	cmp	r2, r3
    45e6:	d1f5      	bne.n	45d4 <k_work_submit_to_queue.constprop.9+0x34>
    45e8:	b003      	add	sp, #12
    45ea:	f85d fb04 	ldr.w	pc, [sp], #4
    45ee:	bf00      	nop
    45f0:	200036b0 	.word	0x200036b0
    45f4:	200018d0 	.word	0x200018d0

000045f8 <usb_transfer_work>:

	return NULL;
}

static void usb_transfer_work(struct k_work *item)
{
    45f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    45fc:	4f43      	ldr	r7, [pc, #268]	; (470c <usb_transfer_work+0x114>)
	int ret = 0;
	u32_t bytes;
	u8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;
    45fe:	f810 5c2c 	ldrb.w	r5, [r0, #-44]
{
    4602:	683b      	ldr	r3, [r7, #0]
    4604:	9301      	str	r3, [sp, #4]

	if (trans->status != -EBUSY) {
    4606:	f850 3c28 	ldr.w	r3, [r0, #-40]
    460a:	3310      	adds	r3, #16
{
    460c:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
    460e:	d110      	bne.n	4632 <usb_transfer_work+0x3a>
		/* transfer cancelled or already completed */
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    4610:	68c3      	ldr	r3, [r0, #12]
    4612:	f850 2c20 	ldr.w	r2, [r0, #-32]
    4616:	0799      	lsls	r1, r3, #30
    4618:	d53e      	bpl.n	4698 <usb_transfer_work+0xa0>
		if (!trans->bsize) {
    461a:	bb12      	cbnz	r2, 4662 <usb_transfer_work+0x6a>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    461c:	f013 0304 	ands.w	r3, r3, #4
    4620:	d104      	bne.n	462c <usb_transfer_work+0x34>
				usb_dc_ep_write(ep, NULL, 0, NULL);
    4622:	461a      	mov	r2, r3
    4624:	4619      	mov	r1, r3
    4626:	4628      	mov	r0, r5
    4628:	f002 fa7a 	bl	6b20 <usb_dc_ep_write>
			}
			trans->status = 0;
    462c:	2300      	movs	r3, #0
		}

		ret = usb_dc_ep_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			/* transfer error */
			trans->status = -EINVAL;
    462e:	f844 3c28 	str.w	r3, [r4, #-40]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    4632:	f854 3c28 	ldr.w	r3, [r4, #-40]
    4636:	3310      	adds	r3, #16
    4638:	d00d      	beq.n	4656 <usb_transfer_work+0x5e>
    463a:	f854 6c18 	ldr.w	r6, [r4, #-24]
    463e:	b156      	cbz	r6, 4656 <usb_transfer_work+0x5e>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    4640:	f854 8c1c 	ldr.w	r8, [r4, #-28]
		void *priv = trans->priv;
    4644:	f854 9c14 	ldr.w	r9, [r4, #-20]

		if (k_is_in_isr()) {
    4648:	f006 fb34 	bl	acb4 <k_is_in_isr>
    464c:	2800      	cmp	r0, #0
    464e:	d04e      	beq.n	46ee <usb_transfer_work+0xf6>
 * @return N/A
 * @req K-WORK-001
 */
static inline void k_work_submit(struct k_work *work)
{
	k_work_submit_to_queue(&k_sys_work_q, work);
    4650:	4620      	mov	r0, r4
    4652:	f7ff ffa5 	bl	45a0 <k_work_submit_to_queue.constprop.9>
		k_sem_give(&trans->sem);

		/* Transfer completion callback */
		cb(ep, tsize, priv);
	}
}
    4656:	9a01      	ldr	r2, [sp, #4]
    4658:	683b      	ldr	r3, [r7, #0]
    465a:	429a      	cmp	r2, r3
    465c:	d052      	beq.n	4704 <usb_transfer_work+0x10c>
    465e:	f006 fcdd 	bl	b01c <_StackCheckHandler>
		ret = usb_dc_ep_write(ep, trans->buffer, trans->bsize, &bytes);
    4662:	f850 1c24 	ldr.w	r1, [r0, #-36]
    4666:	466b      	mov	r3, sp
    4668:	4628      	mov	r0, r5
    466a:	f002 fa59 	bl	6b20 <usb_dc_ep_write>
		if (ret) {
    466e:	b110      	cbz	r0, 4676 <usb_transfer_work+0x7e>
			trans->status = -EINVAL;
    4670:	f06f 0315 	mvn.w	r3, #21
    4674:	e7db      	b.n	462e <usb_transfer_work+0x36>
		trans->buffer += bytes;
    4676:	9a00      	ldr	r2, [sp, #0]
    4678:	f854 3c24 	ldr.w	r3, [r4, #-36]
    467c:	4413      	add	r3, r2
    467e:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    4682:	f854 3c20 	ldr.w	r3, [r4, #-32]
    4686:	1a9b      	subs	r3, r3, r2
    4688:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    468c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    4690:	4413      	add	r3, r2
    4692:	f844 3c1c 	str.w	r3, [r4, #-28]
    4696:	e7cc      	b.n	4632 <usb_transfer_work+0x3a>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    4698:	f850 1c24 	ldr.w	r1, [r0, #-36]
    469c:	466b      	mov	r3, sp
    469e:	4628      	mov	r0, r5
    46a0:	f002 faca 	bl	6c38 <usb_dc_ep_read_wait>
		if (ret) {
    46a4:	2800      	cmp	r0, #0
    46a6:	d1e3      	bne.n	4670 <usb_transfer_work+0x78>
		trans->buffer += bytes;
    46a8:	9e00      	ldr	r6, [sp, #0]
    46aa:	f854 3c24 	ldr.w	r3, [r4, #-36]
    46ae:	4433      	add	r3, r6
    46b0:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    46b4:	f854 3c20 	ldr.w	r3, [r4, #-32]
    46b8:	1b9b      	subs	r3, r3, r6
    46ba:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    46be:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    46c2:	4433      	add	r3, r6
    46c4:	f844 3c1c 	str.w	r3, [r4, #-28]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    46c8:	2e00      	cmp	r6, #0
    46ca:	d0af      	beq.n	462c <usb_transfer_work+0x34>
    46cc:	4628      	mov	r0, r5
    46ce:	f002 fba3 	bl	6e18 <usb_dc_ep_mps>
    46d2:	fbb6 f3f0 	udiv	r3, r6, r0
    46d6:	fb03 6010 	mls	r0, r3, r0, r6
    46da:	2800      	cmp	r0, #0
    46dc:	d1a6      	bne.n	462c <usb_transfer_work+0x34>
    46de:	f854 3c20 	ldr.w	r3, [r4, #-32]
    46e2:	2b00      	cmp	r3, #0
    46e4:	d0a2      	beq.n	462c <usb_transfer_work+0x34>
		usb_dc_ep_read_continue(ep);
    46e6:	4628      	mov	r0, r5
    46e8:	f002 fafa 	bl	6ce0 <usb_dc_ep_read_continue>
    46ec:	e7a1      	b.n	4632 <usb_transfer_work+0x3a>
		trans->cb = NULL;
    46ee:	f844 0c18 	str.w	r0, [r4, #-24]

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    46f2:	f1a4 0010 	sub.w	r0, r4, #16
    46f6:	f006 fa39 	bl	ab6c <z_impl_k_sem_give>
		cb(ep, tsize, priv);
    46fa:	464a      	mov	r2, r9
    46fc:	4641      	mov	r1, r8
    46fe:	4628      	mov	r0, r5
    4700:	47b0      	blx	r6
    4702:	e7a8      	b.n	4656 <usb_transfer_work+0x5e>
}
    4704:	b003      	add	sp, #12
    4706:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    470a:	bf00      	nop
    470c:	200036b0 	.word	0x200036b0

00004710 <usb_set_config>:
{
    4710:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4712:	4913      	ldr	r1, [pc, #76]	; (4760 <usb_set_config+0x50>)
    4714:	680a      	ldr	r2, [r1, #0]
    4716:	9201      	str	r2, [sp, #4]
	if (!config)
    4718:	b1e8      	cbz	r0, 4756 <usb_set_config+0x46>
	usb_dev.descriptors = usb_descriptors;
    471a:	4b12      	ldr	r3, [pc, #72]	; (4764 <usb_set_config+0x54>)
    471c:	6802      	ldr	r2, [r0, #0]
    471e:	621a      	str	r2, [r3, #32]
	usb_dev.req_handlers[type] = handler;
    4720:	4a11      	ldr	r2, [pc, #68]	; (4768 <usb_set_config+0x58>)
    4722:	625a      	str	r2, [r3, #36]	; 0x24
	usb_dev.data_store[type] = data_store;
    4724:	f103 0244 	add.w	r2, r3, #68	; 0x44
    4728:	635a      	str	r2, [r3, #52]	; 0x34
	if (config->interface.class_handler != NULL) {
    472a:	6902      	ldr	r2, [r0, #16]
    472c:	b112      	cbz	r2, 4734 <usb_set_config+0x24>
		usb_register_request_handler(REQTYPE_TYPE_CLASS,
    472e:	69c4      	ldr	r4, [r0, #28]
	usb_dev.data_store[type] = data_store;
    4730:	639c      	str	r4, [r3, #56]	; 0x38
	usb_dev.req_handlers[type] = handler;
    4732:	629a      	str	r2, [r3, #40]	; 0x28
	if (config->interface.vendor_handler || usb_os_desc_enabled()) {
    4734:	6942      	ldr	r2, [r0, #20]
    4736:	b122      	cbz	r2, 4742 <usb_set_config+0x32>
		usb_register_request_handler(REQTYPE_TYPE_VENDOR,
    4738:	6a04      	ldr	r4, [r0, #32]
	usb_dev.req_handlers[type] = handler;
    473a:	4d0c      	ldr	r5, [pc, #48]	; (476c <usb_set_config+0x5c>)
    473c:	62dd      	str	r5, [r3, #44]	; 0x2c
	usb_dev.data_store[type] = data_store;
    473e:	63dc      	str	r4, [r3, #60]	; 0x3c
			usb_dev.vendor_req_handler =
    4740:	619a      	str	r2, [r3, #24]
	if (config->interface.custom_handler != NULL) {
    4742:	6980      	ldr	r0, [r0, #24]
    4744:	b108      	cbz	r0, 474a <usb_set_config+0x3a>
	usb_dev.custom_req_handler = handler;
    4746:	6158      	str	r0, [r3, #20]
	return 0;
    4748:	2000      	movs	r0, #0
}
    474a:	9a01      	ldr	r2, [sp, #4]
    474c:	680b      	ldr	r3, [r1, #0]
    474e:	429a      	cmp	r2, r3
    4750:	d004      	beq.n	475c <usb_set_config+0x4c>
    4752:	f006 fc63 	bl	b01c <_StackCheckHandler>
		return -EINVAL;
    4756:	f06f 0015 	mvn.w	r0, #21
    475a:	e7f6      	b.n	474a <usb_set_config+0x3a>
}
    475c:	b003      	add	sp, #12
    475e:	bd30      	pop	{r4, r5, pc}
    4760:	200036b0 	.word	0x200036b0
    4764:	20000344 	.word	0x20000344
    4768:	000041d1 	.word	0x000041d1
    476c:	000040dd 	.word	0x000040dd

00004770 <usb_enable>:
{
    4770:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (true == usb_dev.enabled) {
    4774:	4d37      	ldr	r5, [pc, #220]	; (4854 <usb_enable+0xe4>)
{
    4776:	4e38      	ldr	r6, [pc, #224]	; (4858 <usb_enable+0xe8>)
	if (true == usb_dev.enabled) {
    4778:	f895 404c 	ldrb.w	r4, [r5, #76]	; 0x4c
{
    477c:	6833      	ldr	r3, [r6, #0]
    477e:	b085      	sub	sp, #20
    4780:	4607      	mov	r7, r0
    4782:	9303      	str	r3, [sp, #12]
	if (true == usb_dev.enabled) {
    4784:	2c00      	cmp	r4, #0
    4786:	d14f      	bne.n	4828 <usb_enable+0xb8>
	usb_dev.status_callback = cb;
    4788:	4834      	ldr	r0, [pc, #208]	; (485c <usb_enable+0xec>)
    478a:	61e8      	str	r0, [r5, #28]
	ret = usb_dc_set_status_callback(forward_status_cb);
    478c:	f002 fb2e 	bl	6dec <usb_dc_set_status_callback>
	if (ret < 0) {
    4790:	2800      	cmp	r0, #0
    4792:	db4a      	blt.n	482a <usb_enable+0xba>
	ret = usb_dc_attach();
    4794:	f002 f81e 	bl	67d4 <usb_dc_attach>
	if (ret < 0)
    4798:	2800      	cmp	r0, #0
    479a:	db46      	blt.n	482a <usb_enable+0xba>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    479c:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
    479e:	a801      	add	r0, sp, #4
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    47a0:	f8ad 3006 	strh.w	r3, [sp, #6]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    47a4:	f88d 4008 	strb.w	r4, [sp, #8]
	ep0_cfg.ep_addr = USB_CONTROL_OUT_EP0;
    47a8:	f88d 4004 	strb.w	r4, [sp, #4]
	ret = usb_dc_ep_configure(&ep0_cfg);
    47ac:	f002 f8be 	bl	692c <usb_dc_ep_configure>
	if (ret < 0)
    47b0:	2800      	cmp	r0, #0
    47b2:	db3a      	blt.n	482a <usb_enable+0xba>
	ep0_cfg.ep_addr = USB_CONTROL_IN_EP0;
    47b4:	f04f 0880 	mov.w	r8, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
    47b8:	a801      	add	r0, sp, #4
	ep0_cfg.ep_addr = USB_CONTROL_IN_EP0;
    47ba:	f88d 8004 	strb.w	r8, [sp, #4]
	ret = usb_dc_ep_configure(&ep0_cfg);
    47be:	f002 f8b5 	bl	692c <usb_dc_ep_configure>
	if (ret < 0)
    47c2:	2800      	cmp	r0, #0
    47c4:	db31      	blt.n	482a <usb_enable+0xba>
	ret = usb_dc_ep_set_callback(USB_CONTROL_OUT_EP0,
    47c6:	4926      	ldr	r1, [pc, #152]	; (4860 <usb_enable+0xf0>)
    47c8:	4620      	mov	r0, r4
    47ca:	f002 faef 	bl	6dac <usb_dc_ep_set_callback>
	if (ret < 0)
    47ce:	2800      	cmp	r0, #0
    47d0:	db2b      	blt.n	482a <usb_enable+0xba>
	ret = usb_dc_ep_set_callback(USB_CONTROL_IN_EP0,
    47d2:	4923      	ldr	r1, [pc, #140]	; (4860 <usb_enable+0xf0>)
    47d4:	4640      	mov	r0, r8
    47d6:	f002 fae9 	bl	6dac <usb_dc_ep_set_callback>
	if (ret < 0)
    47da:	2800      	cmp	r0, #0
    47dc:	db25      	blt.n	482a <usb_enable+0xba>
	for (i = 0U; i < config->num_endpoints; i++) {
    47de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
    47e2:	42a3      	cmp	r3, r4
    47e4:	d827      	bhi.n	4836 <usb_enable+0xc6>
	for (i = 0U; i < MAX_NUM_TRANSFERS; i++) {
    47e6:	2700      	movs	r7, #0
    47e8:	4c1a      	ldr	r4, [pc, #104]	; (4854 <usb_enable+0xe4>)
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    47ea:	f8df 9078 	ldr.w	r9, [pc, #120]	; 4864 <usb_enable+0xf4>
    47ee:	46b8      	mov	r8, r7
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
    47f0:	2201      	movs	r2, #1
    47f2:	e9c4 891f 	strd	r8, r9, [r4, #124]	; 0x7c
    47f6:	f8c4 8084 	str.w	r8, [r4, #132]	; 0x84
    47fa:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    47fe:	4611      	mov	r1, r2
    4800:	3701      	adds	r7, #1
    4802:	f006 f9a1 	bl	ab48 <z_impl_k_sem_init>
    4806:	2f04      	cmp	r7, #4
    4808:	f104 043c 	add.w	r4, r4, #60	; 0x3c
    480c:	d1f0      	bne.n	47f0 <usb_enable+0x80>
	ret = usb_dc_ep_enable(USB_CONTROL_OUT_EP0);
    480e:	2000      	movs	r0, #0
    4810:	f002 f95c 	bl	6acc <usb_dc_ep_enable>
	if (ret < 0)
    4814:	2800      	cmp	r0, #0
    4816:	db08      	blt.n	482a <usb_enable+0xba>
	ret = usb_dc_ep_enable(USB_CONTROL_IN_EP0);
    4818:	2080      	movs	r0, #128	; 0x80
    481a:	f002 f957 	bl	6acc <usb_dc_ep_enable>
	if (ret < 0)
    481e:	2800      	cmp	r0, #0
    4820:	db03      	blt.n	482a <usb_enable+0xba>
	usb_dev.enabled = true;
    4822:	2301      	movs	r3, #1
    4824:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
		return 0;
    4828:	2000      	movs	r0, #0
}
    482a:	9a03      	ldr	r2, [sp, #12]
    482c:	6833      	ldr	r3, [r6, #0]
    482e:	429a      	cmp	r2, r3
    4830:	d00d      	beq.n	484e <usb_enable+0xde>
    4832:	f006 fbf3 	bl	b01c <_StackCheckHandler>
		ret = usb_dc_ep_set_callback(config->endpoint[i].ep_addr,
    4836:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4838:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    483c:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
    4840:	7910      	ldrb	r0, [r2, #4]
    4842:	f002 fab3 	bl	6dac <usb_dc_ep_set_callback>
		if (ret < 0)
    4846:	2800      	cmp	r0, #0
    4848:	dbef      	blt.n	482a <usb_enable+0xba>
	for (i = 0U; i < config->num_endpoints; i++) {
    484a:	3401      	adds	r4, #1
    484c:	e7c7      	b.n	47de <usb_enable+0x6e>
}
    484e:	b005      	add	sp, #20
    4850:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4854:	20000344 	.word	0x20000344
    4858:	200036b0 	.word	0x200036b0
    485c:	00004119 	.word	0x00004119
    4860:	000044bd 	.word	0x000044bd
    4864:	000045f9 	.word	0x000045f9

00004868 <usb_write>:
{
    4868:	b537      	push	{r0, r1, r2, r4, r5, lr}
    486a:	4c07      	ldr	r4, [pc, #28]	; (4888 <usb_write+0x20>)
    486c:	6825      	ldr	r5, [r4, #0]
    486e:	9501      	str	r5, [sp, #4]
	return usb_dc_ep_write(ep, data, data_len, bytes_ret);
    4870:	9d01      	ldr	r5, [sp, #4]
    4872:	6824      	ldr	r4, [r4, #0]
    4874:	42a5      	cmp	r5, r4
    4876:	d001      	beq.n	487c <usb_write+0x14>
    4878:	f006 fbd0 	bl	b01c <_StackCheckHandler>
}
    487c:	b003      	add	sp, #12
    487e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return usb_dc_ep_write(ep, data, data_len, bytes_ret);
    4882:	f002 b94d 	b.w	6b20 <usb_dc_ep_write>
    4886:	bf00      	nop
    4888:	200036b0 	.word	0x200036b0

0000488c <usb_ep_set_stall>:
{
    488c:	b507      	push	{r0, r1, r2, lr}
    488e:	4b07      	ldr	r3, [pc, #28]	; (48ac <usb_ep_set_stall+0x20>)
    4890:	681a      	ldr	r2, [r3, #0]
    4892:	9201      	str	r2, [sp, #4]
	return usb_dc_ep_set_stall(ep);
    4894:	9a01      	ldr	r2, [sp, #4]
    4896:	681b      	ldr	r3, [r3, #0]
    4898:	429a      	cmp	r2, r3
    489a:	d001      	beq.n	48a0 <usb_ep_set_stall+0x14>
    489c:	f006 fbbe 	bl	b01c <_StackCheckHandler>
}
    48a0:	b003      	add	sp, #12
    48a2:	f85d eb04 	ldr.w	lr, [sp], #4
	return usb_dc_ep_set_stall(ep);
    48a6:	f002 b881 	b.w	69ac <usb_dc_ep_set_stall>
    48aa:	bf00      	nop
    48ac:	200036b0 	.word	0x200036b0

000048b0 <usb_ep_read_wait>:
{
    48b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    48b2:	4c07      	ldr	r4, [pc, #28]	; (48d0 <usb_ep_read_wait+0x20>)
    48b4:	6825      	ldr	r5, [r4, #0]
    48b6:	9501      	str	r5, [sp, #4]
	return usb_dc_ep_read_wait(ep, data, max_data_len, ret_bytes);
    48b8:	9d01      	ldr	r5, [sp, #4]
    48ba:	6824      	ldr	r4, [r4, #0]
    48bc:	42a5      	cmp	r5, r4
    48be:	d001      	beq.n	48c4 <usb_ep_read_wait+0x14>
    48c0:	f006 fbac 	bl	b01c <_StackCheckHandler>
}
    48c4:	b003      	add	sp, #12
    48c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return usb_dc_ep_read_wait(ep, data, max_data_len, ret_bytes);
    48ca:	f002 b9b5 	b.w	6c38 <usb_dc_ep_read_wait>
    48ce:	bf00      	nop
    48d0:	200036b0 	.word	0x200036b0

000048d4 <usb_ep_read_continue>:
{
    48d4:	b507      	push	{r0, r1, r2, lr}
    48d6:	4b07      	ldr	r3, [pc, #28]	; (48f4 <usb_ep_read_continue+0x20>)
    48d8:	681a      	ldr	r2, [r3, #0]
    48da:	9201      	str	r2, [sp, #4]
	return usb_dc_ep_read_continue(ep);
    48dc:	9a01      	ldr	r2, [sp, #4]
    48de:	681b      	ldr	r3, [r3, #0]
    48e0:	429a      	cmp	r2, r3
    48e2:	d001      	beq.n	48e8 <usb_ep_read_continue+0x14>
    48e4:	f006 fb9a 	bl	b01c <_StackCheckHandler>
}
    48e8:	b003      	add	sp, #12
    48ea:	f85d eb04 	ldr.w	lr, [sp], #4
	return usb_dc_ep_read_continue(ep);
    48ee:	f002 b9f7 	b.w	6ce0 <usb_dc_ep_read_continue>
    48f2:	bf00      	nop
    48f4:	200036b0 	.word	0x200036b0

000048f8 <usb_update_sn_string_descriptor>:
 * replaced the default SN.
 * Please note that the new SN descriptor you changed must has same length
 * as CONFIG_USB_DEVICE_SN.
 */
__weak u8_t *usb_update_sn_string_descriptor(void)
{
    48f8:	b507      	push	{r0, r1, r2, lr}
    48fa:	4b07      	ldr	r3, [pc, #28]	; (4918 <usb_update_sn_string_descriptor+0x20>)
    48fc:	681a      	ldr	r2, [r3, #0]
    48fe:	9201      	str	r2, [sp, #4]
	return NULL;
}
    4900:	9a01      	ldr	r2, [sp, #4]
    4902:	681b      	ldr	r3, [r3, #0]
    4904:	429a      	cmp	r2, r3
    4906:	f04f 0000 	mov.w	r0, #0
    490a:	d001      	beq.n	4910 <usb_update_sn_string_descriptor+0x18>
    490c:	f006 fb86 	bl	b01c <_StackCheckHandler>
    4910:	b003      	add	sp, #12
    4912:	f85d fb04 	ldr.w	pc, [sp], #4
    4916:	bf00      	nop
    4918:	200036b0 	.word	0x200036b0

0000491c <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
    491c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4920:	4b89      	ldr	r3, [pc, #548]	; (4b48 <usb_fix_descriptor+0x22c>)
	size_t length = (__usb_data_end - __usb_data_start);
    4922:	4a8a      	ldr	r2, [pc, #552]	; (4b4c <usb_fix_descriptor+0x230>)
{
    4924:	681b      	ldr	r3, [r3, #0]
    4926:	4e8a      	ldr	r6, [pc, #552]	; (4b50 <usb_fix_descriptor+0x234>)
    4928:	b089      	sub	sp, #36	; 0x24
	struct usb_cfg_descriptor *cfg_descr = NULL;
	struct usb_if_descriptor *if_descr = NULL;
	struct usb_cfg_data *cfg_data = NULL;
	struct usb_ep_descriptor *ep_descr = NULL;
	u8_t numof_ifaces = 0U;
	u8_t str_descr_idx = 0U;
    492a:	2500      	movs	r5, #0
{
    492c:	9307      	str	r3, [sp, #28]
	size_t length = (__usb_data_end - __usb_data_start);
    492e:	4b89      	ldr	r3, [pc, #548]	; (4b54 <usb_fix_descriptor+0x238>)
    4930:	1a9b      	subs	r3, r3, r2
    4932:	4a89      	ldr	r2, [pc, #548]	; (4b58 <usb_fix_descriptor+0x23c>)
    4934:	109b      	asrs	r3, r3, #2
    4936:	4353      	muls	r3, r2
    4938:	9300      	str	r3, [sp, #0]
		LOG_ERR("the new SN descriptor doesn't has the same "
    493a:	4b88      	ldr	r3, [pc, #544]	; (4b5c <usb_fix_descriptor+0x240>)
    493c:	1af6      	subs	r6, r6, r3
{
    493e:	4604      	mov	r4, r0
		LOG_ERR("the new SN descriptor doesn't has the same "
    4940:	f3c6 06c9 	ubfx	r6, r6, #3, #10
	u32_t requested_ep = BIT(16) | BIT(0);
    4944:	f04f 1a01 	mov.w	sl, #65537	; 0x10001
	u8_t numof_ifaces = 0U;
    4948:	46a9      	mov	r9, r5
	struct usb_cfg_data *cfg_data = NULL;
    494a:	46a8      	mov	r8, r5
	struct usb_cfg_descriptor *cfg_descr = NULL;
    494c:	462f      	mov	r7, r5

	while (head->bLength != 0U) {
    494e:	7823      	ldrb	r3, [r4, #0]
    4950:	b973      	cbnz	r3, 4970 <usb_fix_descriptor+0x54>

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((u8_t *)head + head->bLength);
	}

	if ((head + 1) != __usb_descriptor_end) {
    4952:	4a83      	ldr	r2, [pc, #524]	; (4b60 <usb_fix_descriptor+0x244>)
    4954:	1ca0      	adds	r0, r4, #2
    4956:	4290      	cmp	r0, r2
    4958:	f000 80f1 	beq.w	4b3e <usb_fix_descriptor+0x222>
		LOG_DBG("try to fix next descriptor at %p", head + 1);
		return usb_fix_descriptor(head + 1);
    495c:	f7ff ffde 	bl	491c <usb_fix_descriptor>
	}

	return 0;
}
    4960:	4b79      	ldr	r3, [pc, #484]	; (4b48 <usb_fix_descriptor+0x22c>)
    4962:	9a07      	ldr	r2, [sp, #28]
    4964:	681b      	ldr	r3, [r3, #0]
    4966:	429a      	cmp	r2, r3
    4968:	f000 80eb 	beq.w	4b42 <usb_fix_descriptor+0x226>
    496c:	f006 fb56 	bl	b01c <_StackCheckHandler>
		switch (head->bDescriptorType) {
    4970:	7863      	ldrb	r3, [r4, #1]
    4972:	2b05      	cmp	r3, #5
    4974:	d805      	bhi.n	4982 <usb_fix_descriptor+0x66>
    4976:	e8df f003 	tbb	[pc, r3]
    497a:	049a      	.short	0x049a
    497c:	98079a03 	.word	0x98079a03
    4980:	4627      	mov	r7, r4
		head = (struct usb_desc_header *)((u8_t *)head + head->bLength);
    4982:	7823      	ldrb	r3, [r4, #0]
    4984:	441c      	add	r4, r3
    4986:	e7e2      	b.n	494e <usb_fix_descriptor+0x32>
			if (if_descr->bAlternateSetting) {
    4988:	78e3      	ldrb	r3, [r4, #3]
    498a:	2b00      	cmp	r3, #0
    498c:	d1f9      	bne.n	4982 <usb_fix_descriptor+0x66>
			if (if_descr->bInterfaceNumber == 0U) {
    498e:	78a3      	ldrb	r3, [r4, #2]
    4990:	b9e3      	cbnz	r3, 49cc <usb_fix_descriptor+0xb0>
    4992:	4a6e      	ldr	r2, [pc, #440]	; (4b4c <usb_fix_descriptor+0x230>)
    4994:	4610      	mov	r0, r2
	for (size_t i = 0; i < length; i++) {
    4996:	9900      	ldr	r1, [sp, #0]
    4998:	4299      	cmp	r1, r3
    499a:	d10b      	bne.n	49b4 <usb_fix_descriptor+0x98>
					LOG_ERR("There is no usb_cfg_data "
    499c:	2301      	movs	r3, #1
    499e:	f04f 0200 	mov.w	r2, #0
    49a2:	f363 0207 	bfi	r2, r3, #0, #8
    49a6:	f366 128f 	bfi	r2, r6, #6, #10
    49aa:	4621      	mov	r1, r4
    49ac:	486d      	ldr	r0, [pc, #436]	; (4b64 <usb_fix_descriptor+0x248>)
    49ae:	f7fe fa49 	bl	2e44 <log_1>
    49b2:	e02d      	b.n	4a10 <usb_fix_descriptor+0xf4>
		if (__usb_data_start[i].interface_descriptor == iface) {
    49b4:	322c      	adds	r2, #44	; 0x2c
    49b6:	f852 1c28 	ldr.w	r1, [r2, #-40]
    49ba:	428c      	cmp	r4, r1
    49bc:	d10b      	bne.n	49d6 <usb_fix_descriptor+0xba>
			return &__usb_data_start[i];
    49be:	f04f 082c 	mov.w	r8, #44	; 0x2c
    49c2:	fb08 0803 	mla	r8, r8, r3, r0
				if (cfg_data->interface_config) {
    49c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
    49ca:	b933      	cbnz	r3, 49da <usb_fix_descriptor+0xbe>
			numof_ifaces++;
    49cc:	f109 0901 	add.w	r9, r9, #1
    49d0:	fa5f f989 	uxtb.w	r9, r9
			break;
    49d4:	e7d5      	b.n	4982 <usb_fix_descriptor+0x66>
	for (size_t i = 0; i < length; i++) {
    49d6:	3301      	adds	r3, #1
    49d8:	e7dd      	b.n	4996 <usb_fix_descriptor+0x7a>
					cfg_data->interface_config(head,
    49da:	4649      	mov	r1, r9
    49dc:	4620      	mov	r0, r4
    49de:	4798      	blx	r3
    49e0:	e7f4      	b.n	49cc <usb_fix_descriptor+0xb0>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    49e2:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
    49e6:	78a0      	ldrb	r0, [r4, #2]
    49e8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    49ec:	790b      	ldrb	r3, [r1, #4]
    49ee:	4298      	cmp	r0, r3
    49f0:	d011      	beq.n	4a16 <usb_fix_descriptor+0xfa>
	for (int i = 0; i < cfg_data->num_endpoints; i++) {
    49f2:	3201      	adds	r2, #1
    49f4:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
    49f8:	429a      	cmp	r2, r3
    49fa:	dbf2      	blt.n	49e2 <usb_fix_descriptor+0xc6>
				LOG_ERR("Failed to validate endpoints");
    49fc:	f04f 0100 	mov.w	r1, #0
    4a00:	2301      	movs	r3, #1
    4a02:	f363 0107 	bfi	r1, r3, #0, #8
    4a06:	4858      	ldr	r0, [pc, #352]	; (4b68 <usb_fix_descriptor+0x24c>)
    4a08:	f366 118f 	bfi	r1, r6, #6, #10
					LOG_ERR("Incomplete device descriptor");
    4a0c:	f7fe f9fc 	bl	2e08 <log_0>
					return -1;
    4a10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4a14:	e7a4      	b.n	4960 <usb_fix_descriptor+0x44>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    4a16:	2301      	movs	r3, #1
			ep_cfg.ep_type = ep_descr->bmAttributes;
    4a18:	f894 c003 	ldrb.w	ip, [r4, #3]
    4a1c:	f88d c018 	strb.w	ip, [sp, #24]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    4a20:	f894 e005 	ldrb.w	lr, [r4, #5]
    4a24:	f894 c004 	ldrb.w	ip, [r4, #4]
    4a28:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
    4a2c:	f8ad c016 	strh.w	ip, [sp, #22]
			ep_cfg.ep_addr = ep_descr->bEndpointAddress;
    4a30:	f894 c002 	ldrb.w	ip, [r4, #2]
    4a34:	f88d c014 	strb.w	ip, [sp, #20]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    4a38:	f01c 0f80 	tst.w	ip, #128	; 0x80
    4a3c:	b2d8      	uxtb	r0, r3
    4a3e:	d029      	beq.n	4a94 <usb_fix_descriptor+0x178>
				if ((*requested_ep & (1 << (idx + 16)))) {
    4a40:	f103 0c10 	add.w	ip, r3, #16
    4a44:	f04f 0e01 	mov.w	lr, #1
    4a48:	fa0e fc0c 	lsl.w	ip, lr, ip
    4a4c:	ea1c 0f0a 	tst.w	ip, sl
    4a50:	d127      	bne.n	4aa2 <usb_fix_descriptor+0x186>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
    4a52:	f060 007f 	orn	r0, r0, #127	; 0x7f
				ep_cfg.ep_addr = idx;
    4a56:	f88d 0014 	strb.w	r0, [sp, #20]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    4a5a:	a805      	add	r0, sp, #20
    4a5c:	e9cd 1302 	strd	r1, r3, [sp, #8]
    4a60:	9201      	str	r2, [sp, #4]
    4a62:	f001 ff21 	bl	68a8 <usb_dc_ep_check_cap>
    4a66:	e9dd 2101 	ldrd	r2, r1, [sp, #4]
    4a6a:	9b03      	ldr	r3, [sp, #12]
    4a6c:	b9c8      	cbnz	r0, 4aa2 <usb_fix_descriptor+0x186>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    4a6e:	f89d 2014 	ldrb.w	r2, [sp, #20]
    4a72:	70a2      	strb	r2, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    4a74:	f012 0f80 	tst.w	r2, #128	; 0x80
				ep_data[i].ep_addr = ep_cfg.ep_addr;
    4a78:	710a      	strb	r2, [r1, #4]
					*requested_ep |= (1 << (idx + 16));
    4a7a:	bf18      	it	ne
    4a7c:	3310      	addne	r3, #16
    4a7e:	f04f 0201 	mov.w	r2, #1
    4a82:	bf15      	itete	ne
    4a84:	409a      	lslne	r2, r3
					*requested_ep |= (1 << idx);
    4a86:	fa02 f303 	lsleq.w	r3, r2, r3
					*requested_ep |= (1 << (idx + 16));
    4a8a:	ea4a 0a02 	orrne.w	sl, sl, r2
					*requested_ep |= (1 << idx);
    4a8e:	ea4a 0a03 	orreq.w	sl, sl, r3
				return 0;
    4a92:	e776      	b.n	4982 <usb_fix_descriptor+0x66>
				if ((*requested_ep & (1 << (idx)))) {
    4a94:	f04f 0c01 	mov.w	ip, #1
    4a98:	fa0c fc03 	lsl.w	ip, ip, r3
    4a9c:	ea1c 0f0a 	tst.w	ip, sl
    4aa0:	d0d9      	beq.n	4a56 <usb_fix_descriptor+0x13a>
    4aa2:	3301      	adds	r3, #1
		for (u8_t idx = 1; idx < 16; idx++) {
    4aa4:	2b10      	cmp	r3, #16
    4aa6:	d1b7      	bne.n	4a18 <usb_fix_descriptor+0xfc>
    4aa8:	e7a3      	b.n	49f2 <usb_fix_descriptor+0xd6>
	for (int i = 0; i < cfg_data->num_endpoints; i++) {
    4aaa:	2200      	movs	r2, #0
    4aac:	e7a2      	b.n	49f4 <usb_fix_descriptor+0xd8>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    4aae:	2d03      	cmp	r5, #3
    4ab0:	d12a      	bne.n	4b08 <usb_fix_descriptor+0x1ec>
	u8_t *runtime_sn =  usb_update_sn_string_descriptor();
    4ab2:	f7ff ff21 	bl	48f8 <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
    4ab6:	9002      	str	r0, [sp, #8]
    4ab8:	b1a8      	cbz	r0, 4ae6 <usb_fix_descriptor+0x1ca>
	runtime_sn_len = strlen(runtime_sn);
    4aba:	f003 f8bd 	bl	7c38 <strlen>
    4abe:	9001      	str	r0, [sp, #4]
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    4ac0:	482a      	ldr	r0, [pc, #168]	; (4b6c <usb_fix_descriptor+0x250>)
    4ac2:	f003 f8b9 	bl	7c38 <strlen>
	if (runtime_sn_len != default_sn_len) {
    4ac6:	9a01      	ldr	r2, [sp, #4]
    4ac8:	9902      	ldr	r1, [sp, #8]
    4aca:	4282      	cmp	r2, r0
    4acc:	d018      	beq.n	4b00 <usb_fix_descriptor+0x1e4>
		LOG_ERR("the new SN descriptor doesn't has the same "
    4ace:	f02b 033f 	bic.w	r3, fp, #63	; 0x3f
    4ad2:	f043 0301 	orr.w	r3, r3, #1
    4ad6:	f363 0b07 	bfi	fp, r3, #0, #8
    4ada:	f366 1b8f 	bfi	fp, r6, #6, #10
    4ade:	4659      	mov	r1, fp
    4ae0:	4823      	ldr	r0, [pc, #140]	; (4b70 <usb_fix_descriptor+0x254>)
    4ae2:	f7fe f991 	bl	2e08 <log_0>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    4ae6:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
    4ae8:	f06f 0102 	mvn.w	r1, #2
    4aec:	18e2      	adds	r2, r4, r3
    4aee:	1b09      	subs	r1, r1, r4
    4af0:	eb04 0353 	add.w	r3, r4, r3, lsr #1
		buf[i] = 0U;
    4af4:	2000      	movs	r0, #0
	for (int i = idx_max; i >= 0; i -= 2) {
    4af6:	42d1      	cmn	r1, r2
    4af8:	d512      	bpl.n	4b20 <usb_fix_descriptor+0x204>
			str_descr_idx += 1U;
    4afa:	3501      	adds	r5, #1
    4afc:	b2ed      	uxtb	r5, r5
			break;
    4afe:	e740      	b.n	4982 <usb_fix_descriptor+0x66>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    4b00:	1ca0      	adds	r0, r4, #2
    4b02:	f003 f909 	bl	7d18 <memcpy>
    4b06:	e7ee      	b.n	4ae6 <usb_fix_descriptor+0x1ca>
			if (str_descr_idx) {
    4b08:	2d00      	cmp	r5, #0
    4b0a:	d1ec      	bne.n	4ae6 <usb_fix_descriptor+0x1ca>
				if (!cfg_descr) {
    4b0c:	b97f      	cbnz	r7, 4b2e <usb_fix_descriptor+0x212>
					LOG_ERR("Incomplete device descriptor");
    4b0e:	f04f 0100 	mov.w	r1, #0
    4b12:	2301      	movs	r3, #1
    4b14:	f363 0107 	bfi	r1, r3, #0, #8
    4b18:	f366 118f 	bfi	r1, r6, #6, #10
    4b1c:	4815      	ldr	r0, [pc, #84]	; (4b74 <usb_fix_descriptor+0x258>)
    4b1e:	e775      	b.n	4a0c <usb_fix_descriptor+0xf0>
		buf[i] = 0U;
    4b20:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
    4b24:	f813 c901 	ldrb.w	ip, [r3], #-1
    4b28:	f802 cd02 	strb.w	ip, [r2, #-2]!
    4b2c:	e7e3      	b.n	4af6 <usb_fix_descriptor+0x1da>
				sys_put_le16((u8_t *)head - (u8_t *)cfg_descr,
    4b2e:	1be3      	subs	r3, r4, r7
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    4b30:	70bb      	strb	r3, [r7, #2]
	dst[1] = val >> 8;
    4b32:	f3c3 2307 	ubfx	r3, r3, #8, #8
    4b36:	70fb      	strb	r3, [r7, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
    4b38:	f887 9004 	strb.w	r9, [r7, #4]
    4b3c:	e7dd      	b.n	4afa <usb_fix_descriptor+0x1de>
	return 0;
    4b3e:	4618      	mov	r0, r3
    4b40:	e70e      	b.n	4960 <usb_fix_descriptor+0x44>
}
    4b42:	b009      	add	sp, #36	; 0x24
    4b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4b48:	200036b0 	.word	0x200036b0
    4b4c:	200078a0 	.word	0x200078a0
    4b50:	0000b664 	.word	0x0000b664
    4b54:	200078cc 	.word	0x200078cc
    4b58:	ba2e8ba3 	.word	0xba2e8ba3
    4b5c:	0000b634 	.word	0x0000b634
    4b60:	200078a0 	.word	0x200078a0
    4b64:	0000ba54 	.word	0x0000ba54
    4b68:	0000b9c3 	.word	0x0000b9c3
    4b6c:	0000b9e0 	.word	0x0000b9e0
    4b70:	0000b9ed 	.word	0x0000b9ed
    4b74:	0000ba37 	.word	0x0000ba37

00004b78 <usb_get_device_descriptor>:


u8_t *usb_get_device_descriptor(void)
{
    4b78:	b513      	push	{r0, r1, r4, lr}
    4b7a:	4c10      	ldr	r4, [pc, #64]	; (4bbc <usb_get_device_descriptor+0x44>)
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);

	if (usb_fix_descriptor(__usb_descriptor_start)) {
    4b7c:	4810      	ldr	r0, [pc, #64]	; (4bc0 <usb_get_device_descriptor+0x48>)
{
    4b7e:	6823      	ldr	r3, [r4, #0]
    4b80:	9301      	str	r3, [sp, #4]
	if (usb_fix_descriptor(__usb_descriptor_start)) {
    4b82:	f7ff fecb 	bl	491c <usb_fix_descriptor>
    4b86:	b1a0      	cbz	r0, 4bb2 <usb_get_device_descriptor+0x3a>
		LOG_ERR("Failed to fixup USB descriptor");
    4b88:	2301      	movs	r3, #1
    4b8a:	f04f 0100 	mov.w	r1, #0
    4b8e:	f363 0107 	bfi	r1, r3, #0, #8
    4b92:	4a0c      	ldr	r2, [pc, #48]	; (4bc4 <usb_get_device_descriptor+0x4c>)
    4b94:	4b0c      	ldr	r3, [pc, #48]	; (4bc8 <usb_get_device_descriptor+0x50>)
    4b96:	480d      	ldr	r0, [pc, #52]	; (4bcc <usb_get_device_descriptor+0x54>)
    4b98:	1a9b      	subs	r3, r3, r2
    4b9a:	08db      	lsrs	r3, r3, #3
    4b9c:	f363 118f 	bfi	r1, r3, #6, #10
    4ba0:	f7fe f932 	bl	2e08 <log_0>
		return NULL;
    4ba4:	2000      	movs	r0, #0
	}

	return (u8_t *) __usb_descriptor_start;
}
    4ba6:	9a01      	ldr	r2, [sp, #4]
    4ba8:	6823      	ldr	r3, [r4, #0]
    4baa:	429a      	cmp	r2, r3
    4bac:	d003      	beq.n	4bb6 <usb_get_device_descriptor+0x3e>
    4bae:	f006 fa35 	bl	b01c <_StackCheckHandler>
	return (u8_t *) __usb_descriptor_start;
    4bb2:	4803      	ldr	r0, [pc, #12]	; (4bc0 <usb_get_device_descriptor+0x48>)
    4bb4:	e7f7      	b.n	4ba6 <usb_get_device_descriptor+0x2e>
}
    4bb6:	b002      	add	sp, #8
    4bb8:	bd10      	pop	{r4, pc}
    4bba:	bf00      	nop
    4bbc:	200036b0 	.word	0x200036b0
    4bc0:	2000781c 	.word	0x2000781c
    4bc4:	0000b634 	.word	0x0000b634
    4bc8:	0000b664 	.word	0x0000b664
    4bcc:	0000ba74 	.word	0x0000ba74

00004bd0 <mass_interface_config>:
	}
}

static void mass_interface_config(struct usb_desc_header *head,
				  u8_t bInterfaceNumber)
{
    4bd0:	b507      	push	{r0, r1, r2, lr}
    4bd2:	4b07      	ldr	r3, [pc, #28]	; (4bf0 <mass_interface_config+0x20>)
    4bd4:	681a      	ldr	r2, [r3, #0]
    4bd6:	9201      	str	r2, [sp, #4]
	ARG_UNUSED(head);

	mass_cfg.if0.bInterfaceNumber = bInterfaceNumber;
    4bd8:	4a06      	ldr	r2, [pc, #24]	; (4bf4 <mass_interface_config+0x24>)
    4bda:	7091      	strb	r1, [r2, #2]
}
    4bdc:	9a01      	ldr	r2, [sp, #4]
    4bde:	681b      	ldr	r3, [r3, #0]
    4be0:	429a      	cmp	r2, r3
    4be2:	d001      	beq.n	4be8 <mass_interface_config+0x18>
    4be4:	f006 fa1a 	bl	b01c <_StackCheckHandler>
    4be8:	b003      	add	sp, #12
    4bea:	f85d fb04 	ldr.w	pc, [sp], #4
    4bee:	bf00      	nop
    4bf0:	200036b0 	.word	0x200036b0
    4bf4:	20007837 	.word	0x20007837

00004bf8 <sendCSW>:
{
    4bf8:	b513      	push	{r0, r1, r4, lr}
    4bfa:	4c15      	ldr	r4, [pc, #84]	; (4c50 <sendCSW+0x58>)
	csw.Signature = CSW_Signature;
    4bfc:	4915      	ldr	r1, [pc, #84]	; (4c54 <sendCSW+0x5c>)
{
    4bfe:	6823      	ldr	r3, [r4, #0]
    4c00:	9301      	str	r3, [sp, #4]
	if (usb_write(mass_ep_data[MSD_IN_EP_IDX].ep_addr, (u8_t *)&csw,
    4c02:	4815      	ldr	r0, [pc, #84]	; (4c58 <sendCSW+0x60>)
	csw.Signature = CSW_Signature;
    4c04:	2355      	movs	r3, #85	; 0x55
    4c06:	2242      	movs	r2, #66	; 0x42
    4c08:	700b      	strb	r3, [r1, #0]
    4c0a:	2353      	movs	r3, #83	; 0x53
    4c0c:	704b      	strb	r3, [r1, #1]
    4c0e:	708a      	strb	r2, [r1, #2]
    4c10:	70cb      	strb	r3, [r1, #3]
	if (usb_write(mass_ep_data[MSD_IN_EP_IDX].ep_addr, (u8_t *)&csw,
    4c12:	220d      	movs	r2, #13
    4c14:	2300      	movs	r3, #0
    4c16:	7b00      	ldrb	r0, [r0, #12]
    4c18:	f7ff fe26 	bl	4868 <usb_write>
    4c1c:	b168      	cbz	r0, 4c3a <sendCSW+0x42>
		LOG_ERR("usb write failure");
    4c1e:	2301      	movs	r3, #1
    4c20:	f04f 0100 	mov.w	r1, #0
    4c24:	f363 0107 	bfi	r1, r3, #0, #8
    4c28:	4a0c      	ldr	r2, [pc, #48]	; (4c5c <sendCSW+0x64>)
    4c2a:	4b0d      	ldr	r3, [pc, #52]	; (4c60 <sendCSW+0x68>)
    4c2c:	480d      	ldr	r0, [pc, #52]	; (4c64 <sendCSW+0x6c>)
    4c2e:	1a9b      	subs	r3, r3, r2
    4c30:	08db      	lsrs	r3, r3, #3
    4c32:	f363 118f 	bfi	r1, r3, #6, #10
    4c36:	f7fe f8e7 	bl	2e08 <log_0>
	stage = MSC_WAIT_CSW;
    4c3a:	4b0b      	ldr	r3, [pc, #44]	; (4c68 <sendCSW+0x70>)
    4c3c:	2204      	movs	r2, #4
    4c3e:	701a      	strb	r2, [r3, #0]
}
    4c40:	9a01      	ldr	r2, [sp, #4]
    4c42:	6823      	ldr	r3, [r4, #0]
    4c44:	429a      	cmp	r2, r3
    4c46:	d001      	beq.n	4c4c <sendCSW+0x54>
    4c48:	f006 f9e8 	bl	b01c <_StackCheckHandler>
    4c4c:	b002      	add	sp, #8
    4c4e:	bd10      	pop	{r4, pc}
    4c50:	200036b0 	.word	0x200036b0
    4c54:	20001976 	.word	0x20001976
    4c58:	200036d0 	.word	0x200036d0
    4c5c:	0000b634 	.word	0x0000b634
    4c60:	0000b674 	.word	0x0000b674
    4c64:	0000bcb2 	.word	0x0000bcb2
    4c68:	20001bc5 	.word	0x20001bc5

00004c6c <infoTransfer>:
{
    4c6c:	b513      	push	{r0, r1, r4, lr}
    4c6e:	4c29      	ldr	r4, [pc, #164]	; (4d14 <infoTransfer+0xa8>)
    4c70:	4a29      	ldr	r2, [pc, #164]	; (4d18 <infoTransfer+0xac>)
    4c72:	6823      	ldr	r3, [r4, #0]
    4c74:	9301      	str	r3, [sp, #4]
	if ((n * BLOCK_SIZE) >= memory_size) {
    4c76:	4829      	ldr	r0, [pc, #164]	; (4d1c <infoTransfer+0xb0>)
    4c78:	f8d2 3011 	ldr.w	r3, [r2, #17]
    4c7c:	6800      	ldr	r0, [r0, #0]
    4c7e:	ba1b      	rev	r3, r3
    4c80:	0259      	lsls	r1, r3, #9
    4c82:	4281      	cmp	r1, r0
    4c84:	d319      	bcc.n	4cba <infoTransfer+0x4e>
		LOG_ERR("LBA out of range");
    4c86:	2301      	movs	r3, #1
    4c88:	f04f 0100 	mov.w	r1, #0
    4c8c:	f363 0107 	bfi	r1, r3, #0, #8
    4c90:	4a23      	ldr	r2, [pc, #140]	; (4d20 <infoTransfer+0xb4>)
    4c92:	4b24      	ldr	r3, [pc, #144]	; (4d24 <infoTransfer+0xb8>)
    4c94:	4824      	ldr	r0, [pc, #144]	; (4d28 <infoTransfer+0xbc>)
    4c96:	1a9b      	subs	r3, r3, r2
    4c98:	08db      	lsrs	r3, r3, #3
    4c9a:	f363 118f 	bfi	r1, r3, #6, #10
    4c9e:	f7fe f8b3 	bl	2e08 <log_0>
		csw.Status = CSW_FAILED;
    4ca2:	4b22      	ldr	r3, [pc, #136]	; (4d2c <infoTransfer+0xc0>)
    4ca4:	2201      	movs	r2, #1
    4ca6:	731a      	strb	r2, [r3, #12]
		sendCSW();
    4ca8:	f7ff ffa6 	bl	4bf8 <sendCSW>
		return false;
    4cac:	2000      	movs	r0, #0
}
    4cae:	9a01      	ldr	r2, [sp, #4]
    4cb0:	6823      	ldr	r3, [r4, #0]
    4cb2:	429a      	cmp	r2, r3
    4cb4:	d02b      	beq.n	4d0e <infoTransfer+0xa2>
    4cb6:	f006 f9b1 	bl	b01c <_StackCheckHandler>
	addr = n * BLOCK_SIZE;
    4cba:	481d      	ldr	r0, [pc, #116]	; (4d30 <infoTransfer+0xc4>)
    4cbc:	6001      	str	r1, [r0, #0]
	switch (cbw.CB[0]) {
    4cbe:	7bd1      	ldrb	r1, [r2, #15]
    4cc0:	292f      	cmp	r1, #47	; 0x2f
    4cc2:	d004      	beq.n	4cce <infoTransfer+0x62>
    4cc4:	d807      	bhi.n	4cd6 <infoTransfer+0x6a>
    4cc6:	2928      	cmp	r1, #40	; 0x28
    4cc8:	d001      	beq.n	4cce <infoTransfer+0x62>
    4cca:	292a      	cmp	r1, #42	; 0x2a
    4ccc:	d107      	bne.n	4cde <infoTransfer+0x72>
		n = (cbw.CB[7] <<  8) | (cbw.CB[8] <<  0);
    4cce:	8ad3      	ldrh	r3, [r2, #22]
    4cd0:	ba5b      	rev16	r3, r3
    4cd2:	b29b      	uxth	r3, r3
		break;
    4cd4:	e003      	b.n	4cde <infoTransfer+0x72>
	switch (cbw.CB[0]) {
    4cd6:	29a8      	cmp	r1, #168	; 0xa8
    4cd8:	d013      	beq.n	4d02 <infoTransfer+0x96>
    4cda:	29aa      	cmp	r1, #170	; 0xaa
    4cdc:	d011      	beq.n	4d02 <infoTransfer+0x96>
	length = n * BLOCK_SIZE;
    4cde:	4915      	ldr	r1, [pc, #84]	; (4d34 <infoTransfer+0xc8>)
    4ce0:	025b      	lsls	r3, r3, #9
    4ce2:	600b      	str	r3, [r1, #0]
	if (!cbw.DataLength) {              /* host requests no data*/
    4ce4:	6891      	ldr	r1, [r2, #8]
    4ce6:	2900      	cmp	r1, #0
    4ce8:	d0db      	beq.n	4ca2 <infoTransfer+0x36>
	if (cbw.DataLength != length) {
    4cea:	428b      	cmp	r3, r1
    4cec:	d00d      	beq.n	4d0a <infoTransfer+0x9e>
		if ((cbw.Flags & 0x80) != 0U) {
    4cee:	f992 300c 	ldrsb.w	r3, [r2, #12]
    4cf2:	2b00      	cmp	r3, #0
    4cf4:	4b10      	ldr	r3, [pc, #64]	; (4d38 <infoTransfer+0xcc>)
			usb_ep_set_stall(mass_ep_data[MSD_IN_EP_IDX].ep_addr);
    4cf6:	bfb4      	ite	lt
    4cf8:	7b18      	ldrblt	r0, [r3, #12]
			usb_ep_set_stall(mass_ep_data[MSD_OUT_EP_IDX].ep_addr);
    4cfa:	7918      	ldrbge	r0, [r3, #4]
    4cfc:	f7ff fdc6 	bl	488c <usb_ep_set_stall>
    4d00:	e7cf      	b.n	4ca2 <infoTransfer+0x36>
		n = (cbw.CB[6] << 24) | (cbw.CB[7] << 16) |
    4d02:	f8d2 3015 	ldr.w	r3, [r2, #21]
    4d06:	ba1b      	rev	r3, r3
		break;
    4d08:	e7e9      	b.n	4cde <infoTransfer+0x72>
	return true;
    4d0a:	2001      	movs	r0, #1
    4d0c:	e7cf      	b.n	4cae <infoTransfer+0x42>
}
    4d0e:	b002      	add	sp, #8
    4d10:	bd10      	pop	{r4, pc}
    4d12:	bf00      	nop
    4d14:	200036b0 	.word	0x200036b0
    4d18:	20001957 	.word	0x20001957
    4d1c:	20000510 	.word	0x20000510
    4d20:	0000b634 	.word	0x0000b634
    4d24:	0000b674 	.word	0x0000b674
    4d28:	0000ba93 	.word	0x0000ba93
    4d2c:	20001976 	.word	0x20001976
    4d30:	20000484 	.word	0x20000484
    4d34:	200004a0 	.word	0x200004a0
    4d38:	200036d0 	.word	0x200036d0

00004d3c <msd_init>:
{
    4d3c:	b513      	push	{r0, r1, r4, lr}
    4d3e:	4c10      	ldr	r4, [pc, #64]	; (4d80 <msd_init+0x44>)
	(void)memset((void *)&cbw, 0, sizeof(struct CBW));
    4d40:	4810      	ldr	r0, [pc, #64]	; (4d84 <msd_init+0x48>)
{
    4d42:	6823      	ldr	r3, [r4, #0]
    4d44:	9301      	str	r3, [sp, #4]
	(void)memset((void *)&cbw, 0, sizeof(struct CBW));
    4d46:	221f      	movs	r2, #31
    4d48:	2100      	movs	r1, #0
    4d4a:	f003 f81b 	bl	7d84 <memset>
	(void)memset((void *)&csw, 0, sizeof(struct CSW));
    4d4e:	220d      	movs	r2, #13
    4d50:	2100      	movs	r1, #0
    4d52:	480d      	ldr	r0, [pc, #52]	; (4d88 <msd_init+0x4c>)
    4d54:	f003 f816 	bl	7d84 <memset>
	(void)memset(page, 0, sizeof(page));
    4d58:	f44f 7200 	mov.w	r2, #512	; 0x200
    4d5c:	2100      	movs	r1, #0
    4d5e:	480b      	ldr	r0, [pc, #44]	; (4d8c <msd_init+0x50>)
    4d60:	f003 f810 	bl	7d84 <memset>
	addr = 0U;
    4d64:	4a0a      	ldr	r2, [pc, #40]	; (4d90 <msd_init+0x54>)
    4d66:	2300      	movs	r3, #0
    4d68:	6013      	str	r3, [r2, #0]
	length = 0U;
    4d6a:	4a0a      	ldr	r2, [pc, #40]	; (4d94 <msd_init+0x58>)
    4d6c:	6013      	str	r3, [r2, #0]
}
    4d6e:	9a01      	ldr	r2, [sp, #4]
    4d70:	6823      	ldr	r3, [r4, #0]
    4d72:	429a      	cmp	r2, r3
    4d74:	d001      	beq.n	4d7a <msd_init+0x3e>
    4d76:	f006 f951 	bl	b01c <_StackCheckHandler>
    4d7a:	b002      	add	sp, #8
    4d7c:	bd10      	pop	{r4, pc}
    4d7e:	bf00      	nop
    4d80:	200036b0 	.word	0x200036b0
    4d84:	20001957 	.word	0x20001957
    4d88:	20001976 	.word	0x20001976
    4d8c:	200019c5 	.word	0x200019c5
    4d90:	20000484 	.word	0x20000484
    4d94:	200004a0 	.word	0x200004a0

00004d98 <mass_storage_status_cb>:
{
    4d98:	b507      	push	{r0, r1, r2, lr}
    4d9a:	4b0d      	ldr	r3, [pc, #52]	; (4dd0 <mass_storage_status_cb+0x38>)
	switch (status) {
    4d9c:	2901      	cmp	r1, #1
{
    4d9e:	681a      	ldr	r2, [r3, #0]
    4da0:	9201      	str	r2, [sp, #4]
	switch (status) {
    4da2:	d10d      	bne.n	4dc0 <mass_storage_status_cb+0x28>
	stage = MSC_READ_CBW;
    4da4:	4a0b      	ldr	r2, [pc, #44]	; (4dd4 <mass_storage_status_cb+0x3c>)
    4da6:	2100      	movs	r1, #0
    4da8:	7011      	strb	r1, [r2, #0]
		msd_init();
    4daa:	9a01      	ldr	r2, [sp, #4]
    4dac:	681b      	ldr	r3, [r3, #0]
    4dae:	429a      	cmp	r2, r3
    4db0:	d001      	beq.n	4db6 <mass_storage_status_cb+0x1e>
}
    4db2:	f006 f933 	bl	b01c <_StackCheckHandler>
    4db6:	b003      	add	sp, #12
    4db8:	f85d eb04 	ldr.w	lr, [sp], #4
		msd_init();
    4dbc:	f7ff bfbe 	b.w	4d3c <msd_init>
}
    4dc0:	9a01      	ldr	r2, [sp, #4]
    4dc2:	681b      	ldr	r3, [r3, #0]
    4dc4:	429a      	cmp	r2, r3
    4dc6:	d1f4      	bne.n	4db2 <mass_storage_status_cb+0x1a>
    4dc8:	b003      	add	sp, #12
    4dca:	f85d fb04 	ldr.w	pc, [sp], #4
    4dce:	bf00      	nop
    4dd0:	200036b0 	.word	0x200036b0
    4dd4:	20001bc5 	.word	0x20001bc5

00004dd8 <mass_storage_class_handle_req>:
{
    4dd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4dda:	4b14      	ldr	r3, [pc, #80]	; (4e2c <mass_storage_class_handle_req+0x54>)
	if (sys_le16_to_cpu(pSetup->wIndex) != mass_cfg.if0.bInterfaceNumber ||
    4ddc:	8885      	ldrh	r5, [r0, #4]
{
    4dde:	681c      	ldr	r4, [r3, #0]
    4de0:	9401      	str	r4, [sp, #4]
	if (sys_le16_to_cpu(pSetup->wIndex) != mass_cfg.if0.bInterfaceNumber ||
    4de2:	4c13      	ldr	r4, [pc, #76]	; (4e30 <mass_storage_class_handle_req+0x58>)
    4de4:	78a4      	ldrb	r4, [r4, #2]
    4de6:	42a5      	cmp	r5, r4
    4de8:	461c      	mov	r4, r3
    4dea:	d119      	bne.n	4e20 <mass_storage_class_handle_req+0x48>
    4dec:	8843      	ldrh	r3, [r0, #2]
    4dee:	b9bb      	cbnz	r3, 4e20 <mass_storage_class_handle_req+0x48>
	switch (pSetup->bRequest) {
    4df0:	7845      	ldrb	r5, [r0, #1]
    4df2:	2dfe      	cmp	r5, #254	; 0xfe
    4df4:	d00b      	beq.n	4e0e <mass_storage_class_handle_req+0x36>
    4df6:	2dff      	cmp	r5, #255	; 0xff
    4df8:	d112      	bne.n	4e20 <mass_storage_class_handle_req+0x48>
		if (sys_le16_to_cpu(pSetup->wLength)) {
    4dfa:	88c0      	ldrh	r0, [r0, #6]
    4dfc:	b980      	cbnz	r0, 4e20 <mass_storage_class_handle_req+0x48>
	stage = MSC_READ_CBW;
    4dfe:	4b0d      	ldr	r3, [pc, #52]	; (4e34 <mass_storage_class_handle_req+0x5c>)
    4e00:	7018      	strb	r0, [r3, #0]
}
    4e02:	9a01      	ldr	r2, [sp, #4]
    4e04:	6823      	ldr	r3, [r4, #0]
    4e06:	429a      	cmp	r2, r3
    4e08:	d00d      	beq.n	4e26 <mass_storage_class_handle_req+0x4e>
    4e0a:	f006 f907 	bl	b01c <_StackCheckHandler>
		if (sys_le16_to_cpu(pSetup->wLength) != 1) {
    4e0e:	88c0      	ldrh	r0, [r0, #6]
    4e10:	2801      	cmp	r0, #1
    4e12:	d105      	bne.n	4e20 <mass_storage_class_handle_req+0x48>
		max_lun_count = 0U;
    4e14:	4d08      	ldr	r5, [pc, #32]	; (4e38 <mass_storage_class_handle_req+0x60>)
    4e16:	702b      	strb	r3, [r5, #0]
		*data = (u8_t *)(&max_lun_count);
    4e18:	6015      	str	r5, [r2, #0]
		*len = 1;
    4e1a:	6008      	str	r0, [r1, #0]
	return 0;
    4e1c:	4618      	mov	r0, r3
    4e1e:	e7f0      	b.n	4e02 <mass_storage_class_handle_req+0x2a>
		return -EINVAL;
    4e20:	f06f 0015 	mvn.w	r0, #21
    4e24:	e7ed      	b.n	4e02 <mass_storage_class_handle_req+0x2a>
}
    4e26:	b003      	add	sp, #12
    4e28:	bd30      	pop	{r4, r5, pc}
    4e2a:	bf00      	nop
    4e2c:	200036b0 	.word	0x200036b0
    4e30:	20007837 	.word	0x20007837
    4e34:	20001bc5 	.word	0x20001bc5
    4e38:	200019c3 	.word	0x200019c3

00004e3c <write>:
{
    4e3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4e3e:	4c19      	ldr	r4, [pc, #100]	; (4ea4 <write+0x68>)
    4e40:	6823      	ldr	r3, [r4, #0]
    4e42:	9301      	str	r3, [sp, #4]
	if (size >= cbw.DataLength) {
    4e44:	4b18      	ldr	r3, [pc, #96]	; (4ea8 <write+0x6c>)
    4e46:	689b      	ldr	r3, [r3, #8]
    4e48:	4299      	cmp	r1, r3
{
    4e4a:	460d      	mov	r5, r1
		size = cbw.DataLength;
    4e4c:	bf28      	it	cs
    4e4e:	b29d      	uxthcs	r5, r3
	if (usb_write(mass_ep_data[MSD_IN_EP_IDX].ep_addr, buf, size, NULL)) {
    4e50:	4601      	mov	r1, r0
	stage = MSC_SEND_CSW;
    4e52:	4b16      	ldr	r3, [pc, #88]	; (4eac <write+0x70>)
	if (usb_write(mass_ep_data[MSD_IN_EP_IDX].ep_addr, buf, size, NULL)) {
    4e54:	4816      	ldr	r0, [pc, #88]	; (4eb0 <write+0x74>)
	stage = MSC_SEND_CSW;
    4e56:	2203      	movs	r2, #3
    4e58:	701a      	strb	r2, [r3, #0]
	if (usb_write(mass_ep_data[MSD_IN_EP_IDX].ep_addr, buf, size, NULL)) {
    4e5a:	7b00      	ldrb	r0, [r0, #12]
    4e5c:	2300      	movs	r3, #0
    4e5e:	462a      	mov	r2, r5
    4e60:	f7ff fd02 	bl	4868 <usb_write>
    4e64:	b1a0      	cbz	r0, 4e90 <write+0x54>
		LOG_ERR("USB write failed");
    4e66:	2301      	movs	r3, #1
    4e68:	f04f 0100 	mov.w	r1, #0
    4e6c:	f363 0107 	bfi	r1, r3, #0, #8
    4e70:	4a10      	ldr	r2, [pc, #64]	; (4eb4 <write+0x78>)
    4e72:	4b11      	ldr	r3, [pc, #68]	; (4eb8 <write+0x7c>)
    4e74:	4811      	ldr	r0, [pc, #68]	; (4ebc <write+0x80>)
    4e76:	1a9b      	subs	r3, r3, r2
    4e78:	08db      	lsrs	r3, r3, #3
    4e7a:	f363 118f 	bfi	r1, r3, #6, #10
    4e7e:	f7fd ffc3 	bl	2e08 <log_0>
		return false;
    4e82:	2000      	movs	r0, #0
}
    4e84:	9a01      	ldr	r2, [sp, #4]
    4e86:	6823      	ldr	r3, [r4, #0]
    4e88:	429a      	cmp	r2, r3
    4e8a:	d008      	beq.n	4e9e <write+0x62>
    4e8c:	f006 f8c6 	bl	b01c <_StackCheckHandler>
	csw.DataResidue -= size;
    4e90:	4b0b      	ldr	r3, [pc, #44]	; (4ec0 <write+0x84>)
    4e92:	689a      	ldr	r2, [r3, #8]
	csw.Status = CSW_PASSED;
    4e94:	7318      	strb	r0, [r3, #12]
	csw.DataResidue -= size;
    4e96:	1b55      	subs	r5, r2, r5
    4e98:	609d      	str	r5, [r3, #8]
	return true;
    4e9a:	2001      	movs	r0, #1
    4e9c:	e7f2      	b.n	4e84 <write+0x48>
}
    4e9e:	b003      	add	sp, #12
    4ea0:	bd30      	pop	{r4, r5, pc}
    4ea2:	bf00      	nop
    4ea4:	200036b0 	.word	0x200036b0
    4ea8:	20001957 	.word	0x20001957
    4eac:	20001bc5 	.word	0x20001bc5
    4eb0:	200036d0 	.word	0x200036d0
    4eb4:	0000b634 	.word	0x0000b634
    4eb8:	0000b674 	.word	0x0000b674
    4ebc:	0000bccc 	.word	0x0000bccc
    4ec0:	20001976 	.word	0x20001976

00004ec4 <memoryRead>:
{
    4ec4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4ec6:	4d25      	ldr	r5, [pc, #148]	; (4f5c <memoryRead+0x98>)
	n = (length > MAX_PACKET) ? MAX_PACKET : length;
    4ec8:	4e25      	ldr	r6, [pc, #148]	; (4f60 <memoryRead+0x9c>)
{
    4eca:	682b      	ldr	r3, [r5, #0]
	n = (length > MAX_PACKET) ? MAX_PACKET : length;
    4ecc:	6834      	ldr	r4, [r6, #0]
	if ((addr + n) > memory_size) {
    4ece:	4f25      	ldr	r7, [pc, #148]	; (4f64 <memoryRead+0xa0>)
{
    4ed0:	9301      	str	r3, [sp, #4]
	if ((addr + n) > memory_size) {
    4ed2:	4b25      	ldr	r3, [pc, #148]	; (4f68 <memoryRead+0xa4>)
    4ed4:	6839      	ldr	r1, [r7, #0]
    4ed6:	681b      	ldr	r3, [r3, #0]
	n = (length > MAX_PACKET) ? MAX_PACKET : length;
    4ed8:	2c40      	cmp	r4, #64	; 0x40
    4eda:	bf28      	it	cs
    4edc:	2440      	movcs	r4, #64	; 0x40
	if ((addr + n) > memory_size) {
    4ede:	190a      	adds	r2, r1, r4
    4ee0:	429a      	cmp	r2, r3
		n = memory_size - addr;
    4ee2:	bf82      	ittt	hi
    4ee4:	1a5c      	subhi	r4, r3, r1
		stage = MSC_ERROR;
    4ee6:	4b21      	ldrhi	r3, [pc, #132]	; (4f6c <memoryRead+0xa8>)
    4ee8:	2201      	movhi	r2, #1
	if (!(addr % BLOCK_SIZE)) {
    4eea:	f3c1 0108 	ubfx	r1, r1, #0, #9
		stage = MSC_ERROR;
    4eee:	bf88      	it	hi
    4ef0:	701a      	strbhi	r2, [r3, #0]
	if (!(addr % BLOCK_SIZE)) {
    4ef2:	b971      	cbnz	r1, 4f12 <memoryRead+0x4e>
		thread_op = THREAD_OP_READ_QUEUED;
    4ef4:	4b1e      	ldr	r3, [pc, #120]	; (4f70 <memoryRead+0xac>)
    4ef6:	2201      	movs	r2, #1
    4ef8:	601a      	str	r2, [r3, #0]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    4efa:	9a01      	ldr	r2, [sp, #4]
    4efc:	682b      	ldr	r3, [r5, #0]
    4efe:	429a      	cmp	r2, r3
    4f00:	d001      	beq.n	4f06 <memoryRead+0x42>
}
    4f02:	f006 f88b 	bl	b01c <_StackCheckHandler>
    4f06:	481b      	ldr	r0, [pc, #108]	; (4f74 <memoryRead+0xb0>)
    4f08:	b003      	add	sp, #12
    4f0a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4f0e:	f005 be2d 	b.w	ab6c <z_impl_k_sem_give>
	usb_write(mass_ep_data[MSD_IN_EP_IDX].ep_addr,
    4f12:	4819      	ldr	r0, [pc, #100]	; (4f78 <memoryRead+0xb4>)
    4f14:	4401      	add	r1, r0
    4f16:	4819      	ldr	r0, [pc, #100]	; (4f7c <memoryRead+0xb8>)
    4f18:	4622      	mov	r2, r4
    4f1a:	2300      	movs	r3, #0
    4f1c:	7b00      	ldrb	r0, [r0, #12]
    4f1e:	f7ff fca3 	bl	4868 <usb_write>
	addr += n;
    4f22:	683b      	ldr	r3, [r7, #0]
	length -= n;
    4f24:	6832      	ldr	r2, [r6, #0]
	addr += n;
    4f26:	4423      	add	r3, r4
    4f28:	603b      	str	r3, [r7, #0]
	length -= n;
    4f2a:	1b12      	subs	r2, r2, r4
	csw.DataResidue -= n;
    4f2c:	4b14      	ldr	r3, [pc, #80]	; (4f80 <memoryRead+0xbc>)
	length -= n;
    4f2e:	6032      	str	r2, [r6, #0]
	csw.DataResidue -= n;
    4f30:	6899      	ldr	r1, [r3, #8]
    4f32:	1b0c      	subs	r4, r1, r4
    4f34:	609c      	str	r4, [r3, #8]
	if (!length || (stage != MSC_PROCESS_CBW)) {
    4f36:	490d      	ldr	r1, [pc, #52]	; (4f6c <memoryRead+0xa8>)
    4f38:	b112      	cbz	r2, 4f40 <memoryRead+0x7c>
    4f3a:	780a      	ldrb	r2, [r1, #0]
    4f3c:	2a02      	cmp	r2, #2
    4f3e:	d007      	beq.n	4f50 <memoryRead+0x8c>
			CSW_PASSED : CSW_FAILED;
    4f40:	780a      	ldrb	r2, [r1, #0]
    4f42:	2a02      	cmp	r2, #2
    4f44:	bf12      	itee	ne
    4f46:	2001      	movne	r0, #1
    4f48:	2000      	moveq	r0, #0
		stage = (stage == MSC_PROCESS_CBW) ? MSC_SEND_CSW : stage;
    4f4a:	2203      	moveq	r2, #3
			CSW_PASSED : CSW_FAILED;
    4f4c:	7318      	strb	r0, [r3, #12]
		stage = (stage == MSC_PROCESS_CBW) ? MSC_SEND_CSW : stage;
    4f4e:	700a      	strb	r2, [r1, #0]
}
    4f50:	9a01      	ldr	r2, [sp, #4]
    4f52:	682b      	ldr	r3, [r5, #0]
    4f54:	429a      	cmp	r2, r3
    4f56:	d1d4      	bne.n	4f02 <memoryRead+0x3e>
    4f58:	b003      	add	sp, #12
    4f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f5c:	200036b0 	.word	0x200036b0
    4f60:	200004a0 	.word	0x200004a0
    4f64:	20000484 	.word	0x20000484
    4f68:	20000510 	.word	0x20000510
    4f6c:	20001bc5 	.word	0x20001bc5
    4f70:	20000514 	.word	0x20000514
    4f74:	20000490 	.word	0x20000490
    4f78:	200019c5 	.word	0x200019c5
    4f7c:	200036d0 	.word	0x200036d0
    4f80:	20001976 	.word	0x20001976

00004f84 <mass_storage_bulk_in>:
{
    4f84:	b513      	push	{r0, r1, r4, lr}
    4f86:	4c23      	ldr	r4, [pc, #140]	; (5014 <mass_storage_bulk_in+0x90>)
	switch (stage) {
    4f88:	4a23      	ldr	r2, [pc, #140]	; (5018 <mass_storage_bulk_in+0x94>)
{
    4f8a:	6823      	ldr	r3, [r4, #0]
    4f8c:	9301      	str	r3, [sp, #4]
	switch (stage) {
    4f8e:	7813      	ldrb	r3, [r2, #0]
    4f90:	2b03      	cmp	r3, #3
    4f92:	4621      	mov	r1, r4
    4f94:	d035      	beq.n	5002 <mass_storage_bulk_in+0x7e>
    4f96:	2b04      	cmp	r3, #4
    4f98:	d027      	beq.n	4fea <mass_storage_bulk_in+0x66>
    4f9a:	2b02      	cmp	r3, #2
    4f9c:	d12d      	bne.n	4ffa <mass_storage_bulk_in+0x76>
		switch (cbw.CB[0]) {
    4f9e:	4b1f      	ldr	r3, [pc, #124]	; (501c <mass_storage_bulk_in+0x98>)
    4fa0:	7bdb      	ldrb	r3, [r3, #15]
    4fa2:	2b28      	cmp	r3, #40	; 0x28
    4fa4:	d001      	beq.n	4faa <mass_storage_bulk_in+0x26>
    4fa6:	2ba8      	cmp	r3, #168	; 0xa8
    4fa8:	d10a      	bne.n	4fc0 <mass_storage_bulk_in+0x3c>
			memoryRead();
    4faa:	9a01      	ldr	r2, [sp, #4]
    4fac:	680b      	ldr	r3, [r1, #0]
    4fae:	429a      	cmp	r2, r3
    4fb0:	d001      	beq.n	4fb6 <mass_storage_bulk_in+0x32>
}
    4fb2:	f006 f833 	bl	b01c <_StackCheckHandler>
    4fb6:	b002      	add	sp, #8
    4fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			memoryRead();
    4fbc:	f7ff bf82 	b.w	4ec4 <memoryRead>
			LOG_ERR("< BI-PROC_CBW default <<ERROR!!>>");
    4fc0:	2301      	movs	r3, #1
    4fc2:	f04f 0100 	mov.w	r1, #0
    4fc6:	f363 0107 	bfi	r1, r3, #0, #8
    4fca:	4a15      	ldr	r2, [pc, #84]	; (5020 <mass_storage_bulk_in+0x9c>)
    4fcc:	4b15      	ldr	r3, [pc, #84]	; (5024 <mass_storage_bulk_in+0xa0>)
    4fce:	1a9b      	subs	r3, r3, r2
    4fd0:	08db      	lsrs	r3, r3, #3
    4fd2:	9a01      	ldr	r2, [sp, #4]
    4fd4:	f363 118f 	bfi	r1, r3, #6, #10
    4fd8:	6823      	ldr	r3, [r4, #0]
    4fda:	429a      	cmp	r2, r3
    4fdc:	d1e9      	bne.n	4fb2 <mass_storage_bulk_in+0x2e>
    4fde:	4812      	ldr	r0, [pc, #72]	; (5028 <mass_storage_bulk_in+0xa4>)
}
    4fe0:	b002      	add	sp, #8
    4fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			LOG_ERR("< BI-PROC_CBW default <<ERROR!!>>");
    4fe6:	f7fd bf0f 	b.w	2e08 <log_0>
		stage = MSC_READ_CBW;
    4fea:	2300      	movs	r3, #0
    4fec:	7013      	strb	r3, [r2, #0]
}
    4fee:	9a01      	ldr	r2, [sp, #4]
    4ff0:	6823      	ldr	r3, [r4, #0]
    4ff2:	429a      	cmp	r2, r3
    4ff4:	d1dd      	bne.n	4fb2 <mass_storage_bulk_in+0x2e>
    4ff6:	b002      	add	sp, #8
    4ff8:	bd10      	pop	{r4, pc}
		usb_ep_set_stall(mass_ep_data[MSD_IN_EP_IDX].ep_addr);
    4ffa:	4b0c      	ldr	r3, [pc, #48]	; (502c <mass_storage_bulk_in+0xa8>)
    4ffc:	7b18      	ldrb	r0, [r3, #12]
    4ffe:	f7ff fc45 	bl	488c <usb_ep_set_stall>
		sendCSW();
    5002:	9a01      	ldr	r2, [sp, #4]
    5004:	6823      	ldr	r3, [r4, #0]
    5006:	429a      	cmp	r2, r3
    5008:	d1d3      	bne.n	4fb2 <mass_storage_bulk_in+0x2e>
}
    500a:	b002      	add	sp, #8
    500c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		sendCSW();
    5010:	f7ff bdf2 	b.w	4bf8 <sendCSW>
    5014:	200036b0 	.word	0x200036b0
    5018:	20001bc5 	.word	0x20001bc5
    501c:	20001957 	.word	0x20001957
    5020:	0000b634 	.word	0x0000b634
    5024:	0000b674 	.word	0x0000b674
    5028:	0000baa4 	.word	0x0000baa4
    502c:	200036d0 	.word	0x200036d0

00005030 <mass_thread_main>:
	.num_endpoints = ARRAY_SIZE(mass_ep_data),
	.endpoint = mass_ep_data
};

static void mass_thread_main(int arg1, int unused)
{
    5030:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5034:	4b5a      	ldr	r3, [pc, #360]	; (51a0 <mass_thread_main+0x170>)
    5036:	4c5b      	ldr	r4, [pc, #364]	; (51a4 <mass_thread_main+0x174>)
    5038:	681b      	ldr	r3, [r3, #0]
    503a:	9301      	str	r3, [sp, #4]
			thread_memory_read_done();
			break;
		case THREAD_OP_WRITE_QUEUED:
			if (disk_access_write(disk_pdrv,
						page, (addr/BLOCK_SIZE), 1)) {
				LOG_ERR("!!!!! Disk Write Error %d !!!!!",
    503c:	4b5a      	ldr	r3, [pc, #360]	; (51a8 <mass_thread_main+0x178>)
    503e:	1ae4      	subs	r4, r4, r3
    5040:	f3c4 04c9 	ubfx	r4, r4, #3, #10
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    5044:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5048:	4858      	ldr	r0, [pc, #352]	; (51ac <mass_thread_main+0x17c>)
    504a:	f005 fdc1 	bl	abd0 <z_impl_k_sem_take>
		switch (thread_op) {
    504e:	4b58      	ldr	r3, [pc, #352]	; (51b0 <mass_thread_main+0x180>)
    5050:	681b      	ldr	r3, [r3, #0]
    5052:	2b01      	cmp	r3, #1
    5054:	d010      	beq.n	5078 <mass_thread_main+0x48>
    5056:	2b03      	cmp	r3, #3
    5058:	d06b      	beq.n	5132 <mass_thread_main+0x102>
					addr/BLOCK_SIZE);
			}
			thread_memory_write_done();
			break;
		default:
			LOG_ERR("XXXXXX thread_op  %d ! XXXXX", thread_op);
    505a:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
    505e:	f043 0301 	orr.w	r3, r3, #1
    5062:	f363 0707 	bfi	r7, r3, #0, #8
    5066:	4b52      	ldr	r3, [pc, #328]	; (51b0 <mass_thread_main+0x180>)
    5068:	4852      	ldr	r0, [pc, #328]	; (51b4 <mass_thread_main+0x184>)
    506a:	6819      	ldr	r1, [r3, #0]
    506c:	f364 178f 	bfi	r7, r4, #6, #10
    5070:	463a      	mov	r2, r7
    5072:	f7fd fee7 	bl	2e44 <log_1>
    5076:	e7e5      	b.n	5044 <mass_thread_main+0x14>
			if (disk_access_read(disk_pdrv,
    5078:	4e4f      	ldr	r6, [pc, #316]	; (51b8 <mass_thread_main+0x188>)
    507a:	4950      	ldr	r1, [pc, #320]	; (51bc <mass_thread_main+0x18c>)
    507c:	6832      	ldr	r2, [r6, #0]
    507e:	4850      	ldr	r0, [pc, #320]	; (51c0 <mass_thread_main+0x190>)
    5080:	0a52      	lsrs	r2, r2, #9
    5082:	f7fe fed7 	bl	3e34 <disk_access_read>
    5086:	b168      	cbz	r0, 50a4 <mass_thread_main+0x74>
				LOG_ERR("!! Disk Read Error %d !",
    5088:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
    508c:	f043 0301 	orr.w	r3, r3, #1
    5090:	f363 0907 	bfi	r9, r3, #0, #8
    5094:	6831      	ldr	r1, [r6, #0]
    5096:	484b      	ldr	r0, [pc, #300]	; (51c4 <mass_thread_main+0x194>)
    5098:	f364 198f 	bfi	r9, r4, #6, #10
    509c:	464a      	mov	r2, r9
    509e:	0a49      	lsrs	r1, r1, #9
    50a0:	f7fd fed0 	bl	2e44 <log_1>
	n = (length > MAX_PACKET) ? MAX_PACKET : length;
    50a4:	f8df b13c 	ldr.w	fp, [pc, #316]	; 51e4 <mass_thread_main+0x1b4>
	if ((addr + n) > memory_size) {
    50a8:	4b47      	ldr	r3, [pc, #284]	; (51c8 <mass_thread_main+0x198>)
	n = (length > MAX_PACKET) ? MAX_PACKET : length;
    50aa:	f8db 5000 	ldr.w	r5, [fp]
	if ((addr + n) > memory_size) {
    50ae:	6831      	ldr	r1, [r6, #0]
    50b0:	681b      	ldr	r3, [r3, #0]
	if (usb_write(mass_ep_data[MSD_IN_EP_IDX].ep_addr,
    50b2:	4842      	ldr	r0, [pc, #264]	; (51bc <mass_thread_main+0x18c>)
	n = (length > MAX_PACKET) ? MAX_PACKET : length;
    50b4:	2d40      	cmp	r5, #64	; 0x40
    50b6:	bf28      	it	cs
    50b8:	2540      	movcs	r5, #64	; 0x40
	if ((addr + n) > memory_size) {
    50ba:	186a      	adds	r2, r5, r1
    50bc:	429a      	cmp	r2, r3
		n = memory_size - addr;
    50be:	bf88      	it	hi
    50c0:	1a5d      	subhi	r5, r3, r1
		&page[addr % BLOCK_SIZE], n, NULL) != 0) {
    50c2:	f3c1 0108 	ubfx	r1, r1, #0, #9
		stage = MSC_ERROR;
    50c6:	bf88      	it	hi
    50c8:	4a40      	ldrhi	r2, [pc, #256]	; (51cc <mass_thread_main+0x19c>)
	if (usb_write(mass_ep_data[MSD_IN_EP_IDX].ep_addr,
    50ca:	4401      	add	r1, r0
    50cc:	4840      	ldr	r0, [pc, #256]	; (51d0 <mass_thread_main+0x1a0>)
		stage = MSC_ERROR;
    50ce:	bf84      	itt	hi
    50d0:	2301      	movhi	r3, #1
    50d2:	7013      	strbhi	r3, [r2, #0]
	if (usb_write(mass_ep_data[MSD_IN_EP_IDX].ep_addr,
    50d4:	7b00      	ldrb	r0, [r0, #12]
    50d6:	2300      	movs	r3, #0
    50d8:	462a      	mov	r2, r5
    50da:	f7ff fbc5 	bl	4868 <usb_write>
    50de:	b168      	cbz	r0, 50fc <mass_thread_main+0xcc>
		LOG_ERR("Failed to write EP 0x%x",
    50e0:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
    50e4:	f043 0301 	orr.w	r3, r3, #1
    50e8:	f363 0807 	bfi	r8, r3, #0, #8
    50ec:	4b38      	ldr	r3, [pc, #224]	; (51d0 <mass_thread_main+0x1a0>)
    50ee:	4839      	ldr	r0, [pc, #228]	; (51d4 <mass_thread_main+0x1a4>)
    50f0:	7b19      	ldrb	r1, [r3, #12]
    50f2:	f364 188f 	bfi	r8, r4, #6, #10
    50f6:	4642      	mov	r2, r8
    50f8:	f7fd fea4 	bl	2e44 <log_1>
	addr += n;
    50fc:	6833      	ldr	r3, [r6, #0]
	length -= n;
    50fe:	f8db 2000 	ldr.w	r2, [fp]
	csw.DataResidue -= n;
    5102:	4935      	ldr	r1, [pc, #212]	; (51d8 <mass_thread_main+0x1a8>)
	addr += n;
    5104:	442b      	add	r3, r5
	length -= n;
    5106:	1b52      	subs	r2, r2, r5
	addr += n;
    5108:	6033      	str	r3, [r6, #0]
	length -= n;
    510a:	f8cb 2000 	str.w	r2, [fp]
	csw.DataResidue -= n;
    510e:	688b      	ldr	r3, [r1, #8]
    5110:	1b5d      	subs	r5, r3, r5
    5112:	4b2e      	ldr	r3, [pc, #184]	; (51cc <mass_thread_main+0x19c>)
    5114:	608d      	str	r5, [r1, #8]
	if (!length || (stage != MSC_PROCESS_CBW)) {
    5116:	781b      	ldrb	r3, [r3, #0]
    5118:	b10a      	cbz	r2, 511e <mass_thread_main+0xee>
    511a:	2b02      	cmp	r3, #2
    511c:	d092      	beq.n	5044 <mass_thread_main+0x14>
			CSW_PASSED : CSW_FAILED;
    511e:	2b02      	cmp	r3, #2
    5120:	bf14      	ite	ne
    5122:	2201      	movne	r2, #1
    5124:	2200      	moveq	r2, #0
    5126:	730a      	strb	r2, [r1, #12]
		stage = (stage == MSC_PROCESS_CBW) ? MSC_SEND_CSW : stage;
    5128:	4a28      	ldr	r2, [pc, #160]	; (51cc <mass_thread_main+0x19c>)
    512a:	bf08      	it	eq
    512c:	2303      	moveq	r3, #3
    512e:	7013      	strb	r3, [r2, #0]
    5130:	e788      	b.n	5044 <mass_thread_main+0x14>
			if (disk_access_write(disk_pdrv,
    5132:	4d21      	ldr	r5, [pc, #132]	; (51b8 <mass_thread_main+0x188>)
    5134:	4921      	ldr	r1, [pc, #132]	; (51bc <mass_thread_main+0x18c>)
    5136:	682a      	ldr	r2, [r5, #0]
    5138:	4821      	ldr	r0, [pc, #132]	; (51c0 <mass_thread_main+0x190>)
    513a:	2301      	movs	r3, #1
    513c:	0a52      	lsrs	r2, r2, #9
    513e:	f7fe fea3 	bl	3e88 <disk_access_write>
    5142:	b168      	cbz	r0, 5160 <mass_thread_main+0x130>
				LOG_ERR("!!!!! Disk Write Error %d !!!!!",
    5144:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
    5148:	f043 0301 	orr.w	r3, r3, #1
    514c:	f363 0a07 	bfi	sl, r3, #0, #8
    5150:	6829      	ldr	r1, [r5, #0]
    5152:	4822      	ldr	r0, [pc, #136]	; (51dc <mass_thread_main+0x1ac>)
    5154:	f364 1a8f 	bfi	sl, r4, #6, #10
    5158:	4652      	mov	r2, sl
    515a:	0a49      	lsrs	r1, r1, #9
    515c:	f7fd fe72 	bl	2e44 <log_1>
	u32_t size = defered_wr_sz;
    5160:	4b1f      	ldr	r3, [pc, #124]	; (51e0 <mass_thread_main+0x1b0>)
	csw.DataResidue -= size;
    5162:	491d      	ldr	r1, [pc, #116]	; (51d8 <mass_thread_main+0x1a8>)
	u32_t size = defered_wr_sz;
    5164:	6818      	ldr	r0, [r3, #0]
	addr += size;
    5166:	682b      	ldr	r3, [r5, #0]
    5168:	4403      	add	r3, r0
    516a:	602b      	str	r3, [r5, #0]
	length -= size;
    516c:	4b1d      	ldr	r3, [pc, #116]	; (51e4 <mass_thread_main+0x1b4>)
    516e:	681a      	ldr	r2, [r3, #0]
    5170:	1a12      	subs	r2, r2, r0
    5172:	601a      	str	r2, [r3, #0]
	csw.DataResidue -= size;
    5174:	688b      	ldr	r3, [r1, #8]
    5176:	1a1b      	subs	r3, r3, r0
    5178:	608b      	str	r3, [r1, #8]
	if ((!length) || (stage != MSC_PROCESS_CBW)) {
    517a:	4b14      	ldr	r3, [pc, #80]	; (51cc <mass_thread_main+0x19c>)
    517c:	781b      	ldrb	r3, [r3, #0]
    517e:	b10a      	cbz	r2, 5184 <mass_thread_main+0x154>
    5180:	2b02      	cmp	r3, #2
    5182:	d005      	beq.n	5190 <mass_thread_main+0x160>
		csw.Status = (stage == MSC_ERROR) ? CSW_FAILED : CSW_PASSED;
    5184:	1e5a      	subs	r2, r3, #1
    5186:	4253      	negs	r3, r2
    5188:	4153      	adcs	r3, r2
    518a:	730b      	strb	r3, [r1, #12]
		sendCSW();
    518c:	f7ff fd34 	bl	4bf8 <sendCSW>
	thread_op = THREAD_OP_WRITE_DONE;
    5190:	4a07      	ldr	r2, [pc, #28]	; (51b0 <mass_thread_main+0x180>)
    5192:	2304      	movs	r3, #4
    5194:	6013      	str	r3, [r2, #0]
	usb_ep_read_continue(mass_ep_data[MSD_OUT_EP_IDX].ep_addr);
    5196:	4b0e      	ldr	r3, [pc, #56]	; (51d0 <mass_thread_main+0x1a0>)
    5198:	7918      	ldrb	r0, [r3, #4]
    519a:	f7ff fb9b 	bl	48d4 <usb_ep_read_continue>
    519e:	e751      	b.n	5044 <mass_thread_main+0x14>
    51a0:	200036b0 	.word	0x200036b0
    51a4:	0000b674 	.word	0x0000b674
    51a8:	0000b634 	.word	0x0000b634
    51ac:	20000490 	.word	0x20000490
    51b0:	20000514 	.word	0x20000514
    51b4:	0000bc95 	.word	0x0000bc95
    51b8:	20000484 	.word	0x20000484
    51bc:	200019c5 	.word	0x200019c5
    51c0:	0000b9a5 	.word	0x0000b9a5
    51c4:	0000bc45 	.word	0x0000bc45
    51c8:	20000510 	.word	0x20000510
    51cc:	20001bc5 	.word	0x20001bc5
    51d0:	200036d0 	.word	0x200036d0
    51d4:	0000bc5d 	.word	0x0000bc5d
    51d8:	20001976 	.word	0x20001976
    51dc:	0000bc75 	.word	0x0000bc75
    51e0:	2000048c 	.word	0x2000048c
    51e4:	200004a0 	.word	0x200004a0

000051e8 <mass_storage_init>:
 * @param dev device struct.
 *
 * @return negative errno code on fatal failure, 0 otherwise
 */
static int mass_storage_init(struct device *dev)
{
    51e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    51ec:	4d56      	ldr	r5, [pc, #344]	; (5348 <mass_storage_init+0x160>)
	u32_t block_size = 0U;

	ARG_UNUSED(dev);

	if (disk_access_init(disk_pdrv) != 0) {
    51ee:	4857      	ldr	r0, [pc, #348]	; (534c <mass_storage_init+0x164>)
{
    51f0:	682b      	ldr	r3, [r5, #0]
    51f2:	b088      	sub	sp, #32
	u32_t block_size = 0U;
    51f4:	2600      	movs	r6, #0
{
    51f6:	9307      	str	r3, [sp, #28]
	u32_t block_size = 0U;
    51f8:	9606      	str	r6, [sp, #24]
	if (disk_access_init(disk_pdrv) != 0) {
    51fa:	f7fe fddb 	bl	3db4 <disk_access_init>
    51fe:	4604      	mov	r4, r0
    5200:	b178      	cbz	r0, 5222 <mass_storage_init+0x3a>
		LOG_ERR("Storage init ERROR !!!! - Aborting USB init");
    5202:	2301      	movs	r3, #1
    5204:	f04f 0100 	mov.w	r1, #0
    5208:	f363 0107 	bfi	r1, r3, #0, #8
    520c:	4a50      	ldr	r2, [pc, #320]	; (5350 <mass_storage_init+0x168>)
    520e:	4b51      	ldr	r3, [pc, #324]	; (5354 <mass_storage_init+0x16c>)
    5210:	4851      	ldr	r0, [pc, #324]	; (5358 <mass_storage_init+0x170>)
    5212:	1a9b      	subs	r3, r3, r2
    5214:	08db      	lsrs	r3, r3, #3
    5216:	f363 118f 	bfi	r1, r3, #6, #10
	}

	/* Enable USB driver */
	ret = usb_enable(&mass_storage_config);
	if (ret < 0) {
		LOG_ERR("Failed to enable USB");
    521a:	f7fd fdf5 	bl	2e08 <log_0>
		return ret;
    521e:	4634      	mov	r4, r6
    5220:	e02c      	b.n	527c <mass_storage_init+0x94>
	if (disk_access_ioctl(disk_pdrv,
    5222:	4e4e      	ldr	r6, [pc, #312]	; (535c <mass_storage_init+0x174>)
    5224:	4849      	ldr	r0, [pc, #292]	; (534c <mass_storage_init+0x164>)
    5226:	4632      	mov	r2, r6
    5228:	2101      	movs	r1, #1
    522a:	f7fe fe57 	bl	3edc <disk_access_ioctl>
    522e:	4607      	mov	r7, r0
    5230:	b170      	cbz	r0, 5250 <mass_storage_init+0x68>
		LOG_ERR("Unable to get sector count - Aborting USB init");
    5232:	2301      	movs	r3, #1
    5234:	f04f 0100 	mov.w	r1, #0
    5238:	f363 0107 	bfi	r1, r3, #0, #8
    523c:	4a44      	ldr	r2, [pc, #272]	; (5350 <mass_storage_init+0x168>)
    523e:	4b45      	ldr	r3, [pc, #276]	; (5354 <mass_storage_init+0x16c>)
    5240:	4847      	ldr	r0, [pc, #284]	; (5360 <mass_storage_init+0x178>)
    5242:	1a9b      	subs	r3, r3, r2
    5244:	08db      	lsrs	r3, r3, #3
    5246:	f363 118f 	bfi	r1, r3, #6, #10
		LOG_ERR("Block Size reported by the storage side is "
    524a:	f7fd fddd 	bl	2e08 <log_0>
		return 0;
    524e:	e015      	b.n	527c <mass_storage_init+0x94>
	if (disk_access_ioctl(disk_pdrv,
    5250:	aa06      	add	r2, sp, #24
    5252:	2102      	movs	r1, #2
    5254:	483d      	ldr	r0, [pc, #244]	; (534c <mass_storage_init+0x164>)
    5256:	f7fe fe41 	bl	3edc <disk_access_ioctl>
    525a:	4604      	mov	r4, r0
    525c:	b1a8      	cbz	r0, 528a <mass_storage_init+0xa2>
		LOG_ERR("Unable to get sector size - Aborting USB init");
    525e:	2301      	movs	r3, #1
    5260:	f04f 0100 	mov.w	r1, #0
    5264:	f363 0107 	bfi	r1, r3, #0, #8
    5268:	4a39      	ldr	r2, [pc, #228]	; (5350 <mass_storage_init+0x168>)
    526a:	4b3a      	ldr	r3, [pc, #232]	; (5354 <mass_storage_init+0x16c>)
    526c:	483d      	ldr	r0, [pc, #244]	; (5364 <mass_storage_init+0x17c>)
    526e:	1a9b      	subs	r3, r3, r2
    5270:	08db      	lsrs	r3, r3, #3
    5272:	f363 118f 	bfi	r1, r3, #6, #10
    5276:	f7fd fdc7 	bl	2e08 <log_0>
		return 0;
    527a:	463c      	mov	r4, r7
			DISK_THREAD_STACK_SZ,
			(k_thread_entry_t)mass_thread_main, NULL, NULL, NULL,
			DISK_THREAD_PRIO, 0, 0);

	return 0;
}
    527c:	9a07      	ldr	r2, [sp, #28]
    527e:	682b      	ldr	r3, [r5, #0]
    5280:	429a      	cmp	r2, r3
    5282:	4620      	mov	r0, r4
    5284:	d05c      	beq.n	5340 <mass_storage_init+0x158>
    5286:	f005 fec9 	bl	b01c <_StackCheckHandler>
	if (block_size != BLOCK_SIZE) {
    528a:	9f06      	ldr	r7, [sp, #24]
    528c:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    5290:	d00c      	beq.n	52ac <mass_storage_init+0xc4>
		LOG_ERR("Block Size reported by the storage side is "
    5292:	2301      	movs	r3, #1
    5294:	f04f 0100 	mov.w	r1, #0
    5298:	f363 0107 	bfi	r1, r3, #0, #8
    529c:	4a2c      	ldr	r2, [pc, #176]	; (5350 <mass_storage_init+0x168>)
    529e:	4b2d      	ldr	r3, [pc, #180]	; (5354 <mass_storage_init+0x16c>)
    52a0:	4831      	ldr	r0, [pc, #196]	; (5368 <mass_storage_init+0x180>)
    52a2:	1a9b      	subs	r3, r3, r2
    52a4:	08db      	lsrs	r3, r3, #3
    52a6:	f363 118f 	bfi	r1, r3, #6, #10
    52aa:	e7ce      	b.n	524a <mass_storage_init+0x62>
	memory_size = block_count * BLOCK_SIZE;
    52ac:	6833      	ldr	r3, [r6, #0]
    52ae:	4a2f      	ldr	r2, [pc, #188]	; (536c <mass_storage_init+0x184>)
	mass_storage_config.interface.payload_data = interface_data;
    52b0:	4e2f      	ldr	r6, [pc, #188]	; (5370 <mass_storage_init+0x188>)
	memory_size = block_count * BLOCK_SIZE;
    52b2:	025b      	lsls	r3, r3, #9
    52b4:	6013      	str	r3, [r2, #0]
	stage = MSC_READ_CBW;
    52b6:	4b2f      	ldr	r3, [pc, #188]	; (5374 <mass_storage_init+0x18c>)
    52b8:	7018      	strb	r0, [r3, #0]
	msd_init();
    52ba:	f7ff fd3f 	bl	4d3c <msd_init>
	mass_storage_config.interface.payload_data = interface_data;
    52be:	4b2e      	ldr	r3, [pc, #184]	; (5378 <mass_storage_init+0x190>)
    52c0:	61f3      	str	r3, [r6, #28]
		usb_get_device_descriptor();
    52c2:	f7ff fc59 	bl	4b78 <usb_get_device_descriptor>
	mass_storage_config.usb_device_description =
    52c6:	6030      	str	r0, [r6, #0]
	ret = usb_set_config(&mass_storage_config);
    52c8:	4630      	mov	r0, r6
    52ca:	f7ff fa21 	bl	4710 <usb_set_config>
	if (ret < 0) {
    52ce:	f1b0 0800 	subs.w	r8, r0, #0
    52d2:	da0f      	bge.n	52f4 <mass_storage_init+0x10c>
		LOG_ERR("Failed to config USB");
    52d4:	2301      	movs	r3, #1
    52d6:	f04f 0100 	mov.w	r1, #0
    52da:	f363 0107 	bfi	r1, r3, #0, #8
    52de:	4a1c      	ldr	r2, [pc, #112]	; (5350 <mass_storage_init+0x168>)
    52e0:	4b1c      	ldr	r3, [pc, #112]	; (5354 <mass_storage_init+0x16c>)
    52e2:	4826      	ldr	r0, [pc, #152]	; (537c <mass_storage_init+0x194>)
    52e4:	1a9b      	subs	r3, r3, r2
    52e6:	08db      	lsrs	r3, r3, #3
    52e8:	f363 118f 	bfi	r1, r3, #6, #10
    52ec:	f7fd fd8c 	bl	2e08 <log_0>
		return ret;
    52f0:	4644      	mov	r4, r8
    52f2:	e7c3      	b.n	527c <mass_storage_init+0x94>
	ret = usb_enable(&mass_storage_config);
    52f4:	4630      	mov	r0, r6
    52f6:	f7ff fa3b 	bl	4770 <usb_enable>
	if (ret < 0) {
    52fa:	1e06      	subs	r6, r0, #0
    52fc:	da0c      	bge.n	5318 <mass_storage_init+0x130>
		LOG_ERR("Failed to enable USB");
    52fe:	2301      	movs	r3, #1
    5300:	f04f 0100 	mov.w	r1, #0
    5304:	f363 0107 	bfi	r1, r3, #0, #8
    5308:	4a11      	ldr	r2, [pc, #68]	; (5350 <mass_storage_init+0x168>)
    530a:	4b12      	ldr	r3, [pc, #72]	; (5354 <mass_storage_init+0x16c>)
    530c:	481c      	ldr	r0, [pc, #112]	; (5380 <mass_storage_init+0x198>)
    530e:	1a9b      	subs	r3, r3, r2
    5310:	08db      	lsrs	r3, r3, #3
    5312:	f363 118f 	bfi	r1, r3, #6, #10
    5316:	e780      	b.n	521a <mass_storage_init+0x32>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
    5318:	4621      	mov	r1, r4
    531a:	2201      	movs	r2, #1
    531c:	4819      	ldr	r0, [pc, #100]	; (5384 <mass_storage_init+0x19c>)
    531e:	f005 fc13 	bl	ab48 <z_impl_k_sem_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
    5322:	f06f 0304 	mvn.w	r3, #4
    5326:	e9cd 4302 	strd	r4, r3, [sp, #8]
    532a:	e9cd 4404 	strd	r4, r4, [sp, #16]
    532e:	e9cd 4400 	strd	r4, r4, [sp]
    5332:	4b15      	ldr	r3, [pc, #84]	; (5388 <mass_storage_init+0x1a0>)
    5334:	4915      	ldr	r1, [pc, #84]	; (538c <mass_storage_init+0x1a4>)
    5336:	4816      	ldr	r0, [pc, #88]	; (5390 <mass_storage_init+0x1a8>)
    5338:	463a      	mov	r2, r7
    533a:	f005 fd5b 	bl	adf4 <z_impl_k_thread_create>
    533e:	e79d      	b.n	527c <mass_storage_init+0x94>
}
    5340:	b008      	add	sp, #32
    5342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5346:	bf00      	nop
    5348:	200036b0 	.word	0x200036b0
    534c:	0000b9a5 	.word	0x0000b9a5
    5350:	0000b634 	.word	0x0000b634
    5354:	0000b674 	.word	0x0000b674
    5358:	0000bb2e 	.word	0x0000bb2e
    535c:	20000488 	.word	0x20000488
    5360:	0000bb5a 	.word	0x0000bb5a
    5364:	0000bb89 	.word	0x0000bb89
    5368:	0000bbb7 	.word	0x0000bbb7
    536c:	20000510 	.word	0x20000510
    5370:	200078a0 	.word	0x200078a0
    5374:	20001bc5 	.word	0x20001bc5
    5378:	20001983 	.word	0x20001983
    537c:	0000bc1b 	.word	0x0000bc1b
    5380:	0000bc30 	.word	0x0000bc30
    5384:	20000490 	.word	0x20000490
    5388:	00005031 	.word	0x00005031
    538c:	20001ed0 	.word	0x20001ed0
    5390:	200004a4 	.word	0x200004a4

00005394 <mass_storage_bulk_out>:
{
    5394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5398:	4fac      	ldr	r7, [pc, #688]	; (564c <mass_storage_bulk_out+0x2b8>)
	switch (stage) {
    539a:	4dad      	ldr	r5, [pc, #692]	; (5650 <mass_storage_bulk_out+0x2bc>)
{
    539c:	683b      	ldr	r3, [r7, #0]
    539e:	b09d      	sub	sp, #116	; 0x74
	usb_ep_read_wait(ep, bo_buf, CONFIG_MASS_STORAGE_BULK_EP_MPS,
    53a0:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
{
    53a4:	931b      	str	r3, [sp, #108]	; 0x6c
	u32_t bytes_read = 0U;
    53a6:	2300      	movs	r3, #0
    53a8:	9301      	str	r3, [sp, #4]
	usb_ep_read_wait(ep, bo_buf, CONFIG_MASS_STORAGE_BULK_EP_MPS,
    53aa:	2240      	movs	r2, #64	; 0x40
    53ac:	ab01      	add	r3, sp, #4
    53ae:	4649      	mov	r1, r9
{
    53b0:	4680      	mov	r8, r0
	usb_ep_read_wait(ep, bo_buf, CONFIG_MASS_STORAGE_BULK_EP_MPS,
    53b2:	f7ff fa7d 	bl	48b0 <usb_ep_read_wait>
	switch (stage) {
    53b6:	782b      	ldrb	r3, [r5, #0]
    53b8:	b143      	cbz	r3, 53cc <mass_storage_bulk_out+0x38>
    53ba:	2b02      	cmp	r3, #2
    53bc:	f000 80f4 	beq.w	55a8 <mass_storage_bulk_out+0x214>
		usb_ep_set_stall(ep);
    53c0:	4640      	mov	r0, r8
    53c2:	f7ff fa63 	bl	488c <usb_ep_set_stall>
		csw.Status = CSW_ERROR;
    53c6:	4ba3      	ldr	r3, [pc, #652]	; (5654 <mass_storage_bulk_out+0x2c0>)
    53c8:	2202      	movs	r2, #2
    53ca:	e13c      	b.n	5646 <mass_storage_bulk_out+0x2b2>
	if (size != sizeof(cbw)) {
    53cc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    53d0:	2a1f      	cmp	r2, #31
    53d2:	d01b      	beq.n	540c <mass_storage_bulk_out+0x78>
		LOG_ERR("size != sizeof(cbw)");
    53d4:	2301      	movs	r3, #1
    53d6:	f04f 0100 	mov.w	r1, #0
    53da:	f363 0107 	bfi	r1, r3, #0, #8
    53de:	4a9e      	ldr	r2, [pc, #632]	; (5658 <mass_storage_bulk_out+0x2c4>)
    53e0:	4b9e      	ldr	r3, [pc, #632]	; (565c <mass_storage_bulk_out+0x2c8>)
    53e2:	489f      	ldr	r0, [pc, #636]	; (5660 <mass_storage_bulk_out+0x2cc>)
    53e4:	1a9b      	subs	r3, r3, r2
    53e6:	08db      	lsrs	r3, r3, #3
    53e8:	f363 118f 	bfi	r1, r3, #6, #10
		LOG_ERR("CBW Signature Mismatch");
    53ec:	f7fd fd0c 	bl	2e08 <log_0>
	if (thread_op != THREAD_OP_WRITE_QUEUED) {
    53f0:	4b9c      	ldr	r3, [pc, #624]	; (5664 <mass_storage_bulk_out+0x2d0>)
    53f2:	681b      	ldr	r3, [r3, #0]
    53f4:	2b03      	cmp	r3, #3
    53f6:	d002      	beq.n	53fe <mass_storage_bulk_out+0x6a>
		usb_ep_read_continue(ep);
    53f8:	4640      	mov	r0, r8
    53fa:	f7ff fa6b 	bl	48d4 <usb_ep_read_continue>
}
    53fe:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    5400:	683b      	ldr	r3, [r7, #0]
    5402:	429a      	cmp	r2, r3
    5404:	f000 81b5 	beq.w	5772 <mass_storage_bulk_out+0x3de>
    5408:	f005 fe08 	bl	b01c <_StackCheckHandler>
	memcpy((u8_t *)&cbw, buf, size);
    540c:	4c96      	ldr	r4, [pc, #600]	; (5668 <mass_storage_bulk_out+0x2d4>)
    540e:	4649      	mov	r1, r9
    5410:	4620      	mov	r0, r4
    5412:	f002 fc81 	bl	7d18 <memcpy>
	if (cbw.Signature != CBW_Signature) {
    5416:	6822      	ldr	r2, [r4, #0]
    5418:	4b94      	ldr	r3, [pc, #592]	; (566c <mass_storage_bulk_out+0x2d8>)
    541a:	429a      	cmp	r2, r3
    541c:	d00c      	beq.n	5438 <mass_storage_bulk_out+0xa4>
		LOG_ERR("CBW Signature Mismatch");
    541e:	2301      	movs	r3, #1
    5420:	f04f 0100 	mov.w	r1, #0
    5424:	f363 0107 	bfi	r1, r3, #0, #8
    5428:	4a8b      	ldr	r2, [pc, #556]	; (5658 <mass_storage_bulk_out+0x2c4>)
    542a:	4b8c      	ldr	r3, [pc, #560]	; (565c <mass_storage_bulk_out+0x2c8>)
    542c:	4890      	ldr	r0, [pc, #576]	; (5670 <mass_storage_bulk_out+0x2dc>)
    542e:	1a9b      	subs	r3, r3, r2
    5430:	08db      	lsrs	r3, r3, #3
    5432:	f363 118f 	bfi	r1, r3, #6, #10
    5436:	e7d9      	b.n	53ec <mass_storage_bulk_out+0x58>
	csw.Tag = cbw.Tag;
    5438:	4e86      	ldr	r6, [pc, #536]	; (5654 <mass_storage_bulk_out+0x2c0>)
    543a:	6862      	ldr	r2, [r4, #4]
    543c:	6072      	str	r2, [r6, #4]
	if ((cbw.CBLength <  1) || (cbw.CBLength > 16) || (cbw.LUN != 0U)) {
    543e:	7ba2      	ldrb	r2, [r4, #14]
	csw.DataResidue = cbw.DataLength;
    5440:	68a1      	ldr	r1, [r4, #8]
    5442:	60b1      	str	r1, [r6, #8]
	if ((cbw.CBLength <  1) || (cbw.CBLength > 16) || (cbw.LUN != 0U)) {
    5444:	3a01      	subs	r2, #1
    5446:	2a0f      	cmp	r2, #15
    5448:	d801      	bhi.n	544e <mass_storage_bulk_out+0xba>
    544a:	7b63      	ldrb	r3, [r4, #13]
    544c:	b10b      	cbz	r3, 5452 <mass_storage_bulk_out+0xbe>
	csw.Status = CSW_FAILED;
    544e:	2301      	movs	r3, #1
    5450:	e023      	b.n	549a <mass_storage_bulk_out+0x106>
		switch (cbw.CB[0]) {
    5452:	7be3      	ldrb	r3, [r4, #15]
    5454:	2b23      	cmp	r3, #35	; 0x23
    5456:	d071      	beq.n	553c <mass_storage_bulk_out+0x1a8>
    5458:	d823      	bhi.n	54a2 <mass_storage_bulk_out+0x10e>
    545a:	2b12      	cmp	r3, #18
    545c:	d058      	beq.n	5510 <mass_storage_bulk_out+0x17c>
    545e:	d817      	bhi.n	5490 <mass_storage_bulk_out+0xfc>
    5460:	2b00      	cmp	r3, #0
    5462:	d049      	beq.n	54f8 <mass_storage_bulk_out+0x164>
    5464:	2b03      	cmp	r3, #3
    5466:	d1f2      	bne.n	544e <mass_storage_bulk_out+0xba>
	u8_t request_sense[] = {
    5468:	4b82      	ldr	r3, [pc, #520]	; (5674 <mass_storage_bulk_out+0x2e0>)
    546a:	aa02      	add	r2, sp, #8
    546c:	f103 0610 	add.w	r6, r3, #16
    5470:	4615      	mov	r5, r2
    5472:	6818      	ldr	r0, [r3, #0]
    5474:	6859      	ldr	r1, [r3, #4]
    5476:	4614      	mov	r4, r2
    5478:	c403      	stmia	r4!, {r0, r1}
    547a:	3308      	adds	r3, #8
    547c:	42b3      	cmp	r3, r6
    547e:	4622      	mov	r2, r4
    5480:	d1f7      	bne.n	5472 <mass_storage_bulk_out+0xde>
    5482:	881b      	ldrh	r3, [r3, #0]
    5484:	8023      	strh	r3, [r4, #0]
	return write(request_sense, sizeof(request_sense));
    5486:	2112      	movs	r1, #18
	return write(inquiry, sizeof(inquiry));
    5488:	4628      	mov	r0, r5
	return write(capacity, sizeof(capacity));
    548a:	f7ff fcd7 	bl	4e3c <write>
    548e:	e7af      	b.n	53f0 <mass_storage_bulk_out+0x5c>
		switch (cbw.CB[0]) {
    5490:	2b1a      	cmp	r3, #26
    5492:	d04e      	beq.n	5532 <mass_storage_bulk_out+0x19e>
    5494:	2b1e      	cmp	r3, #30
    5496:	d1da      	bne.n	544e <mass_storage_bulk_out+0xba>
	csw.Status = CSW_PASSED;
    5498:	2300      	movs	r3, #0
    549a:	7333      	strb	r3, [r6, #12]
		sendCSW();
    549c:	f7ff fbac 	bl	4bf8 <sendCSW>
		break;
    54a0:	e7a6      	b.n	53f0 <mass_storage_bulk_out+0x5c>
		switch (cbw.CB[0]) {
    54a2:	2b2a      	cmp	r3, #42	; 0x2a
    54a4:	d071      	beq.n	558a <mass_storage_bulk_out+0x1f6>
    54a6:	d810      	bhi.n	54ca <mass_storage_bulk_out+0x136>
    54a8:	2b25      	cmp	r3, #37	; 0x25
    54aa:	d053      	beq.n	5554 <mass_storage_bulk_out+0x1c0>
    54ac:	2b28      	cmp	r3, #40	; 0x28
    54ae:	d1ce      	bne.n	544e <mass_storage_bulk_out+0xba>
			if (infoTransfer()) {
    54b0:	f7ff fbdc 	bl	4c6c <infoTransfer>
    54b4:	2800      	cmp	r0, #0
    54b6:	d09b      	beq.n	53f0 <mass_storage_bulk_out+0x5c>
				if ((cbw.Flags & 0x80)) {
    54b8:	f994 300c 	ldrsb.w	r3, [r4, #12]
    54bc:	2b00      	cmp	r3, #0
    54be:	da5e      	bge.n	557e <mass_storage_bulk_out+0x1ea>
					stage = MSC_PROCESS_CBW;
    54c0:	2302      	movs	r3, #2
    54c2:	702b      	strb	r3, [r5, #0]
					memoryRead();
    54c4:	f7ff fcfe 	bl	4ec4 <memoryRead>
    54c8:	e792      	b.n	53f0 <mass_storage_bulk_out+0x5c>
		switch (cbw.CB[0]) {
    54ca:	2ba8      	cmp	r3, #168	; 0xa8
    54cc:	d0f0      	beq.n	54b0 <mass_storage_bulk_out+0x11c>
    54ce:	2baa      	cmp	r3, #170	; 0xaa
    54d0:	d05b      	beq.n	558a <mass_storage_bulk_out+0x1f6>
    54d2:	2b2f      	cmp	r3, #47	; 0x2f
    54d4:	d1bb      	bne.n	544e <mass_storage_bulk_out+0xba>
			if (!(cbw.CB[1] & 0x02)) {
    54d6:	7c23      	ldrb	r3, [r4, #16]
    54d8:	079b      	lsls	r3, r3, #30
    54da:	d5dd      	bpl.n	5498 <mass_storage_bulk_out+0x104>
			if (infoTransfer()) {
    54dc:	f7ff fbc6 	bl	4c6c <infoTransfer>
    54e0:	2800      	cmp	r0, #0
    54e2:	d085      	beq.n	53f0 <mass_storage_bulk_out+0x5c>
				if (!(cbw.Flags & 0x80)) {
    54e4:	f994 300c 	ldrsb.w	r3, [r4, #12]
    54e8:	2b00      	cmp	r3, #0
    54ea:	db5a      	blt.n	55a2 <mass_storage_bulk_out+0x20e>
					stage = MSC_PROCESS_CBW;
    54ec:	2302      	movs	r3, #2
    54ee:	702b      	strb	r3, [r5, #0]
					memOK = true;
    54f0:	4b61      	ldr	r3, [pc, #388]	; (5678 <mass_storage_bulk_out+0x2e4>)
    54f2:	2201      	movs	r2, #1
    54f4:	701a      	strb	r2, [r3, #0]
    54f6:	e77b      	b.n	53f0 <mass_storage_bulk_out+0x5c>
	if (cbw.DataLength != 0U) {
    54f8:	2900      	cmp	r1, #0
    54fa:	d0cd      	beq.n	5498 <mass_storage_bulk_out+0x104>
		if ((cbw.Flags & 0x80) != 0U) {
    54fc:	f994 300c 	ldrsb.w	r3, [r4, #12]
    5500:	2b00      	cmp	r3, #0
    5502:	4b5e      	ldr	r3, [pc, #376]	; (567c <mass_storage_bulk_out+0x2e8>)
			usb_ep_set_stall(mass_ep_data[MSD_IN_EP_IDX].ep_addr);
    5504:	bfb4      	ite	lt
    5506:	7b18      	ldrblt	r0, [r3, #12]
			usb_ep_set_stall(mass_ep_data[MSD_OUT_EP_IDX].ep_addr);
    5508:	7918      	ldrbge	r0, [r3, #4]
    550a:	f7ff f9bf 	bl	488c <usb_ep_set_stall>
    550e:	e7c3      	b.n	5498 <mass_storage_bulk_out+0x104>
	u8_t inquiry[] = { 0x00, 0x80, 0x00, 0x01,
    5510:	4b5b      	ldr	r3, [pc, #364]	; (5680 <mass_storage_bulk_out+0x2ec>)
    5512:	aa02      	add	r2, sp, #8
    5514:	f103 0620 	add.w	r6, r3, #32
    5518:	4615      	mov	r5, r2
    551a:	6818      	ldr	r0, [r3, #0]
    551c:	6859      	ldr	r1, [r3, #4]
    551e:	4614      	mov	r4, r2
    5520:	c403      	stmia	r4!, {r0, r1}
    5522:	3308      	adds	r3, #8
    5524:	42b3      	cmp	r3, r6
    5526:	4622      	mov	r2, r4
    5528:	d1f7      	bne.n	551a <mass_storage_bulk_out+0x186>
    552a:	6818      	ldr	r0, [r3, #0]
    552c:	6020      	str	r0, [r4, #0]
	return write(inquiry, sizeof(inquiry));
    552e:	2124      	movs	r1, #36	; 0x24
    5530:	e7aa      	b.n	5488 <mass_storage_bulk_out+0xf4>
	u8_t sense6[] = { 0x03, 0x00, 0x00, 0x00 };
    5532:	2303      	movs	r3, #3
    5534:	9302      	str	r3, [sp, #8]
	return write(sense6, sizeof(sense6));
    5536:	2104      	movs	r1, #4
	return write(capacity, sizeof(capacity));
    5538:	a802      	add	r0, sp, #8
    553a:	e7a6      	b.n	548a <mass_storage_bulk_out+0xf6>
	u8_t capacity[] = { 0x00, 0x00, 0x00, 0x08,
    553c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    5540:	9302      	str	r3, [sp, #8]
    5542:	4b50      	ldr	r3, [pc, #320]	; (5684 <mass_storage_bulk_out+0x2f0>)
    5544:	681b      	ldr	r3, [r3, #0]
    5546:	ba1b      	rev	r3, r3
    5548:	9303      	str	r3, [sp, #12]
    554a:	f04f 1302 	mov.w	r3, #131074	; 0x20002
    554e:	9304      	str	r3, [sp, #16]
	return write(capacity, sizeof(capacity));
    5550:	210c      	movs	r1, #12
    5552:	e7f1      	b.n	5538 <mass_storage_bulk_out+0x1a4>
		(u8_t)(((block_count - 1) >> 24) & 0xff),
    5554:	4b4b      	ldr	r3, [pc, #300]	; (5684 <mass_storage_bulk_out+0x2f0>)
    5556:	681b      	ldr	r3, [r3, #0]
    5558:	3b01      	subs	r3, #1
    555a:	0e1a      	lsrs	r2, r3, #24
    555c:	f88d 2008 	strb.w	r2, [sp, #8]
		(u8_t)(((block_count - 1) >> 16) & 0xff),
    5560:	0c1a      	lsrs	r2, r3, #16
    5562:	f88d 2009 	strb.w	r2, [sp, #9]
	u8_t capacity[] = {
    5566:	f88d 300b 	strb.w	r3, [sp, #11]
		(u8_t)(((block_count - 1) >> 8) & 0xff),
    556a:	0a1a      	lsrs	r2, r3, #8
	return write(capacity, sizeof(capacity));
    556c:	2108      	movs	r1, #8
	u8_t capacity[] = {
    556e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
		(u8_t)(((block_count - 1) >> 8) & 0xff),
    5572:	f88d 200a 	strb.w	r2, [sp, #10]
	u8_t capacity[] = {
    5576:	9303      	str	r3, [sp, #12]
	return write(capacity, sizeof(capacity));
    5578:	eb0d 0001 	add.w	r0, sp, r1
    557c:	e785      	b.n	548a <mass_storage_bulk_out+0xf6>
					usb_ep_set_stall(
    557e:	4b3f      	ldr	r3, [pc, #252]	; (567c <mass_storage_bulk_out+0x2e8>)
    5580:	7918      	ldrb	r0, [r3, #4]
					usb_ep_set_stall(
    5582:	f7ff f983 	bl	488c <usb_ep_set_stall>
					csw.Status = CSW_ERROR;
    5586:	2302      	movs	r3, #2
    5588:	e787      	b.n	549a <mass_storage_bulk_out+0x106>
			if (infoTransfer()) {
    558a:	f7ff fb6f 	bl	4c6c <infoTransfer>
    558e:	2800      	cmp	r0, #0
    5590:	f43f af2e 	beq.w	53f0 <mass_storage_bulk_out+0x5c>
				if (!(cbw.Flags & 0x80)) {
    5594:	f994 300c 	ldrsb.w	r3, [r4, #12]
    5598:	2b00      	cmp	r3, #0
    559a:	db02      	blt.n	55a2 <mass_storage_bulk_out+0x20e>
					stage = MSC_PROCESS_CBW;
    559c:	2302      	movs	r3, #2
    559e:	702b      	strb	r3, [r5, #0]
    55a0:	e726      	b.n	53f0 <mass_storage_bulk_out+0x5c>
					usb_ep_set_stall(
    55a2:	4b36      	ldr	r3, [pc, #216]	; (567c <mass_storage_bulk_out+0x2e8>)
    55a4:	7b18      	ldrb	r0, [r3, #12]
    55a6:	e7ec      	b.n	5582 <mass_storage_bulk_out+0x1ee>
		switch (cbw.CB[0]) {
    55a8:	4b2f      	ldr	r3, [pc, #188]	; (5668 <mass_storage_bulk_out+0x2d4>)
    55aa:	7bdb      	ldrb	r3, [r3, #15]
    55ac:	2b2f      	cmp	r3, #47	; 0x2f
    55ae:	d079      	beq.n	56a4 <mass_storage_bulk_out+0x310>
    55b0:	2baa      	cmp	r3, #170	; 0xaa
    55b2:	d002      	beq.n	55ba <mass_storage_bulk_out+0x226>
    55b4:	2b2a      	cmp	r3, #42	; 0x2a
    55b6:	f040 80cf 	bne.w	5758 <mass_storage_bulk_out+0x3c4>
	if ((addr + size) > memory_size) {
    55ba:	4e33      	ldr	r6, [pc, #204]	; (5688 <mass_storage_bulk_out+0x2f4>)
    55bc:	4b33      	ldr	r3, [pc, #204]	; (568c <mass_storage_bulk_out+0x2f8>)
			memoryWrite(bo_buf, bytes_read);
    55be:	9a01      	ldr	r2, [sp, #4]
	if ((addr + size) > memory_size) {
    55c0:	6834      	ldr	r4, [r6, #0]
    55c2:	681b      	ldr	r3, [r3, #0]
    55c4:	fa14 f182 	uxtah	r1, r4, r2
    55c8:	4299      	cmp	r1, r3
    55ca:	d81a      	bhi.n	5602 <mass_storage_bulk_out+0x26e>
			memoryWrite(bo_buf, bytes_read);
    55cc:	b294      	uxth	r4, r2
		page[addr % BLOCK_SIZE + i] = buf[i];
    55ce:	6833      	ldr	r3, [r6, #0]
    55d0:	492f      	ldr	r1, [pc, #188]	; (5690 <mass_storage_bulk_out+0x2fc>)
    55d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
    55d6:	4411      	add	r1, r2
	for (int i = 0; i < size; i++) {
    55d8:	2200      	movs	r2, #0
    55da:	42a2      	cmp	r2, r4
    55dc:	db1a      	blt.n	5614 <mass_storage_bulk_out+0x280>
	if (!((addr + size) % BLOCK_SIZE)) {
    55de:	4423      	add	r3, r4
    55e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
    55e4:	b9e3      	cbnz	r3, 5620 <mass_storage_bulk_out+0x28c>
		if (!(disk_access_status(disk_pdrv) &
    55e6:	482b      	ldr	r0, [pc, #172]	; (5694 <mass_storage_bulk_out+0x300>)
    55e8:	f7fe fc04 	bl	3df4 <disk_access_status>
    55ec:	0740      	lsls	r0, r0, #29
    55ee:	d417      	bmi.n	5620 <mass_storage_bulk_out+0x28c>
			thread_op = THREAD_OP_WRITE_QUEUED;  /* write_queued */
    55f0:	4b1c      	ldr	r3, [pc, #112]	; (5664 <mass_storage_bulk_out+0x2d0>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    55f2:	4829      	ldr	r0, [pc, #164]	; (5698 <mass_storage_bulk_out+0x304>)
    55f4:	2203      	movs	r2, #3
    55f6:	601a      	str	r2, [r3, #0]
			defered_wr_sz = size;
    55f8:	4b28      	ldr	r3, [pc, #160]	; (569c <mass_storage_bulk_out+0x308>)
    55fa:	601c      	str	r4, [r3, #0]
    55fc:	f005 fab6 	bl	ab6c <z_impl_k_sem_give>
			return;
    5600:	e6f6      	b.n	53f0 <mass_storage_bulk_out+0x5c>
		size = memory_size - addr;
    5602:	1b1c      	subs	r4, r3, r4
		stage = MSC_ERROR;
    5604:	2301      	movs	r3, #1
    5606:	702b      	strb	r3, [r5, #0]
		usb_ep_set_stall(mass_ep_data[MSD_OUT_EP_IDX].ep_addr);
    5608:	4b1c      	ldr	r3, [pc, #112]	; (567c <mass_storage_bulk_out+0x2e8>)
    560a:	7918      	ldrb	r0, [r3, #4]
		size = memory_size - addr;
    560c:	b2a4      	uxth	r4, r4
		usb_ep_set_stall(mass_ep_data[MSD_OUT_EP_IDX].ep_addr);
    560e:	f7ff f93d 	bl	488c <usb_ep_set_stall>
		LOG_WRN("Stall OUT endpoint");
    5612:	e7dc      	b.n	55ce <mass_storage_bulk_out+0x23a>
		page[addr % BLOCK_SIZE + i] = buf[i];
    5614:	f819 0002 	ldrb.w	r0, [r9, r2]
    5618:	f801 0b01 	strb.w	r0, [r1], #1
	for (int i = 0; i < size; i++) {
    561c:	3201      	adds	r2, #1
    561e:	e7dc      	b.n	55da <mass_storage_bulk_out+0x246>
	addr += size;
    5620:	6833      	ldr	r3, [r6, #0]
    5622:	4423      	add	r3, r4
    5624:	6033      	str	r3, [r6, #0]
	length -= size;
    5626:	4b1e      	ldr	r3, [pc, #120]	; (56a0 <mass_storage_bulk_out+0x30c>)
    5628:	6819      	ldr	r1, [r3, #0]
    562a:	1b09      	subs	r1, r1, r4
    562c:	6019      	str	r1, [r3, #0]
	csw.DataResidue -= size;
    562e:	4b09      	ldr	r3, [pc, #36]	; (5654 <mass_storage_bulk_out+0x2c0>)
    5630:	689a      	ldr	r2, [r3, #8]
    5632:	1b14      	subs	r4, r2, r4
    5634:	609c      	str	r4, [r3, #8]
	if ((!length) || (stage != MSC_PROCESS_CBW)) {
    5636:	782a      	ldrb	r2, [r5, #0]
    5638:	b111      	cbz	r1, 5640 <mass_storage_bulk_out+0x2ac>
    563a:	2a02      	cmp	r2, #2
    563c:	f43f aed8 	beq.w	53f0 <mass_storage_bulk_out+0x5c>
		csw.Status = (stage == MSC_ERROR) ? CSW_FAILED : CSW_PASSED;
    5640:	1e51      	subs	r1, r2, #1
    5642:	424a      	negs	r2, r1
    5644:	414a      	adcs	r2, r1
		csw.Status = CSW_ERROR;
    5646:	731a      	strb	r2, [r3, #12]
    5648:	e728      	b.n	549c <mass_storage_bulk_out+0x108>
    564a:	bf00      	nop
    564c:	200036b0 	.word	0x200036b0
    5650:	20001bc5 	.word	0x20001bc5
    5654:	20001976 	.word	0x20001976
    5658:	0000b634 	.word	0x0000b634
    565c:	0000b674 	.word	0x0000b674
    5660:	0000bac6 	.word	0x0000bac6
    5664:	20000514 	.word	0x20000514
    5668:	20001957 	.word	0x20001957
    566c:	43425355 	.word	0x43425355
    5670:	0000bada 	.word	0x0000bada
    5674:	0000b694 	.word	0x0000b694
    5678:	200019c4 	.word	0x200019c4
    567c:	200036d0 	.word	0x200036d0
    5680:	0000b6a6 	.word	0x0000b6a6
    5684:	20000488 	.word	0x20000488
    5688:	20000484 	.word	0x20000484
    568c:	20000510 	.word	0x20000510
    5690:	200019c5 	.word	0x200019c5
    5694:	0000b9a5 	.word	0x0000b9a5
    5698:	20000490 	.word	0x20000490
    569c:	2000048c 	.word	0x2000048c
    56a0:	200004a0 	.word	0x200004a0
	if ((addr + size) > memory_size) {
    56a4:	4e34      	ldr	r6, [pc, #208]	; (5778 <mass_storage_bulk_out+0x3e4>)
    56a6:	4b35      	ldr	r3, [pc, #212]	; (577c <mass_storage_bulk_out+0x3e8>)
			memoryVerify(bo_buf, bytes_read);
    56a8:	9a01      	ldr	r2, [sp, #4]
	if ((addr + size) > memory_size) {
    56aa:	6834      	ldr	r4, [r6, #0]
    56ac:	681b      	ldr	r3, [r3, #0]
    56ae:	fa14 f182 	uxtah	r1, r4, r2
    56b2:	4299      	cmp	r1, r3
    56b4:	d822      	bhi.n	56fc <mass_storage_bulk_out+0x368>
			memoryVerify(bo_buf, bytes_read);
    56b6:	b294      	uxth	r4, r2
	if (!(addr % BLOCK_SIZE)) {
    56b8:	6832      	ldr	r2, [r6, #0]
    56ba:	f3c2 0308 	ubfx	r3, r2, #0, #9
    56be:	b9b3      	cbnz	r3, 56ee <mass_storage_bulk_out+0x35a>
		if (disk_access_read(disk_pdrv, page, addr/BLOCK_SIZE, 1)) {
    56c0:	2301      	movs	r3, #1
    56c2:	0a52      	lsrs	r2, r2, #9
    56c4:	492e      	ldr	r1, [pc, #184]	; (5780 <mass_storage_bulk_out+0x3ec>)
    56c6:	482f      	ldr	r0, [pc, #188]	; (5784 <mass_storage_bulk_out+0x3f0>)
    56c8:	f7fe fbb4 	bl	3e34 <disk_access_read>
    56cc:	b178      	cbz	r0, 56ee <mass_storage_bulk_out+0x35a>
			LOG_ERR("---- Disk Read Error %d", addr/BLOCK_SIZE);
    56ce:	2301      	movs	r3, #1
    56d0:	f04f 0200 	mov.w	r2, #0
    56d4:	f363 0207 	bfi	r2, r3, #0, #8
    56d8:	492b      	ldr	r1, [pc, #172]	; (5788 <mass_storage_bulk_out+0x3f4>)
    56da:	4b2c      	ldr	r3, [pc, #176]	; (578c <mass_storage_bulk_out+0x3f8>)
    56dc:	482c      	ldr	r0, [pc, #176]	; (5790 <mass_storage_bulk_out+0x3fc>)
    56de:	1a5b      	subs	r3, r3, r1
    56e0:	6831      	ldr	r1, [r6, #0]
    56e2:	08db      	lsrs	r3, r3, #3
    56e4:	f363 128f 	bfi	r2, r3, #6, #10
    56e8:	0a49      	lsrs	r1, r1, #9
    56ea:	f7fd fbab 	bl	2e44 <log_1>
		if (page[addr%BLOCK_SIZE + n] != buf[n]) {
    56ee:	6833      	ldr	r3, [r6, #0]
    56f0:	4a23      	ldr	r2, [pc, #140]	; (5780 <mass_storage_bulk_out+0x3ec>)
    56f2:	f3c3 0108 	ubfx	r1, r3, #0, #9
    56f6:	440a      	add	r2, r1
    56f8:	2100      	movs	r1, #0
    56fa:	e009      	b.n	5710 <mass_storage_bulk_out+0x37c>
		size = memory_size - addr;
    56fc:	1b1c      	subs	r4, r3, r4
		stage = MSC_ERROR;
    56fe:	2301      	movs	r3, #1
    5700:	702b      	strb	r3, [r5, #0]
		usb_ep_set_stall(mass_ep_data[MSD_OUT_EP_IDX].ep_addr);
    5702:	4b24      	ldr	r3, [pc, #144]	; (5794 <mass_storage_bulk_out+0x400>)
    5704:	7918      	ldrb	r0, [r3, #4]
		size = memory_size - addr;
    5706:	b2a4      	uxth	r4, r4
		usb_ep_set_stall(mass_ep_data[MSD_OUT_EP_IDX].ep_addr);
    5708:	f7ff f8c0 	bl	488c <usb_ep_set_stall>
		LOG_WRN("Stall OUT endpoint");
    570c:	e7d4      	b.n	56b8 <mass_storage_bulk_out+0x324>
	for (n = 0U; n < size; n++) {
    570e:	3101      	adds	r1, #1
    5710:	42a1      	cmp	r1, r4
    5712:	d208      	bcs.n	5726 <mass_storage_bulk_out+0x392>
		if (page[addr%BLOCK_SIZE + n] != buf[n]) {
    5714:	f812 cb01 	ldrb.w	ip, [r2], #1
    5718:	f819 0b01 	ldrb.w	r0, [r9], #1
    571c:	4584      	cmp	ip, r0
    571e:	d0f6      	beq.n	570e <mass_storage_bulk_out+0x37a>
			memOK = false;
    5720:	4a1d      	ldr	r2, [pc, #116]	; (5798 <mass_storage_bulk_out+0x404>)
    5722:	2100      	movs	r1, #0
    5724:	7011      	strb	r1, [r2, #0]
	addr += size;
    5726:	4423      	add	r3, r4
    5728:	6033      	str	r3, [r6, #0]
	length -= size;
    572a:	4b1c      	ldr	r3, [pc, #112]	; (579c <mass_storage_bulk_out+0x408>)
    572c:	681a      	ldr	r2, [r3, #0]
    572e:	1b12      	subs	r2, r2, r4
    5730:	601a      	str	r2, [r3, #0]
	csw.DataResidue -= size;
    5732:	4b1b      	ldr	r3, [pc, #108]	; (57a0 <mass_storage_bulk_out+0x40c>)
    5734:	6899      	ldr	r1, [r3, #8]
    5736:	1b0c      	subs	r4, r1, r4
    5738:	609c      	str	r4, [r3, #8]
	if (!length || (stage != MSC_PROCESS_CBW)) {
    573a:	b11a      	cbz	r2, 5744 <mass_storage_bulk_out+0x3b0>
    573c:	782a      	ldrb	r2, [r5, #0]
    573e:	2a02      	cmp	r2, #2
    5740:	f43f ae56 	beq.w	53f0 <mass_storage_bulk_out+0x5c>
		csw.Status = (memOK && (stage == MSC_PROCESS_CBW)) ?
    5744:	4a14      	ldr	r2, [pc, #80]	; (5798 <mass_storage_bulk_out+0x404>)
						CSW_PASSED : CSW_FAILED;
    5746:	7812      	ldrb	r2, [r2, #0]
    5748:	b122      	cbz	r2, 5754 <mass_storage_bulk_out+0x3c0>
    574a:	782a      	ldrb	r2, [r5, #0]
    574c:	3a02      	subs	r2, #2
    574e:	bf18      	it	ne
    5750:	2201      	movne	r2, #1
    5752:	e778      	b.n	5646 <mass_storage_bulk_out+0x2b2>
    5754:	2201      	movs	r2, #1
    5756:	e776      	b.n	5646 <mass_storage_bulk_out+0x2b2>
			LOG_ERR("> BO - PROC_CBW default <<ERROR!!!>>");
    5758:	2301      	movs	r3, #1
    575a:	f04f 0100 	mov.w	r1, #0
    575e:	f363 0107 	bfi	r1, r3, #0, #8
    5762:	4a09      	ldr	r2, [pc, #36]	; (5788 <mass_storage_bulk_out+0x3f4>)
    5764:	4b09      	ldr	r3, [pc, #36]	; (578c <mass_storage_bulk_out+0x3f8>)
    5766:	480f      	ldr	r0, [pc, #60]	; (57a4 <mass_storage_bulk_out+0x410>)
    5768:	1a9b      	subs	r3, r3, r2
    576a:	08db      	lsrs	r3, r3, #3
    576c:	f363 118f 	bfi	r1, r3, #6, #10
    5770:	e63c      	b.n	53ec <mass_storage_bulk_out+0x58>
}
    5772:	b01d      	add	sp, #116	; 0x74
    5774:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5778:	20000484 	.word	0x20000484
    577c:	20000510 	.word	0x20000510
    5780:	200019c5 	.word	0x200019c5
    5784:	0000b9a5 	.word	0x0000b9a5
    5788:	0000b634 	.word	0x0000b634
    578c:	0000b674 	.word	0x0000b674
    5790:	0000baf1 	.word	0x0000baf1
    5794:	200036d0 	.word	0x200036d0
    5798:	200019c4 	.word	0x200019c4
    579c:	200004a0 	.word	0x200004a0
    57a0:	20001976 	.word	0x20001976
    57a4:	0000bb09 	.word	0x0000bb09

000057a8 <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
    57a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    57aa:	4c15      	ldr	r4, [pc, #84]	; (5800 <sys_rand32_get+0x58>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    57ac:	4d15      	ldr	r5, [pc, #84]	; (5804 <sys_rand32_get+0x5c>)
    57ae:	6822      	ldr	r2, [r4, #0]
    57b0:	9201      	str	r2, [sp, #4]
    57b2:	f3bf 8f5b 	dmb	ish
    57b6:	6828      	ldr	r0, [r5, #0]
    57b8:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
    57bc:	b960      	cbnz	r0, 57d8 <sys_rand32_get+0x30>
    57be:	4812      	ldr	r0, [pc, #72]	; (5808 <sys_rand32_get+0x60>)
    57c0:	f003 feae 	bl	9520 <z_impl_device_get_binding>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    57c4:	f3bf 8f5b 	dmb	ish
    57c8:	e855 3f00 	ldrex	r3, [r5]
    57cc:	e845 0200 	strex	r2, r0, [r5]
    57d0:	2a00      	cmp	r2, #0
    57d2:	d1f9      	bne.n	57c8 <sys_rand32_get+0x20>
    57d4:	f3bf 8f5b 	dmb	ish
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->driver_api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    57d8:	6843      	ldr	r3, [r0, #4]
    57da:	2204      	movs	r2, #4
    57dc:	681b      	ldr	r3, [r3, #0]
    57de:	4669      	mov	r1, sp
    57e0:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    57e2:	2800      	cmp	r0, #0
    57e4:	da02      	bge.n	57ec <sys_rand32_get+0x44>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    57e6:	f001 fc4f 	bl	7088 <z_timer_cycle_get_32>
    57ea:	9000      	str	r0, [sp, #0]
	}

	return random_num;
}
    57ec:	9a01      	ldr	r2, [sp, #4]
    57ee:	6823      	ldr	r3, [r4, #0]
    57f0:	9800      	ldr	r0, [sp, #0]
    57f2:	429a      	cmp	r2, r3
    57f4:	d001      	beq.n	57fa <sys_rand32_get+0x52>
    57f6:	f005 fc11 	bl	b01c <_StackCheckHandler>
    57fa:	b003      	add	sp, #12
    57fc:	bd30      	pop	{r4, r5, pc}
    57fe:	bf00      	nop
    5800:	200036b0 	.word	0x200036b0
    5804:	20000518 	.word	0x20000518
    5808:	0000bcdd 	.word	0x0000bcdd

0000580c <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    580c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    580e:	4e0d      	ldr	r6, [pc, #52]	; (5844 <console_out+0x38>)
    5810:	4d0d      	ldr	r5, [pc, #52]	; (5848 <console_out+0x3c>)
    5812:	6832      	ldr	r2, [r6, #0]
    5814:	9201      	str	r2, [sp, #4]
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    5816:	280a      	cmp	r0, #10
{
    5818:	4604      	mov	r4, r0
	if ('\n' == c) {
    581a:	d104      	bne.n	5826 <console_out+0x1a>
    581c:	6828      	ldr	r0, [r5, #0]
    581e:	6843      	ldr	r3, [r0, #4]
    5820:	210d      	movs	r1, #13
    5822:	685b      	ldr	r3, [r3, #4]
    5824:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    5826:	6828      	ldr	r0, [r5, #0]
    5828:	6843      	ldr	r3, [r0, #4]
    582a:	b2e1      	uxtb	r1, r4
    582c:	685b      	ldr	r3, [r3, #4]
    582e:	4798      	blx	r3

	return c;
}
    5830:	9a01      	ldr	r2, [sp, #4]
    5832:	6833      	ldr	r3, [r6, #0]
    5834:	429a      	cmp	r2, r3
    5836:	4620      	mov	r0, r4
    5838:	d001      	beq.n	583e <console_out+0x32>
    583a:	f005 fbef 	bl	b01c <_StackCheckHandler>
    583e:	b002      	add	sp, #8
    5840:	bd70      	pop	{r4, r5, r6, pc}
    5842:	bf00      	nop
    5844:	200036b0 	.word	0x200036b0
    5848:	2000051c 	.word	0x2000051c

0000584c <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    584c:	b513      	push	{r0, r1, r4, lr}
    584e:	4c09      	ldr	r4, [pc, #36]	; (5874 <uart_console_hook_install+0x28>)
	__stdout_hook_install(console_out);
    5850:	4809      	ldr	r0, [pc, #36]	; (5878 <uart_console_hook_install+0x2c>)
{
    5852:	6823      	ldr	r3, [r4, #0]
    5854:	9301      	str	r3, [sp, #4]
	__stdout_hook_install(console_out);
    5856:	f002 ff37 	bl	86c8 <__stdout_hook_install>
	__printk_hook_install(console_out);
    585a:	9a01      	ldr	r2, [sp, #4]
    585c:	6823      	ldr	r3, [r4, #0]
    585e:	429a      	cmp	r2, r3
    5860:	d001      	beq.n	5866 <uart_console_hook_install+0x1a>
    5862:	f005 fbdb 	bl	b01c <_StackCheckHandler>
    5866:	4804      	ldr	r0, [pc, #16]	; (5878 <uart_console_hook_install+0x2c>)
}
    5868:	b002      	add	sp, #8
    586a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
    586e:	f7fb b97f 	b.w	b70 <__printk_hook_install>
    5872:	bf00      	nop
    5874:	200036b0 	.word	0x200036b0
    5878:	0000580d 	.word	0x0000580d

0000587c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    587c:	b513      	push	{r0, r1, r4, lr}
    587e:	4c0a      	ldr	r4, [pc, #40]	; (58a8 <uart_console_init+0x2c>)
    5880:	480a      	ldr	r0, [pc, #40]	; (58ac <uart_console_init+0x30>)
    5882:	6823      	ldr	r3, [r4, #0]
    5884:	9301      	str	r3, [sp, #4]
    5886:	f003 fe4b 	bl	9520 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    588a:	4b09      	ldr	r3, [pc, #36]	; (58b0 <uart_console_init+0x34>)
    588c:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    588e:	f7ff ffdd 	bl	584c <uart_console_hook_install>

	return 0;
}
    5892:	9a01      	ldr	r2, [sp, #4]
    5894:	6823      	ldr	r3, [r4, #0]
    5896:	429a      	cmp	r2, r3
    5898:	f04f 0000 	mov.w	r0, #0
    589c:	d001      	beq.n	58a2 <uart_console_init+0x26>
    589e:	f005 fbbd 	bl	b01c <_StackCheckHandler>
    58a2:	b002      	add	sp, #8
    58a4:	bd10      	pop	{r4, pc}
    58a6:	bf00      	nop
    58a8:	200036b0 	.word	0x200036b0
    58ac:	0000b94b 	.word	0x0000b94b
    58b0:	2000051c 	.word	0x2000051c

000058b4 <m16src_stop>:
		return -EINPROGRESS;
	}
}

static int m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    58b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    58b6:	4a1e      	ldr	r2, [pc, #120]	; (5930 <m16src_stop+0x7c>)
    58b8:	6813      	ldr	r3, [r2, #0]
    58ba:	9301      	str	r3, [sp, #4]
	__asm__ volatile(
    58bc:	f04f 0320 	mov.w	r3, #32
    58c0:	f3ef 8111 	mrs	r1, BASEPRI
    58c4:	f383 8811 	msr	BASEPRI, r3
    58c8:	f3bf 8f6f 	isb	sy
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    58cc:	4d19      	ldr	r5, [pc, #100]	; (5934 <m16src_stop+0x80>)
    58ce:	782b      	ldrb	r3, [r5, #0]
    58d0:	b95b      	cbnz	r3, 58ea <m16src_stop+0x36>
	__asm__ volatile(
    58d2:	f381 8811 	msr	BASEPRI, r1
    58d6:	f3bf 8f6f 	isb	sy
		irq_unlock(imask);
		return -EALREADY;
    58da:	f06f 0044 	mvn.w	r0, #68	; 0x44

	/* release resource guard */
	m16src_grd = 0U;

	return 0;
}
    58de:	9901      	ldr	r1, [sp, #4]
    58e0:	6813      	ldr	r3, [r2, #0]
    58e2:	4299      	cmp	r1, r3
    58e4:	d021      	beq.n	592a <m16src_stop+0x76>
    58e6:	f005 fb99 	bl	b01c <_StackCheckHandler>
	if (--m16src_ref) {
    58ea:	3b01      	subs	r3, #1
    58ec:	b2db      	uxtb	r3, r3
    58ee:	702b      	strb	r3, [r5, #0]
    58f0:	b133      	cbz	r3, 5900 <m16src_stop+0x4c>
    58f2:	f381 8811 	msr	BASEPRI, r1
    58f6:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    58fa:	f06f 000f 	mvn.w	r0, #15
    58fe:	e7ee      	b.n	58de <m16src_stop+0x2a>
	if (m16src_grd) {
    5900:	4b0d      	ldr	r3, [pc, #52]	; (5938 <m16src_stop+0x84>)
    5902:	7818      	ldrb	r0, [r3, #0]
    5904:	2401      	movs	r4, #1
    5906:	b138      	cbz	r0, 5918 <m16src_stop+0x64>
		m16src_ref++;
    5908:	702c      	strb	r4, [r5, #0]
    590a:	f381 8811 	msr	BASEPRI, r1
    590e:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    5912:	f06f 000a 	mvn.w	r0, #10
    5916:	e7e2      	b.n	58de <m16src_stop+0x2a>
	m16src_grd = 1U;
    5918:	701c      	strb	r4, [r3, #0]
    591a:	f381 8811 	msr	BASEPRI, r1
    591e:	f3bf 8f6f 	isb	sy
    return ((uint32_t )NRF_CLOCK + task);
}

__STATIC_INLINE void nrf_clock_task_trigger(nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    5922:	4906      	ldr	r1, [pc, #24]	; (593c <m16src_stop+0x88>)
    5924:	600c      	str	r4, [r1, #0]
	m16src_grd = 0U;
    5926:	7018      	strb	r0, [r3, #0]
	return 0;
    5928:	e7d9      	b.n	58de <m16src_stop+0x2a>
}
    592a:	b003      	add	sp, #12
    592c:	bd30      	pop	{r4, r5, pc}
    592e:	bf00      	nop
    5930:	200036b0 	.word	0x200036b0
    5934:	20001bc8 	.word	0x20001bc8
    5938:	20001bc7 	.word	0x20001bc7
    593c:	40000004 	.word	0x40000004

00005940 <m16src_start>:
{
    5940:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5944:	4e33      	ldr	r6, [pc, #204]	; (5a14 <m16src_start+0xd4>)
    5946:	6833      	ldr	r3, [r6, #0]
    5948:	9301      	str	r3, [sp, #4]
	__asm__ volatile(
    594a:	f04f 0220 	mov.w	r2, #32
    594e:	f3ef 8311 	mrs	r3, BASEPRI
    5952:	f382 8811 	msr	BASEPRI, r2
    5956:	f3bf 8f6f 	isb	sy
	if (m16src_ref++) {
    595a:	4a2f      	ldr	r2, [pc, #188]	; (5a18 <m16src_start+0xd8>)
    595c:	7810      	ldrb	r0, [r2, #0]
    595e:	1c44      	adds	r4, r0, #1
    5960:	7014      	strb	r4, [r2, #0]
    5962:	b180      	cbz	r0, 5986 <m16src_start+0x46>
	__asm__ volatile(
    5964:	f383 8811 	msr	BASEPRI, r3
    5968:	f3bf 8f6f 	isb	sy
	if ((NRF_CLOCK->HFCLKSTAT & stat) == stat) {
    596c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5970:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    5974:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
		return -EINPROGRESS;
    5978:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    597c:	bf0c      	ite	eq
    597e:	2000      	moveq	r0, #0
    5980:	f06f 0043 	mvnne.w	r0, #67	; 0x43
    5984:	e00c      	b.n	59a0 <m16src_start+0x60>
	if (m16src_grd) {
    5986:	4d25      	ldr	r5, [pc, #148]	; (5a1c <m16src_start+0xdc>)
    5988:	f895 8000 	ldrb.w	r8, [r5]
    598c:	f1b8 0f00 	cmp.w	r8, #0
    5990:	d00c      	beq.n	59ac <m16src_start+0x6c>
		m16src_ref--;
    5992:	7010      	strb	r0, [r2, #0]
    5994:	f383 8811 	msr	BASEPRI, r3
    5998:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    599c:	f06f 000a 	mvn.w	r0, #10
}
    59a0:	9a01      	ldr	r2, [sp, #4]
    59a2:	6833      	ldr	r3, [r6, #0]
    59a4:	429a      	cmp	r2, r3
    59a6:	d032      	beq.n	5a0e <m16src_start+0xce>
    59a8:	f005 fb38 	bl	b01c <_StackCheckHandler>
	m16src_grd = 1U;
    59ac:	2701      	movs	r7, #1
    59ae:	702f      	strb	r7, [r5, #0]
    59b0:	f383 8811 	msr	BASEPRI, r3
    59b4:	f3bf 8f6f 	isb	sy
	if (blocking) {
    59b8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    59bc:	b319      	cbz	r1, 5a06 <m16src_start+0xc6>
		irq_disable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
    59be:	4640      	mov	r0, r8
    59c0:	f001 fdd2 	bl	7568 <z_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    59c4:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    59c8:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    NRF_CLOCK->INTENSET = int_mask;
    59cc:	f8c4 7304 	str.w	r7, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    59d0:	6027      	str	r7, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    59d2:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    59d6:	b192      	cbz	r2, 59fe <m16src_start+0xbe>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    59d8:	2200      	movs	r2, #0
    59da:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    59de:	4a10      	ldr	r2, [pc, #64]	; (5a20 <m16src_start+0xe0>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    59e0:	f013 0f01 	tst.w	r3, #1
    59e4:	f04f 0301 	mov.w	r3, #1
    NRF_CLOCK->INTENCLR = int_mask;
    59e8:	bf08      	it	eq
    59ea:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
    59ee:	2000      	movs	r0, #0
    59f0:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    59f4:	f001 fd9a 	bl	752c <z_arch_irq_enable>
	m16src_grd = 0U;
    59f8:	2300      	movs	r3, #0
    59fa:	702b      	strb	r3, [r5, #0]
    59fc:	e7b6      	b.n	596c <m16src_start+0x2c>
			__WFE();
    59fe:	bf20      	wfe
			__SEV();
    5a00:	bf40      	sev
			__WFE();
    5a02:	bf20      	wfe
    5a04:	e7e5      	b.n	59d2 <m16src_start+0x92>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    5a06:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    5a0a:	6027      	str	r7, [r4, #0]
    5a0c:	e7f4      	b.n	59f8 <m16src_start+0xb8>
}
    5a0e:	b002      	add	sp, #8
    5a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a14:	200036b0 	.word	0x200036b0
    5a18:	20001bc8 	.word	0x20001bc8
    5a1c:	20001bc7 	.word	0x20001bc7
    5a20:	e000e100 	.word	0xe000e100

00005a24 <clock_control_init>:
	}
#endif
}

static int clock_control_init(struct device *dev)
{
    5a24:	b513      	push	{r0, r1, r4, lr}
    5a26:	4c0a      	ldr	r4, [pc, #40]	; (5a50 <clock_control_init+0x2c>)
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(DT_NORDIC_NRF_CLOCK_0_IRQ_0,
    5a28:	2200      	movs	r2, #0
{
    5a2a:	6823      	ldr	r3, [r4, #0]
    5a2c:	9301      	str	r3, [sp, #4]
	IRQ_CONNECT(DT_NORDIC_NRF_CLOCK_0_IRQ_0,
    5a2e:	4610      	mov	r0, r2
    5a30:	2101      	movs	r1, #1
    5a32:	f001 fdd7 	bl	75e4 <z_irq_priority_set>
		    DT_NORDIC_NRF_CLOCK_0_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
    5a36:	2000      	movs	r0, #0
    5a38:	f001 fd78 	bl	752c <z_arch_irq_enable>

	return 0;
}
    5a3c:	9a01      	ldr	r2, [sp, #4]
    5a3e:	6823      	ldr	r3, [r4, #0]
    5a40:	429a      	cmp	r2, r3
    5a42:	f04f 0000 	mov.w	r0, #0
    5a46:	d001      	beq.n	5a4c <clock_control_init+0x28>
    5a48:	f005 fae8 	bl	b01c <_StackCheckHandler>
    5a4c:	b002      	add	sp, #8
    5a4e:	bd10      	pop	{r4, pc}
    5a50:	200036b0 	.word	0x200036b0

00005a54 <k32src_start>:
{
    5a54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5a56:	4c2d      	ldr	r4, [pc, #180]	; (5b0c <k32src_start+0xb8>)
    5a58:	6823      	ldr	r3, [r4, #0]
    5a5a:	9301      	str	r3, [sp, #4]
	__asm__ volatile(
    5a5c:	f04f 0220 	mov.w	r2, #32
    5a60:	f3ef 8311 	mrs	r3, BASEPRI
    5a64:	f382 8811 	msr	BASEPRI, r2
    5a68:	f3bf 8f6f 	isb	sy
	if (k32src_initialized) {
    5a6c:	4e28      	ldr	r6, [pc, #160]	; (5b10 <k32src_start+0xbc>)
    5a6e:	7832      	ldrb	r2, [r6, #0]
    5a70:	b1c2      	cbz	r2, 5aa4 <k32src_start+0x50>
	__asm__ volatile(
    5a72:	f383 8811 	msr	BASEPRI, r3
    5a76:	f3bf 8f6f 	isb	sy
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
    5a7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5a7e:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
    5a82:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
    5a86:	f003 0303 	and.w	r3, r3, #3
    5a8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
		return -EINPROGRESS;
    5a8e:	4393      	bics	r3, r2
}
    5a90:	9a01      	ldr	r2, [sp, #4]
    5a92:	6823      	ldr	r3, [r4, #0]
    5a94:	bf14      	ite	ne
    5a96:	f06f 0043 	mvnne.w	r0, #67	; 0x43
    5a9a:	2000      	moveq	r0, #0
    5a9c:	429a      	cmp	r2, r3
    5a9e:	d033      	beq.n	5b08 <k32src_start+0xb4>
    5aa0:	f005 fabc 	bl	b01c <_StackCheckHandler>
	k32src_initialized = 1U;
    5aa4:	2501      	movs	r5, #1
    5aa6:	7035      	strb	r5, [r6, #0]
    5aa8:	f383 8811 	msr	BASEPRI, r3
    5aac:	f3bf 8f6f 	isb	sy
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    5ab0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5ab4:	4f17      	ldr	r7, [pc, #92]	; (5b14 <k32src_start+0xc0>)
    5ab6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    NRF_CLOCK->INTENSET = int_mask;
    5aba:	2602      	movs	r6, #2
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    5abc:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    5ac0:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    5ac4:	f011 0103 	ands.w	r1, r1, #3
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    5ac8:	603d      	str	r5, [r7, #0]
    NRF_CLOCK->INTENCLR = int_mask;
    5aca:	f04f 0718 	mov.w	r7, #24
    5ace:	f8c3 7308 	str.w	r7, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    5ad2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    5ad6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    5ada:	d1ce      	bne.n	5a7a <k32src_start+0x26>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    5adc:	2210      	movs	r2, #16
    5ade:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    NRF_CLOCK->INTENSET = int_mask;
    5ae2:	f8c3 7304 	str.w	r7, [r3, #772]	; 0x304
		if ((NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) == 0) {
    5ae6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    5aea:	03d2      	lsls	r2, r2, #15
    5aec:	d402      	bmi.n	5af4 <k32src_start+0xa0>
    5aee:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
			goto lf_already_started;
    5af2:	e7c2      	b.n	5a7a <k32src_start+0x26>
    5af4:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		err = m16src_start(dev, false);
    5af8:	f7ff ff22 	bl	5940 <m16src_start>
		if (!err) {
    5afc:	2800      	cmp	r0, #0
    5afe:	d1bc      	bne.n	5a7a <k32src_start+0x26>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5b00:	4b05      	ldr	r3, [pc, #20]	; (5b18 <k32src_start+0xc4>)
    5b02:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
    5b06:	e7b8      	b.n	5a7a <k32src_start+0x26>
}
    5b08:	b003      	add	sp, #12
    5b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5b0c:	200036b0 	.word	0x200036b0
    5b10:	20001bc6 	.word	0x20001bc6
    5b14:	40000008 	.word	0x40000008
    5b18:	e000e100 	.word	0xe000e100

00005b1c <nrf_power_clock_isr>:
{
    5b1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5b20:	4c56      	ldr	r4, [pc, #344]	; (5c7c <nrf_power_clock_isr+0x160>)
    return (bool)*(volatile uint32_t *)((uint8_t *)NRF_POWER + (uint32_t)event);
    5b22:	4e57      	ldr	r6, [pc, #348]	; (5c80 <nrf_power_clock_isr+0x164>)
    5b24:	6823      	ldr	r3, [r4, #0]
    5b26:	9303      	str	r3, [sp, #12]
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    5b28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    5b2c:	4681      	mov	r9, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    5b2e:	f8d3 a108 	ldr.w	sl, [r3, #264]	; 0x108
	hf_intenset = ((NRF_CLOCK->INTENSET &
    5b32:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    5b36:	f8d3 e100 	ldr.w	lr, [r3, #256]	; 0x100
	lf_intenset = ((NRF_CLOCK->INTENSET &
    5b3a:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    5b3e:	f8d3 c104 	ldr.w	ip, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    5b42:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    5b46:	f8d3 5110 	ldr.w	r5, [r3, #272]	; 0x110
    5b4a:	f8d6 8000 	ldr.w	r8, [r6]
    5b4e:	68b7      	ldr	r7, [r6, #8]
    5b50:	3604      	adds	r6, #4
    5b52:	3500      	adds	r5, #0
	hf_intenset = ((NRF_CLOCK->INTENSET &
    5b54:	f002 0201 	and.w	r2, r2, #1
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    5b58:	bf18      	it	ne
    5b5a:	2501      	movne	r5, #1
    5b5c:	6836      	ldr	r6, [r6, #0]
	if (pof) {
    5b5e:	f1ba 0f00 	cmp.w	sl, #0
    5b62:	d003      	beq.n	5b6c <nrf_power_clock_isr+0x50>
		NRF_POWER->EVENTS_POFWARN = 0;
    5b64:	f04f 0a00 	mov.w	sl, #0
    5b68:	f8c3 a108 	str.w	sl, [r3, #264]	; 0x108
	if (hf) {
    5b6c:	f1be 0f00 	cmp.w	lr, #0
    5b70:	d071      	beq.n	5c56 <nrf_power_clock_isr+0x13a>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    5b72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5b76:	f04f 0e00 	mov.w	lr, #0
    5b7a:	f8c3 e100 	str.w	lr, [r3, #256]	; 0x100
	if (hf_intenset && (hf || ((NRF_CLOCK->HFCLKSTAT &
    5b7e:	b15a      	cbz	r2, 5b98 <nrf_power_clock_isr+0x7c>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    5b80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    5b84:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 5c84 <nrf_power_clock_isr+0x168>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    5b88:	2201      	movs	r2, #1
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    5b8a:	f04f 0a02 	mov.w	sl, #2
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    5b8e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    5b92:	f8ce a000 	str.w	sl, [lr]
		NRF_CLOCK->TASKS_CAL = 1;
    5b96:	611a      	str	r2, [r3, #16]
	if (lf) {
    5b98:	f1bc 0f00 	cmp.w	ip, #0
    5b9c:	d142      	bne.n	5c24 <nrf_power_clock_isr+0x108>
	if (done) {
    5b9e:	b161      	cbz	r1, 5bba <nrf_power_clock_isr+0x9e>
		*(volatile u32_t *)0x40000C34 = 0x00000000;
    5ba0:	4b38      	ldr	r3, [pc, #224]	; (5c84 <nrf_power_clock_isr+0x168>)
		NRF_CLOCK->EVENTS_DONE = 0;
    5ba2:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
		*(volatile u32_t *)0x40000C34 = 0x00000000;
    5ba6:	2100      	movs	r1, #0
    5ba8:	6019      	str	r1, [r3, #0]
		err = m16src_stop(dev, NULL);
    5baa:	4648      	mov	r0, r9
		NRF_CLOCK->EVENTS_DONE = 0;
    5bac:	f8ca 110c 	str.w	r1, [sl, #268]	; 0x10c
		err = m16src_stop(dev, NULL);
    5bb0:	f7ff fe80 	bl	58b4 <m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    5bb4:	2301      	movs	r3, #1
    5bb6:	f8ca 3014 	str.w	r3, [sl, #20]
	if (ctto) {
    5bba:	b175      	cbz	r5, 5bda <nrf_power_clock_isr+0xbe>
		NRF_CLOCK->EVENTS_CTTO = 0;
    5bbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5bc0:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    5bc2:	2501      	movs	r5, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    5bc4:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = m16src_start(dev, false);
    5bc8:	4648      	mov	r0, r9
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    5bca:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		err = m16src_start(dev, false);
    5bce:	f7ff feb7 	bl	5940 <m16src_start>
		if (!err) {
    5bd2:	b910      	cbnz	r0, 5bda <nrf_power_clock_isr+0xbe>
    5bd4:	4b2c      	ldr	r3, [pc, #176]	; (5c88 <nrf_power_clock_isr+0x16c>)
    5bd6:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	if (usb_detected) {
    5bda:	f1b8 0f00 	cmp.w	r8, #0
    5bde:	d009      	beq.n	5bf4 <nrf_power_clock_isr+0xd8>
    *((volatile uint32_t *)((uint8_t *)NRF_POWER + (uint32_t)event)) = 0x0UL;
    5be0:	4b27      	ldr	r3, [pc, #156]	; (5c80 <nrf_power_clock_isr+0x164>)
    5be2:	2200      	movs	r2, #0
    5be4:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_POWER + (uint32_t)event));
    5be6:	681b      	ldr	r3, [r3, #0]
    5be8:	9300      	str	r3, [sp, #0]
	usb_dc_nrfx_power_event_callback(event);
    5bea:	f44f 708e 	mov.w	r0, #284	; 0x11c
    (void)dummy;
    5bee:	9b00      	ldr	r3, [sp, #0]
    5bf0:	f000 fda2 	bl	6738 <usb_dc_nrfx_power_event_callback>
	if (usb_pwr_rdy) {
    5bf4:	b14f      	cbz	r7, 5c0a <nrf_power_clock_isr+0xee>
    *((volatile uint32_t *)((uint8_t *)NRF_POWER + (uint32_t)event)) = 0x0UL;
    5bf6:	4b25      	ldr	r3, [pc, #148]	; (5c8c <nrf_power_clock_isr+0x170>)
    5bf8:	2200      	movs	r2, #0
    5bfa:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_POWER + (uint32_t)event));
    5bfc:	681b      	ldr	r3, [r3, #0]
    5bfe:	9301      	str	r3, [sp, #4]
	usb_dc_nrfx_power_event_callback(event);
    5c00:	f44f 7092 	mov.w	r0, #292	; 0x124
    (void)dummy;
    5c04:	9b01      	ldr	r3, [sp, #4]
    5c06:	f000 fd97 	bl	6738 <usb_dc_nrfx_power_event_callback>
	if (usb_removed) {
    5c0a:	b386      	cbz	r6, 5c6e <nrf_power_clock_isr+0x152>
    *((volatile uint32_t *)((uint8_t *)NRF_POWER + (uint32_t)event)) = 0x0UL;
    5c0c:	4b20      	ldr	r3, [pc, #128]	; (5c90 <nrf_power_clock_isr+0x174>)
    5c0e:	2200      	movs	r2, #0
    5c10:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_POWER + (uint32_t)event));
    5c12:	681b      	ldr	r3, [r3, #0]
    5c14:	9302      	str	r3, [sp, #8]
    (void)dummy;
    5c16:	9b02      	ldr	r3, [sp, #8]
	usb_dc_nrfx_power_event_callback(event);
    5c18:	9a03      	ldr	r2, [sp, #12]
    5c1a:	6823      	ldr	r3, [r4, #0]
    5c1c:	429a      	cmp	r2, r3
    5c1e:	d013      	beq.n	5c48 <nrf_power_clock_isr+0x12c>
}
    5c20:	f005 f9fc 	bl	b01c <_StackCheckHandler>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    5c24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5c28:	2200      	movs	r2, #0
    5c2a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		if (lf_intenset) {
    5c2e:	0782      	lsls	r2, r0, #30
    5c30:	d5b5      	bpl.n	5b9e <nrf_power_clock_isr+0x82>
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    5c32:	2202      	movs	r2, #2
    5c34:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
			if ((NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) ==
    5c38:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    5c3c:	079b      	lsls	r3, r3, #30
    5c3e:	d1ae      	bne.n	5b9e <nrf_power_clock_isr+0x82>
	if (done) {
    5c40:	2900      	cmp	r1, #0
    5c42:	d0bb      	beq.n	5bbc <nrf_power_clock_isr+0xa0>
				ctto = 1U;
    5c44:	2501      	movs	r5, #1
    5c46:	e7ab      	b.n	5ba0 <nrf_power_clock_isr+0x84>
	usb_dc_nrfx_power_event_callback(event);
    5c48:	f44f 7090 	mov.w	r0, #288	; 0x120
}
    5c4c:	b004      	add	sp, #16
    5c4e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	usb_dc_nrfx_power_event_callback(event);
    5c52:	f000 bd71 	b.w	6738 <usb_dc_nrfx_power_event_callback>
	if (hf_intenset && (hf || ((NRF_CLOCK->HFCLKSTAT &
    5c56:	2a00      	cmp	r2, #0
    5c58:	d09e      	beq.n	5b98 <nrf_power_clock_isr+0x7c>
    5c5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5c5e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    5c62:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
    5c66:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    5c6a:	d195      	bne.n	5b98 <nrf_power_clock_isr+0x7c>
    5c6c:	e788      	b.n	5b80 <nrf_power_clock_isr+0x64>
}
    5c6e:	9a03      	ldr	r2, [sp, #12]
    5c70:	6823      	ldr	r3, [r4, #0]
    5c72:	429a      	cmp	r2, r3
    5c74:	d1d4      	bne.n	5c20 <nrf_power_clock_isr+0x104>
    5c76:	b004      	add	sp, #16
    5c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5c7c:	200036b0 	.word	0x200036b0
    5c80:	4000011c 	.word	0x4000011c
    5c84:	40000c34 	.word	0x40000c34
    5c88:	e000e100 	.word	0xe000e100
    5c8c:	40000124 	.word	0x40000124
    5c90:	40000120 	.word	0x40000120

00005c94 <nrf5_power_usb_power_int_enable>:
		    &_k32src_clock_control_api);

#if defined(CONFIG_USB) && defined(CONFIG_SOC_NRF52840)

void nrf5_power_usb_power_int_enable(bool enable)
{
    5c94:	b507      	push	{r0, r1, r2, lr}
    5c96:	4b0f      	ldr	r3, [pc, #60]	; (5cd4 <nrf5_power_usb_power_int_enable+0x40>)
    5c98:	681a      	ldr	r2, [r3, #0]
    5c9a:	9201      	str	r2, [sp, #4]

	mask = NRF_POWER_INT_USBDETECTED_MASK |
	       NRF_POWER_INT_USBREMOVED_MASK |
	       NRF_POWER_INT_USBPWRRDY_MASK;

	if (enable) {
    5c9c:	f44f 7160 	mov.w	r1, #896	; 0x380
    5ca0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5ca4:	b168      	cbz	r0, 5cc2 <nrf5_power_usb_power_int_enable+0x2e>
    NRF_POWER->INTENSET = int_mask;
    5ca6:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
		nrf_power_int_enable(mask);
		irq_enable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
    5caa:	9a01      	ldr	r2, [sp, #4]
    5cac:	681b      	ldr	r3, [r3, #0]
    5cae:	429a      	cmp	r2, r3
    5cb0:	d001      	beq.n	5cb6 <nrf5_power_usb_power_int_enable+0x22>
	} else {
		nrf_power_int_disable(mask);
	}
}
    5cb2:	f005 f9b3 	bl	b01c <_StackCheckHandler>
		irq_enable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
    5cb6:	2000      	movs	r0, #0
}
    5cb8:	b003      	add	sp, #12
    5cba:	f85d eb04 	ldr.w	lr, [sp], #4
		irq_enable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
    5cbe:	f001 bc35 	b.w	752c <z_arch_irq_enable>
    NRF_POWER->INTENCLR = int_mask;
    5cc2:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
}
    5cc6:	9a01      	ldr	r2, [sp, #4]
    5cc8:	681b      	ldr	r3, [r3, #0]
    5cca:	429a      	cmp	r2, r3
    5ccc:	d1f1      	bne.n	5cb2 <nrf5_power_usb_power_int_enable+0x1e>
    5cce:	b003      	add	sp, #12
    5cd0:	f85d fb04 	ldr.w	pc, [sp], #4
    5cd4:	200036b0 	.word	0x200036b0

00005cd8 <endpoint_ctx>:

	return true;
}

static struct nrf_usbd_ep_ctx *endpoint_ctx(const u8_t ep)
{
    5cd8:	b507      	push	{r0, r1, r2, lr}
    5cda:	4a12      	ldr	r2, [pc, #72]	; (5d24 <endpoint_ctx+0x4c>)
    5cdc:	6813      	ldr	r3, [r2, #0]
    5cde:	9301      	str	r3, [sp, #4]
	if (!ep_is_valid(ep)) {
		return NULL;
	}

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);
    5ce0:	f000 0108 	and.w	r1, r0, #8
    5ce4:	f000 030f 	and.w	r3, r0, #15

	if (NRF_USBD_EPIN_CHECK(ep)) {
    5ce8:	0600      	lsls	r0, r0, #24
    5cea:	d50b      	bpl.n	5d04 <endpoint_ctx+0x2c>
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    5cec:	b991      	cbnz	r1, 5d14 <endpoint_ctx+0x3c>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
		} else {
			return &ctx->ep_ctx[ep_num];
    5cee:	480e      	ldr	r0, [pc, #56]	; (5d28 <endpoint_ctx+0x50>)
    5cf0:	2124      	movs	r1, #36	; 0x24
    5cf2:	fb01 0003 	mla	r0, r1, r3, r0
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
		} else {
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    5cf6:	3028      	adds	r0, #40	; 0x28
					    ep_num];
		}
	}

	return NULL;
}
    5cf8:	9901      	ldr	r1, [sp, #4]
    5cfa:	6813      	ldr	r3, [r2, #0]
    5cfc:	4299      	cmp	r1, r3
    5cfe:	d00d      	beq.n	5d1c <endpoint_ctx+0x44>
    5d00:	f005 f98c 	bl	b01c <_StackCheckHandler>
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    5d04:	b941      	cbnz	r1, 5d18 <endpoint_ctx+0x40>
					    CFG_EP_ISOIN_CNT +
    5d06:	f103 0009 	add.w	r0, r3, #9
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    5d0a:	4b07      	ldr	r3, [pc, #28]	; (5d28 <endpoint_ctx+0x50>)
    5d0c:	2124      	movs	r1, #36	; 0x24
    5d0e:	fb01 3000 	mla	r0, r1, r0, r3
    5d12:	e7f0      	b.n	5cf6 <endpoint_ctx+0x1e>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
    5d14:	4805      	ldr	r0, [pc, #20]	; (5d2c <endpoint_ctx+0x54>)
    5d16:	e7ef      	b.n	5cf8 <endpoint_ctx+0x20>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
    5d18:	4805      	ldr	r0, [pc, #20]	; (5d30 <endpoint_ctx+0x58>)
    5d1a:	e7ed      	b.n	5cf8 <endpoint_ctx+0x20>
}
    5d1c:	b003      	add	sp, #12
    5d1e:	f85d fb04 	ldr.w	pc, [sp], #4
    5d22:	bf00      	nop
    5d24:	200036b0 	.word	0x200036b0
    5d28:	20001480 	.word	0x20001480
    5d2c:	200015c8 	.word	0x200015c8
    5d30:	2000170c 	.word	0x2000170c

00005d34 <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
    5d34:	b507      	push	{r0, r1, r2, lr}
    5d36:	4b08      	ldr	r3, [pc, #32]	; (5d58 <usbd_evt_put+0x24>)
    5d38:	681a      	ldr	r2, [r3, #0]
    5d3a:	9201      	str	r2, [sp, #4]
	k_fifo_put(&work_queue, ev);
    5d3c:	9a01      	ldr	r2, [sp, #4]
    5d3e:	681b      	ldr	r3, [r3, #0]
    5d40:	429a      	cmp	r2, r3
{
    5d42:	4601      	mov	r1, r0
	k_fifo_put(&work_queue, ev);
    5d44:	d001      	beq.n	5d4a <usbd_evt_put+0x16>
    5d46:	f005 f969 	bl	b01c <_StackCheckHandler>
    5d4a:	4804      	ldr	r0, [pc, #16]	; (5d5c <usbd_evt_put+0x28>)
}
    5d4c:	b003      	add	sp, #12
    5d4e:	f85d eb04 	ldr.w	lr, [sp], #4
	k_fifo_put(&work_queue, ev);
    5d52:	f004 b901 	b.w	9f58 <k_queue_append>
    5d56:	bf00      	nop
    5d58:	200036b0 	.word	0x200036b0
    5d5c:	2000780c 	.word	0x2000780c

00005d60 <hf_clock_enable.constprop.10>:
 * @param on		Set true to enable the HF clock, false to disable.
 * @param blocking	Set true to block wait till HF clock stabilizes.
 *
 * @return 0 on success, error number otherwise
 */
static int hf_clock_enable(bool on, bool blocking)
    5d60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5d62:	4d28      	ldr	r5, [pc, #160]	; (5e04 <hf_clock_enable.constprop.10+0xa4>)
    5d64:	4606      	mov	r6, r0
    5d66:	682b      	ldr	r3, [r5, #0]
    5d68:	4827      	ldr	r0, [pc, #156]	; (5e08 <hf_clock_enable.constprop.10+0xa8>)
    5d6a:	9301      	str	r3, [sp, #4]
    5d6c:	f003 fbd8 	bl	9520 <z_impl_device_get_binding>
	int ret = -ENODEV;
	struct device *clock;
	static bool clock_requested;

	clock = device_get_binding(DT_NORDIC_NRF_CLOCK_0_LABEL "_16M");
	if (!clock) {
    5d70:	b9b0      	cbnz	r0, 5da0 <hf_clock_enable.constprop.10+0x40>
		LOG_ERR("NRF HF Clock device not found!");
    5d72:	2301      	movs	r3, #1
    5d74:	f04f 0100 	mov.w	r1, #0
    5d78:	f363 0107 	bfi	r1, r3, #0, #8
    5d7c:	4a23      	ldr	r2, [pc, #140]	; (5e0c <hf_clock_enable.constprop.10+0xac>)
    5d7e:	4b24      	ldr	r3, [pc, #144]	; (5e10 <hf_clock_enable.constprop.10+0xb0>)
    5d80:	4824      	ldr	r0, [pc, #144]	; (5e14 <hf_clock_enable.constprop.10+0xb4>)
    5d82:	1a9b      	subs	r3, r3, r2
    5d84:	08db      	lsrs	r3, r3, #3
    5d86:	f363 118f 	bfi	r1, r3, #6, #10
    5d8a:	f7fd f83d 	bl	2e08 <log_0>
		return ret;
    5d8e:	f06f 0412 	mvn.w	r4, #18
	/* NOTE: Non-blocking HF clock enable can return -EINPROGRESS
	 * if HF clock start was already requested. Such error code
	 * does not need to be propagated, hence returned value is 0.
	 */
	return 0;
}
    5d92:	9a01      	ldr	r2, [sp, #4]
    5d94:	682b      	ldr	r3, [r5, #0]
    5d96:	429a      	cmp	r2, r3
    5d98:	4620      	mov	r0, r4
    5d9a:	d030      	beq.n	5dfe <hf_clock_enable.constprop.10+0x9e>
    5d9c:	f005 f93e 	bl	b01c <_StackCheckHandler>
	if (on) {
    5da0:	4f1d      	ldr	r7, [pc, #116]	; (5e18 <hf_clock_enable.constprop.10+0xb8>)
    5da2:	7839      	ldrb	r1, [r7, #0]
    5da4:	b1ee      	cbz	r6, 5de2 <hf_clock_enable.constprop.10+0x82>
		if (clock_requested) {
    5da6:	bb31      	cbnz	r1, 5df6 <hf_clock_enable.constprop.10+0x96>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    5da8:	6843      	ldr	r3, [r0, #4]
    5daa:	681b      	ldr	r3, [r3, #0]
    5dac:	4798      	blx	r3
    5dae:	4604      	mov	r4, r0
	if (ret && (blocking || (ret != -EINPROGRESS))) {
    5db0:	b304      	cbz	r4, 5df4 <hf_clock_enable.constprop.10+0x94>
    5db2:	f114 0f44 	cmn.w	r4, #68	; 0x44
    5db6:	d01d      	beq.n	5df4 <hf_clock_enable.constprop.10+0x94>
		LOG_ERR("HF clock %s fail: %d",
    5db8:	2201      	movs	r2, #1
    5dba:	f04f 0300 	mov.w	r3, #0
    5dbe:	f362 0307 	bfi	r3, r2, #0, #8
    5dc2:	4912      	ldr	r1, [pc, #72]	; (5e0c <hf_clock_enable.constprop.10+0xac>)
    5dc4:	4a12      	ldr	r2, [pc, #72]	; (5e10 <hf_clock_enable.constprop.10+0xb0>)
    5dc6:	4815      	ldr	r0, [pc, #84]	; (5e1c <hf_clock_enable.constprop.10+0xbc>)
    5dc8:	1a52      	subs	r2, r2, r1
    5dca:	4915      	ldr	r1, [pc, #84]	; (5e20 <hf_clock_enable.constprop.10+0xc0>)
    5dcc:	08d2      	lsrs	r2, r2, #3
    5dce:	f362 138f 	bfi	r3, r2, #6, #10
    5dd2:	2e00      	cmp	r6, #0
    5dd4:	bf08      	it	eq
    5dd6:	4601      	moveq	r1, r0
    5dd8:	4622      	mov	r2, r4
    5dda:	4812      	ldr	r0, [pc, #72]	; (5e24 <hf_clock_enable.constprop.10+0xc4>)
    5ddc:	f7fd f858 	bl	2e90 <log_2>
		return ret;
    5de0:	e7d7      	b.n	5d92 <hf_clock_enable.constprop.10+0x32>
		if (!clock_requested) {
    5de2:	b151      	cbz	r1, 5dfa <hf_clock_enable.constprop.10+0x9a>
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->off(dev, sys);
    5de4:	6843      	ldr	r3, [r0, #4]
    5de6:	4631      	mov	r1, r6
    5de8:	685b      	ldr	r3, [r3, #4]
    5dea:	4798      	blx	r3
		if (ret == -EBUSY) {
    5dec:	f110 0f10 	cmn.w	r0, #16
    5df0:	4604      	mov	r4, r0
    5df2:	d1dd      	bne.n	5db0 <hf_clock_enable.constprop.10+0x50>
	clock_requested = on;
    5df4:	703e      	strb	r6, [r7, #0]
			return 0;
    5df6:	2400      	movs	r4, #0
    5df8:	e7cb      	b.n	5d92 <hf_clock_enable.constprop.10+0x32>
    5dfa:	460c      	mov	r4, r1
    5dfc:	e7c9      	b.n	5d92 <hf_clock_enable.constprop.10+0x32>
}
    5dfe:	b003      	add	sp, #12
    5e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5e02:	bf00      	nop
    5e04:	200036b0 	.word	0x200036b0
    5e08:	0000bcf7 	.word	0x0000bcf7
    5e0c:	0000b634 	.word	0x0000b634
    5e10:	0000b67c 	.word	0x0000b67c
    5e14:	0000bd89 	.word	0x0000bd89
    5e18:	20001bc9 	.word	0x20001bc9
    5e1c:	0000bdae 	.word	0x0000bdae
    5e20:	0000bda8 	.word	0x0000bda8
    5e24:	0000bdb3 	.word	0x0000bdb3

00005e28 <usbd_work_schedule>:
{
    5e28:	b507      	push	{r0, r1, r2, lr}
    5e2a:	4b13      	ldr	r3, [pc, #76]	; (5e78 <usbd_work_schedule+0x50>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5e2c:	4913      	ldr	r1, [pc, #76]	; (5e7c <usbd_work_schedule+0x54>)
    5e2e:	681a      	ldr	r2, [r3, #0]
    5e30:	9201      	str	r2, [sp, #4]
    5e32:	f3bf 8f5b 	dmb	ish
    5e36:	e851 2f00 	ldrex	r2, [r1]
    5e3a:	f042 0001 	orr.w	r0, r2, #1
    5e3e:	e841 0c00 	strex	ip, r0, [r1]
    5e42:	f1bc 0f00 	cmp.w	ip, #0
    5e46:	d1f6      	bne.n	5e36 <usbd_work_schedule+0xe>
    5e48:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    5e4c:	f012 0f01 	tst.w	r2, #1
		k_queue_append(&work_q->queue, work);
    5e50:	9a01      	ldr	r2, [sp, #4]
    5e52:	681b      	ldr	r3, [r3, #0]
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    5e54:	d10a      	bne.n	5e6c <usbd_work_schedule+0x44>
		k_queue_append(&work_q->queue, work);
    5e56:	429a      	cmp	r2, r3
    5e58:	d001      	beq.n	5e5e <usbd_work_schedule+0x36>
}
    5e5a:	f005 f8df 	bl	b01c <_StackCheckHandler>
    5e5e:	4808      	ldr	r0, [pc, #32]	; (5e80 <usbd_work_schedule+0x58>)
    5e60:	3908      	subs	r1, #8
    5e62:	b003      	add	sp, #12
    5e64:	f85d eb04 	ldr.w	lr, [sp], #4
    5e68:	f004 b876 	b.w	9f58 <k_queue_append>
    5e6c:	429a      	cmp	r2, r3
    5e6e:	d1f4      	bne.n	5e5a <usbd_work_schedule+0x32>
    5e70:	b003      	add	sp, #12
    5e72:	f85d fb04 	ldr.w	pc, [sp], #4
    5e76:	bf00      	nop
    5e78:	200036b0 	.word	0x200036b0
    5e7c:	20001490 	.word	0x20001490
    5e80:	200018d0 	.word	0x200018d0

00005e84 <usbd_evt_flush>:
{
    5e84:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5e86:	4c0a      	ldr	r4, [pc, #40]	; (5eb0 <usbd_evt_flush+0x2c>)
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
    5e88:	4d0a      	ldr	r5, [pc, #40]	; (5eb4 <usbd_evt_flush+0x30>)
    5e8a:	6822      	ldr	r2, [r4, #0]
    5e8c:	9201      	str	r2, [sp, #4]
    5e8e:	2100      	movs	r1, #0
    5e90:	4628      	mov	r0, r5
    5e92:	f004 f875 	bl	9f80 <z_impl_k_queue_get>
		if (ev) {
    5e96:	b118      	cbz	r0, 5ea0 <usbd_evt_flush+0x1c>
	k_mem_pool_free(&ev->block);
    5e98:	3004      	adds	r0, #4
    5e9a:	f003 fe65 	bl	9b68 <k_mem_pool_free>
    5e9e:	e7f6      	b.n	5e8e <usbd_evt_flush+0xa>
}
    5ea0:	9a01      	ldr	r2, [sp, #4]
    5ea2:	6823      	ldr	r3, [r4, #0]
    5ea4:	429a      	cmp	r2, r3
    5ea6:	d001      	beq.n	5eac <usbd_evt_flush+0x28>
    5ea8:	f005 f8b8 	bl	b01c <_StackCheckHandler>
    5eac:	b003      	add	sp, #12
    5eae:	bd30      	pop	{r4, r5, pc}
    5eb0:	200036b0 	.word	0x200036b0
    5eb4:	2000780c 	.word	0x2000780c

00005eb8 <usbd_evt_alloc>:
{
    5eb8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    5eba:	4e27      	ldr	r6, [pc, #156]	; (5f58 <usbd_evt_alloc+0xa0>)
	ret = k_mem_pool_alloc(&fifo_elem_pool, &block,
    5ebc:	4827      	ldr	r0, [pc, #156]	; (5f5c <usbd_evt_alloc+0xa4>)
{
    5ebe:	6833      	ldr	r3, [r6, #0]
    5ec0:	9303      	str	r3, [sp, #12]
	ret = k_mem_pool_alloc(&fifo_elem_pool, &block,
    5ec2:	ac01      	add	r4, sp, #4
    5ec4:	2300      	movs	r3, #0
    5ec6:	2218      	movs	r2, #24
    5ec8:	4621      	mov	r1, r4
    5eca:	f003 fd9f 	bl	9a0c <k_mem_pool_alloc>
	if (ret < 0) {
    5ece:	2800      	cmp	r0, #0
    5ed0:	da38      	bge.n	5f44 <usbd_evt_alloc+0x8c>
		LOG_ERR("USBD event allocation failed!");
    5ed2:	2301      	movs	r3, #1
    5ed4:	f04f 0100 	mov.w	r1, #0
    5ed8:	f363 0107 	bfi	r1, r3, #0, #8
    5edc:	4d20      	ldr	r5, [pc, #128]	; (5f60 <usbd_evt_alloc+0xa8>)
    5ede:	4b21      	ldr	r3, [pc, #132]	; (5f64 <usbd_evt_alloc+0xac>)
    5ee0:	4821      	ldr	r0, [pc, #132]	; (5f68 <usbd_evt_alloc+0xb0>)
    5ee2:	1aed      	subs	r5, r5, r3
    5ee4:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    5ee8:	f365 118f 	bfi	r1, r5, #6, #10
    5eec:	f7fc ff8c 	bl	2e08 <log_0>
		usbd_evt_flush();
    5ef0:	f7ff ffc8 	bl	5e84 <usbd_evt_flush>
		ret = k_mem_pool_alloc(&fifo_elem_pool, &block,
    5ef4:	2300      	movs	r3, #0
    5ef6:	2218      	movs	r2, #24
    5ef8:	4621      	mov	r1, r4
    5efa:	4818      	ldr	r0, [pc, #96]	; (5f5c <usbd_evt_alloc+0xa4>)
    5efc:	f003 fd86 	bl	9a0c <k_mem_pool_alloc>
		if (ret < 0) {
    5f00:	2800      	cmp	r0, #0
    5f02:	da11      	bge.n	5f28 <usbd_evt_alloc+0x70>
			LOG_ERR("USBD event memory corrupted.");
    5f04:	f04f 0100 	mov.w	r1, #0
    5f08:	2301      	movs	r3, #1
    5f0a:	f363 0107 	bfi	r1, r3, #0, #8
    5f0e:	f365 118f 	bfi	r1, r5, #6, #10
    5f12:	4816      	ldr	r0, [pc, #88]	; (5f6c <usbd_evt_alloc+0xb4>)
    5f14:	f7fc ff78 	bl	2e08 <log_0>
		return NULL;
    5f18:	2300      	movs	r3, #0
}
    5f1a:	9a03      	ldr	r2, [sp, #12]
    5f1c:	4618      	mov	r0, r3
    5f1e:	6833      	ldr	r3, [r6, #0]
    5f20:	429a      	cmp	r2, r3
    5f22:	d016      	beq.n	5f52 <usbd_evt_alloc+0x9a>
    5f24:	f005 f87a 	bl	b01c <_StackCheckHandler>
		ev = (struct usbd_event *)block.data;
    5f28:	9b01      	ldr	r3, [sp, #4]
		ev->block = block;
    5f2a:	e894 0003 	ldmia.w	r4, {r0, r1}
    5f2e:	1d1a      	adds	r2, r3, #4
    5f30:	e882 0003 	stmia.w	r2, {r0, r1}
		ev->evt_type = USBD_EVT_REINIT;
    5f34:	2204      	movs	r2, #4
    5f36:	751a      	strb	r2, [r3, #20]
		usbd_evt_put(ev);
    5f38:	4618      	mov	r0, r3
    5f3a:	f7ff fefb 	bl	5d34 <usbd_evt_put>
		usbd_work_schedule();
    5f3e:	f7ff ff73 	bl	5e28 <usbd_work_schedule>
    5f42:	e7e9      	b.n	5f18 <usbd_evt_alloc+0x60>
	ev = (struct usbd_event *)block.data;
    5f44:	9b01      	ldr	r3, [sp, #4]
	ev->block = block;
    5f46:	e894 0003 	ldmia.w	r4, {r0, r1}
    5f4a:	1d1a      	adds	r2, r3, #4
    5f4c:	e882 0003 	stmia.w	r2, {r0, r1}
	return ev;
    5f50:	e7e3      	b.n	5f1a <usbd_evt_alloc+0x62>
}
    5f52:	b004      	add	sp, #16
    5f54:	bd70      	pop	{r4, r5, r6, pc}
    5f56:	bf00      	nop
    5f58:	200036b0 	.word	0x200036b0
    5f5c:	200077dc 	.word	0x200077dc
    5f60:	0000b67c 	.word	0x0000b67c
    5f64:	0000b634 	.word	0x0000b634
    5f68:	0000bf02 	.word	0x0000bf02
    5f6c:	0000bf20 	.word	0x0000bf20

00005f70 <usbd_event_transfer_data>:
		}
	}
}

static void usbd_event_transfer_data(nrfx_usbd_evt_t const *const p_event)
{
    5f70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5f74:	4d41      	ldr	r5, [pc, #260]	; (607c <usbd_event_transfer_data+0x10c>)
	struct nrf_usbd_ep_ctx *ep_ctx =
		endpoint_ctx(p_event->data.eptransfer.ep);
    5f76:	f890 8002 	ldrb.w	r8, [r0, #2]
{
    5f7a:	682b      	ldr	r3, [r5, #0]
    5f7c:	9301      	str	r3, [sp, #4]
    5f7e:	4681      	mov	r9, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
    5f80:	4640      	mov	r0, r8
    5f82:	f7ff fea9 	bl	5cd8 <endpoint_ctx>

	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    5f86:	f018 0f80 	tst.w	r8, #128	; 0x80
		endpoint_ctx(p_event->data.eptransfer.ep);
    5f8a:	4607      	mov	r7, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    5f8c:	f899 4003 	ldrb.w	r4, [r9, #3]
    5f90:	462e      	mov	r6, r5
    5f92:	d015      	beq.n	5fc0 <usbd_event_transfer_data+0x50>
		switch (p_event->data.eptransfer.status) {
    5f94:	2c00      	cmp	r4, #0
    5f96:	d153      	bne.n	6040 <usbd_event_transfer_data+0xd0>
		case NRFX_USBD_EP_OK: {
			struct usbd_event *ev = usbd_evt_alloc();
    5f98:	f7ff ff8e 	bl	5eb8 <usbd_evt_alloc>

			if (!ev) {
    5f9c:	4603      	mov	r3, r0
    5f9e:	2800      	cmp	r0, #0
    5fa0:	d065      	beq.n	606e <usbd_event_transfer_data+0xfe>

			LOG_DBG("write complete, ep %d",
				(u32_t)p_event->data.eptransfer.ep);

			ep_ctx->write_in_progress = false;
			ev->evt_type = USBD_EVT_EP;
    5fa2:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    5fa4:	f887 4022 	strb.w	r4, [r7, #34]	; 0x22
			ev->evt_type = USBD_EVT_EP;
    5fa8:	7502      	strb	r2, [r0, #20]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    5faa:	2203      	movs	r2, #3
    5fac:	7402      	strb	r2, [r0, #16]
				(u32_t)p_event->data.eptransfer.ep);

			ep_ctx->read_pending = true;
			ev->evt_type = USBD_EVT_EP;
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
			ev->evt.ep_evt.ep = ep_ctx;
    5fae:	60df      	str	r7, [r3, #12]

			usbd_evt_put(ev);
    5fb0:	f7ff fec0 	bl	5d34 <usbd_evt_put>
			usbd_work_schedule();
    5fb4:	9a01      	ldr	r2, [sp, #4]
    5fb6:	682b      	ldr	r3, [r5, #0]
			ev->evt_type = USBD_EVT_EP;
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
			ev->evt.ep_evt.ep = ep_ctx;

			usbd_evt_put(ev);
			usbd_work_schedule();
    5fb8:	429a      	cmp	r2, r3
    5fba:	d03c      	beq.n	6036 <usbd_event_transfer_data+0xc6>
				p_event->data.eptransfer.ep);
		}
		break;
		}
	}
}
    5fbc:	f005 f82e 	bl	b01c <_StackCheckHandler>
		switch (p_event->data.eptransfer.status) {
    5fc0:	b15c      	cbz	r4, 5fda <usbd_event_transfer_data+0x6a>
    5fc2:	2c01      	cmp	r4, #1
    5fc4:	d13c      	bne.n	6040 <usbd_event_transfer_data+0xd0>
			struct usbd_event *ev = usbd_evt_alloc();
    5fc6:	f7ff ff77 	bl	5eb8 <usbd_evt_alloc>
			if (!ev) {
    5fca:	4603      	mov	r3, r0
    5fcc:	2800      	cmp	r0, #0
    5fce:	d04e      	beq.n	606e <usbd_event_transfer_data+0xfe>
			ep_ctx->read_pending = true;
    5fd0:	f887 4021 	strb.w	r4, [r7, #33]	; 0x21
			ev->evt_type = USBD_EVT_EP;
    5fd4:	7504      	strb	r4, [r0, #20]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    5fd6:	7404      	strb	r4, [r0, #16]
    5fd8:	e7e9      	b.n	5fae <usbd_event_transfer_data+0x3e>
			struct usbd_event *ev = usbd_evt_alloc();
    5fda:	f7ff ff6d 	bl	5eb8 <usbd_evt_alloc>
			if (!ev) {
    5fde:	2800      	cmp	r0, #0
    5fe0:	d045      	beq.n	606e <usbd_event_transfer_data+0xfe>
				p_event->data.eptransfer.ep);
    5fe2:	f899 3002 	ldrb.w	r3, [r9, #2]

uint32_t nrf_usbd_ep_amount_get(uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
    5fe6:	4a26      	ldr	r2, [pc, #152]	; (6080 <usbd_event_transfer_data+0x110>)
    5fe8:	f013 0f80 	tst.w	r3, #128	; 0x80
    5fec:	f003 0108 	and.w	r1, r3, #8
    5ff0:	d015      	beq.n	601e <usbd_event_transfer_data+0xae>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    5ff2:	b161      	cbz	r1, 600e <usbd_event_transfer_data+0x9e>
        {
            ret = NRF_USBD->ISOIN.AMOUNT;
    5ff4:	f8d2 36a8 	ldr.w	r3, [r2, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(
    5ff8:	60fb      	str	r3, [r7, #12]
			ev->evt_type = USBD_EVT_EP;
    5ffa:	2301      	movs	r3, #1
    5ffc:	7503      	strb	r3, [r0, #20]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    5ffe:	2302      	movs	r3, #2
    6000:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    6002:	60c7      	str	r7, [r0, #12]
			usbd_evt_put(ev);
    6004:	f7ff fe96 	bl	5d34 <usbd_evt_put>
			usbd_work_schedule();
    6008:	9a01      	ldr	r2, [sp, #4]
    600a:	6833      	ldr	r3, [r6, #0]
    600c:	e7d4      	b.n	5fb8 <usbd_event_transfer_data+0x48>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT(epnr < NRFX_ARRAY_SIZE(NRF_USBD->EPOUT));
            ret = NRF_USBD->EPIN[epnr].AMOUNT;
    600e:	f003 030f 	and.w	r3, r3, #15
    6012:	2114      	movs	r1, #20
    6014:	fb01 2303 	mla	r3, r1, r3, r2
    6018:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    601c:	e7ec      	b.n	5ff8 <usbd_event_transfer_data+0x88>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    601e:	b111      	cbz	r1, 6026 <usbd_event_transfer_data+0xb6>
        {
            ret = NRF_USBD->ISOOUT.AMOUNT;
    6020:	f8d2 37a8 	ldr.w	r3, [r2, #1960]	; 0x7a8
    6024:	e7e8      	b.n	5ff8 <usbd_event_transfer_data+0x88>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT(epnr < NRFX_ARRAY_SIZE(NRF_USBD->EPOUT));
            ret = NRF_USBD->EPOUT[epnr].AMOUNT;
    6026:	f003 030f 	and.w	r3, r3, #15
    602a:	2114      	movs	r1, #20
    602c:	fb01 2303 	mla	r3, r1, r3, r2
    6030:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    6034:	e7e0      	b.n	5ff8 <usbd_event_transfer_data+0x88>
}
    6036:	b003      	add	sp, #12
    6038:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			usbd_work_schedule();
    603c:	f7ff bef4 	b.w	5e28 <usbd_work_schedule>
			LOG_ERR("Unexpected event from nrfx_usbd: %d, ep %d",
    6040:	2201      	movs	r2, #1
    6042:	f04f 0300 	mov.w	r3, #0
    6046:	f362 0307 	bfi	r3, r2, #0, #8
    604a:	490e      	ldr	r1, [pc, #56]	; (6084 <usbd_event_transfer_data+0x114>)
    604c:	4a0e      	ldr	r2, [pc, #56]	; (6088 <usbd_event_transfer_data+0x118>)
    604e:	1a89      	subs	r1, r1, r2
    6050:	08c9      	lsrs	r1, r1, #3
    6052:	f361 138f 	bfi	r3, r1, #6, #10
    6056:	9901      	ldr	r1, [sp, #4]
    6058:	682a      	ldr	r2, [r5, #0]
    605a:	4291      	cmp	r1, r2
    605c:	d1ae      	bne.n	5fbc <usbd_event_transfer_data+0x4c>
    605e:	480b      	ldr	r0, [pc, #44]	; (608c <usbd_event_transfer_data+0x11c>)
    6060:	4642      	mov	r2, r8
    6062:	4621      	mov	r1, r4
}
    6064:	b003      	add	sp, #12
    6066:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			LOG_ERR("Unexpected event from nrfx_usbd: %d, ep %d",
    606a:	f7fc bf11 	b.w	2e90 <log_2>
}
    606e:	9a01      	ldr	r2, [sp, #4]
    6070:	6833      	ldr	r3, [r6, #0]
    6072:	429a      	cmp	r2, r3
    6074:	d1a2      	bne.n	5fbc <usbd_event_transfer_data+0x4c>
    6076:	b003      	add	sp, #12
    6078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    607c:	200036b0 	.word	0x200036b0
    6080:	40027000 	.word	0x40027000
    6084:	0000b67c 	.word	0x0000b67c
    6088:	0000b634 	.word	0x0000b634
    608c:	0000bed7 	.word	0x0000bed7

00006090 <usbd_event_handler>:

/**
 * @brief nRFx USBD driver event handler function.
 */
static void usbd_event_handler(nrfx_usbd_evt_t const *const p_event)
{
    6090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6094:	4f61      	ldr	r7, [pc, #388]	; (621c <usbd_event_handler+0x18c>)
    6096:	b08a      	sub	sp, #40	; 0x28
    6098:	4606      	mov	r6, r0
    609a:	683b      	ldr	r3, [r7, #0]
    609c:	9309      	str	r3, [sp, #36]	; 0x24
	struct nrf_usbd_ep_ctx *ep_ctx;
	struct usbd_event evt = {0};
    609e:	2218      	movs	r2, #24
    60a0:	2100      	movs	r1, #0
    60a2:	a803      	add	r0, sp, #12
    60a4:	f001 fe6e 	bl	7d84 <memset>
	bool put_evt = false;

	switch (p_event->type) {
    60a8:	7833      	ldrb	r3, [r6, #0]
    60aa:	3b01      	subs	r3, #1
    60ac:	2b05      	cmp	r3, #5
    60ae:	d821      	bhi.n	60f4 <usbd_event_handler+0x64>
    60b0:	e8df f003 	tbb	[pc, r3]
    60b4:	201403af 	.word	0x201403af
    60b8:	169e      	.short	0x169e
	case NRFX_USBD_EVT_SUSPEND:
		LOG_DBG("SUSPEND state detected.");
		evt.evt_type = USBD_EVT_POWER;
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
    60ba:	2303      	movs	r3, #3
		put_evt = true;
		break;
	case NRFX_USBD_EVT_RESUME:
		LOG_DBG("RESUMING from suspend.");
		evt.evt_type = USBD_EVT_POWER;
		evt.evt.pwr_evt.state = USBD_RESUMED;
    60bc:	f88d 3018 	strb.w	r3, [sp, #24]
		evt.evt_type = USBD_EVT_POWER;
    60c0:	2400      	movs	r4, #0
	}

	if (put_evt) {
		struct usbd_event *ev;

		ev = usbd_evt_alloc();
    60c2:	f7ff fef9 	bl	5eb8 <usbd_evt_alloc>
		if (!ev) {
    60c6:	4603      	mov	r3, r0
    60c8:	b1a0      	cbz	r0, 60f4 <usbd_event_handler+0x64>
			return;
		}
		ev->evt_type = evt.evt_type;
		ev->evt = evt.evt;
    60ca:	a906      	add	r1, sp, #24
		ev->evt_type = evt.evt_type;
    60cc:	7504      	strb	r4, [r0, #20]
		ev->evt = evt.evt;
    60ce:	f100 020c 	add.w	r2, r0, #12
    60d2:	c903      	ldmia	r1, {r0, r1}
    60d4:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
    60d8:	4618      	mov	r0, r3
    60da:	e023      	b.n	6124 <usbd_event_handler+0x94>
		evt.evt.pwr_evt.state = USBD_RESUMED;
    60dc:	2304      	movs	r3, #4
    60de:	e7ed      	b.n	60bc <usbd_event_handler+0x2c>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    60e0:	f896 8002 	ldrb.w	r8, [r6, #2]
    60e4:	4640      	mov	r0, r8
    60e6:	f7ff fdf7 	bl	5cd8 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
    60ea:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    60ec:	4605      	mov	r5, r0
		switch (ep_ctx->cfg.type) {
    60ee:	b143      	cbz	r3, 6102 <usbd_event_handler+0x72>
    60f0:	2b03      	cmp	r3, #3
    60f2:	d979      	bls.n	61e8 <usbd_event_handler+0x158>
		usbd_work_schedule();
	}
}
    60f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    60f6:	683b      	ldr	r3, [r7, #0]
    60f8:	429a      	cmp	r2, r3
    60fa:	f000 808c 	beq.w	6216 <usbd_event_handler+0x186>
    60fe:	f004 ff8d 	bl	b01c <_StackCheckHandler>
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    6102:	f018 0f80 	tst.w	r8, #128	; 0x80
    6106:	78f4      	ldrb	r4, [r6, #3]
    6108:	d022      	beq.n	6150 <usbd_event_handler+0xc0>
		switch (p_event->data.eptransfer.status) {
    610a:	b984      	cbnz	r4, 612e <usbd_event_handler+0x9e>
			struct usbd_event *ev = usbd_evt_alloc();
    610c:	f7ff fed4 	bl	5eb8 <usbd_evt_alloc>
			if (!ev) {
    6110:	4603      	mov	r3, r0
    6112:	2800      	cmp	r0, #0
    6114:	d0ee      	beq.n	60f4 <usbd_event_handler+0x64>
			ev->evt_type = USBD_EVT_EP;
    6116:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    6118:	f885 4022 	strb.w	r4, [r5, #34]	; 0x22
			ev->evt_type = USBD_EVT_EP;
    611c:	7502      	strb	r2, [r0, #20]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    611e:	2203      	movs	r2, #3
    6120:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    6122:	60dd      	str	r5, [r3, #12]
		usbd_evt_put(ev);
    6124:	f7ff fe06 	bl	5d34 <usbd_evt_put>
		usbd_work_schedule();
    6128:	f7ff fe7e 	bl	5e28 <usbd_work_schedule>
    612c:	e7e2      	b.n	60f4 <usbd_event_handler+0x64>
			LOG_ERR(
    612e:	2201      	movs	r2, #1
    6130:	f04f 0300 	mov.w	r3, #0
    6134:	f362 0307 	bfi	r3, r2, #0, #8
    6138:	4939      	ldr	r1, [pc, #228]	; (6220 <usbd_event_handler+0x190>)
    613a:	4a3a      	ldr	r2, [pc, #232]	; (6224 <usbd_event_handler+0x194>)
    613c:	483a      	ldr	r0, [pc, #232]	; (6228 <usbd_event_handler+0x198>)
    613e:	1a89      	subs	r1, r1, r2
    6140:	08c9      	lsrs	r1, r1, #3
    6142:	f361 138f 	bfi	r3, r1, #6, #10
    6146:	4642      	mov	r2, r8
    6148:	4621      	mov	r1, r4
			LOG_ERR("Unexpected event from nrfx_usbd: %d, ep %d",
    614a:	f7fc fea1 	bl	2e90 <log_2>
		break;
    614e:	e7d1      	b.n	60f4 <usbd_event_handler+0x64>
		switch (p_event->data.eptransfer.status) {
    6150:	b15c      	cbz	r4, 616a <usbd_event_handler+0xda>
    6152:	2c01      	cmp	r4, #1
    6154:	d139      	bne.n	61ca <usbd_event_handler+0x13a>
			struct usbd_event *ev = usbd_evt_alloc();
    6156:	f7ff feaf 	bl	5eb8 <usbd_evt_alloc>
			if (!ev) {
    615a:	4603      	mov	r3, r0
    615c:	2800      	cmp	r0, #0
    615e:	d0c9      	beq.n	60f4 <usbd_event_handler+0x64>
			ep_ctx->read_pending = true;
    6160:	f885 4021 	strb.w	r4, [r5, #33]	; 0x21
			ev->evt_type = USBD_EVT_EP;
    6164:	7504      	strb	r4, [r0, #20]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    6166:	7404      	strb	r4, [r0, #16]
    6168:	e7db      	b.n	6122 <usbd_event_handler+0x92>
			struct usbd_event *ev = usbd_evt_alloc();
    616a:	f7ff fea5 	bl	5eb8 <usbd_evt_alloc>
			if (!ev) {
    616e:	4604      	mov	r4, r0
    6170:	2800      	cmp	r0, #0
    6172:	d0bf      	beq.n	60f4 <usbd_event_handler+0x64>
			ev->evt_type = USBD_EVT_EP;
    6174:	2301      	movs	r3, #1
    6176:	7503      	strb	r3, [r0, #20]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    6178:	2302      	movs	r3, #2
    617a:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    617c:	60c5      	str	r5, [r0, #12]
			err_code = nrfx_usbd_ep_status_get(
    617e:	f105 010c 	add.w	r1, r5, #12
    6182:	78b0      	ldrb	r0, [r6, #2]
    6184:	f7fb ffe6 	bl	2154 <nrfx_usbd_ep_status_get>
			if (err_code != NRFX_USBD_EP_OK) {
    6188:	4601      	mov	r1, r0
    618a:	b168      	cbz	r0, 61a8 <usbd_event_handler+0x118>
				LOG_ERR("_ep_status_get failed! Code: %d.",
    618c:	2301      	movs	r3, #1
    618e:	f04f 0200 	mov.w	r2, #0
    6192:	f363 0207 	bfi	r2, r3, #0, #8
    6196:	4823      	ldr	r0, [pc, #140]	; (6224 <usbd_event_handler+0x194>)
    6198:	4b21      	ldr	r3, [pc, #132]	; (6220 <usbd_event_handler+0x190>)
    619a:	1a1b      	subs	r3, r3, r0
    619c:	08db      	lsrs	r3, r3, #3
    619e:	f363 128f 	bfi	r2, r3, #6, #10
    61a2:	4822      	ldr	r0, [pc, #136]	; (622c <usbd_event_handler+0x19c>)
    61a4:	f7fc fe4e 	bl	2e44 <log_1>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
    61a8:	4a21      	ldr	r2, [pc, #132]	; (6230 <usbd_event_handler+0x1a0>)
    61aa:	68e9      	ldr	r1, [r5, #12]
    61ac:	f8b2 32b0 	ldrh.w	r3, [r2, #688]	; 0x2b0
    61b0:	428b      	cmp	r3, r1
    61b2:	d906      	bls.n	61c2 <usbd_event_handler+0x132>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
    61b4:	1a5b      	subs	r3, r3, r1
    61b6:	f8a2 32b0 	strh.w	r3, [r2, #688]	; 0x2b0
				nrfx_usbd_setup_data_clear();
    61ba:	f7fc f865 	bl	2288 <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
    61be:	4620      	mov	r0, r4
    61c0:	e7b0      	b.n	6124 <usbd_event_handler+0x94>
				ctx->ctrl_read_len = 0U;
    61c2:	2300      	movs	r3, #0
    61c4:	f8a2 32b0 	strh.w	r3, [r2, #688]	; 0x2b0
    61c8:	e7f9      	b.n	61be <usbd_event_handler+0x12e>
			LOG_ERR("Unexpected event from nrfx_usbd: %d, ep %d",
    61ca:	2201      	movs	r2, #1
    61cc:	f04f 0300 	mov.w	r3, #0
    61d0:	f362 0307 	bfi	r3, r2, #0, #8
    61d4:	4912      	ldr	r1, [pc, #72]	; (6220 <usbd_event_handler+0x190>)
    61d6:	4a13      	ldr	r2, [pc, #76]	; (6224 <usbd_event_handler+0x194>)
    61d8:	4816      	ldr	r0, [pc, #88]	; (6234 <usbd_event_handler+0x1a4>)
    61da:	1a89      	subs	r1, r1, r2
    61dc:	08c9      	lsrs	r1, r1, #3
    61de:	f361 138f 	bfi	r3, r1, #6, #10
    61e2:	4642      	mov	r2, r8
    61e4:	4621      	mov	r1, r4
    61e6:	e7b0      	b.n	614a <usbd_event_handler+0xba>
			usbd_event_transfer_data(p_event);
    61e8:	4630      	mov	r0, r6
    61ea:	f7ff fec1 	bl	5f70 <usbd_event_transfer_data>
	if (put_evt) {
    61ee:	e781      	b.n	60f4 <usbd_event_handler+0x64>
		nrfx_usbd_setup_get(&drv_setup);
    61f0:	a801      	add	r0, sp, #4
    61f2:	f7fc f817 	bl	2224 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_BREQUEST_SETADDRESS)
    61f6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    61fa:	2b05      	cmp	r3, #5
    61fc:	d105      	bne.n	620a <usbd_event_handler+0x17a>
		    || ((drv_setup.bmRequestType & USB_BMREQUESTTYPE_TYPE_MASK)
    61fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
    6202:	f013 0f60 	tst.w	r3, #96	; 0x60
    6206:	f43f af75 	beq.w	60f4 <usbd_event_handler+0x64>
			evt.evt.ep_evt.ep = ep_ctx;
    620a:	4b0b      	ldr	r3, [pc, #44]	; (6238 <usbd_event_handler+0x1a8>)
    620c:	9306      	str	r3, [sp, #24]
			evt.evt_type = USBD_EVT_EP;
    620e:	2401      	movs	r4, #1
    6210:	e757      	b.n	60c2 <usbd_event_handler+0x32>
		evt.evt_type = USBD_EVT_RESET;
    6212:	2402      	movs	r4, #2
    6214:	e755      	b.n	60c2 <usbd_event_handler+0x32>
}
    6216:	b00a      	add	sp, #40	; 0x28
    6218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    621c:	200036b0 	.word	0x200036b0
    6220:	0000b67c 	.word	0x0000b67c
    6224:	0000b634 	.word	0x0000b634
    6228:	0000be8e 	.word	0x0000be8e
    622c:	0000beb6 	.word	0x0000beb6
    6230:	20001480 	.word	0x20001480
    6234:	0000bed7 	.word	0x0000bed7
    6238:	200015ec 	.word	0x200015ec

0000623c <eps_ctx_init>:
{
    623c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6240:	4e5f      	ldr	r6, [pc, #380]	; (63c0 <eps_ctx_init+0x184>)
			err = k_mem_pool_alloc(&ep_buf_pool, &ep_ctx->buf.block,
    6242:	f8df 8194 	ldr.w	r8, [pc, #404]	; 63d8 <eps_ctx_init+0x19c>
{
    6246:	6833      	ldr	r3, [r6, #0]
    6248:	9301      	str	r3, [sp, #4]
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    624a:	2500      	movs	r5, #0
			err = k_mem_pool_alloc(&ep_buf_pool, &ep_ctx->buf.block,
    624c:	462f      	mov	r7, r5
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    624e:	f065 007f 	orn	r0, r5, #127	; 0x7f
    6252:	b2c0      	uxtb	r0, r0
    6254:	f7ff fd40 	bl	5cd8 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
    6258:	6903      	ldr	r3, [r0, #16]
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    625a:	4604      	mov	r4, r0
		if (!ep_ctx->buf.block.data) {
    625c:	b9fb      	cbnz	r3, 629e <eps_ctx_init+0x62>
			err = k_mem_pool_alloc(&ep_buf_pool, &ep_ctx->buf.block,
    625e:	f100 0110 	add.w	r1, r0, #16
    6262:	2240      	movs	r2, #64	; 0x40
    6264:	4640      	mov	r0, r8
    6266:	f003 fbd1 	bl	9a0c <k_mem_pool_alloc>
			if (err < 0) {
    626a:	2800      	cmp	r0, #0
    626c:	da17      	bge.n	629e <eps_ctx_init+0x62>
				LOG_ERR("EP buffer alloc failed for EPIN%d", i);
    626e:	2301      	movs	r3, #1
    6270:	f04f 0200 	mov.w	r2, #0
    6274:	f363 0207 	bfi	r2, r3, #0, #8
    6278:	4952      	ldr	r1, [pc, #328]	; (63c4 <eps_ctx_init+0x188>)
    627a:	4b53      	ldr	r3, [pc, #332]	; (63c8 <eps_ctx_init+0x18c>)
    627c:	4853      	ldr	r0, [pc, #332]	; (63cc <eps_ctx_init+0x190>)
    627e:	1a5b      	subs	r3, r3, r1
    6280:	08db      	lsrs	r3, r3, #3
    6282:	f363 128f 	bfi	r2, r3, #6, #10
    6286:	4629      	mov	r1, r5
				LOG_ERR("EP buffer alloc failed for EPOUT%d", i);
    6288:	f7fc fddc 	bl	2e44 <log_1>
				return -ENOMEM;
    628c:	f06f 000b 	mvn.w	r0, #11
}
    6290:	9a01      	ldr	r2, [sp, #4]
    6292:	6833      	ldr	r3, [r6, #0]
    6294:	429a      	cmp	r2, r3
    6296:	f000 8090 	beq.w	63ba <eps_ctx_init+0x17e>
    629a:	f004 febf 	bl	b01c <_StackCheckHandler>
	ep_ctx->buf.data = ep_ctx->buf.block.data;
    629e:	6923      	ldr	r3, [r4, #16]
	ep_ctx->buf.len  = 0U;
    62a0:	60e7      	str	r7, [r4, #12]
	ep_ctx->buf.curr = ep_ctx->buf.data;
    62a2:	e9c4 3306 	strd	r3, r3, [r4, #24]
	ep_ctx->read_complete = true;
    62a6:	2301      	movs	r3, #1
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    62a8:	441d      	add	r5, r3
    62aa:	2d08      	cmp	r5, #8
	ep_ctx->read_complete = true;
    62ac:	f884 3020 	strb.w	r3, [r4, #32]
	ep_ctx->read_pending = false;
    62b0:	f884 7021 	strb.w	r7, [r4, #33]	; 0x21
	ep_ctx->write_in_progress = false;
    62b4:	f884 7022 	strb.w	r7, [r4, #34]	; 0x22
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    62b8:	d1c9      	bne.n	624e <eps_ctx_init+0x12>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    62ba:	2500      	movs	r5, #0
			err = k_mem_pool_alloc(&ep_buf_pool, &ep_ctx->buf.block,
    62bc:	f8df 8118 	ldr.w	r8, [pc, #280]	; 63d8 <eps_ctx_init+0x19c>
    62c0:	462f      	mov	r7, r5
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    62c2:	b2e8      	uxtb	r0, r5
    62c4:	f7ff fd08 	bl	5cd8 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
    62c8:	6903      	ldr	r3, [r0, #16]
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    62ca:	4604      	mov	r4, r0
		if (!ep_ctx->buf.block.data) {
    62cc:	b9ab      	cbnz	r3, 62fa <eps_ctx_init+0xbe>
			err = k_mem_pool_alloc(&ep_buf_pool, &ep_ctx->buf.block,
    62ce:	f100 0110 	add.w	r1, r0, #16
    62d2:	2240      	movs	r2, #64	; 0x40
    62d4:	4640      	mov	r0, r8
    62d6:	f003 fb99 	bl	9a0c <k_mem_pool_alloc>
			if (err < 0) {
    62da:	2800      	cmp	r0, #0
    62dc:	da0d      	bge.n	62fa <eps_ctx_init+0xbe>
				LOG_ERR("EP buffer alloc failed for EPOUT%d", i);
    62de:	2301      	movs	r3, #1
    62e0:	f04f 0200 	mov.w	r2, #0
    62e4:	f363 0207 	bfi	r2, r3, #0, #8
    62e8:	4936      	ldr	r1, [pc, #216]	; (63c4 <eps_ctx_init+0x188>)
    62ea:	4b37      	ldr	r3, [pc, #220]	; (63c8 <eps_ctx_init+0x18c>)
    62ec:	4838      	ldr	r0, [pc, #224]	; (63d0 <eps_ctx_init+0x194>)
    62ee:	1a5b      	subs	r3, r3, r1
    62f0:	08db      	lsrs	r3, r3, #3
    62f2:	f363 128f 	bfi	r2, r3, #6, #10
    62f6:	4629      	mov	r1, r5
    62f8:	e7c6      	b.n	6288 <eps_ctx_init+0x4c>
	ep_ctx->buf.data = ep_ctx->buf.block.data;
    62fa:	6923      	ldr	r3, [r4, #16]
	ep_ctx->buf.len  = 0U;
    62fc:	60e7      	str	r7, [r4, #12]
	ep_ctx->buf.curr = ep_ctx->buf.data;
    62fe:	e9c4 3306 	strd	r3, r3, [r4, #24]
	ep_ctx->read_complete = true;
    6302:	2301      	movs	r3, #1
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    6304:	441d      	add	r5, r3
    6306:	2d08      	cmp	r5, #8
	ep_ctx->read_complete = true;
    6308:	f884 3020 	strb.w	r3, [r4, #32]
	ep_ctx->read_pending = false;
    630c:	f884 7021 	strb.w	r7, [r4, #33]	; 0x21
	ep_ctx->write_in_progress = false;
    6310:	f884 7022 	strb.w	r7, [r4, #34]	; 0x22
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    6314:	d1d5      	bne.n	62c2 <eps_ctx_init+0x86>
		if (!ep_ctx->buf.block.data) {
    6316:	492f      	ldr	r1, [pc, #188]	; (63d4 <eps_ctx_init+0x198>)
    6318:	f8d1 3158 	ldr.w	r3, [r1, #344]	; 0x158
    631c:	460c      	mov	r4, r1
    631e:	b9bb      	cbnz	r3, 6350 <eps_ctx_init+0x114>
			err = k_mem_pool_alloc(&ep_buf_pool, &ep_ctx->buf.block,
    6320:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6324:	f501 71ac 	add.w	r1, r1, #344	; 0x158
    6328:	482b      	ldr	r0, [pc, #172]	; (63d8 <eps_ctx_init+0x19c>)
    632a:	f003 fb6f 	bl	9a0c <k_mem_pool_alloc>
			if (err < 0) {
    632e:	2800      	cmp	r0, #0
    6330:	da0e      	bge.n	6350 <eps_ctx_init+0x114>
				LOG_ERR("EP buffer alloc failed for ISOIN");
    6332:	2301      	movs	r3, #1
    6334:	f04f 0100 	mov.w	r1, #0
    6338:	f363 0107 	bfi	r1, r3, #0, #8
    633c:	4a21      	ldr	r2, [pc, #132]	; (63c4 <eps_ctx_init+0x188>)
    633e:	4b22      	ldr	r3, [pc, #136]	; (63c8 <eps_ctx_init+0x18c>)
    6340:	4826      	ldr	r0, [pc, #152]	; (63dc <eps_ctx_init+0x1a0>)
    6342:	1a9b      	subs	r3, r3, r2
    6344:	08db      	lsrs	r3, r3, #3
    6346:	f363 118f 	bfi	r1, r3, #6, #10
				LOG_ERR("EP buffer alloc failed for ISOOUT");
    634a:	f7fc fd5d 	bl	2e08 <log_0>
    634e:	e79d      	b.n	628c <eps_ctx_init+0x50>
	ep_ctx->buf.data = ep_ctx->buf.block.data;
    6350:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	ep_ctx->read_complete = true;
    6354:	2201      	movs	r2, #1
	ep_ctx->buf.curr = ep_ctx->buf.data;
    6356:	e9c4 3358 	strd	r3, r3, [r4, #352]	; 0x160
	ep_ctx->buf.len  = 0U;
    635a:	2300      	movs	r3, #0
	ep_ctx->read_complete = true;
    635c:	f884 2168 	strb.w	r2, [r4, #360]	; 0x168
	ep_ctx->buf.len  = 0U;
    6360:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
	ep_ctx->read_pending = false;
    6364:	f884 3169 	strb.w	r3, [r4, #361]	; 0x169
	ep_ctx->write_in_progress = false;
    6368:	f884 316a 	strb.w	r3, [r4, #362]	; 0x16a
		if (!ep_ctx->buf.block.data) {
    636c:	f8d4 329c 	ldr.w	r3, [r4, #668]	; 0x29c
    6370:	b9a3      	cbnz	r3, 639c <eps_ctx_init+0x160>
			err = k_mem_pool_alloc(&ep_buf_pool, &ep_ctx->buf.block,
    6372:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6376:	491a      	ldr	r1, [pc, #104]	; (63e0 <eps_ctx_init+0x1a4>)
    6378:	4817      	ldr	r0, [pc, #92]	; (63d8 <eps_ctx_init+0x19c>)
    637a:	f003 fb47 	bl	9a0c <k_mem_pool_alloc>
			if (err < 0) {
    637e:	2800      	cmp	r0, #0
    6380:	da0c      	bge.n	639c <eps_ctx_init+0x160>
				LOG_ERR("EP buffer alloc failed for ISOOUT");
    6382:	2301      	movs	r3, #1
    6384:	f04f 0100 	mov.w	r1, #0
    6388:	f363 0107 	bfi	r1, r3, #0, #8
    638c:	4a0d      	ldr	r2, [pc, #52]	; (63c4 <eps_ctx_init+0x188>)
    638e:	4b0e      	ldr	r3, [pc, #56]	; (63c8 <eps_ctx_init+0x18c>)
    6390:	4814      	ldr	r0, [pc, #80]	; (63e4 <eps_ctx_init+0x1a8>)
    6392:	1a9b      	subs	r3, r3, r2
    6394:	08db      	lsrs	r3, r3, #3
    6396:	f363 118f 	bfi	r1, r3, #6, #10
    639a:	e7d6      	b.n	634a <eps_ctx_init+0x10e>
	ep_ctx->buf.data = ep_ctx->buf.block.data;
    639c:	f8d4 329c 	ldr.w	r3, [r4, #668]	; 0x29c
	ep_ctx->buf.len  = 0U;
    63a0:	2000      	movs	r0, #0
	ep_ctx->buf.curr = ep_ctx->buf.data;
    63a2:	e9c4 33a9 	strd	r3, r3, [r4, #676]	; 0x2a4
	ep_ctx->read_complete = true;
    63a6:	2301      	movs	r3, #1
    63a8:	f884 32ac 	strb.w	r3, [r4, #684]	; 0x2ac
	ep_ctx->buf.len  = 0U;
    63ac:	f8c4 0298 	str.w	r0, [r4, #664]	; 0x298
	ep_ctx->read_pending = false;
    63b0:	f884 02ad 	strb.w	r0, [r4, #685]	; 0x2ad
	ep_ctx->write_in_progress = false;
    63b4:	f884 02ae 	strb.w	r0, [r4, #686]	; 0x2ae
    63b8:	e76a      	b.n	6290 <eps_ctx_init+0x54>
}
    63ba:	b002      	add	sp, #8
    63bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    63c0:	200036b0 	.word	0x200036b0
    63c4:	0000b634 	.word	0x0000b634
    63c8:	0000b67c 	.word	0x0000b67c
    63cc:	0000bd01 	.word	0x0000bd01
    63d0:	0000bd23 	.word	0x0000bd23
    63d4:	20001480 	.word	0x20001480
    63d8:	200077c0 	.word	0x200077c0
    63dc:	0000bd46 	.word	0x0000bd46
    63e0:	2000171c 	.word	0x2000171c
    63e4:	0000bd67 	.word	0x0000bd67

000063e8 <usbd_work_handler>:
}


/* Work handler */
static void usbd_work_handler(struct k_work *item)
{
    63e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    63ec:	4aad      	ldr	r2, [pc, #692]	; (66a4 <usbd_work_handler+0x2bc>)
				ctx->status_cb(USB_DC_SOF, NULL);
			}
			break;
		case USBD_EVT_REINIT: {
				/* Reinitialize the peripheral after queue overflow. */
				LOG_ERR("USBD event queue full!");
    63ee:	49ae      	ldr	r1, [pc, #696]	; (66a8 <usbd_work_handler+0x2c0>)
{
    63f0:	6813      	ldr	r3, [r2, #0]
	return get_usbd_ctx()->ready;
    63f2:	4dae      	ldr	r5, [pc, #696]	; (66ac <usbd_work_handler+0x2c4>)
{
    63f4:	b089      	sub	sp, #36	; 0x24
    63f6:	4607      	mov	r7, r0
    63f8:	9307      	str	r3, [sp, #28]
    63fa:	4bad      	ldr	r3, [pc, #692]	; (66b0 <usbd_work_handler+0x2c8>)
				LOG_ERR("USBD event queue full!");
    63fc:	1a5b      	subs	r3, r3, r1
    63fe:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    6402:	e9cd 3201 	strd	r3, r2, [sp, #4]
    6406:	2100      	movs	r1, #0
    6408:	48aa      	ldr	r0, [pc, #680]	; (66b4 <usbd_work_handler+0x2cc>)
    640a:	f003 fdb9 	bl	9f80 <z_impl_k_queue_get>
	while ((ev = usbd_evt_get()) != NULL) {
    640e:	4606      	mov	r6, r0
    6410:	b938      	cbnz	r0, 6422 <usbd_work_handler+0x3a>
			LOG_ERR("Unknown USBD event: %"PRId16".", ev->evt_type);
			break;
		}
		usbd_evt_free(ev);
	}
}
    6412:	9b02      	ldr	r3, [sp, #8]
    6414:	9a07      	ldr	r2, [sp, #28]
    6416:	681b      	ldr	r3, [r3, #0]
    6418:	429a      	cmp	r2, r3
    641a:	f000 8184 	beq.w	6726 <usbd_work_handler+0x33e>
    641e:	f004 fdfd 	bl	b01c <_StackCheckHandler>
	return get_usbd_ctx()->ready;
    6422:	796b      	ldrb	r3, [r5, #5]
    6424:	7d31      	ldrb	r1, [r6, #20]
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    6426:	b95b      	cbnz	r3, 6440 <usbd_work_handler+0x58>
    6428:	2900      	cmp	r1, #0
    642a:	d1ec      	bne.n	6406 <usbd_work_handler+0x1e>
	switch (pwr_evt->state) {
    642c:	7b32      	ldrb	r2, [r6, #12]
    642e:	2a04      	cmp	r2, #4
    6430:	d868      	bhi.n	6504 <usbd_work_handler+0x11c>
    6432:	e8df f012 	tbh	[pc, r2, lsl #1]
    6436:	00f6      	.short	0x00f6
    6438:	00c100b7 	.word	0x00c100b7
    643c:	01100104 	.word	0x01100104
		switch (ev->evt_type) {
    6440:	2904      	cmp	r1, #4
    6442:	f200 8162 	bhi.w	670a <usbd_work_handler+0x322>
    6446:	a201      	add	r2, pc, #4	; (adr r2, 644c <usbd_work_handler+0x64>)
    6448:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
    644c:	0000642d 	.word	0x0000642d
    6450:	00006461 	.word	0x00006461
    6454:	0000666d 	.word	0x0000666d
    6458:	00006695 	.word	0x00006695
    645c:	000066cd 	.word	0x000066cd
			if (!ctx->attached) {
    6460:	f817 3c04 	ldrb.w	r3, [r7, #-4]
    6464:	b973      	cbnz	r3, 6484 <usbd_work_handler+0x9c>
				LOG_ERR("EP %d event dropped (not attached).",
    6466:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
    646a:	f043 0301 	orr.w	r3, r3, #1
    646e:	f363 0907 	bfi	r9, r3, #0, #8
    6472:	9b01      	ldr	r3, [sp, #4]
    6474:	68f1      	ldr	r1, [r6, #12]
    6476:	4890      	ldr	r0, [pc, #576]	; (66b8 <usbd_work_handler+0x2d0>)
    6478:	7a49      	ldrb	r1, [r1, #9]
    647a:	f363 198f 	bfi	r9, r3, #6, #10
    647e:	464a      	mov	r2, r9
    6480:	f7fc fce0 	bl	2e44 <log_1>
	switch (ep_evt->evt_type) {
    6484:	7c33      	ldrb	r3, [r6, #16]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
    6486:	68f4      	ldr	r4, [r6, #12]
	switch (ep_evt->evt_type) {
    6488:	2b03      	cmp	r3, #3
    648a:	d83b      	bhi.n	6504 <usbd_work_handler+0x11c>
    648c:	e8df f003 	tbb	[pc, r3]
    6490:	78734202 	.word	0x78734202
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
    6494:	69a3      	ldr	r3, [r4, #24]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
    6496:	9303      	str	r3, [sp, #12]
    6498:	2208      	movs	r2, #8
    649a:	2100      	movs	r1, #0
    649c:	4618      	mov	r0, r3
    649e:	f001 fc71 	bl	7d84 <memset>
    return (uint8_t)(NRF_USBD->BMREQUESTTYPE);
    64a2:	4a86      	ldr	r2, [pc, #536]	; (66bc <usbd_work_handler+0x2d4>)
    64a4:	9b03      	ldr	r3, [sp, #12]
    64a6:	f8d2 1480 	ldr.w	r1, [r2, #1152]	; 0x480
    64aa:	7019      	strb	r1, [r3, #0]
    return (uint8_t)(NRF_USBD->BREQUEST);
    64ac:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
    64b0:	7059      	strb	r1, [r3, #1]
    const uint16_t val = NRF_USBD->WVALUEL;
    64b2:	f8d2 1488 	ldr.w	r1, [r2, #1160]	; 0x488
    return (uint16_t)(val | ((NRF_USBD->WVALUEH) << 8));
    64b6:	f8d2 048c 	ldr.w	r0, [r2, #1164]	; 0x48c
    64ba:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get();
    64be:	8059      	strh	r1, [r3, #2]
    const uint16_t val = NRF_USBD->WINDEXL;
    64c0:	f8d2 1490 	ldr.w	r1, [r2, #1168]	; 0x490
    return (uint16_t)(val | ((NRF_USBD->WINDEXH) << 8));
    64c4:	f8d2 0494 	ldr.w	r0, [r2, #1172]	; 0x494
    64c8:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get();
    64cc:	8099      	strh	r1, [r3, #4]
    const uint16_t val = NRF_USBD->WLENGTHL;
    64ce:	f8d2 1498 	ldr.w	r1, [r2, #1176]	; 0x498
    return (uint16_t)(val | ((NRF_USBD->WLENGTHH) << 8));
    64d2:	f8d2 249c 	ldr.w	r2, [r2, #1180]	; 0x49c
    64d6:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get();
    64da:	80da      	strh	r2, [r3, #6]
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    64dc:	2208      	movs	r2, #8
    64de:	60e2      	str	r2, [r4, #12]
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
    64e0:	2100      	movs	r1, #0
    64e2:	6822      	ldr	r2, [r4, #0]
    64e4:	7a60      	ldrb	r0, [r4, #9]
    64e6:	4790      	blx	r2
	if (((usbd_setup->bmRequestType & USB_BMREQUESTTYPE_DIR_MASK)
    64e8:	9b03      	ldr	r3, [sp, #12]
    64ea:	f993 2000 	ldrsb.w	r2, [r3]
    64ee:	2a00      	cmp	r2, #0
    64f0:	db0c      	blt.n	650c <usbd_work_handler+0x124>
	    && (usbd_setup->wLength)) {
    64f2:	88da      	ldrh	r2, [r3, #6]
    64f4:	b152      	cbz	r2, 650c <usbd_work_handler+0x124>
		ctx->ctrl_read_len -= usbd_setup->wLength;
    64f6:	f8b5 32b0 	ldrh.w	r3, [r5, #688]	; 0x2b0
    64fa:	1a9b      	subs	r3, r3, r2
    64fc:	f8a5 32b0 	strh.w	r3, [r5, #688]	; 0x2b0
		nrfx_usbd_setup_data_clear();
    6500:	f7fb fec2 	bl	2288 <nrfx_usbd_setup_data_clear>
	k_mem_pool_free(&ev->block);
    6504:	1d30      	adds	r0, r6, #4
    6506:	f003 fb2f 	bl	9b68 <k_mem_pool_free>
    650a:	e77c      	b.n	6406 <usbd_work_handler+0x1e>
		ctx->ctrl_read_len = 0U;
    650c:	2300      	movs	r3, #0
    650e:	f8a5 32b0 	strh.w	r3, [r5, #688]	; 0x2b0
    6512:	e7f7      	b.n	6504 <usbd_work_handler+0x11c>
	if (!ep_ctx->read_pending) {
    6514:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    6518:	2b00      	cmp	r3, #0
    651a:	d0f3      	beq.n	6504 <usbd_work_handler+0x11c>
	if (!ep_ctx->read_complete) {
    651c:	f894 3020 	ldrb.w	r3, [r4, #32]
    6520:	2b00      	cmp	r3, #0
    6522:	d0ef      	beq.n	6504 <usbd_work_handler+0x11c>
	ep_ctx->read_pending = false;
    6524:	2300      	movs	r3, #0
    6526:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
    652a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	ep_ctx->read_complete = false;
    652e:	f884 3020 	strb.w	r3, [r4, #32]
    6532:	4863      	ldr	r0, [pc, #396]	; (66c0 <usbd_work_handler+0x2d8>)
    6534:	f003 fb96 	bl	9c64 <z_impl_k_mutex_lock>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    6538:	69a2      	ldr	r2, [r4, #24]
    653a:	9204      	str	r2, [sp, #16]
    653c:	2300      	movs	r3, #0
    653e:	6862      	ldr	r2, [r4, #4]
    6540:	9306      	str	r3, [sp, #24]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    6542:	a904      	add	r1, sp, #16
    6544:	7a60      	ldrb	r0, [r4, #9]
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    6546:	9205      	str	r2, [sp, #20]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    6548:	f7fb fd74 	bl	2034 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    654c:	4b5d      	ldr	r3, [pc, #372]	; (66c4 <usbd_work_handler+0x2dc>)
    654e:	4298      	cmp	r0, r3
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    6550:	4601      	mov	r1, r0
	if (err != NRFX_SUCCESS) {
    6552:	d00c      	beq.n	656e <usbd_work_handler+0x186>
		LOG_ERR("nRF USBD transfer error (OUT): %d.", err);
    6554:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
    6558:	f043 0301 	orr.w	r3, r3, #1
    655c:	f363 0807 	bfi	r8, r3, #0, #8
    6560:	9b01      	ldr	r3, [sp, #4]
    6562:	4859      	ldr	r0, [pc, #356]	; (66c8 <usbd_work_handler+0x2e0>)
    6564:	f363 188f 	bfi	r8, r3, #6, #10
    6568:	4642      	mov	r2, r8
    656a:	f7fc fc6b 	bl	2e44 <log_1>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
    656e:	4854      	ldr	r0, [pc, #336]	; (66c0 <usbd_work_handler+0x2d8>)
    6570:	f003 fbf4 	bl	9d5c <z_impl_k_mutex_unlock>
    6574:	e7c6      	b.n	6504 <usbd_work_handler+0x11c>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    6576:	6823      	ldr	r3, [r4, #0]
    6578:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    657a:	7a60      	ldrb	r0, [r4, #9]
    657c:	4798      	blx	r3
		break;
    657e:	e7c1      	b.n	6504 <usbd_work_handler+0x11c>
		if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
    6580:	7aa3      	ldrb	r3, [r4, #10]
    6582:	b963      	cbnz	r3, 659e <usbd_work_handler+0x1b6>
		    && (!ep_ctx->write_fragmented)) {
    6584:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    6588:	b94b      	cbnz	r3, 659e <usbd_work_handler+0x1b6>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
    658a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    658e:	484c      	ldr	r0, [pc, #304]	; (66c0 <usbd_work_handler+0x2d8>)
    6590:	f003 fb68 	bl	9c64 <z_impl_k_mutex_lock>
			nrfx_usbd_setup_clear();
    6594:	f7fb fece 	bl	2334 <nrfx_usbd_setup_clear>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
    6598:	4849      	ldr	r0, [pc, #292]	; (66c0 <usbd_work_handler+0x2d8>)
    659a:	f003 fbdf 	bl	9d5c <z_impl_k_mutex_unlock>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    659e:	6823      	ldr	r3, [r4, #0]
    65a0:	2102      	movs	r1, #2
    65a2:	e7ea      	b.n	657a <usbd_work_handler+0x192>
		if (!nrfx_usbd_is_enabled()) {
    65a4:	f7fb fccc 	bl	1f40 <nrfx_usbd_is_enabled>
    65a8:	2800      	cmp	r0, #0
    65aa:	d1ab      	bne.n	6504 <usbd_work_handler+0x11c>
			nrfx_usbd_enable();
    65ac:	f7fb fbd4 	bl	1d58 <nrfx_usbd_enable>
			(void) hf_clock_enable(true, false);
    65b0:	2001      	movs	r0, #1
    65b2:	f7ff fbd5 	bl	5d60 <hf_clock_enable.constprop.10>
    65b6:	e7a5      	b.n	6504 <usbd_work_handler+0x11c>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    65b8:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    65ba:	f064 007f 	orn	r0, r4, #127	; 0x7f
    65be:	b2c0      	uxtb	r0, r0
    65c0:	f7ff fb8a 	bl	5cd8 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    65c4:	7a03      	ldrb	r3, [r0, #8]
    65c6:	b113      	cbz	r3, 65ce <usbd_work_handler+0x1e6>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    65c8:	7a40      	ldrb	r0, [r0, #9]
    65ca:	f7fc f9ad 	bl	2928 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    65ce:	3401      	adds	r4, #1
    65d0:	2c08      	cmp	r4, #8
    65d2:	d1f2      	bne.n	65ba <usbd_work_handler+0x1d2>
		if (ep_ctx->cfg.en) {
    65d4:	f895 3150 	ldrb.w	r3, [r5, #336]	; 0x150
    65d8:	b11b      	cbz	r3, 65e2 <usbd_work_handler+0x1fa>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    65da:	f895 0151 	ldrb.w	r0, [r5, #337]	; 0x151
    65de:	f7fc f9a3 	bl	2928 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    65e2:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    65e4:	b2e0      	uxtb	r0, r4
    65e6:	f7ff fb77 	bl	5cd8 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    65ea:	7a03      	ldrb	r3, [r0, #8]
    65ec:	b113      	cbz	r3, 65f4 <usbd_work_handler+0x20c>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    65ee:	7a40      	ldrb	r0, [r0, #9]
    65f0:	f7fc f99a 	bl	2928 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
    65f4:	3401      	adds	r4, #1
    65f6:	2c08      	cmp	r4, #8
    65f8:	d1f4      	bne.n	65e4 <usbd_work_handler+0x1fc>
		if (ep_ctx->cfg.en) {
    65fa:	f895 3294 	ldrb.w	r3, [r5, #660]	; 0x294
    65fe:	b11b      	cbz	r3, 6608 <usbd_work_handler+0x220>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    6600:	f895 0295 	ldrb.w	r0, [r5, #661]	; 0x295
    6604:	f7fc f990 	bl	2928 <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
    6608:	2001      	movs	r0, #1
    660a:	f7fb fc67 	bl	1edc <nrfx_usbd_start>
		ctx->ready = true;
    660e:	2301      	movs	r3, #1
    6610:	716b      	strb	r3, [r5, #5]
		if (ctx->status_cb) {
    6612:	682b      	ldr	r3, [r5, #0]
    6614:	2b00      	cmp	r3, #0
    6616:	f43f af75 	beq.w	6504 <usbd_work_handler+0x11c>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
    661a:	2100      	movs	r1, #0
    661c:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_SOF, NULL);
    661e:	4798      	blx	r3
    6620:	e770      	b.n	6504 <usbd_work_handler+0x11c>
		ctx->ready = false;
    6622:	2400      	movs	r4, #0
    6624:	716c      	strb	r4, [r5, #5]
		nrfx_usbd_disable();
    6626:	f7fc f921 	bl	286c <nrfx_usbd_disable>
		(void) hf_clock_enable(false, false);
    662a:	4620      	mov	r0, r4
    662c:	f7ff fb98 	bl	5d60 <hf_clock_enable.constprop.10>
		if (ctx->status_cb) {
    6630:	682b      	ldr	r3, [r5, #0]
    6632:	2b00      	cmp	r3, #0
    6634:	f43f af66 	beq.w	6504 <usbd_work_handler+0x11c>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
    6638:	4621      	mov	r1, r4
    663a:	2004      	movs	r0, #4
    663c:	e7ef      	b.n	661e <usbd_work_handler+0x236>
		if (dev_ready()) {
    663e:	2b00      	cmp	r3, #0
    6640:	f43f af60 	beq.w	6504 <usbd_work_handler+0x11c>
			nrfx_usbd_suspend();
    6644:	f7fc f938 	bl	28b8 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
    6648:	682b      	ldr	r3, [r5, #0]
    664a:	2b00      	cmp	r3, #0
    664c:	f43f af5a 	beq.w	6504 <usbd_work_handler+0x11c>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
    6650:	2100      	movs	r1, #0
    6652:	2005      	movs	r0, #5
    6654:	e7e3      	b.n	661e <usbd_work_handler+0x236>
		if (ctx->status_cb && dev_ready()) {
    6656:	682a      	ldr	r2, [r5, #0]
    6658:	2a00      	cmp	r2, #0
    665a:	f43f af53 	beq.w	6504 <usbd_work_handler+0x11c>
    665e:	2b00      	cmp	r3, #0
    6660:	f43f af50 	beq.w	6504 <usbd_work_handler+0x11c>
			ctx->status_cb(USB_DC_RESUME, NULL);
    6664:	2100      	movs	r1, #0
    6666:	2006      	movs	r0, #6
    6668:	4790      	blx	r2
    666a:	e74b      	b.n	6504 <usbd_work_handler+0x11c>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    666c:	f107 040c 	add.w	r4, r7, #12
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
    6670:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6674:	4620      	mov	r0, r4
    6676:	f003 faf5 	bl	9c64 <z_impl_k_mutex_lock>
			eps_ctx_init();
    667a:	f7ff fddf 	bl	623c <eps_ctx_init>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
    667e:	4620      	mov	r0, r4
    6680:	f003 fb6c 	bl	9d5c <z_impl_k_mutex_unlock>
			if (ctx->status_cb) {
    6684:	f857 3c08 	ldr.w	r3, [r7, #-8]
    6688:	2b00      	cmp	r3, #0
    668a:	f43f af3b 	beq.w	6504 <usbd_work_handler+0x11c>
				ctx->status_cb(USB_DC_RESET, NULL);
    668e:	2100      	movs	r1, #0
    6690:	2001      	movs	r0, #1
    6692:	e7c4      	b.n	661e <usbd_work_handler+0x236>
			if (ctx->status_cb) {
    6694:	f857 3c08 	ldr.w	r3, [r7, #-8]
    6698:	2b00      	cmp	r3, #0
    669a:	f43f af33 	beq.w	6504 <usbd_work_handler+0x11c>
				ctx->status_cb(USB_DC_SOF, NULL);
    669e:	2100      	movs	r1, #0
    66a0:	200a      	movs	r0, #10
    66a2:	e7bc      	b.n	661e <usbd_work_handler+0x236>
    66a4:	200036b0 	.word	0x200036b0
    66a8:	0000b634 	.word	0x0000b634
    66ac:	20001480 	.word	0x20001480
    66b0:	0000b67c 	.word	0x0000b67c
    66b4:	2000780c 	.word	0x2000780c
    66b8:	0000bf3d 	.word	0x0000bf3d
    66bc:	40027000 	.word	0x40027000
    66c0:	20001494 	.word	0x20001494
    66c4:	0bad0000 	.word	0x0bad0000
    66c8:	0000bf61 	.word	0x0000bf61
				LOG_ERR("USBD event queue full!");
    66cc:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
    66d0:	f043 0301 	orr.w	r3, r3, #1
    66d4:	f363 0a07 	bfi	sl, r3, #0, #8
    66d8:	9b01      	ldr	r3, [sp, #4]
    66da:	4814      	ldr	r0, [pc, #80]	; (672c <usbd_work_handler+0x344>)
    66dc:	f363 1a8f 	bfi	sl, r3, #6, #10
    66e0:	4651      	mov	r1, sl
    66e2:	f7fc fb91 	bl	2e08 <log_0>
	nrf5_power_usb_power_int_enable(false);
    66e6:	2000      	movs	r0, #0
    66e8:	f7ff fad4 	bl	5c94 <nrf5_power_usb_power_int_enable>
	nrfx_usbd_disable();
    66ec:	f7fc f8be 	bl	286c <nrfx_usbd_disable>
	nrfx_usbd_uninit();
    66f0:	f7fb fb1a 	bl	1d28 <nrfx_usbd_uninit>
	usbd_evt_flush();
    66f4:	f7ff fbc6 	bl	5e84 <usbd_evt_flush>
	ret = eps_ctx_init();
    66f8:	f7ff fda0 	bl	623c <eps_ctx_init>
	nrf5_power_usb_power_int_enable(true);
    66fc:	2001      	movs	r0, #1
    66fe:	f7ff fac9 	bl	5c94 <nrf5_power_usb_power_int_enable>
	err = nrfx_usbd_init(usbd_event_handler);
    6702:	480b      	ldr	r0, [pc, #44]	; (6730 <usbd_work_handler+0x348>)
    6704:	f7fb fc46 	bl	1f94 <nrfx_usbd_init>
		__ASSERT_NO_MSG(0);
    6708:	e6fc      	b.n	6504 <usbd_work_handler+0x11c>
			LOG_ERR("Unknown USBD event: %"PRId16".", ev->evt_type);
    670a:	f02b 033f 	bic.w	r3, fp, #63	; 0x3f
    670e:	f043 0301 	orr.w	r3, r3, #1
    6712:	f363 0b07 	bfi	fp, r3, #0, #8
    6716:	9b01      	ldr	r3, [sp, #4]
    6718:	4806      	ldr	r0, [pc, #24]	; (6734 <usbd_work_handler+0x34c>)
    671a:	f363 1b8f 	bfi	fp, r3, #6, #10
    671e:	465a      	mov	r2, fp
    6720:	f7fc fb90 	bl	2e44 <log_1>
			break;
    6724:	e6ee      	b.n	6504 <usbd_work_handler+0x11c>
}
    6726:	b009      	add	sp, #36	; 0x24
    6728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    672c:	0000bf84 	.word	0x0000bf84
    6730:	00006091 	.word	0x00006091
    6734:	0000bf9b 	.word	0x0000bf9b

00006738 <usb_dc_nrfx_power_event_callback>:
{
    6738:	b537      	push	{r0, r1, r2, r4, r5, lr}
    673a:	4a21      	ldr	r2, [pc, #132]	; (67c0 <usb_dc_nrfx_power_event_callback+0x88>)
	switch (event) {
    673c:	f5b0 7f90 	cmp.w	r0, #288	; 0x120
{
    6740:	6813      	ldr	r3, [r2, #0]
    6742:	9301      	str	r3, [sp, #4]
	switch (event) {
    6744:	4615      	mov	r5, r2
    6746:	d01c      	beq.n	6782 <usb_dc_nrfx_power_event_callback+0x4a>
    6748:	f5b0 7f92 	cmp.w	r0, #292	; 0x124
    674c:	d02e      	beq.n	67ac <usb_dc_nrfx_power_event_callback+0x74>
    674e:	f5b0 7f8e 	cmp.w	r0, #284	; 0x11c
    6752:	d02d      	beq.n	67b0 <usb_dc_nrfx_power_event_callback+0x78>
		LOG_ERR("Unknown USB power event");
    6754:	2301      	movs	r3, #1
    6756:	f04f 0100 	mov.w	r1, #0
    675a:	f363 0107 	bfi	r1, r3, #0, #8
    675e:	4819      	ldr	r0, [pc, #100]	; (67c4 <usb_dc_nrfx_power_event_callback+0x8c>)
    6760:	4b19      	ldr	r3, [pc, #100]	; (67c8 <usb_dc_nrfx_power_event_callback+0x90>)
    6762:	1a1b      	subs	r3, r3, r0
    6764:	08db      	lsrs	r3, r3, #3
    6766:	9801      	ldr	r0, [sp, #4]
    6768:	f363 118f 	bfi	r1, r3, #6, #10
    676c:	6813      	ldr	r3, [r2, #0]
    676e:	4298      	cmp	r0, r3
    6770:	d001      	beq.n	6776 <usb_dc_nrfx_power_event_callback+0x3e>
}
    6772:	f004 fc53 	bl	b01c <_StackCheckHandler>
		LOG_ERR("Unknown USB power event");
    6776:	4815      	ldr	r0, [pc, #84]	; (67cc <usb_dc_nrfx_power_event_callback+0x94>)
}
    6778:	b003      	add	sp, #12
    677a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		LOG_ERR("Unknown USB power event");
    677e:	f7fc bb43 	b.w	2e08 <log_0>
		new_state = USBD_DETACHED;
    6782:	2400      	movs	r4, #0
	struct usbd_event *ev = usbd_evt_alloc();
    6784:	f7ff fb98 	bl	5eb8 <usbd_evt_alloc>
	if (!ev) {
    6788:	b1a0      	cbz	r0, 67b4 <usb_dc_nrfx_power_event_callback+0x7c>
	ev->evt_type = USBD_EVT_POWER;
    678a:	2200      	movs	r2, #0
    678c:	7502      	strb	r2, [r0, #20]
	ev->evt.pwr_evt.state = new_state;
    678e:	7304      	strb	r4, [r0, #12]
	usbd_evt_put(ev);
    6790:	f7ff fad0 	bl	5d34 <usbd_evt_put>
	if (usbd_ctx.attached) {
    6794:	4b0e      	ldr	r3, [pc, #56]	; (67d0 <usb_dc_nrfx_power_event_callback+0x98>)
    6796:	791b      	ldrb	r3, [r3, #4]
    6798:	b163      	cbz	r3, 67b4 <usb_dc_nrfx_power_event_callback+0x7c>
		usbd_work_schedule();
    679a:	9a01      	ldr	r2, [sp, #4]
    679c:	682b      	ldr	r3, [r5, #0]
    679e:	429a      	cmp	r2, r3
    67a0:	d1e7      	bne.n	6772 <usb_dc_nrfx_power_event_callback+0x3a>
}
    67a2:	b003      	add	sp, #12
    67a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		usbd_work_schedule();
    67a8:	f7ff bb3e 	b.w	5e28 <usbd_work_schedule>
		new_state = USBD_POWERED;
    67ac:	2402      	movs	r4, #2
    67ae:	e7e9      	b.n	6784 <usb_dc_nrfx_power_event_callback+0x4c>
		new_state = USBD_ATTACHED;
    67b0:	2401      	movs	r4, #1
    67b2:	e7e7      	b.n	6784 <usb_dc_nrfx_power_event_callback+0x4c>
}
    67b4:	9a01      	ldr	r2, [sp, #4]
    67b6:	682b      	ldr	r3, [r5, #0]
    67b8:	429a      	cmp	r2, r3
    67ba:	d1da      	bne.n	6772 <usb_dc_nrfx_power_event_callback+0x3a>
    67bc:	b003      	add	sp, #12
    67be:	bd30      	pop	{r4, r5, pc}
    67c0:	200036b0 	.word	0x200036b0
    67c4:	0000b634 	.word	0x0000b634
    67c8:	0000b67c 	.word	0x0000b67c
    67cc:	0000be76 	.word	0x0000be76
    67d0:	20001480 	.word	0x20001480

000067d4 <usb_dc_attach>:

int usb_dc_attach(void)
{
    67d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct nrf_usbd_ctx *ctx = get_usbd_ctx();
	nrfx_err_t err;
	int ret;

	if (ctx->attached) {
    67d6:	4c1f      	ldr	r4, [pc, #124]	; (6854 <usb_dc_attach+0x80>)
{
    67d8:	4e1f      	ldr	r6, [pc, #124]	; (6858 <usb_dc_attach+0x84>)
	if (ctx->attached) {
    67da:	7925      	ldrb	r5, [r4, #4]
{
    67dc:	6832      	ldr	r2, [r6, #0]
    67de:	9201      	str	r2, [sp, #4]
	if (ctx->attached) {
    67e0:	bb8d      	cbnz	r5, 6846 <usb_dc_attach+0x72>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    67e2:	4b1e      	ldr	r3, [pc, #120]	; (685c <usb_dc_attach+0x88>)
    67e4:	60a5      	str	r5, [r4, #8]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex)
    67e6:	f104 0014 	add.w	r0, r4, #20
    67ea:	e9c4 3503 	strd	r3, r5, [r4, #12]
    67ee:	f003 fa25 	bl	9c3c <z_impl_k_mutex_init>
	}

	k_work_init(&ctx->usb_work, usbd_work_handler);
	k_mutex_init(&ctx->drv_lock);

	IRQ_CONNECT(DT_NORDIC_NRF_USBD_USBD_0_IRQ,
    67f2:	462a      	mov	r2, r5
    67f4:	2101      	movs	r1, #1
    67f6:	2027      	movs	r0, #39	; 0x27
    67f8:	f000 fef4 	bl	75e4 <z_irq_priority_set>
		    DT_NORDIC_NRF_USBD_USBD_0_IRQ_PRIORITY,
		    nrfx_isr, nrfx_usbd_irq_handler, 0);

	err = nrfx_usbd_init(usbd_event_handler);
    67fc:	4818      	ldr	r0, [pc, #96]	; (6860 <usb_dc_attach+0x8c>)
    67fe:	f7fb fbc9 	bl	1f94 <nrfx_usbd_init>

	if (err != NRFX_SUCCESS) {
    6802:	4b18      	ldr	r3, [pc, #96]	; (6864 <usb_dc_attach+0x90>)
    6804:	4298      	cmp	r0, r3
    6806:	d120      	bne.n	684a <usb_dc_attach+0x76>
		LOG_DBG("nRF USBD driver init failed. Code: %d.",
			(u32_t)err);
		return -EIO;
	}
	nrf5_power_usb_power_int_enable(true);
    6808:	2001      	movs	r0, #1
    680a:	f7ff fa43 	bl	5c94 <nrf5_power_usb_power_int_enable>

	ret = eps_ctx_init();
    680e:	f7ff fd15 	bl	623c <eps_ctx_init>
	if (ret == 0) {
    6812:	4605      	mov	r5, r0
    6814:	b908      	cbnz	r0, 681a <usb_dc_attach+0x46>
		ctx->attached = true;
    6816:	2301      	movs	r3, #1
    6818:	7123      	strb	r3, [r4, #4]
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
    681a:	4b13      	ldr	r3, [pc, #76]	; (6868 <usb_dc_attach+0x94>)
	}

	if (!k_fifo_is_empty(&work_queue)) {
    681c:	681b      	ldr	r3, [r3, #0]
    681e:	b10b      	cbz	r3, 6824 <usb_dc_attach+0x50>
		usbd_work_schedule();
    6820:	f7ff fb02 	bl	5e28 <usbd_work_schedule>
#endif // NRF_POWER_HAS_VDDH

#if NRF_POWER_HAS_USBREG
__STATIC_INLINE uint32_t nrf_power_usbregstatus_get(void)
{
    return NRF_POWER->USBREGSTATUS;
    6824:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6828:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
	}

	if (nrf_power_usbregstatus_vbusdet_get()) {
    682c:	07db      	lsls	r3, r3, #31
    682e:	d503      	bpl.n	6838 <usb_dc_attach+0x64>
		 * the peripheral is re-enabled.
		 * When USB-enabled bootloader is used, target application
		 * will not receive this event and it needs to be generated
		 * again here.
		 */
		usb_dc_nrfx_power_event_callback(NRF_POWER_EVENT_USBDETECTED);
    6830:	f44f 708e 	mov.w	r0, #284	; 0x11c
    6834:	f7ff ff80 	bl	6738 <usb_dc_nrfx_power_event_callback>
	}

	return ret;
}
    6838:	9a01      	ldr	r2, [sp, #4]
    683a:	6833      	ldr	r3, [r6, #0]
    683c:	429a      	cmp	r2, r3
    683e:	4628      	mov	r0, r5
    6840:	d006      	beq.n	6850 <usb_dc_attach+0x7c>
    6842:	f004 fbeb 	bl	b01c <_StackCheckHandler>
		return 0;
    6846:	2500      	movs	r5, #0
    6848:	e7f6      	b.n	6838 <usb_dc_attach+0x64>
		return -EIO;
    684a:	f06f 0504 	mvn.w	r5, #4
    684e:	e7f3      	b.n	6838 <usb_dc_attach+0x64>
}
    6850:	b002      	add	sp, #8
    6852:	bd70      	pop	{r4, r5, r6, pc}
    6854:	20001480 	.word	0x20001480
    6858:	200036b0 	.word	0x200036b0
    685c:	000063e9 	.word	0x000063e9
    6860:	00006091 	.word	0x00006091
    6864:	0bad0000 	.word	0x0bad0000
    6868:	2000780c 	.word	0x2000780c

0000686c <usb_dc_set_address>:

	return 0;
}

int usb_dc_set_address(const u8_t addr)
{
    686c:	b507      	push	{r0, r1, r2, lr}
    686e:	4b0c      	ldr	r3, [pc, #48]	; (68a0 <usb_dc_set_address+0x34>)
    6870:	681a      	ldr	r2, [r3, #0]
    6872:	9201      	str	r2, [sp, #4]
	return get_usbd_ctx()->attached;
    6874:	4a0b      	ldr	r2, [pc, #44]	; (68a4 <usb_dc_set_address+0x38>)
	struct nrf_usbd_ctx *ctx;

	if (!dev_attached() || !dev_ready()) {
    6876:	7911      	ldrb	r1, [r2, #4]
    6878:	b159      	cbz	r1, 6892 <usb_dc_set_address+0x26>
    687a:	7952      	ldrb	r2, [r2, #5]

	ctx = get_usbd_ctx();

	LOG_DBG("Address set to: %d.", addr);

	return 0;
    687c:	2a00      	cmp	r2, #0
    687e:	bf0c      	ite	eq
    6880:	f06f 0012 	mvneq.w	r0, #18
    6884:	2000      	movne	r0, #0
}
    6886:	9a01      	ldr	r2, [sp, #4]
    6888:	681b      	ldr	r3, [r3, #0]
    688a:	429a      	cmp	r2, r3
    688c:	d004      	beq.n	6898 <usb_dc_set_address+0x2c>
    688e:	f004 fbc5 	bl	b01c <_StackCheckHandler>
		return -ENODEV;
    6892:	f06f 0012 	mvn.w	r0, #18
    6896:	e7f6      	b.n	6886 <usb_dc_set_address+0x1a>
}
    6898:	b003      	add	sp, #12
    689a:	f85d fb04 	ldr.w	pc, [sp], #4
    689e:	bf00      	nop
    68a0:	200036b0 	.word	0x200036b0
    68a4:	20001480 	.word	0x20001480

000068a8 <usb_dc_ep_check_cap>:


int usb_dc_ep_check_cap(const struct usb_dc_ep_cfg_data *const ep_cfg)
{
    68a8:	b513      	push	{r0, r1, r4, lr}
    68aa:	4c1b      	ldr	r4, [pc, #108]	; (6918 <usb_dc_ep_check_cap+0x70>)
	u8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    68ac:	7802      	ldrb	r2, [r0, #0]

	LOG_DBG("ep %x, mps %d, type %d", ep_cfg->ep_addr, ep_cfg->ep_mps,
		ep_cfg->ep_type);

	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    68ae:	7901      	ldrb	r1, [r0, #4]
{
    68b0:	6823      	ldr	r3, [r4, #0]
    68b2:	9301      	str	r3, [sp, #4]
	u8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    68b4:	f002 030f 	and.w	r3, r2, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    68b8:	b9a1      	cbnz	r1, 68e4 <usb_dc_ep_check_cap+0x3c>
    68ba:	b34b      	cbz	r3, 6910 <usb_dc_ep_check_cap+0x68>
		LOG_ERR("invalid endpoint configuration");
    68bc:	2301      	movs	r3, #1
    68be:	f363 0107 	bfi	r1, r3, #0, #8
    68c2:	4a16      	ldr	r2, [pc, #88]	; (691c <usb_dc_ep_check_cap+0x74>)
    68c4:	4b16      	ldr	r3, [pc, #88]	; (6920 <usb_dc_ep_check_cap+0x78>)
    68c6:	4817      	ldr	r0, [pc, #92]	; (6924 <usb_dc_ep_check_cap+0x7c>)
    68c8:	1a9b      	subs	r3, r3, r2
    68ca:	08db      	lsrs	r3, r3, #3
    68cc:	f363 118f 	bfi	r1, r3, #6, #10
		return -1;
	}

	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
		LOG_ERR("invalid endpoint index/address");
    68d0:	f7fc fa9a 	bl	2e08 <log_0>
		return -1;
    68d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		LOG_WRN("invalid endpoint type");
		return -1;
	}

	return 0;
}
    68d8:	9a01      	ldr	r2, [sp, #4]
    68da:	6823      	ldr	r3, [r4, #0]
    68dc:	429a      	cmp	r2, r3
    68de:	d019      	beq.n	6914 <usb_dc_ep_check_cap+0x6c>
    68e0:	f004 fb9c 	bl	b01c <_StackCheckHandler>
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
    68e4:	2b08      	cmp	r3, #8
    68e6:	d90c      	bls.n	6902 <usb_dc_ep_check_cap+0x5a>
		LOG_ERR("invalid endpoint index/address");
    68e8:	2301      	movs	r3, #1
    68ea:	f04f 0100 	mov.w	r1, #0
    68ee:	f363 0107 	bfi	r1, r3, #0, #8
    68f2:	4a0a      	ldr	r2, [pc, #40]	; (691c <usb_dc_ep_check_cap+0x74>)
    68f4:	4b0a      	ldr	r3, [pc, #40]	; (6920 <usb_dc_ep_check_cap+0x78>)
    68f6:	480c      	ldr	r0, [pc, #48]	; (6928 <usb_dc_ep_check_cap+0x80>)
    68f8:	1a9b      	subs	r3, r3, r2
    68fa:	08db      	lsrs	r3, r3, #3
    68fc:	f363 118f 	bfi	r1, r3, #6, #10
    6900:	e7e6      	b.n	68d0 <usb_dc_ep_check_cap+0x28>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    6902:	2901      	cmp	r1, #1
    6904:	d104      	bne.n	6910 <usb_dc_ep_check_cap+0x68>
    6906:	f082 0008 	eor.w	r0, r2, #8
    690a:	f340 00c0 	sbfx	r0, r0, #3, #1
    690e:	e7e3      	b.n	68d8 <usb_dc_ep_check_cap+0x30>
	return 0;
    6910:	2000      	movs	r0, #0
    6912:	e7e1      	b.n	68d8 <usb_dc_ep_check_cap+0x30>
}
    6914:	b002      	add	sp, #8
    6916:	bd10      	pop	{r4, pc}
    6918:	200036b0 	.word	0x200036b0
    691c:	0000b634 	.word	0x0000b634
    6920:	0000b67c 	.word	0x0000b67c
    6924:	0000bdd1 	.word	0x0000bdd1
    6928:	0000bdf0 	.word	0x0000bdf0

0000692c <usb_dc_ep_configure>:

int usb_dc_ep_configure(const struct usb_dc_ep_cfg_data *const ep_cfg)
{
    692c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    692e:	4d1a      	ldr	r5, [pc, #104]	; (6998 <usb_dc_ep_configure+0x6c>)
    6930:	682b      	ldr	r3, [r5, #0]
    6932:	9301      	str	r3, [sp, #4]
	return get_usbd_ctx()->attached;
    6934:	4b19      	ldr	r3, [pc, #100]	; (699c <usb_dc_ep_configure+0x70>)
	struct nrf_usbd_ep_ctx *ep_ctx;

	if (!dev_attached()) {
    6936:	791b      	ldrb	r3, [r3, #4]
{
    6938:	4604      	mov	r4, r0
	if (!dev_attached()) {
    693a:	b33b      	cbz	r3, 698c <usb_dc_ep_configure+0x60>
	 * accordingly. So either this needs to be chosen in the
	 * menuconfig in application area or perhaps in device tree
	 * at compile time or introduce a new API to read the endpoint
	 * configuration at runtime before configuring them.
	 */
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
    693c:	7806      	ldrb	r6, [r0, #0]
    693e:	4630      	mov	r0, r6
    6940:	f7ff f9ca 	bl	5cd8 <endpoint_ctx>
	if (!ep_ctx) {
    6944:	b1a8      	cbz	r0, 6972 <usb_dc_ep_configure+0x46>
		return -EINVAL;
	}

	ep_ctx->cfg.addr = ep_cfg->ep_addr;
    6946:	7246      	strb	r6, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    6948:	8861      	ldrh	r1, [r4, #2]
	ep_ctx->cfg.type = ep_cfg->ep_type;
    694a:	7923      	ldrb	r3, [r4, #4]
    694c:	7283      	strb	r3, [r0, #10]

	if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    694e:	1e4c      	subs	r4, r1, #1
    6950:	400c      	ands	r4, r1
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    6952:	6041      	str	r1, [r0, #4]
	if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    6954:	d010      	beq.n	6978 <usb_dc_ep_configure+0x4c>
		LOG_ERR("EP max packet size must be a power of 2.");
    6956:	2301      	movs	r3, #1
    6958:	f04f 0100 	mov.w	r1, #0
    695c:	f363 0107 	bfi	r1, r3, #0, #8
    6960:	4a0f      	ldr	r2, [pc, #60]	; (69a0 <usb_dc_ep_configure+0x74>)
    6962:	4b10      	ldr	r3, [pc, #64]	; (69a4 <usb_dc_ep_configure+0x78>)
    6964:	4810      	ldr	r0, [pc, #64]	; (69a8 <usb_dc_ep_configure+0x7c>)
    6966:	1a9b      	subs	r3, r3, r2
    6968:	08db      	lsrs	r3, r3, #3
    696a:	f363 118f 	bfi	r1, r3, #6, #10
    696e:	f7fc fa4b 	bl	2e08 <log_0>
		return -EINVAL;
    6972:	f06f 0415 	mvn.w	r4, #21
    6976:	e002      	b.n	697e <usb_dc_ep_configure+0x52>
		return -EINVAL;
	}
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
    6978:	4630      	mov	r0, r6
    697a:	f7fb faf9 	bl	1f70 <nrfx_usbd_ep_max_packet_size_set>
					 ep_cfg->ep_mps);

	return 0;
}
    697e:	9a01      	ldr	r2, [sp, #4]
    6980:	682b      	ldr	r3, [r5, #0]
    6982:	429a      	cmp	r2, r3
    6984:	4620      	mov	r0, r4
    6986:	d004      	beq.n	6992 <usb_dc_ep_configure+0x66>
    6988:	f004 fb48 	bl	b01c <_StackCheckHandler>
		return -ENODEV;
    698c:	f06f 0412 	mvn.w	r4, #18
    6990:	e7f5      	b.n	697e <usb_dc_ep_configure+0x52>
}
    6992:	b002      	add	sp, #8
    6994:	bd70      	pop	{r4, r5, r6, pc}
    6996:	bf00      	nop
    6998:	200036b0 	.word	0x200036b0
    699c:	20001480 	.word	0x20001480
    69a0:	0000b634 	.word	0x0000b634
    69a4:	0000b67c 	.word	0x0000b67c
    69a8:	0000be0f 	.word	0x0000be0f

000069ac <usb_dc_ep_set_stall>:

int usb_dc_ep_set_stall(const u8_t ep)
{
    69ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
    69ae:	4d1d      	ldr	r5, [pc, #116]	; (6a24 <usb_dc_ep_set_stall+0x78>)
    69b0:	682b      	ldr	r3, [r5, #0]
    69b2:	9301      	str	r3, [sp, #4]
	return get_usbd_ctx()->attached;
    69b4:	4b1c      	ldr	r3, [pc, #112]	; (6a28 <usb_dc_ep_set_stall+0x7c>)
	struct nrf_usbd_ep_ctx *ep_ctx;

	if (!dev_attached() || !dev_ready()) {
    69b6:	791a      	ldrb	r2, [r3, #4]
{
    69b8:	4606      	mov	r6, r0
	if (!dev_attached() || !dev_ready()) {
    69ba:	b36a      	cbz	r2, 6a18 <usb_dc_ep_set_stall+0x6c>
    69bc:	795b      	ldrb	r3, [r3, #5]
    69be:	b35b      	cbz	r3, 6a18 <usb_dc_ep_set_stall+0x6c>
		return -ENODEV;
	}

	ep_ctx = endpoint_ctx(ep);
    69c0:	f7ff f98a 	bl	5cd8 <endpoint_ctx>
	if (!ep_ctx) {
    69c4:	4604      	mov	r4, r0
    69c6:	b320      	cbz	r0, 6a12 <usb_dc_ep_set_stall+0x66>
		return -EINVAL;
	}

	switch (ep_ctx->cfg.type) {
    69c8:	7a83      	ldrb	r3, [r0, #10]
    69ca:	2b03      	cmp	r3, #3
    69cc:	d805      	bhi.n	69da <usb_dc_ep_set_stall+0x2e>
    69ce:	e8df f003 	tbb	[pc, r3]
    69d2:	1202      	.short	0x1202
    69d4:	0e0e      	.short	0x0e0e
	case USB_DC_EP_CONTROL:
		nrfx_usbd_setup_stall();
    69d6:	f7fb fcbf 	bl	2358 <nrfx_usbd_setup_stall>
	case USB_DC_EP_ISOCHRONOUS:
		LOG_ERR("STALL unsupported on ISO endpoint.s");
		return -EINVAL;
	}

	ep_ctx->buf.len = 0U;
    69da:	2000      	movs	r0, #0
	ep_ctx->buf.curr = ep_ctx->buf.data;
    69dc:	69a3      	ldr	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
    69de:	60e0      	str	r0, [r4, #12]
	ep_ctx->buf.curr = ep_ctx->buf.data;
    69e0:	61e3      	str	r3, [r4, #28]

	LOG_DBG("STALL on EP %d.", ep);

	return 0;
}
    69e2:	9a01      	ldr	r2, [sp, #4]
    69e4:	682b      	ldr	r3, [r5, #0]
    69e6:	429a      	cmp	r2, r3
    69e8:	d019      	beq.n	6a1e <usb_dc_ep_set_stall+0x72>
    69ea:	f004 fb17 	bl	b01c <_StackCheckHandler>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
    69ee:	4630      	mov	r0, r6
    69f0:	f7fb fbd4 	bl	219c <nrfx_usbd_ep_stall>
		break;
    69f4:	e7f1      	b.n	69da <usb_dc_ep_set_stall+0x2e>
		LOG_ERR("STALL unsupported on ISO endpoint.s");
    69f6:	2301      	movs	r3, #1
    69f8:	f04f 0100 	mov.w	r1, #0
    69fc:	f363 0107 	bfi	r1, r3, #0, #8
    6a00:	4a0a      	ldr	r2, [pc, #40]	; (6a2c <usb_dc_ep_set_stall+0x80>)
    6a02:	4b0b      	ldr	r3, [pc, #44]	; (6a30 <usb_dc_ep_set_stall+0x84>)
    6a04:	480b      	ldr	r0, [pc, #44]	; (6a34 <usb_dc_ep_set_stall+0x88>)
    6a06:	1a9b      	subs	r3, r3, r2
    6a08:	08db      	lsrs	r3, r3, #3
    6a0a:	f363 118f 	bfi	r1, r3, #6, #10
    6a0e:	f7fc f9fb 	bl	2e08 <log_0>
		return -EINVAL;
    6a12:	f06f 0015 	mvn.w	r0, #21
    6a16:	e7e4      	b.n	69e2 <usb_dc_ep_set_stall+0x36>
		return -ENODEV;
    6a18:	f06f 0012 	mvn.w	r0, #18
    6a1c:	e7e1      	b.n	69e2 <usb_dc_ep_set_stall+0x36>
}
    6a1e:	b002      	add	sp, #8
    6a20:	bd70      	pop	{r4, r5, r6, pc}
    6a22:	bf00      	nop
    6a24:	200036b0 	.word	0x200036b0
    6a28:	20001480 	.word	0x20001480
    6a2c:	0000b634 	.word	0x0000b634
    6a30:	0000b67c 	.word	0x0000b67c
    6a34:	0000be38 	.word	0x0000be38

00006a38 <usb_dc_ep_clear_stall>:

int usb_dc_ep_clear_stall(const u8_t ep)
{
    6a38:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6a3a:	4c0f      	ldr	r4, [pc, #60]	; (6a78 <usb_dc_ep_clear_stall+0x40>)
    6a3c:	6822      	ldr	r2, [r4, #0]
    6a3e:	9201      	str	r2, [sp, #4]
	return get_usbd_ctx()->attached;
    6a40:	4a0e      	ldr	r2, [pc, #56]	; (6a7c <usb_dc_ep_clear_stall+0x44>)

	struct nrf_usbd_ep_ctx *ep_ctx;

	if (!dev_attached() || !dev_ready()) {
    6a42:	7911      	ldrb	r1, [r2, #4]
{
    6a44:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    6a46:	b171      	cbz	r1, 6a66 <usb_dc_ep_clear_stall+0x2e>
    6a48:	7953      	ldrb	r3, [r2, #5]
    6a4a:	b163      	cbz	r3, 6a66 <usb_dc_ep_clear_stall+0x2e>
		return -ENODEV;
	}

	ep_ctx = endpoint_ctx(ep);
    6a4c:	f7ff f944 	bl	5cd8 <endpoint_ctx>
	if (!ep_ctx) {
    6a50:	b160      	cbz	r0, 6a6c <usb_dc_ep_clear_stall+0x34>
		return -EINVAL;
	}

	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    6a52:	4628      	mov	r0, r5
    6a54:	f7fb ffce 	bl	29f4 <nrfx_usbd_ep_stall_clear>
	LOG_DBG("Unstall on EP %d", ep);

	return 0;
    6a58:	2000      	movs	r0, #0
}
    6a5a:	9a01      	ldr	r2, [sp, #4]
    6a5c:	6823      	ldr	r3, [r4, #0]
    6a5e:	429a      	cmp	r2, r3
    6a60:	d007      	beq.n	6a72 <usb_dc_ep_clear_stall+0x3a>
    6a62:	f004 fadb 	bl	b01c <_StackCheckHandler>
		return -ENODEV;
    6a66:	f06f 0012 	mvn.w	r0, #18
    6a6a:	e7f6      	b.n	6a5a <usb_dc_ep_clear_stall+0x22>
		return -EINVAL;
    6a6c:	f06f 0015 	mvn.w	r0, #21
    6a70:	e7f3      	b.n	6a5a <usb_dc_ep_clear_stall+0x22>
}
    6a72:	b003      	add	sp, #12
    6a74:	bd30      	pop	{r4, r5, pc}
    6a76:	bf00      	nop
    6a78:	200036b0 	.word	0x200036b0
    6a7c:	20001480 	.word	0x20001480

00006a80 <usb_dc_ep_is_stalled>:
{
	return usb_dc_ep_set_stall(ep);
}

int usb_dc_ep_is_stalled(const u8_t ep, u8_t *const stalled)
{
    6a80:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6a82:	4c10      	ldr	r4, [pc, #64]	; (6ac4 <usb_dc_ep_is_stalled+0x44>)
    6a84:	6822      	ldr	r2, [r4, #0]
    6a86:	9201      	str	r2, [sp, #4]
	return get_usbd_ctx()->attached;
    6a88:	4a0f      	ldr	r2, [pc, #60]	; (6ac8 <usb_dc_ep_is_stalled+0x48>)
{
    6a8a:	460d      	mov	r5, r1
	struct nrf_usbd_ep_ctx *ep_ctx;

	if (!dev_attached() || !dev_ready()) {
    6a8c:	7911      	ldrb	r1, [r2, #4]
{
    6a8e:	4606      	mov	r6, r0
	if (!dev_attached() || !dev_ready()) {
    6a90:	b179      	cbz	r1, 6ab2 <usb_dc_ep_is_stalled+0x32>
    6a92:	7953      	ldrb	r3, [r2, #5]
    6a94:	b16b      	cbz	r3, 6ab2 <usb_dc_ep_is_stalled+0x32>
		return -ENODEV;
	}

	ep_ctx = endpoint_ctx(ep);
    6a96:	f7ff f91f 	bl	5cd8 <endpoint_ctx>
	if (!ep_ctx) {
    6a9a:	b168      	cbz	r0, 6ab8 <usb_dc_ep_is_stalled+0x38>
		return -EINVAL;
	}

	*stalled = (u8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
    6a9c:	4630      	mov	r0, r6
    6a9e:	f7fb fb97 	bl	21d0 <nrfx_usbd_ep_stall_check>
    6aa2:	7028      	strb	r0, [r5, #0]

	return 0;
    6aa4:	2000      	movs	r0, #0
}
    6aa6:	9a01      	ldr	r2, [sp, #4]
    6aa8:	6823      	ldr	r3, [r4, #0]
    6aaa:	429a      	cmp	r2, r3
    6aac:	d007      	beq.n	6abe <usb_dc_ep_is_stalled+0x3e>
    6aae:	f004 fab5 	bl	b01c <_StackCheckHandler>
		return -ENODEV;
    6ab2:	f06f 0012 	mvn.w	r0, #18
    6ab6:	e7f6      	b.n	6aa6 <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
    6ab8:	f06f 0015 	mvn.w	r0, #21
    6abc:	e7f3      	b.n	6aa6 <usb_dc_ep_is_stalled+0x26>
}
    6abe:	b002      	add	sp, #8
    6ac0:	bd70      	pop	{r4, r5, r6, pc}
    6ac2:	bf00      	nop
    6ac4:	200036b0 	.word	0x200036b0
    6ac8:	20001480 	.word	0x20001480

00006acc <usb_dc_ep_enable>:

int usb_dc_ep_enable(const u8_t ep)
{
    6acc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6ace:	4e12      	ldr	r6, [pc, #72]	; (6b18 <usb_dc_ep_enable+0x4c>)
	return get_usbd_ctx()->attached;
    6ad0:	4d12      	ldr	r5, [pc, #72]	; (6b1c <usb_dc_ep_enable+0x50>)
{
    6ad2:	6832      	ldr	r2, [r6, #0]
    6ad4:	9201      	str	r2, [sp, #4]
	struct nrf_usbd_ep_ctx *ep_ctx;

	if (!dev_attached()) {
    6ad6:	792a      	ldrb	r2, [r5, #4]
{
    6ad8:	4607      	mov	r7, r0
	if (!dev_attached()) {
    6ada:	b192      	cbz	r2, 6b02 <usb_dc_ep_enable+0x36>
		return -ENODEV;
	}

	ep_ctx = endpoint_ctx(ep);
    6adc:	f7ff f8fc 	bl	5cd8 <endpoint_ctx>
	if (!ep_ctx) {
    6ae0:	b190      	cbz	r0, 6b08 <usb_dc_ep_enable+0x3c>
		return -EINVAL;
	}

	if (ep_ctx->cfg.en) {
    6ae2:	7a04      	ldrb	r4, [r0, #8]
    6ae4:	b99c      	cbnz	r4, 6b0e <usb_dc_ep_enable+0x42>
		return -EALREADY;
	}

	LOG_DBG("EP enable: %d.", ep);

	ep_ctx->cfg.en = true;
    6ae6:	2301      	movs	r3, #1
    6ae8:	7203      	strb	r3, [r0, #8]

	/* Defer the endpoint enable if USBD is not ready yet. */
	if (dev_ready()) {
    6aea:	7968      	ldrb	r0, [r5, #5]
    6aec:	b118      	cbz	r0, 6af6 <usb_dc_ep_enable+0x2a>
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
    6aee:	4638      	mov	r0, r7
    6af0:	f7fb ff1a 	bl	2928 <nrfx_usbd_ep_enable>
	}

	return 0;
    6af4:	4620      	mov	r0, r4
}
    6af6:	9a01      	ldr	r2, [sp, #4]
    6af8:	6833      	ldr	r3, [r6, #0]
    6afa:	429a      	cmp	r2, r3
    6afc:	d00a      	beq.n	6b14 <usb_dc_ep_enable+0x48>
    6afe:	f004 fa8d 	bl	b01c <_StackCheckHandler>
		return -ENODEV;
    6b02:	f06f 0012 	mvn.w	r0, #18
    6b06:	e7f6      	b.n	6af6 <usb_dc_ep_enable+0x2a>
		return -EINVAL;
    6b08:	f06f 0015 	mvn.w	r0, #21
    6b0c:	e7f3      	b.n	6af6 <usb_dc_ep_enable+0x2a>
		return -EALREADY;
    6b0e:	f06f 0044 	mvn.w	r0, #68	; 0x44
    6b12:	e7f0      	b.n	6af6 <usb_dc_ep_enable+0x2a>
}
    6b14:	b003      	add	sp, #12
    6b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6b18:	200036b0 	.word	0x200036b0
    6b1c:	20001480 	.word	0x20001480

00006b20 <usb_dc_ep_write>:
	return 0;
}

int usb_dc_ep_write(const u8_t ep, const u8_t *const data,
		    const u32_t data_len, u32_t *const ret_bytes)
{
    6b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6b24:	4e3d      	ldr	r6, [pc, #244]	; (6c1c <usb_dc_ep_write+0xfc>)
	return get_usbd_ctx()->attached;
    6b26:	4f3e      	ldr	r7, [pc, #248]	; (6c20 <usb_dc_ep_write+0x100>)
{
    6b28:	b085      	sub	sp, #20
    6b2a:	4699      	mov	r9, r3
    6b2c:	6833      	ldr	r3, [r6, #0]
    6b2e:	9303      	str	r3, [sp, #12]
	LOG_DBG("ep_write: ep %d, len %d", ep, data_len);
	struct nrf_usbd_ctx *ctx = get_usbd_ctx();
	struct nrf_usbd_ep_ctx *ep_ctx;
	u32_t bytes_to_copy;

	if (!dev_attached() || !dev_ready()) {
    6b30:	793b      	ldrb	r3, [r7, #4]
{
    6b32:	4680      	mov	r8, r0
    6b34:	468b      	mov	fp, r1
    6b36:	4614      	mov	r4, r2
	if (!dev_attached() || !dev_ready()) {
    6b38:	2b00      	cmp	r3, #0
    6b3a:	d066      	beq.n	6c0a <usb_dc_ep_write+0xea>
	return get_usbd_ctx()->ready;
    6b3c:	f897 a005 	ldrb.w	sl, [r7, #5]
	if (!dev_attached() || !dev_ready()) {
    6b40:	f1ba 0f00 	cmp.w	sl, #0
    6b44:	d061      	beq.n	6c0a <usb_dc_ep_write+0xea>
		return -ENODEV;
	}

	if (NRF_USBD_EPOUT_CHECK(ep)) {
    6b46:	f010 0f80 	tst.w	r0, #128	; 0x80
    6b4a:	d061      	beq.n	6c10 <usb_dc_ep_write+0xf0>
		return -EINVAL;
	}

	ep_ctx = endpoint_ctx(ep);
    6b4c:	f7ff f8c4 	bl	5cd8 <endpoint_ctx>
	if (!ep_ctx) {
    6b50:	4605      	mov	r5, r0
    6b52:	2800      	cmp	r0, #0
    6b54:	d05c      	beq.n	6c10 <usb_dc_ep_write+0xf0>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
    6b56:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6b5a:	f107 0014 	add.w	r0, r7, #20
    6b5e:	f003 f881 	bl	9c64 <z_impl_k_mutex_lock>

	/* USBD driver does not allow scheduling multiple DMA transfers
	 * for one EP at a time. Next USB transfer on this endpoint can be
	 * triggered after the completion of previous one.
	 */
	if (ep_ctx->write_in_progress) {
    6b62:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
    6b66:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    6b6a:	b162      	cbz	r2, 6b86 <usb_dc_ep_write+0x66>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
    6b6c:	f107 0014 	add.w	r0, r7, #20
    6b70:	f003 f8f4 	bl	9d5c <z_impl_k_mutex_unlock>
		k_mutex_unlock(&ctx->drv_lock);
		return -EAGAIN;
    6b74:	f06f 040a 	mvn.w	r4, #10
		LOG_ERR("nRF USBD write error: %d.", (u32_t)err);
	}

	k_mutex_unlock(&ctx->drv_lock);
	return result;
}
    6b78:	9a03      	ldr	r2, [sp, #12]
    6b7a:	6833      	ldr	r3, [r6, #0]
    6b7c:	429a      	cmp	r2, r3
    6b7e:	4620      	mov	r0, r4
    6b80:	d049      	beq.n	6c16 <usb_dc_ep_write+0xf6>
    6b82:	f004 fa4b 	bl	b01c <_StackCheckHandler>
	if (data_len > ep_ctx->cfg.max_sz) {
    6b86:	686a      	ldr	r2, [r5, #4]
	memcpy(ep_ctx->buf.data, data, bytes_to_copy);
    6b88:	69a8      	ldr	r0, [r5, #24]
	if (data_len > ep_ctx->cfg.max_sz) {
    6b8a:	42a2      	cmp	r2, r4
    6b8c:	bf3c      	itt	cc
    6b8e:	4614      	movcc	r4, r2
		ep_ctx->write_fragmented = true;
    6b90:	4653      	movcc	r3, sl
    6b92:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
	memcpy(ep_ctx->buf.data, data, bytes_to_copy);
    6b96:	4622      	mov	r2, r4
    6b98:	4659      	mov	r1, fp
    6b9a:	f001 f8bd 	bl	7d18 <memcpy>
	ep_ctx->buf.len = bytes_to_copy;
    6b9e:	60ec      	str	r4, [r5, #12]
	if (ret_bytes) {
    6ba0:	f1b9 0f00 	cmp.w	r9, #0
    6ba4:	d001      	beq.n	6baa <usb_dc_ep_write+0x8a>
		*ret_bytes = bytes_to_copy;
    6ba6:	f8c9 4000 	str.w	r4, [r9]
	if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
    6baa:	7aac      	ldrb	r4, [r5, #10]
    6bac:	b94c      	cbnz	r4, 6bc2 <usb_dc_ep_write+0xa2>
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
    6bae:	f7fb fbe5 	bl	237c <nrfx_usbd_last_setup_dir_get>
    6bb2:	4540      	cmp	r0, r8
    6bb4:	d005      	beq.n	6bc2 <usb_dc_ep_write+0xa2>
		nrfx_usbd_setup_clear();
    6bb6:	f7fb fbbd 	bl	2334 <nrfx_usbd_setup_clear>
    6bba:	481a      	ldr	r0, [pc, #104]	; (6c24 <usb_dc_ep_write+0x104>)
    6bbc:	f003 f8ce 	bl	9d5c <z_impl_k_mutex_unlock>
	return result;
    6bc0:	e7da      	b.n	6b78 <usb_dc_ep_write+0x58>
	ep_ctx->write_in_progress = true;
    6bc2:	2301      	movs	r3, #1
    6bc4:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
	NRFX_USBD_TRANSFER_IN(transfer, ep_ctx->buf.data, ep_ctx->buf.len, 0);
    6bc8:	69ab      	ldr	r3, [r5, #24]
    6bca:	9300      	str	r3, [sp, #0]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    6bcc:	4669      	mov	r1, sp
	NRFX_USBD_TRANSFER_IN(transfer, ep_ctx->buf.data, ep_ctx->buf.len, 0);
    6bce:	68eb      	ldr	r3, [r5, #12]
    6bd0:	9301      	str	r3, [sp, #4]
    6bd2:	2400      	movs	r4, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    6bd4:	4640      	mov	r0, r8
	NRFX_USBD_TRANSFER_IN(transfer, ep_ctx->buf.data, ep_ctx->buf.len, 0);
    6bd6:	9402      	str	r4, [sp, #8]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    6bd8:	f7fb fa2c 	bl	2034 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    6bdc:	4b12      	ldr	r3, [pc, #72]	; (6c28 <usb_dc_ep_write+0x108>)
    6bde:	4298      	cmp	r0, r3
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    6be0:	4601      	mov	r1, r0
	if (err != NRFX_SUCCESS) {
    6be2:	d0ea      	beq.n	6bba <usb_dc_ep_write+0x9a>
		LOG_ERR("nRF USBD write error: %d.", (u32_t)err);
    6be4:	2301      	movs	r3, #1
    6be6:	f04f 0200 	mov.w	r2, #0
    6bea:	f363 0207 	bfi	r2, r3, #0, #8
    6bee:	480f      	ldr	r0, [pc, #60]	; (6c2c <usb_dc_ep_write+0x10c>)
    6bf0:	4b0f      	ldr	r3, [pc, #60]	; (6c30 <usb_dc_ep_write+0x110>)
		ep_ctx->write_in_progress = false;
    6bf2:	f885 4022 	strb.w	r4, [r5, #34]	; 0x22
    6bf6:	1a1b      	subs	r3, r3, r0
    6bf8:	08db      	lsrs	r3, r3, #3
		LOG_ERR("nRF USBD write error: %d.", (u32_t)err);
    6bfa:	f363 128f 	bfi	r2, r3, #6, #10
    6bfe:	480d      	ldr	r0, [pc, #52]	; (6c34 <usb_dc_ep_write+0x114>)
    6c00:	f7fc f920 	bl	2e44 <log_1>
		result = -EIO;
    6c04:	f06f 0404 	mvn.w	r4, #4
    6c08:	e7d7      	b.n	6bba <usb_dc_ep_write+0x9a>
		return -ENODEV;
    6c0a:	f06f 0412 	mvn.w	r4, #18
    6c0e:	e7b3      	b.n	6b78 <usb_dc_ep_write+0x58>
		return -EINVAL;
    6c10:	f06f 0415 	mvn.w	r4, #21
    6c14:	e7b0      	b.n	6b78 <usb_dc_ep_write+0x58>
}
    6c16:	b005      	add	sp, #20
    6c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6c1c:	200036b0 	.word	0x200036b0
    6c20:	20001480 	.word	0x20001480
    6c24:	20001494 	.word	0x20001494
    6c28:	0bad0000 	.word	0x0bad0000
    6c2c:	0000b634 	.word	0x0000b634
    6c30:	0000b67c 	.word	0x0000b67c
    6c34:	0000be5c 	.word	0x0000be5c

00006c38 <usb_dc_ep_read_wait>:

int usb_dc_ep_read_wait(u8_t ep, u8_t *data, u32_t max_data_len,
			u32_t *read_bytes)
{
    6c38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    6c3c:	4d25      	ldr	r5, [pc, #148]	; (6cd4 <usb_dc_ep_read_wait+0x9c>)
    6c3e:	461e      	mov	r6, r3
    6c40:	682b      	ldr	r3, [r5, #0]
    6c42:	9301      	str	r3, [sp, #4]
	return get_usbd_ctx()->attached;
    6c44:	4b24      	ldr	r3, [pc, #144]	; (6cd8 <usb_dc_ep_read_wait+0xa0>)
{
    6c46:	4691      	mov	r9, r2
	struct nrf_usbd_ep_ctx *ep_ctx;
	struct nrf_usbd_ctx *ctx = get_usbd_ctx();
	u32_t bytes_to_copy;

	if (!dev_attached() || !dev_ready()) {
    6c48:	791a      	ldrb	r2, [r3, #4]
{
    6c4a:	4688      	mov	r8, r1
	if (!dev_attached() || !dev_ready()) {
    6c4c:	2a00      	cmp	r2, #0
    6c4e:	d037      	beq.n	6cc0 <usb_dc_ep_read_wait+0x88>
    6c50:	795b      	ldrb	r3, [r3, #5]
    6c52:	2b00      	cmp	r3, #0
    6c54:	d034      	beq.n	6cc0 <usb_dc_ep_read_wait+0x88>
		return -ENODEV;
	}

	if (NRF_USBD_EPIN_CHECK(ep)) {
    6c56:	0603      	lsls	r3, r0, #24
    6c58:	d435      	bmi.n	6cc6 <usb_dc_ep_read_wait+0x8e>
		return -EINVAL;
	}

	if (!data && max_data_len) {
    6c5a:	b911      	cbnz	r1, 6c62 <usb_dc_ep_read_wait+0x2a>
    6c5c:	f1b9 0f00 	cmp.w	r9, #0
    6c60:	d131      	bne.n	6cc6 <usb_dc_ep_read_wait+0x8e>
		return -EINVAL;
	}

	ep_ctx = endpoint_ctx(ep);
    6c62:	f7ff f839 	bl	5cd8 <endpoint_ctx>
	if (!ep_ctx) {
    6c66:	4604      	mov	r4, r0
    6c68:	b368      	cbz	r0, 6cc6 <usb_dc_ep_read_wait+0x8e>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
    6c6a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6c6e:	481b      	ldr	r0, [pc, #108]	; (6cdc <usb_dc_ep_read_wait+0xa4>)
    6c70:	f002 fff8 	bl	9c64 <z_impl_k_mutex_lock>
		return -EINVAL;
	}

	k_mutex_lock(&ctx->drv_lock, K_FOREVER);

	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
    6c74:	68e3      	ldr	r3, [r4, #12]
    6c76:	454b      	cmp	r3, r9
    6c78:	461f      	mov	r7, r3
    6c7a:	bf28      	it	cs
    6c7c:	464f      	movcs	r7, r9

	if (!data && !max_data_len) {
    6c7e:	f1b8 0f00 	cmp.w	r8, #0
    6c82:	d10e      	bne.n	6ca2 <usb_dc_ep_read_wait+0x6a>
    6c84:	f1b9 0f00 	cmp.w	r9, #0
    6c88:	d10b      	bne.n	6ca2 <usb_dc_ep_read_wait+0x6a>
		if (read_bytes) {
    6c8a:	b106      	cbz	r6, 6c8e <usb_dc_ep_read_wait+0x56>
			*read_bytes = ep_ctx->buf.len;
    6c8c:	6033      	str	r3, [r6, #0]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
    6c8e:	4813      	ldr	r0, [pc, #76]	; (6cdc <usb_dc_ep_read_wait+0xa4>)
    6c90:	f003 f864 	bl	9d5c <z_impl_k_mutex_unlock>
		}
		k_mutex_unlock(&ctx->drv_lock);
		return 0;
    6c94:	2000      	movs	r0, #0
		*read_bytes = bytes_to_copy;
	}

	k_mutex_unlock(&ctx->drv_lock);
	return 0;
}
    6c96:	9a01      	ldr	r2, [sp, #4]
    6c98:	682b      	ldr	r3, [r5, #0]
    6c9a:	429a      	cmp	r2, r3
    6c9c:	d016      	beq.n	6ccc <usb_dc_ep_read_wait+0x94>
    6c9e:	f004 f9bd 	bl	b01c <_StackCheckHandler>
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
    6ca2:	463a      	mov	r2, r7
    6ca4:	69e1      	ldr	r1, [r4, #28]
    6ca6:	4640      	mov	r0, r8
    6ca8:	f001 f836 	bl	7d18 <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
    6cac:	69e3      	ldr	r3, [r4, #28]
    6cae:	443b      	add	r3, r7
    6cb0:	61e3      	str	r3, [r4, #28]
	ep_ctx->buf.len -= bytes_to_copy;
    6cb2:	68e3      	ldr	r3, [r4, #12]
    6cb4:	1bdb      	subs	r3, r3, r7
    6cb6:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
    6cb8:	2e00      	cmp	r6, #0
    6cba:	d0e8      	beq.n	6c8e <usb_dc_ep_read_wait+0x56>
		*read_bytes = bytes_to_copy;
    6cbc:	6037      	str	r7, [r6, #0]
    6cbe:	e7e6      	b.n	6c8e <usb_dc_ep_read_wait+0x56>
		return -ENODEV;
    6cc0:	f06f 0012 	mvn.w	r0, #18
    6cc4:	e7e7      	b.n	6c96 <usb_dc_ep_read_wait+0x5e>
		return -EINVAL;
    6cc6:	f06f 0015 	mvn.w	r0, #21
    6cca:	e7e4      	b.n	6c96 <usb_dc_ep_read_wait+0x5e>
}
    6ccc:	b003      	add	sp, #12
    6cce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6cd2:	bf00      	nop
    6cd4:	200036b0 	.word	0x200036b0
    6cd8:	20001480 	.word	0x20001480
    6cdc:	20001494 	.word	0x20001494

00006ce0 <usb_dc_ep_read_continue>:

int usb_dc_ep_read_continue(u8_t ep)
{
    6ce0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6ce2:	4e1e      	ldr	r6, [pc, #120]	; (6d5c <usb_dc_ep_read_continue+0x7c>)
	return get_usbd_ctx()->attached;
    6ce4:	4d1e      	ldr	r5, [pc, #120]	; (6d60 <usb_dc_ep_read_continue+0x80>)
{
    6ce6:	6831      	ldr	r1, [r6, #0]
    6ce8:	9101      	str	r1, [sp, #4]
	struct nrf_usbd_ep_ctx *ep_ctx;
	struct nrf_usbd_ctx *ctx = get_usbd_ctx();

	if (!dev_attached() || !dev_ready()) {
    6cea:	7929      	ldrb	r1, [r5, #4]
    6cec:	b359      	cbz	r1, 6d46 <usb_dc_ep_read_continue+0x66>
    6cee:	796b      	ldrb	r3, [r5, #5]
    6cf0:	b34b      	cbz	r3, 6d46 <usb_dc_ep_read_continue+0x66>
		return -ENODEV;
	}

	if (NRF_USBD_EPIN_CHECK(ep)) {
    6cf2:	0603      	lsls	r3, r0, #24
    6cf4:	d42a      	bmi.n	6d4c <usb_dc_ep_read_continue+0x6c>
		return -EINVAL;
	}

	ep_ctx = endpoint_ctx(ep);
    6cf6:	f7fe ffef 	bl	5cd8 <endpoint_ctx>
	if (!ep_ctx) {
    6cfa:	4604      	mov	r4, r0
    6cfc:	b330      	cbz	r0, 6d4c <usb_dc_ep_read_continue+0x6c>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
    6cfe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6d02:	f105 0014 	add.w	r0, r5, #20
    6d06:	f002 ffad 	bl	9c64 <z_impl_k_mutex_lock>
		return -EINVAL;
	}

	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
	if (!ep_ctx->buf.len) {
    6d0a:	68e3      	ldr	r3, [r4, #12]
    6d0c:	b98b      	cbnz	r3, 6d32 <usb_dc_ep_read_continue+0x52>
		ep_ctx->buf.curr = ep_ctx->buf.data;
		ep_ctx->read_complete = true;
    6d0e:	2501      	movs	r5, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
    6d10:	69a3      	ldr	r3, [r4, #24]
		ep_ctx->read_complete = true;
    6d12:	f884 5020 	strb.w	r5, [r4, #32]
		ep_ctx->buf.curr = ep_ctx->buf.data;
    6d16:	61e3      	str	r3, [r4, #28]

		if (ep_ctx->read_pending) {
    6d18:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    6d1c:	b14b      	cbz	r3, 6d32 <usb_dc_ep_read_continue+0x52>
			struct usbd_event *ev = usbd_evt_alloc();
    6d1e:	f7ff f8cb 	bl	5eb8 <usbd_evt_alloc>

			if (!ev) {
    6d22:	b1b0      	cbz	r0, 6d52 <usb_dc_ep_read_continue+0x72>
				return -ENOMEM;
			}

			ev->evt_type = USBD_EVT_EP;
    6d24:	7505      	strb	r5, [r0, #20]
			ev->evt.ep_evt.ep = ep_ctx;
    6d26:	60c4      	str	r4, [r0, #12]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    6d28:	7405      	strb	r5, [r0, #16]
			usbd_evt_put(ev);
    6d2a:	f7ff f803 	bl	5d34 <usbd_evt_put>
			usbd_work_schedule();
    6d2e:	f7ff f87b 	bl	5e28 <usbd_work_schedule>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
    6d32:	480c      	ldr	r0, [pc, #48]	; (6d64 <usb_dc_ep_read_continue+0x84>)
    6d34:	f003 f812 	bl	9d5c <z_impl_k_mutex_unlock>
		}
	}
	k_mutex_unlock(&ctx->drv_lock);

	return 0;
    6d38:	2000      	movs	r0, #0
}
    6d3a:	9a01      	ldr	r2, [sp, #4]
    6d3c:	6833      	ldr	r3, [r6, #0]
    6d3e:	429a      	cmp	r2, r3
    6d40:	d00a      	beq.n	6d58 <usb_dc_ep_read_continue+0x78>
    6d42:	f004 f96b 	bl	b01c <_StackCheckHandler>
		return -ENODEV;
    6d46:	f06f 0012 	mvn.w	r0, #18
    6d4a:	e7f6      	b.n	6d3a <usb_dc_ep_read_continue+0x5a>
		return -EINVAL;
    6d4c:	f06f 0015 	mvn.w	r0, #21
    6d50:	e7f3      	b.n	6d3a <usb_dc_ep_read_continue+0x5a>
				return -ENOMEM;
    6d52:	f06f 000b 	mvn.w	r0, #11
    6d56:	e7f0      	b.n	6d3a <usb_dc_ep_read_continue+0x5a>
}
    6d58:	b002      	add	sp, #8
    6d5a:	bd70      	pop	{r4, r5, r6, pc}
    6d5c:	200036b0 	.word	0x200036b0
    6d60:	20001480 	.word	0x20001480
    6d64:	20001494 	.word	0x20001494

00006d68 <usb_dc_ep_read>:

int usb_dc_ep_read(const u8_t ep, u8_t *const data,
		   const u32_t max_data_len, u32_t *const read_bytes)
{
    6d68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6d6a:	4c0f      	ldr	r4, [pc, #60]	; (6da8 <usb_dc_ep_read+0x40>)
    6d6c:	f8d4 c000 	ldr.w	ip, [r4]
    6d70:	f8cd c004 	str.w	ip, [sp, #4]
    6d74:	4605      	mov	r5, r0
    6d76:	460f      	mov	r7, r1
    6d78:	4616      	mov	r6, r2
	LOG_DBG("ep_read: ep %d, maxlen %d", ep, max_data_len);
	int ret;

	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
    6d7a:	f7ff ff5d 	bl	6c38 <usb_dc_ep_read_wait>
	if (ret) {
    6d7e:	b968      	cbnz	r0, 6d9c <usb_dc_ep_read+0x34>
		return ret;
	}

	if (!data && !max_data_len) {
    6d80:	b907      	cbnz	r7, 6d84 <usb_dc_ep_read+0x1c>
    6d82:	b15e      	cbz	r6, 6d9c <usb_dc_ep_read+0x34>
		return ret;
	}

	ret = usb_dc_ep_read_continue(ep);
    6d84:	9a01      	ldr	r2, [sp, #4]
    6d86:	6823      	ldr	r3, [r4, #0]
    6d88:	429a      	cmp	r2, r3
    6d8a:	d001      	beq.n	6d90 <usb_dc_ep_read+0x28>
	return ret;
}
    6d8c:	f004 f946 	bl	b01c <_StackCheckHandler>
	ret = usb_dc_ep_read_continue(ep);
    6d90:	4628      	mov	r0, r5
}
    6d92:	b003      	add	sp, #12
    6d94:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ret = usb_dc_ep_read_continue(ep);
    6d98:	f7ff bfa2 	b.w	6ce0 <usb_dc_ep_read_continue>
}
    6d9c:	9a01      	ldr	r2, [sp, #4]
    6d9e:	6823      	ldr	r3, [r4, #0]
    6da0:	429a      	cmp	r2, r3
    6da2:	d1f3      	bne.n	6d8c <usb_dc_ep_read+0x24>
    6da4:	b003      	add	sp, #12
    6da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6da8:	200036b0 	.word	0x200036b0

00006dac <usb_dc_ep_set_callback>:

int usb_dc_ep_set_callback(const u8_t ep, const usb_dc_ep_callback cb)
{
    6dac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6dae:	4c0d      	ldr	r4, [pc, #52]	; (6de4 <usb_dc_ep_set_callback+0x38>)
    6db0:	6822      	ldr	r2, [r4, #0]
    6db2:	9201      	str	r2, [sp, #4]
	return get_usbd_ctx()->attached;
    6db4:	4a0c      	ldr	r2, [pc, #48]	; (6de8 <usb_dc_ep_set_callback+0x3c>)
	struct nrf_usbd_ep_ctx *ep_ctx;

	if (!dev_attached()) {
    6db6:	7912      	ldrb	r2, [r2, #4]
{
    6db8:	460d      	mov	r5, r1
	if (!dev_attached()) {
    6dba:	b152      	cbz	r2, 6dd2 <usb_dc_ep_set_callback+0x26>
		return -ENODEV;
	}

	ep_ctx = endpoint_ctx(ep);
    6dbc:	f7fe ff8c 	bl	5cd8 <endpoint_ctx>
	if (!ep_ctx) {
    6dc0:	b150      	cbz	r0, 6dd8 <usb_dc_ep_set_callback+0x2c>
		return -EINVAL;
	}

	ep_ctx->cfg.cb = cb;
    6dc2:	6005      	str	r5, [r0, #0]

	return 0;
    6dc4:	2000      	movs	r0, #0
}
    6dc6:	9a01      	ldr	r2, [sp, #4]
    6dc8:	6823      	ldr	r3, [r4, #0]
    6dca:	429a      	cmp	r2, r3
    6dcc:	d007      	beq.n	6dde <usb_dc_ep_set_callback+0x32>
    6dce:	f004 f925 	bl	b01c <_StackCheckHandler>
		return -ENODEV;
    6dd2:	f06f 0012 	mvn.w	r0, #18
    6dd6:	e7f6      	b.n	6dc6 <usb_dc_ep_set_callback+0x1a>
		return -EINVAL;
    6dd8:	f06f 0015 	mvn.w	r0, #21
    6ddc:	e7f3      	b.n	6dc6 <usb_dc_ep_set_callback+0x1a>
}
    6dde:	b003      	add	sp, #12
    6de0:	bd30      	pop	{r4, r5, pc}
    6de2:	bf00      	nop
    6de4:	200036b0 	.word	0x200036b0
    6de8:	20001480 	.word	0x20001480

00006dec <usb_dc_set_status_callback>:

int usb_dc_set_status_callback(const usb_dc_status_callback cb)
{
    6dec:	b507      	push	{r0, r1, r2, lr}
    6dee:	4b08      	ldr	r3, [pc, #32]	; (6e10 <usb_dc_set_status_callback+0x24>)
    6df0:	681a      	ldr	r2, [r3, #0]
    6df2:	9201      	str	r2, [sp, #4]
	get_usbd_ctx()->status_cb = cb;
    6df4:	4a07      	ldr	r2, [pc, #28]	; (6e14 <usb_dc_set_status_callback+0x28>)
    6df6:	6010      	str	r0, [r2, #0]
	return 0;
}
    6df8:	9a01      	ldr	r2, [sp, #4]
    6dfa:	681b      	ldr	r3, [r3, #0]
    6dfc:	429a      	cmp	r2, r3
    6dfe:	f04f 0000 	mov.w	r0, #0
    6e02:	d001      	beq.n	6e08 <usb_dc_set_status_callback+0x1c>
    6e04:	f004 f90a 	bl	b01c <_StackCheckHandler>
    6e08:	b003      	add	sp, #12
    6e0a:	f85d fb04 	ldr.w	pc, [sp], #4
    6e0e:	bf00      	nop
    6e10:	200036b0 	.word	0x200036b0
    6e14:	20001480 	.word	0x20001480

00006e18 <usb_dc_ep_mps>:

int usb_dc_ep_mps(const u8_t ep)
{
    6e18:	b513      	push	{r0, r1, r4, lr}
    6e1a:	4c0c      	ldr	r4, [pc, #48]	; (6e4c <usb_dc_ep_mps+0x34>)
    6e1c:	6822      	ldr	r2, [r4, #0]
    6e1e:	9201      	str	r2, [sp, #4]
	return get_usbd_ctx()->attached;
    6e20:	4a0b      	ldr	r2, [pc, #44]	; (6e50 <usb_dc_ep_mps+0x38>)
	struct nrf_usbd_ep_ctx *ep_ctx;

	if (!dev_attached()) {
    6e22:	7912      	ldrb	r2, [r2, #4]
    6e24:	b14a      	cbz	r2, 6e3a <usb_dc_ep_mps+0x22>
		return -ENODEV;
	}

	ep_ctx = endpoint_ctx(ep);
    6e26:	f7fe ff57 	bl	5cd8 <endpoint_ctx>
	if (!ep_ctx) {
    6e2a:	b148      	cbz	r0, 6e40 <usb_dc_ep_mps+0x28>
		return -EINVAL;
	}

	return ep_ctx->cfg.max_sz;
    6e2c:	6840      	ldr	r0, [r0, #4]
}
    6e2e:	9a01      	ldr	r2, [sp, #4]
    6e30:	6823      	ldr	r3, [r4, #0]
    6e32:	429a      	cmp	r2, r3
    6e34:	d007      	beq.n	6e46 <usb_dc_ep_mps+0x2e>
    6e36:	f004 f8f1 	bl	b01c <_StackCheckHandler>
		return -ENODEV;
    6e3a:	f06f 0012 	mvn.w	r0, #18
    6e3e:	e7f6      	b.n	6e2e <usb_dc_ep_mps+0x16>
		return -EINVAL;
    6e40:	f06f 0015 	mvn.w	r0, #21
    6e44:	e7f3      	b.n	6e2e <usb_dc_ep_mps+0x16>
}
    6e46:	b002      	add	sp, #8
    6e48:	bd10      	pop	{r4, pc}
    6e4a:	bf00      	nop
    6e4c:	200036b0 	.word	0x200036b0
    6e50:	20001480 	.word	0x20001480

00006e54 <z_clock_isr>:
#include <drivers/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
    6e54:	b507      	push	{r0, r1, r2, lr}
    6e56:	4b06      	ldr	r3, [pc, #24]	; (6e70 <z_clock_isr+0x1c>)
    6e58:	681a      	ldr	r2, [r3, #0]
    6e5a:	9201      	str	r2, [sp, #4]
	__ASSERT_NO_MSG(false);
}
    6e5c:	9a01      	ldr	r2, [sp, #4]
    6e5e:	681b      	ldr	r3, [r3, #0]
    6e60:	429a      	cmp	r2, r3
    6e62:	d001      	beq.n	6e68 <z_clock_isr+0x14>
    6e64:	f004 f8da 	bl	b01c <_StackCheckHandler>
    6e68:	b003      	add	sp, #12
    6e6a:	f85d fb04 	ldr.w	pc, [sp], #4
    6e6e:	bf00      	nop
    6e70:	200036b0 	.word	0x200036b0

00006e74 <z_clock_idle_exit>:
void __weak z_clock_set_timeout(s32_t ticks, bool idle)
{
}

void __weak z_clock_idle_exit(void)
{
    6e74:	b507      	push	{r0, r1, r2, lr}
    6e76:	4b06      	ldr	r3, [pc, #24]	; (6e90 <z_clock_idle_exit+0x1c>)
    6e78:	681a      	ldr	r2, [r3, #0]
    6e7a:	9201      	str	r2, [sp, #4]
}
    6e7c:	9a01      	ldr	r2, [sp, #4]
    6e7e:	681b      	ldr	r3, [r3, #0]
    6e80:	429a      	cmp	r2, r3
    6e82:	d001      	beq.n	6e88 <z_clock_idle_exit+0x14>
    6e84:	f004 f8ca 	bl	b01c <_StackCheckHandler>
    6e88:	b003      	add	sp, #12
    6e8a:	f85d fb04 	ldr.w	pc, [sp], #4
    6e8e:	bf00      	nop
    6e90:	200036b0 	.word	0x200036b0

00006e94 <rtc1_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
    6e94:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6e96:	4a16      	ldr	r2, [pc, #88]	; (6ef0 <rtc1_nrf_isr+0x5c>)
    6e98:	6813      	ldr	r3, [r2, #0]
    6e9a:	9301      	str	r3, [sp, #4]
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    6e9c:	4b15      	ldr	r3, [pc, #84]	; (6ef4 <rtc1_nrf_isr+0x60>)
    6e9e:	2100      	movs	r1, #0
    6ea0:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
	__asm__ volatile(
    6ea4:	f04f 0120 	mov.w	r1, #32
    6ea8:	f3ef 8511 	mrs	r5, BASEPRI
    6eac:	f381 8811 	msr	BASEPRI, r1
    6eb0:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    6eb4:	4910      	ldr	r1, [pc, #64]	; (6ef8 <rtc1_nrf_isr+0x64>)
#endif
}

__STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type * p_reg)
{
     return p_reg->COUNTER;
    6eb6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    6eba:	680c      	ldr	r4, [r1, #0]
    6ebc:	f240 1347 	movw	r3, #327	; 0x147
	return (a - b) & COUNTER_MAX;
    6ec0:	1b00      	subs	r0, r0, r4
    6ec2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    6ec6:	fbb0 f0f3 	udiv	r0, r0, r3

	last_count += dticks * CYC_PER_TICK;
    6eca:	fb03 4300 	mla	r3, r3, r0, r4
    6ece:	600b      	str	r3, [r1, #0]
	__asm__ volatile(
    6ed0:	f385 8811 	msr	BASEPRI, r5
    6ed4:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    6ed8:	9901      	ldr	r1, [sp, #4]
    6eda:	6813      	ldr	r3, [r2, #0]
    6edc:	4299      	cmp	r1, r3
    6ede:	d001      	beq.n	6ee4 <rtc1_nrf_isr+0x50>
    6ee0:	f004 f89c 	bl	b01c <_StackCheckHandler>
}
    6ee4:	b003      	add	sp, #12
    6ee6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    6eea:	f004 b9cb 	b.w	b284 <z_clock_announce>
    6eee:	bf00      	nop
    6ef0:	200036b0 	.word	0x200036b0
    6ef4:	40011000 	.word	0x40011000
    6ef8:	20001734 	.word	0x20001734

00006efc <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
    6efc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6efe:	4e23      	ldr	r6, [pc, #140]	; (6f8c <z_clock_driver_init+0x90>)
    6f00:	4823      	ldr	r0, [pc, #140]	; (6f90 <z_clock_driver_init+0x94>)
    6f02:	6833      	ldr	r3, [r6, #0]
    6f04:	9301      	str	r3, [sp, #4]
    6f06:	f002 fb0b 	bl	9520 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_NORDIC_NRF_CLOCK_0_LABEL "_32K");
	if (!clock) {
    6f0a:	2800      	cmp	r0, #0
    6f0c:	d039      	beq.n	6f82 <z_clock_driver_init+0x86>
	return api->on(dev, sys);
    6f0e:	6843      	ldr	r3, [r0, #4]
}

__STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    6f10:	4d20      	ldr	r5, [pc, #128]	; (6f94 <z_clock_driver_init+0x98>)
    6f12:	681b      	ldr	r3, [r3, #0]
    6f14:	2101      	movs	r1, #1
    6f16:	4798      	blx	r3
    6f18:	2400      	movs	r4, #0
    p_reg->CC[ch] = cc_val;
    6f1a:	f240 1347 	movw	r3, #327	; 0x147
    p_reg->PRESCALER = val;
    6f1e:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    6f22:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

__STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    6f26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6f2a:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
    p_reg->INTENSET = mask;
    6f2e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    6f32:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6f36:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6f3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    6f3e:	601c      	str	r4, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    6f40:	681b      	ldr	r3, [r3, #0]
    6f42:	9300      	str	r3, [sp, #0]
    (void)dummy;
    6f44:	9b00      	ldr	r3, [sp, #0]
    6f46:	4b14      	ldr	r3, [pc, #80]	; (6f98 <z_clock_driver_init+0x9c>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    6f48:	2101      	movs	r1, #1
    6f4a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    6f4e:	2011      	movs	r0, #17
    6f50:	4622      	mov	r2, r4
    6f52:	f000 fb47 	bl	75e4 <z_irq_priority_set>
	irq_enable(RTC1_IRQn);
    6f56:	2011      	movs	r0, #17
    6f58:	f000 fae8 	bl	752c <z_arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    6f5c:	4a0f      	ldr	r2, [pc, #60]	; (6f9c <z_clock_driver_init+0xa0>)
    6f5e:	2301      	movs	r3, #1
    6f60:	6013      	str	r3, [r2, #0]
    6f62:	602b      	str	r3, [r5, #0]
     return p_reg->COUNTER;
    6f64:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
    6f68:	f203 1347 	addw	r3, r3, #327	; 0x147
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    6f6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    6f70:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	}

	return 0;
    6f74:	4620      	mov	r0, r4
}
    6f76:	9a01      	ldr	r2, [sp, #4]
    6f78:	6833      	ldr	r3, [r6, #0]
    6f7a:	429a      	cmp	r2, r3
    6f7c:	d004      	beq.n	6f88 <z_clock_driver_init+0x8c>
    6f7e:	f004 f84d 	bl	b01c <_StackCheckHandler>
		return -1;
    6f82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6f86:	e7f6      	b.n	6f76 <z_clock_driver_init+0x7a>
}
    6f88:	b002      	add	sp, #8
    6f8a:	bd70      	pop	{r4, r5, r6, pc}
    6f8c:	200036b0 	.word	0x200036b0
    6f90:	0000bced 	.word	0x0000bced
    6f94:	40011000 	.word	0x40011000
    6f98:	e000e100 	.word	0xe000e100
    6f9c:	40011008 	.word	0x40011008

00006fa0 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    6fa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6fa2:	4920      	ldr	r1, [pc, #128]	; (7024 <z_clock_set_timeout+0x84>)
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    6fa4:	f64c 0269 	movw	r2, #51305	; 0xc869
{
    6fa8:	680b      	ldr	r3, [r1, #0]
    6faa:	9301      	str	r3, [sp, #4]
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    6fac:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    6fb0:	bf08      	it	eq
    6fb2:	4610      	moveq	r0, r2
	__asm__ volatile(
    6fb4:	f04f 0320 	mov.w	r3, #32
    6fb8:	f3ef 8411 	mrs	r4, BASEPRI
    6fbc:	f383 8811 	msr	BASEPRI, r3
    6fc0:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, t = counter();

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK + counter_sub(t, last_count);
    6fc4:	4e18      	ldr	r6, [pc, #96]	; (7028 <z_clock_set_timeout+0x88>)
     return p_reg->COUNTER;
    6fc6:	4d19      	ldr	r5, [pc, #100]	; (702c <z_clock_set_timeout+0x8c>)
    6fc8:	6837      	ldr	r7, [r6, #0]
    6fca:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    6fce:	3801      	subs	r0, #1
    6fd0:	4290      	cmp	r0, r2
    6fd2:	bfa8      	it	ge
    6fd4:	4610      	movge	r0, r2
	return (a - b) & COUNTER_MAX;
    6fd6:	1bda      	subs	r2, r3, r7
    6fd8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	cyc = ticks * CYC_PER_TICK + counter_sub(t, last_count);
    6fdc:	f240 1647 	movw	r6, #327	; 0x147
    6fe0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
	cyc += (CYC_PER_TICK - 1);
    6fe4:	f502 72a3 	add.w	r2, r2, #326	; 0x146
    6fe8:	fb06 2000 	mla	r0, r6, r0, r2
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
    6fec:	fbb0 f0f6 	udiv	r0, r0, r6
	cyc += last_count;
    6ff0:	fb06 7000 	mla	r0, r6, r0, r7
	return (a - b) & COUNTER_MAX;
    6ff4:	1ac3      	subs	r3, r0, r3

	if (counter_sub(cyc, t) < MIN_DELAY) {
    6ff6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    6ffa:	f023 031f 	bic.w	r3, r3, #31
    6ffe:	b903      	cbnz	r3, 7002 <z_clock_set_timeout+0x62>
		cyc += CYC_PER_TICK;
    7000:	4430      	add	r0, r6
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    7002:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    7006:	f8c5 0540 	str.w	r0, [r5, #1344]	; 0x540
	__asm__ volatile(
    700a:	f384 8811 	msr	BASEPRI, r4
    700e:	f3bf 8f6f 	isb	sy
	}

	set_comparator(cyc);
	k_spin_unlock(&lock, key);
#endif
}
    7012:	9a01      	ldr	r2, [sp, #4]
    7014:	680b      	ldr	r3, [r1, #0]
    7016:	429a      	cmp	r2, r3
    7018:	d001      	beq.n	701e <z_clock_set_timeout+0x7e>
    701a:	f003 ffff 	bl	b01c <_StackCheckHandler>
    701e:	b003      	add	sp, #12
    7020:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7022:	bf00      	nop
    7024:	200036b0 	.word	0x200036b0
    7028:	20001734 	.word	0x20001734
    702c:	40011000 	.word	0x40011000

00007030 <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
    7030:	b507      	push	{r0, r1, r2, lr}
    7032:	4b12      	ldr	r3, [pc, #72]	; (707c <z_clock_elapsed+0x4c>)
    7034:	681a      	ldr	r2, [r3, #0]
    7036:	9201      	str	r2, [sp, #4]
	__asm__ volatile(
    7038:	f04f 0120 	mov.w	r1, #32
    703c:	f3ef 8211 	mrs	r2, BASEPRI
    7040:	f381 8811 	msr	BASEPRI, r1
    7044:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    7048:	490d      	ldr	r1, [pc, #52]	; (7080 <z_clock_elapsed+0x50>)
    704a:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    704e:	490d      	ldr	r1, [pc, #52]	; (7084 <z_clock_elapsed+0x54>)
	return (a - b) & COUNTER_MAX;
    7050:	6809      	ldr	r1, [r1, #0]
    7052:	1a40      	subs	r0, r0, r1
    7054:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    7058:	f240 1147 	movw	r1, #327	; 0x147
    705c:	fbb0 f0f1 	udiv	r0, r0, r1
	__asm__ volatile(
    7060:	f382 8811 	msr	BASEPRI, r2
    7064:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    7068:	9a01      	ldr	r2, [sp, #4]
    706a:	681b      	ldr	r3, [r3, #0]
    706c:	429a      	cmp	r2, r3
    706e:	d001      	beq.n	7074 <z_clock_elapsed+0x44>
    7070:	f003 ffd4 	bl	b01c <_StackCheckHandler>
    7074:	b003      	add	sp, #12
    7076:	f85d fb04 	ldr.w	pc, [sp], #4
    707a:	bf00      	nop
    707c:	200036b0 	.word	0x200036b0
    7080:	40011000 	.word	0x40011000
    7084:	20001734 	.word	0x20001734

00007088 <z_timer_cycle_get_32>:

u32_t z_timer_cycle_get_32(void)
{
    7088:	b507      	push	{r0, r1, r2, lr}
    708a:	4a10      	ldr	r2, [pc, #64]	; (70cc <z_timer_cycle_get_32+0x44>)
    708c:	6813      	ldr	r3, [r2, #0]
    708e:	9301      	str	r3, [sp, #4]
	__asm__ volatile(
    7090:	f04f 0320 	mov.w	r3, #32
    7094:	f3ef 8111 	mrs	r1, BASEPRI
    7098:	f383 8811 	msr	BASEPRI, r3
    709c:	f3bf 8f6f 	isb	sy
    70a0:	4b0b      	ldr	r3, [pc, #44]	; (70d0 <z_timer_cycle_get_32+0x48>)
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    70a2:	480c      	ldr	r0, [pc, #48]	; (70d4 <z_timer_cycle_get_32+0x4c>)
    70a4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    70a8:	6800      	ldr	r0, [r0, #0]
	__asm__ volatile(
    70aa:	f381 8811 	msr	BASEPRI, r1
    70ae:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    70b2:	1a1b      	subs	r3, r3, r0
    70b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    70b8:	9901      	ldr	r1, [sp, #4]
    70ba:	4418      	add	r0, r3
    70bc:	6813      	ldr	r3, [r2, #0]
    70be:	4299      	cmp	r1, r3
    70c0:	d001      	beq.n	70c6 <z_timer_cycle_get_32+0x3e>
    70c2:	f003 ffab 	bl	b01c <_StackCheckHandler>
    70c6:	b003      	add	sp, #12
    70c8:	f85d fb04 	ldr.w	pc, [sp], #4
    70cc:	200036b0 	.word	0x200036b0
    70d0:	40011000 	.word	0x40011000
    70d4:	20001734 	.word	0x20001734

000070d8 <_IntExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    70d8:	4804      	ldr	r0, [pc, #16]	; (70ec <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    70da:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    70dc:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    70de:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    70e0:	d003      	beq.n	70ea <_EXIT_EXC>

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    70e2:	4903      	ldr	r1, [pc, #12]	; (70f0 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    70e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    70e8:	600a      	str	r2, [r1, #0]

000070ea <_EXIT_EXC>:
    mov lr, r1
#else
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */
    bx lr
    70ea:	4770      	bx	lr
    ldr r0, =_kernel
    70ec:	20001894 	.word	0x20001894
    ldr r1, =_SCS_ICSR
    70f0:	e000ed04 	.word	0xe000ed04

000070f4 <z_IntLibInit>:
 *
 * @return N/A
 */

void z_IntLibInit(void)
{
    70f4:	b513      	push	{r0, r1, r4, lr}
    70f6:	4b0a      	ldr	r3, [pc, #40]	; (7120 <z_IntLibInit+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    70f8:	4c0a      	ldr	r4, [pc, #40]	; (7124 <z_IntLibInit+0x30>)
    70fa:	681a      	ldr	r2, [r3, #0]
    70fc:	9201      	str	r2, [sp, #4]
    70fe:	2020      	movs	r0, #32
	int irq = 0;
    7100:	2200      	movs	r2, #0
    7102:	18a1      	adds	r1, r4, r2

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    7104:	3201      	adds	r2, #1
    7106:	2a30      	cmp	r2, #48	; 0x30
    7108:	f881 0300 	strb.w	r0, [r1, #768]	; 0x300
    710c:	d1f9      	bne.n	7102 <z_IntLibInit+0xe>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    710e:	9a01      	ldr	r2, [sp, #4]
    7110:	681b      	ldr	r3, [r3, #0]
    7112:	429a      	cmp	r2, r3
    7114:	d001      	beq.n	711a <z_IntLibInit+0x26>
    7116:	f003 ff81 	bl	b01c <_StackCheckHandler>
    711a:	b002      	add	sp, #8
    711c:	bd10      	pop	{r4, pc}
    711e:	bf00      	nop
    7120:	200036b0 	.word	0x200036b0
    7124:	e000e100 	.word	0xe000e100

00007128 <__swap>:
 * @return -EAGAIN, or a return value set by a call to
 * z_set_thread_return_value()
 *
 */
int __swap(int key)
{
    7128:	b507      	push	{r0, r1, r2, lr}
    712a:	4a0f      	ldr	r2, [pc, #60]	; (7168 <__swap+0x40>)
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    712c:	490f      	ldr	r1, [pc, #60]	; (716c <__swap+0x44>)
{
    712e:	6813      	ldr	r3, [r2, #0]
    7130:	9301      	str	r3, [sp, #4]
	_current->arch.basepri = key;
    7132:	688b      	ldr	r3, [r1, #8]
    7134:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
    7136:	480e      	ldr	r0, [pc, #56]	; (7170 <__swap+0x48>)
    7138:	6800      	ldr	r0, [r0, #0]
    713a:	6698      	str	r0, [r3, #104]	; 0x68

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    713c:	480d      	ldr	r0, [pc, #52]	; (7174 <__swap+0x4c>)
    713e:	6843      	ldr	r3, [r0, #4]
    7140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    7144:	6043      	str	r3, [r0, #4]
    7146:	2300      	movs	r3, #0
    7148:	f383 8811 	msr	BASEPRI, r3
    714c:	f3bf 8f6f 	isb	sy
	irq_unlock(0);

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    7150:	688b      	ldr	r3, [r1, #8]
}
    7152:	9901      	ldr	r1, [sp, #4]
    7154:	6e98      	ldr	r0, [r3, #104]	; 0x68
    7156:	6813      	ldr	r3, [r2, #0]
    7158:	4299      	cmp	r1, r3
    715a:	d001      	beq.n	7160 <__swap+0x38>
    715c:	f003 ff5e 	bl	b01c <_StackCheckHandler>
    7160:	b003      	add	sp, #12
    7162:	f85d fb04 	ldr.w	pc, [sp], #4
    7166:	bf00      	nop
    7168:	200036b0 	.word	0x200036b0
    716c:	20001894 	.word	0x20001894
    7170:	0000b828 	.word	0x0000b828
    7174:	e000ed00 	.word	0xe000ed00

00007178 <__pendsv>:

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    7178:	2020      	movs	r0, #32
    msr BASEPRI, r0
    717a:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    717e:	f3bf 8f6f 	isb	sy
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    7182:	4911      	ldr	r1, [pc, #68]	; (71c8 <__pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    7184:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    7186:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    718a:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    718c:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    7190:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    7194:	4f0d      	ldr	r7, [pc, #52]	; (71cc <__pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    7196:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    719a:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    719c:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    719e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    71a0:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs.n r3, #0
    71a2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    71a4:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    71a6:	f380 8811 	msr	BASEPRI, r0
    vldmia r0, {s16-s31}
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    71aa:	b504      	push	{r2, lr}
    ldr r0, =_kernel
    71ac:	4806      	ldr	r0, [pc, #24]	; (71c8 <__pendsv+0x50>)
    ldr r0, [r0, #_kernel_offset_to_current]
    71ae:	6880      	ldr	r0, [r0, #8]
    bl z_arch_configure_dynamic_mpu_regions
    71b0:	f000 fbfa 	bl	79a8 <z_arch_configure_dynamic_mpu_regions>
    pop {r2,lr}
    71b4:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    71b8:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    71bc:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    /* clear stack pointer limit before setting the PSP */
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

    msr PSP, ip
    71c0:	f38c 8809 	msr	PSP, ip
    pop {r0, lr}
#endif
#endif /* CONFIG_TRACING */

    /* exc return */
    bx lr
    71c4:	4770      	bx	lr
    71c6:	0000      	.short	0x0000
    ldr r1, =_kernel
    71c8:	20001894 	.word	0x20001894
    ldr v4, =_SCS_ICSR
    71cc:	e000ed04 	.word	0xe000ed04

000071d0 <__svc>:
 * - System Calls (User mode)
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    71d0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    71d4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    71d6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    71da:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    71de:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read encoding */
    ldrh r1, [r1, #-2]
    71e0:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call (if user mode supported)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    71e4:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
    71e8:	2902      	cmp	r1, #2
    beq _oops
    71ea:	d0ff      	beq.n	71ec <_oops>

000071ec <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {r0, lr}
    71ec:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    71ee:	f000 facb 	bl	7788 <z_do_kernel_oops>
    pop {r0, pc}
    71f2:	bd01      	pop	{r0, pc}

000071f4 <MpuFault.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t MpuFault(NANO_ESF *esf, int fromHardFault)
    71f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    71f6:	4d22      	ldr	r5, [pc, #136]	; (7280 <MpuFault.isra.2+0x8c>)
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****\n");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    71f8:	4c22      	ldr	r4, [pc, #136]	; (7284 <MpuFault.isra.2+0x90>)
static u32_t MpuFault(NANO_ESF *esf, int fromHardFault)
    71fa:	682b      	ldr	r3, [r5, #0]
    71fc:	9301      	str	r3, [sp, #4]
    71fe:	4606      	mov	r6, r0
	PR_FAULT_INFO("***** MPU FAULT *****\n");
    7200:	4821      	ldr	r0, [pc, #132]	; (7288 <MpuFault.isra.2+0x94>)
    7202:	f7f9 fe3f 	bl	e84 <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    7206:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    7208:	06d1      	lsls	r1, r2, #27
    720a:	d502      	bpl.n	7212 <MpuFault.isra.2+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    720c:	481f      	ldr	r0, [pc, #124]	; (728c <MpuFault.isra.2+0x98>)
    720e:	f7f9 fe39 	bl	e84 <printk>
			" not valid)\n");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    7212:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7214:	071a      	lsls	r2, r3, #28
    7216:	d502      	bpl.n	721e <MpuFault.isra.2+0x2a>
		PR_FAULT_INFO("  Unstacking error\n");
    7218:	481d      	ldr	r0, [pc, #116]	; (7290 <MpuFault.isra.2+0x9c>)
    721a:	f7f9 fe33 	bl	e84 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    721e:	4c19      	ldr	r4, [pc, #100]	; (7284 <MpuFault.isra.2+0x90>)
    7220:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7222:	079b      	lsls	r3, r3, #30
    7224:	d50e      	bpl.n	7244 <MpuFault.isra.2+0x50>
		PR_FAULT_INFO("  Data Access Violation\n");
    7226:	481b      	ldr	r0, [pc, #108]	; (7294 <MpuFault.isra.2+0xa0>)
    7228:	f7f9 fe2c 	bl	e84 <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    722c:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    722e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7230:	0618      	lsls	r0, r3, #24
    7232:	d507      	bpl.n	7244 <MpuFault.isra.2+0x50>
			PR_EXC("  MMFAR Address: 0x%x\n", mmfar);
    7234:	4818      	ldr	r0, [pc, #96]	; (7298 <MpuFault.isra.2+0xa4>)
    7236:	f7f9 fe25 	bl	e84 <printk>
			if (fromHardFault) {
    723a:	b11e      	cbz	r6, 7244 <MpuFault.isra.2+0x50>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    723c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    723e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    7242:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    7244:	4c0f      	ldr	r4, [pc, #60]	; (7284 <MpuFault.isra.2+0x90>)
    7246:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    7248:	07d2      	lsls	r2, r2, #31
    724a:	d502      	bpl.n	7252 <MpuFault.isra.2+0x5e>
		PR_FAULT_INFO("  Instruction Access Violation\n");
    724c:	4813      	ldr	r0, [pc, #76]	; (729c <MpuFault.isra.2+0xa8>)
    724e:	f7f9 fe19 	bl	e84 <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    7252:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7254:	069b      	lsls	r3, r3, #26
    7256:	d502      	bpl.n	725e <MpuFault.isra.2+0x6a>
		PR_FAULT_INFO(
    7258:	4811      	ldr	r0, [pc, #68]	; (72a0 <MpuFault.isra.2+0xac>)
    725a:	f7f9 fe13 	bl	e84 <printk>
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    725e:	4b09      	ldr	r3, [pc, #36]	; (7284 <MpuFault.isra.2+0x90>)
    7260:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    7262:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    7264:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    7268:	629a      	str	r2, [r3, #40]	; 0x28
	if (MemoryFaultIsRecoverable(esf)) {
		reason = _NANO_ERR_RECOVERABLE;
	}

	return reason;
}
    726a:	9a01      	ldr	r2, [sp, #4]
    726c:	682b      	ldr	r3, [r5, #0]
    726e:	429a      	cmp	r2, r3
    7270:	f04f 0000 	mov.w	r0, #0
    7274:	d001      	beq.n	727a <MpuFault.isra.2+0x86>
    7276:	f003 fed1 	bl	b01c <_StackCheckHandler>
    727a:	b002      	add	sp, #8
    727c:	bd70      	pop	{r4, r5, r6, pc}
    727e:	bf00      	nop
    7280:	200036b0 	.word	0x200036b0
    7284:	e000ed00 	.word	0xe000ed00
    7288:	0000c04b 	.word	0x0000c04b
    728c:	0000c062 	.word	0x0000c062
    7290:	0000c096 	.word	0x0000c096
    7294:	0000c0aa 	.word	0x0000c0aa
    7298:	0000c0c3 	.word	0x0000c0c3
    729c:	0000c0da 	.word	0x0000c0da
    72a0:	0000c0fa 	.word	0x0000c0fa

000072a4 <BusFault.isra.3>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static int BusFault(NANO_ESF *esf, int fromHardFault)
    72a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    72a6:	4d24      	ldr	r5, [pc, #144]	; (7338 <BusFault.isra.3+0x94>)
{
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****\n");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    72a8:	4c24      	ldr	r4, [pc, #144]	; (733c <BusFault.isra.3+0x98>)
static int BusFault(NANO_ESF *esf, int fromHardFault)
    72aa:	682b      	ldr	r3, [r5, #0]
    72ac:	9301      	str	r3, [sp, #4]
    72ae:	4606      	mov	r6, r0
	PR_FAULT_INFO("***** BUS FAULT *****\n");
    72b0:	4823      	ldr	r0, [pc, #140]	; (7340 <BusFault.isra.3+0x9c>)
    72b2:	f7f9 fde7 	bl	e84 <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    72b6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    72b8:	04d1      	lsls	r1, r2, #19
    72ba:	d502      	bpl.n	72c2 <BusFault.isra.3+0x1e>
		PR_FAULT_INFO("  Stacking error\n");
    72bc:	4821      	ldr	r0, [pc, #132]	; (7344 <BusFault.isra.3+0xa0>)
    72be:	f7f9 fde1 	bl	e84 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    72c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    72c4:	051a      	lsls	r2, r3, #20
    72c6:	d502      	bpl.n	72ce <BusFault.isra.3+0x2a>
		PR_FAULT_INFO("  Unstacking error\n");
    72c8:	481f      	ldr	r0, [pc, #124]	; (7348 <BusFault.isra.3+0xa4>)
    72ca:	f7f9 fddb 	bl	e84 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    72ce:	4c1b      	ldr	r4, [pc, #108]	; (733c <BusFault.isra.3+0x98>)
    72d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    72d2:	059b      	lsls	r3, r3, #22
    72d4:	d50e      	bpl.n	72f4 <BusFault.isra.3+0x50>
		PR_FAULT_INFO("  Precise data bus error\n");
    72d6:	481d      	ldr	r0, [pc, #116]	; (734c <BusFault.isra.3+0xa8>)
    72d8:	f7f9 fdd4 	bl	e84 <printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    72dc:	6ba1      	ldr	r1, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    72de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    72e0:	0418      	lsls	r0, r3, #16
    72e2:	d507      	bpl.n	72f4 <BusFault.isra.3+0x50>
			PR_EXC("  BFAR Address: 0x%x\n", bfar);
    72e4:	481a      	ldr	r0, [pc, #104]	; (7350 <BusFault.isra.3+0xac>)
    72e6:	f7f9 fdcd 	bl	e84 <printk>
			if (fromHardFault) {
    72ea:	b11e      	cbz	r6, 72f4 <BusFault.isra.3+0x50>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    72ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    72ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    72f2:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    72f4:	4c11      	ldr	r4, [pc, #68]	; (733c <BusFault.isra.3+0x98>)
    72f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    72f8:	0559      	lsls	r1, r3, #21
    72fa:	d502      	bpl.n	7302 <BusFault.isra.3+0x5e>
		PR_FAULT_INFO("  Imprecise data bus error\n");
    72fc:	4815      	ldr	r0, [pc, #84]	; (7354 <BusFault.isra.3+0xb0>)
    72fe:	f7f9 fdc1 	bl	e84 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    7302:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7304:	05da      	lsls	r2, r3, #23
    7306:	d50f      	bpl.n	7328 <BusFault.isra.3+0x84>
		PR_FAULT_INFO("  Instruction bus error\n");
    7308:	4813      	ldr	r0, [pc, #76]	; (7358 <BusFault.isra.3+0xb4>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
    730a:	f7f9 fdbb 	bl	e84 <printk>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    730e:	4a0b      	ldr	r2, [pc, #44]	; (733c <BusFault.isra.3+0x98>)
    7310:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7312:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    7316:	6293      	str	r3, [r2, #40]	; 0x28
	if (MemoryFaultIsRecoverable(esf)) {
		reason = _NANO_ERR_RECOVERABLE;
	}

	return reason;
}
    7318:	9a01      	ldr	r2, [sp, #4]
    731a:	682b      	ldr	r3, [r5, #0]
    731c:	429a      	cmp	r2, r3
    731e:	f04f 0000 	mov.w	r0, #0
    7322:	d006      	beq.n	7332 <BusFault.isra.3+0x8e>
    7324:	f003 fe7a 	bl	b01c <_StackCheckHandler>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    7328:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    732a:	049b      	lsls	r3, r3, #18
    732c:	d5ef      	bpl.n	730e <BusFault.isra.3+0x6a>
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
    732e:	480b      	ldr	r0, [pc, #44]	; (735c <BusFault.isra.3+0xb8>)
    7330:	e7eb      	b.n	730a <BusFault.isra.3+0x66>
}
    7332:	b002      	add	sp, #8
    7334:	bd70      	pop	{r4, r5, r6, pc}
    7336:	bf00      	nop
    7338:	200036b0 	.word	0x200036b0
    733c:	e000ed00 	.word	0xe000ed00
    7340:	0000bfbd 	.word	0x0000bfbd
    7344:	0000bfd4 	.word	0x0000bfd4
    7348:	0000c096 	.word	0x0000c096
    734c:	0000bfe6 	.word	0x0000bfe6
    7350:	0000c000 	.word	0x0000c000
    7354:	0000c016 	.word	0x0000c016
    7358:	0000c032 	.word	0x0000c032
    735c:	0000c0fa 	.word	0x0000c0fa

00007360 <UsageFault.isra.4>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t UsageFault(const NANO_ESF *esf)
    7360:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7362:	4c1f      	ldr	r4, [pc, #124]	; (73e0 <UsageFault.isra.4+0x80>)
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****\n");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    7364:	4d1f      	ldr	r5, [pc, #124]	; (73e4 <UsageFault.isra.4+0x84>)
static u32_t UsageFault(const NANO_ESF *esf)
    7366:	6823      	ldr	r3, [r4, #0]
	PR_FAULT_INFO("***** USAGE FAULT *****\n");
    7368:	481f      	ldr	r0, [pc, #124]	; (73e8 <UsageFault.isra.4+0x88>)
static u32_t UsageFault(const NANO_ESF *esf)
    736a:	9301      	str	r3, [sp, #4]
	PR_FAULT_INFO("***** USAGE FAULT *****\n");
    736c:	f7f9 fd8a 	bl	e84 <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    7370:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    7372:	0193      	lsls	r3, r2, #6
    7374:	d502      	bpl.n	737c <UsageFault.isra.4+0x1c>
		PR_FAULT_INFO("  Division by zero\n");
    7376:	481d      	ldr	r0, [pc, #116]	; (73ec <UsageFault.isra.4+0x8c>)
    7378:	f7f9 fd84 	bl	e84 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    737c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    737e:	01dd      	lsls	r5, r3, #7
    7380:	d502      	bpl.n	7388 <UsageFault.isra.4+0x28>
		PR_FAULT_INFO("  Unaligned memory access\n");
    7382:	481b      	ldr	r0, [pc, #108]	; (73f0 <UsageFault.isra.4+0x90>)
    7384:	f7f9 fd7e 	bl	e84 <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    7388:	4d16      	ldr	r5, [pc, #88]	; (73e4 <UsageFault.isra.4+0x84>)
    738a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    738c:	0310      	lsls	r0, r2, #12
    738e:	d502      	bpl.n	7396 <UsageFault.isra.4+0x36>
		PR_FAULT_INFO("  No coprocessor instructions\n");
    7390:	4818      	ldr	r0, [pc, #96]	; (73f4 <UsageFault.isra.4+0x94>)
    7392:	f7f9 fd77 	bl	e84 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    7396:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7398:	0359      	lsls	r1, r3, #13
    739a:	d502      	bpl.n	73a2 <UsageFault.isra.4+0x42>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC\n");
    739c:	4816      	ldr	r0, [pc, #88]	; (73f8 <UsageFault.isra.4+0x98>)
    739e:	f7f9 fd71 	bl	e84 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    73a2:	4d10      	ldr	r5, [pc, #64]	; (73e4 <UsageFault.isra.4+0x84>)
    73a4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    73a6:	0392      	lsls	r2, r2, #14
    73a8:	d502      	bpl.n	73b0 <UsageFault.isra.4+0x50>
		PR_FAULT_INFO("  Illegal use of the EPSR\n");
    73aa:	4814      	ldr	r0, [pc, #80]	; (73fc <UsageFault.isra.4+0x9c>)
    73ac:	f7f9 fd6a 	bl	e84 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    73b0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    73b2:	03db      	lsls	r3, r3, #15
    73b4:	d502      	bpl.n	73bc <UsageFault.isra.4+0x5c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction\n");
    73b6:	4812      	ldr	r0, [pc, #72]	; (7400 <UsageFault.isra.4+0xa0>)
    73b8:	f7f9 fd64 	bl	e84 <printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    73bc:	4a09      	ldr	r2, [pc, #36]	; (73e4 <UsageFault.isra.4+0x84>)
    73be:	6a93      	ldr	r3, [r2, #40]	; 0x28
    73c0:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    73c4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    73c8:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    73ca:	9a01      	ldr	r2, [sp, #4]
    73cc:	6823      	ldr	r3, [r4, #0]
    73ce:	429a      	cmp	r2, r3
    73d0:	f04f 0000 	mov.w	r0, #0
    73d4:	d001      	beq.n	73da <UsageFault.isra.4+0x7a>
    73d6:	f003 fe21 	bl	b01c <_StackCheckHandler>
    73da:	b003      	add	sp, #12
    73dc:	bd30      	pop	{r4, r5, pc}
    73de:	bf00      	nop
    73e0:	200036b0 	.word	0x200036b0
    73e4:	e000ed00 	.word	0xe000ed00
    73e8:	0000c12a 	.word	0x0000c12a
    73ec:	0000c143 	.word	0x0000c143
    73f0:	0000c157 	.word	0x0000c157
    73f4:	0000c172 	.word	0x0000c172
    73f8:	0000c191 	.word	0x0000c191
    73fc:	0000c1b7 	.word	0x0000c1b7
    7400:	0000c1d2 	.word	0x0000c1d2

00007404 <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * running a Secure Firmware.
 */
void _Fault(NANO_ESF *esf, u32_t exc_return)
{
    7404:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    7408:	4d31      	ldr	r5, [pc, #196]	; (74d0 <_Fault+0xcc>)
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    740a:	4e32      	ldr	r6, [pc, #200]	; (74d4 <_Fault+0xd0>)
{
    740c:	682b      	ldr	r3, [r5, #0]
    740e:	9301      	str	r3, [sp, #4]
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    7410:	f8d6 8004 	ldr.w	r8, [r6, #4]
    7414:	f3c8 0408 	ubfx	r4, r8, #0, #9
{
    7418:	4607      	mov	r7, r0
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_LOG_PANIC, log_panic)
    741a:	f7fb fdf1 	bl	3000 <z_impl_log_panic>
	switch (fault) {
    741e:	1ee3      	subs	r3, r4, #3
    7420:	2b09      	cmp	r3, #9
    7422:	d83b      	bhi.n	749c <_Fault+0x98>
    7424:	e8df f003 	tbb	[pc, r3]
    7428:	29363405 	.word	0x29363405
    742c:	3a3a3a3a 	.word	0x3a3a3a3a
    7430:	383a      	.short	0x383a
	PR_FAULT_INFO("***** HARD FAULT *****\n");
    7432:	4829      	ldr	r0, [pc, #164]	; (74d8 <_Fault+0xd4>)
    7434:	f7f9 fd26 	bl	e84 <printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    7438:	6af4      	ldr	r4, [r6, #44]	; 0x2c
    743a:	f014 0402 	ands.w	r4, r4, #2
    743e:	d004      	beq.n	744a <_Fault+0x46>
		PR_EXC("  Bus fault on vector table read\n");
    7440:	4826      	ldr	r0, [pc, #152]	; (74dc <_Fault+0xd8>)
	PR_FAULT_INFO(
    7442:	f7f9 fd1f 	bl	e84 <printk>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
    7446:	2400      	movs	r4, #0
    7448:	e01c      	b.n	7484 <_Fault+0x80>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    744a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    744c:	005b      	lsls	r3, r3, #1
    744e:	d519      	bpl.n	7484 <_Fault+0x80>
		PR_EXC("  Fault escalation (see below)\n");
    7450:	4823      	ldr	r0, [pc, #140]	; (74e0 <_Fault+0xdc>)
    7452:	f7f9 fd17 	bl	e84 <printk>
		if (SCB_MMFSR != 0) {
    7456:	4b23      	ldr	r3, [pc, #140]	; (74e4 <_Fault+0xe0>)
    7458:	781b      	ldrb	r3, [r3, #0]
    745a:	b11b      	cbz	r3, 7464 <_Fault+0x60>
			reason = MpuFault(esf, 1);
    745c:	2001      	movs	r0, #1
		reason = MpuFault(esf, 0);
    745e:	f7ff fec9 	bl	71f4 <MpuFault.isra.2>
    7462:	e00c      	b.n	747e <_Fault+0x7a>
		} else if (SCB_BFSR != 0) {
    7464:	4b20      	ldr	r3, [pc, #128]	; (74e8 <_Fault+0xe4>)
    7466:	781b      	ldrb	r3, [r3, #0]
    7468:	b11b      	cbz	r3, 7472 <_Fault+0x6e>
			reason = BusFault(esf, 1);
    746a:	2001      	movs	r0, #1
		reason = BusFault(esf, 0);
    746c:	f7ff ff1a 	bl	72a4 <BusFault.isra.3>
    7470:	e005      	b.n	747e <_Fault+0x7a>
		} else if (SCB_UFSR != 0) {
    7472:	4b1e      	ldr	r3, [pc, #120]	; (74ec <_Fault+0xe8>)
    7474:	881b      	ldrh	r3, [r3, #0]
    7476:	b29b      	uxth	r3, r3
    7478:	b123      	cbz	r3, 7484 <_Fault+0x80>
			reason = UsageFault(esf);
    747a:	f7ff ff71 	bl	7360 <UsageFault.isra.4>
	(void) exc_return;
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	reason = FaultHandle(esf, fault);

	if (reason == _NANO_ERR_RECOVERABLE) {
    747e:	2806      	cmp	r0, #6
			reason = UsageFault(esf);
    7480:	4604      	mov	r4, r0
	if (reason == _NANO_ERR_RECOVERABLE) {
    7482:	d01e      	beq.n	74c2 <_Fault+0xbe>

#if defined(CONFIG_ARM_SECURE_FIRMWARE) || \
	defined(CONFIG_ARM_NONSECURE_FIRMWARE)
_exit_fatal:
#endif
	z_NanoFatalErrorHandler(reason, esf);
    7484:	9a01      	ldr	r2, [sp, #4]
    7486:	682b      	ldr	r3, [r5, #0]
    7488:	429a      	cmp	r2, r3
    748a:	d013      	beq.n	74b4 <_Fault+0xb0>
}
    748c:	f003 fdc6 	bl	b01c <_StackCheckHandler>
		reason = MpuFault(esf, 0);
    7490:	2000      	movs	r0, #0
    7492:	e7e4      	b.n	745e <_Fault+0x5a>
		reason = BusFault(esf, 0);
    7494:	2000      	movs	r0, #0
    7496:	e7e9      	b.n	746c <_Fault+0x68>
	PR_FAULT_INFO(
    7498:	4815      	ldr	r0, [pc, #84]	; (74f0 <_Fault+0xec>)
    749a:	e7d2      	b.n	7442 <_Fault+0x3e>
	PR_FAULT_INFO("***** %s %d) *****\n",
    749c:	4b15      	ldr	r3, [pc, #84]	; (74f4 <_Fault+0xf0>)
    749e:	4916      	ldr	r1, [pc, #88]	; (74f8 <_Fault+0xf4>)
    74a0:	4816      	ldr	r0, [pc, #88]	; (74fc <_Fault+0xf8>)
    74a2:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    74a6:	f1a4 0210 	sub.w	r2, r4, #16
    74aa:	bf18      	it	ne
    74ac:	4619      	movne	r1, r3
    74ae:	f7f9 fce9 	bl	e84 <printk>
	if (reason == _NANO_ERR_RECOVERABLE) {
    74b2:	e7c8      	b.n	7446 <_Fault+0x42>
	z_NanoFatalErrorHandler(reason, esf);
    74b4:	4639      	mov	r1, r7
    74b6:	4620      	mov	r0, r4
}
    74b8:	b002      	add	sp, #8
    74ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_NanoFatalErrorHandler(reason, esf);
    74be:	f000 b91f 	b.w	7700 <z_NanoFatalErrorHandler>
}
    74c2:	9a01      	ldr	r2, [sp, #4]
    74c4:	682b      	ldr	r3, [r5, #0]
    74c6:	429a      	cmp	r2, r3
    74c8:	d1e0      	bne.n	748c <_Fault+0x88>
    74ca:	b002      	add	sp, #8
    74cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    74d0:	200036b0 	.word	0x200036b0
    74d4:	e000ed00 	.word	0xe000ed00
    74d8:	0000c22c 	.word	0x0000c22c
    74dc:	0000c244 	.word	0x0000c244
    74e0:	0000c266 	.word	0x0000c266
    74e4:	e000ed28 	.word	0xe000ed28
    74e8:	e000ed29 	.word	0xe000ed29
    74ec:	e000ed2a 	.word	0xe000ed2a
    74f0:	0000c286 	.word	0x0000c286
    74f4:	0000c213 	.word	0x0000c213
    74f8:	0000c1fe 	.word	0x0000c1fe
    74fc:	0000c2bd 	.word	0x0000c2bd

00007500 <z_FaultInit>:
 * Turns on the desired hardware faults.
 *
 * @return N/A
 */
void z_FaultInit(void)
{
    7500:	b507      	push	{r0, r1, r2, lr}
    7502:	4a08      	ldr	r2, [pc, #32]	; (7524 <z_FaultInit+0x24>)
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    7504:	4908      	ldr	r1, [pc, #32]	; (7528 <z_FaultInit+0x28>)
{
    7506:	6813      	ldr	r3, [r2, #0]
    7508:	9301      	str	r3, [sp, #4]
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    750a:	694b      	ldr	r3, [r1, #20]
    750c:	f043 0310 	orr.w	r3, r3, #16
    7510:	614b      	str	r3, [r1, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    7512:	9901      	ldr	r1, [sp, #4]
    7514:	6813      	ldr	r3, [r2, #0]
    7516:	4299      	cmp	r1, r3
    7518:	d001      	beq.n	751e <z_FaultInit+0x1e>
    751a:	f003 fd7f 	bl	b01c <_StackCheckHandler>
    751e:	b003      	add	sp, #12
    7520:	f85d fb04 	ldr.w	pc, [sp], #4
    7524:	200036b0 	.word	0x200036b0
    7528:	e000ed00 	.word	0xe000ed00

0000752c <z_arch_irq_enable>:
 * the specified <irq>.
 *
 * @return N/A
 */
void z_arch_irq_enable(unsigned int irq)
{
    752c:	b507      	push	{r0, r1, r2, lr}
    752e:	4b0c      	ldr	r3, [pc, #48]	; (7560 <z_arch_irq_enable+0x34>)
    7530:	681a      	ldr	r2, [r3, #0]
    7532:	9201      	str	r2, [sp, #4]
	NVIC_EnableIRQ((IRQn_Type)irq);
    7534:	b242      	sxtb	r2, r0
  if ((int32_t)(IRQn) >= 0)
    7536:	2a00      	cmp	r2, #0
    7538:	db08      	blt.n	754c <z_arch_irq_enable+0x20>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    753a:	2101      	movs	r1, #1
    753c:	f000 001f 	and.w	r0, r0, #31
    7540:	fa01 f000 	lsl.w	r0, r1, r0
    7544:	0952      	lsrs	r2, r2, #5
    7546:	4907      	ldr	r1, [pc, #28]	; (7564 <z_arch_irq_enable+0x38>)
    7548:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
}
    754c:	9a01      	ldr	r2, [sp, #4]
    754e:	681b      	ldr	r3, [r3, #0]
    7550:	429a      	cmp	r2, r3
    7552:	d001      	beq.n	7558 <z_arch_irq_enable+0x2c>
    7554:	f003 fd62 	bl	b01c <_StackCheckHandler>
    7558:	b003      	add	sp, #12
    755a:	f85d fb04 	ldr.w	pc, [sp], #4
    755e:	bf00      	nop
    7560:	200036b0 	.word	0x200036b0
    7564:	e000e100 	.word	0xe000e100

00007568 <z_arch_irq_disable>:
 * interrupts for the specified <irq>.
 *
 * @return N/A
 */
void z_arch_irq_disable(unsigned int irq)
{
    7568:	b507      	push	{r0, r1, r2, lr}
    756a:	4a0e      	ldr	r2, [pc, #56]	; (75a4 <z_arch_irq_disable+0x3c>)
    756c:	6813      	ldr	r3, [r2, #0]
    756e:	9301      	str	r3, [sp, #4]
	NVIC_DisableIRQ((IRQn_Type)irq);
    7570:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    7572:	2b00      	cmp	r3, #0
    7574:	db0d      	blt.n	7592 <z_arch_irq_disable+0x2a>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7576:	2101      	movs	r1, #1
    7578:	095b      	lsrs	r3, r3, #5
    757a:	f000 001f 	and.w	r0, r0, #31
    757e:	fa01 f000 	lsl.w	r0, r1, r0
    7582:	3320      	adds	r3, #32
    7584:	4908      	ldr	r1, [pc, #32]	; (75a8 <z_arch_irq_disable+0x40>)
    7586:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    758a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    758e:	f3bf 8f6f 	isb	sy
}
    7592:	9901      	ldr	r1, [sp, #4]
    7594:	6813      	ldr	r3, [r2, #0]
    7596:	4299      	cmp	r1, r3
    7598:	d001      	beq.n	759e <z_arch_irq_disable+0x36>
    759a:	f003 fd3f 	bl	b01c <_StackCheckHandler>
    759e:	b003      	add	sp, #12
    75a0:	f85d fb04 	ldr.w	pc, [sp], #4
    75a4:	200036b0 	.word	0x200036b0
    75a8:	e000e100 	.word	0xe000e100

000075ac <z_arch_irq_is_enabled>:
 *
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int z_arch_irq_is_enabled(unsigned int irq)
{
    75ac:	b507      	push	{r0, r1, r2, lr}
    75ae:	4a0b      	ldr	r2, [pc, #44]	; (75dc <z_arch_irq_is_enabled+0x30>)
    75b0:	6813      	ldr	r3, [r2, #0]
    75b2:	9301      	str	r3, [sp, #4]
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    75b4:	0941      	lsrs	r1, r0, #5
    75b6:	4b0a      	ldr	r3, [pc, #40]	; (75e0 <z_arch_irq_is_enabled+0x34>)
    75b8:	f000 001f 	and.w	r0, r0, #31
    75bc:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
    75c0:	2301      	movs	r3, #1
    75c2:	fa03 f000 	lsl.w	r0, r3, r0
}
    75c6:	4008      	ands	r0, r1
    75c8:	9901      	ldr	r1, [sp, #4]
    75ca:	6813      	ldr	r3, [r2, #0]
    75cc:	4299      	cmp	r1, r3
    75ce:	d001      	beq.n	75d4 <z_arch_irq_is_enabled+0x28>
    75d0:	f003 fd24 	bl	b01c <_StackCheckHandler>
    75d4:	b003      	add	sp, #12
    75d6:	f85d fb04 	ldr.w	pc, [sp], #4
    75da:	bf00      	nop
    75dc:	200036b0 	.word	0x200036b0
    75e0:	e000e100 	.word	0xe000e100

000075e4 <z_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_irq_priority_set(unsigned int irq, unsigned int prio, u32_t flags)
{
    75e4:	b507      	push	{r0, r1, r2, lr}
    75e6:	4a0f      	ldr	r2, [pc, #60]	; (7624 <z_irq_priority_set+0x40>)
    75e8:	6813      	ldr	r3, [r2, #0]
    75ea:	9301      	str	r3, [sp, #4]
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    75ec:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    75ee:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    75f0:	f101 0101 	add.w	r1, r1, #1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    75f4:	bfae      	itee	ge
    75f6:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    75fa:	4b0b      	ldrlt	r3, [pc, #44]	; (7628 <z_irq_priority_set+0x44>)
    75fc:	f000 000f 	andlt.w	r0, r0, #15
    7600:	ea4f 1141 	mov.w	r1, r1, lsl #5
    7604:	b2c9      	uxtb	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7606:	bfaa      	itet	ge
    7608:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    760c:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    760e:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    7612:	9901      	ldr	r1, [sp, #4]
    7614:	6813      	ldr	r3, [r2, #0]
    7616:	4299      	cmp	r1, r3
    7618:	d001      	beq.n	761e <z_irq_priority_set+0x3a>
    761a:	f003 fcff 	bl	b01c <_StackCheckHandler>
    761e:	b003      	add	sp, #12
    7620:	f85d fb04 	ldr.w	pc, [sp], #4
    7624:	200036b0 	.word	0x200036b0
    7628:	e000ed14 	.word	0xe000ed14

0000762c <z_irq_spurious>:
 * See __reserved().
 *
 * @return N/A
 */
void z_irq_spurious(void *unused)
{
    762c:	b507      	push	{r0, r1, r2, lr}
    762e:	4b07      	ldr	r3, [pc, #28]	; (764c <z_irq_spurious+0x20>)
    7630:	681a      	ldr	r2, [r3, #0]
    7632:	9201      	str	r2, [sp, #4]
	ARG_UNUSED(unused);
	__reserved();
    7634:	9a01      	ldr	r2, [sp, #4]
    7636:	681b      	ldr	r3, [r3, #0]
    7638:	429a      	cmp	r2, r3
    763a:	d001      	beq.n	7640 <z_irq_spurious+0x14>
    763c:	f003 fcee 	bl	b01c <_StackCheckHandler>
}
    7640:	b003      	add	sp, #12
    7642:	f85d eb04 	ldr.w	lr, [sp], #4
	__reserved();
    7646:	f000 b847 	b.w	76d8 <__bus_fault>
    764a:	bf00      	nop
    764c:	200036b0 	.word	0x200036b0

00007650 <z_new_thread>:

void z_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    7650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7654:	b085      	sub	sp, #20
    7656:	4e18      	ldr	r6, [pc, #96]	; (76b8 <z_new_thread+0x68>)
    7658:	469b      	mov	fp, r3
    765a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    765c:	9301      	str	r3, [sp, #4]
    765e:	6833      	ldr	r3, [r6, #0]
    7660:	9303      	str	r3, [sp, #12]
	 * k_thread_create(). If K_THREAD_STACK_SIZEOF() is used, the
	 * Guard size has already been take out of stackSize.
	 */
	stackSize -= MPU_GUARD_ALIGN_AND_SIZE;
#endif
	stackEnd = pStackMem + stackSize;
    7662:	188c      	adds	r4, r1, r2
{
    7664:	4688      	mov	r8, r1
    7666:	4617      	mov	r7, r2
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	z_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    7668:	9b12      	ldr	r3, [sp, #72]	; 0x48
    766a:	9911      	ldr	r1, [sp, #68]	; 0x44
    766c:	2204      	movs	r2, #4
    766e:	4605      	mov	r5, r0
    7670:	e9dd a90e 	ldrd	sl, r9, [sp, #56]	; 0x38

	z_new_thread_init(thread, pStackMem, stackSize, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    7674:	3c20      	subs	r4, #32
    7676:	f003 fc8d 	bl	af94 <z_init_thread_base>
#else
	pInitCtx->pc = (u32_t)z_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    767a:	4a10      	ldr	r2, [pc, #64]	; (76bc <z_new_thread+0x6c>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    767c:	f024 0407 	bic.w	r4, r4, #7

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
    7680:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
    7682:	f022 0201 	bic.w	r2, r2, #1
	thread->fn_abort = NULL;
    7686:	e9c5 3313 	strd	r3, r3, [r5, #76]	; 0x4c
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
	thread->stack_info.size = (u32_t)stackSize;
    768a:	e9c5 8716 	strd	r8, r7, [r5, #88]	; 0x58
    768e:	61a2      	str	r2, [r4, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
	pInitCtx->a3 = (u32_t)parameter2;
	pInitCtx->a4 = (u32_t)parameter3;
    7690:	9a01      	ldr	r2, [sp, #4]
    7692:	60e2      	str	r2, [r4, #12]
	pInitCtx->xpsr =
    7694:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    7698:	61e2      	str	r2, [r4, #28]
	pInitCtx->a2 = (u32_t)parameter1;
    769a:	e9c4 ba00 	strd	fp, sl, [r4]
	pInitCtx->a3 = (u32_t)parameter2;
    769e:	f8c4 9008 	str.w	r9, [r4, #8]

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    76a2:	9a03      	ldr	r2, [sp, #12]
	thread->arch.basepri = 0;
    76a4:	666b      	str	r3, [r5, #100]	; 0x64
}
    76a6:	6833      	ldr	r3, [r6, #0]
	thread->callee_saved.psp = (u32_t)pInitCtx;
    76a8:	64ac      	str	r4, [r5, #72]	; 0x48
}
    76aa:	429a      	cmp	r2, r3
    76ac:	d001      	beq.n	76b2 <z_new_thread+0x62>
    76ae:	f003 fcb5 	bl	b01c <_StackCheckHandler>
    76b2:	b005      	add	sp, #20
    76b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    76b8:	200036b0 	.word	0x200036b0
    76bc:	000009c5 	.word	0x000009c5

000076c0 <z_CpuIdleInit>:
 *
 * void z_CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, z_CpuIdleInit)
	ldr r1, =_SCB_SCR
    76c0:	4901      	ldr	r1, [pc, #4]	; (76c8 <z_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    76c2:	2210      	movs	r2, #16
	str r2, [r1]
    76c4:	600a      	str	r2, [r1, #0]
	bx lr
    76c6:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    76c8:	e000ed10 	.word	0xe000ed10

000076cc <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    76cc:	4040      	eors	r0, r0
	msr BASEPRI, r0
    76ce:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    76d2:	bf30      	wfi

	bx lr
    76d4:	4770      	bx	lr
    76d6:	bf00      	nop

000076d8 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    76d8:	4040      	eors	r0, r0
	msr BASEPRI, r0
    76da:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE) && \
	!defined(CONFIG_ARM_NONSECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    76de:	f8df c01c 	ldr.w	ip, [pc, #28]	; 76fc <__bus_fault+0x24>
	ldr ip, [ip]
    76e2:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    76e6:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    76ea:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    76ec:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    76f0:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE || CONFIG_ARM_NONSECURE_FIRMWARE */
	push {r0, lr}
    76f4:	b501      	push	{r0, lr}
	bl _Fault
    76f6:	f7ff fe85 	bl	7404 <_Fault>

	pop {r0, pc}
    76fa:	bd01      	pop	{r0, pc}
	ldr ip, =_SCS_ICSR
    76fc:	e000ed04 	.word	0xe000ed04

00007700 <z_NanoFatalErrorHandler>:
 *
 * @return This function does not return.
 */
void z_NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
    7700:	b573      	push	{r0, r1, r4, r5, r6, lr}
    7702:	4d19      	ldr	r5, [pc, #100]	; (7768 <z_NanoFatalErrorHandler+0x68>)
    7704:	4604      	mov	r4, r0
    7706:	682b      	ldr	r3, [r5, #0]
    7708:	9301      	str	r3, [sp, #4]
    770a:	460e      	mov	r6, r1
    770c:	f7fb fc78 	bl	3000 <z_impl_log_panic>
	LOG_PANIC();

	switch (reason) {
    7710:	2c05      	cmp	r4, #5
    7712:	d81c      	bhi.n	774e <z_NanoFatalErrorHandler+0x4e>
    7714:	e8df f004 	tbb	[pc, r4]
    7718:	15131b03 	.word	0x15131b03
    771c:	1917      	.short	0x1917
	case _NANO_ERR_HW_EXCEPTION:
		printk("***** Hardware exception *****\n");
    771e:	4813      	ldr	r0, [pc, #76]	; (776c <z_NanoFatalErrorHandler+0x6c>)
		break;
#if defined(CONFIG_STACK_CANARIES) || defined(CONFIG_STACK_SENTINEL) || \
		defined(CONFIG_HW_STACK_PROTECTION) || \
		defined(CONFIG_USERSPACE)
	case _NANO_ERR_STACK_CHK_FAIL:
		printk("***** Stack Check Fail! *****\n");
    7720:	f7f9 fbb0 	bl	e84 <printk>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
    7724:	f003 f9fc 	bl	ab20 <z_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    7728:	69b2      	ldr	r2, [r6, #24]
    772a:	4601      	mov	r1, r0
    772c:	4810      	ldr	r0, [pc, #64]	; (7770 <z_NanoFatalErrorHandler+0x70>)
    772e:	f7f9 fba9 	bl	e84 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	z_SysFatalErrorHandler(reason, pEsf);
    7732:	9a01      	ldr	r2, [sp, #4]
    7734:	682b      	ldr	r3, [r5, #0]
    7736:	429a      	cmp	r2, r3
    7738:	d00e      	beq.n	7758 <z_NanoFatalErrorHandler+0x58>
    773a:	f003 fc6f 	bl	b01c <_StackCheckHandler>
		printk("***** Stack Check Fail! *****\n");
    773e:	480d      	ldr	r0, [pc, #52]	; (7774 <z_NanoFatalErrorHandler+0x74>)
    7740:	e7ee      	b.n	7720 <z_NanoFatalErrorHandler+0x20>
		printk("**** Kernel Allocation Failure! ****\n");
    7742:	480d      	ldr	r0, [pc, #52]	; (7778 <z_NanoFatalErrorHandler+0x78>)
    7744:	e7ec      	b.n	7720 <z_NanoFatalErrorHandler+0x20>
		printk("***** Kernel OOPS! *****\n");
    7746:	480d      	ldr	r0, [pc, #52]	; (777c <z_NanoFatalErrorHandler+0x7c>)
    7748:	e7ea      	b.n	7720 <z_NanoFatalErrorHandler+0x20>
		printk("***** Kernel Panic! *****\n");
    774a:	480d      	ldr	r0, [pc, #52]	; (7780 <z_NanoFatalErrorHandler+0x80>)
    774c:	e7e8      	b.n	7720 <z_NanoFatalErrorHandler+0x20>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    774e:	4621      	mov	r1, r4
    7750:	480c      	ldr	r0, [pc, #48]	; (7784 <z_NanoFatalErrorHandler+0x84>)
    7752:	f7f9 fb97 	bl	e84 <printk>
		break;
    7756:	e7e5      	b.n	7724 <z_NanoFatalErrorHandler+0x24>
	z_SysFatalErrorHandler(reason, pEsf);
    7758:	4631      	mov	r1, r6
    775a:	4620      	mov	r0, r4
}
    775c:	b002      	add	sp, #8
    775e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_SysFatalErrorHandler(reason, pEsf);
    7762:	f000 b825 	b.w	77b0 <z_SysFatalErrorHandler>
    7766:	bf00      	nop
    7768:	200036b0 	.word	0x200036b0
    776c:	0000c2d1 	.word	0x0000c2d1
    7770:	0000c38e 	.word	0x0000c38e
    7774:	0000c2f1 	.word	0x0000c2f1
    7778:	0000c310 	.word	0x0000c310
    777c:	0000c336 	.word	0x0000c336
    7780:	0000c350 	.word	0x0000c350
    7784:	0000c36b 	.word	0x0000c36b

00007788 <z_do_kernel_oops>:

void z_do_kernel_oops(const NANO_ESF *esf)
{
    7788:	b507      	push	{r0, r1, r2, lr}
    778a:	4b08      	ldr	r3, [pc, #32]	; (77ac <z_do_kernel_oops+0x24>)
    778c:	681a      	ldr	r2, [r3, #0]
    778e:	9201      	str	r2, [sp, #4]
	z_NanoFatalErrorHandler(esf->r0, esf);
    7790:	9a01      	ldr	r2, [sp, #4]
    7792:	681b      	ldr	r3, [r3, #0]
    7794:	429a      	cmp	r2, r3
{
    7796:	4601      	mov	r1, r0
	z_NanoFatalErrorHandler(esf->r0, esf);
    7798:	d001      	beq.n	779e <z_do_kernel_oops+0x16>
    779a:	f003 fc3f 	bl	b01c <_StackCheckHandler>
    779e:	6800      	ldr	r0, [r0, #0]
}
    77a0:	b003      	add	sp, #12
    77a2:	f85d eb04 	ldr.w	lr, [sp], #4
	z_NanoFatalErrorHandler(esf->r0, esf);
    77a6:	f7ff bfab 	b.w	7700 <z_NanoFatalErrorHandler>
    77aa:	bf00      	nop
    77ac:	200036b0 	.word	0x200036b0

000077b0 <z_SysFatalErrorHandler>:
 *
 * @return This function does not return.
 */
void __weak z_SysFatalErrorHandler(unsigned int reason,
					 const NANO_ESF *pEsf)
{
    77b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    77b2:	4d15      	ldr	r5, [pc, #84]	; (7808 <z_SysFatalErrorHandler+0x58>)
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    77b4:	2805      	cmp	r0, #5
{
    77b6:	682b      	ldr	r3, [r5, #0]
    77b8:	9301      	str	r3, [sp, #4]
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    77ba:	d00c      	beq.n	77d6 <z_SysFatalErrorHandler+0x26>
		goto hang_system;
	}
	if (k_is_in_isr() || z_is_thread_essential()) {
    77bc:	f003 fa7a 	bl	acb4 <k_is_in_isr>
    77c0:	b160      	cbz	r0, 77dc <z_SysFatalErrorHandler+0x2c>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    77c2:	f003 fa77 	bl	acb4 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    77c6:	4911      	ldr	r1, [pc, #68]	; (780c <z_SysFatalErrorHandler+0x5c>)
    77c8:	4b11      	ldr	r3, [pc, #68]	; (7810 <z_SysFatalErrorHandler+0x60>)
    77ca:	2800      	cmp	r0, #0
    77cc:	bf08      	it	eq
    77ce:	4619      	moveq	r1, r3
    77d0:	4810      	ldr	r0, [pc, #64]	; (7814 <z_SysFatalErrorHandler+0x64>)
    77d2:	f7f9 fb57 	bl	e84 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    77d6:	f7ff ff79 	bl	76cc <k_cpu_idle>
    77da:	e7fc      	b.n	77d6 <z_SysFatalErrorHandler+0x26>
	if (k_is_in_isr() || z_is_thread_essential()) {
    77dc:	f003 fa88 	bl	acf0 <z_is_thread_essential>
    77e0:	2800      	cmp	r0, #0
    77e2:	d1ee      	bne.n	77c2 <z_SysFatalErrorHandler+0x12>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    77e4:	4c0c      	ldr	r4, [pc, #48]	; (7818 <z_SysFatalErrorHandler+0x68>)
    77e6:	480d      	ldr	r0, [pc, #52]	; (781c <z_SysFatalErrorHandler+0x6c>)
    77e8:	68a1      	ldr	r1, [r4, #8]
    77ea:	f7f9 fb4b 	bl	e84 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
    77ee:	9a01      	ldr	r2, [sp, #4]
    77f0:	682b      	ldr	r3, [r5, #0]
    77f2:	429a      	cmp	r2, r3
    77f4:	d001      	beq.n	77fa <z_SysFatalErrorHandler+0x4a>
    77f6:	f003 fc11 	bl	b01c <_StackCheckHandler>
    77fa:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    77fc:	b003      	add	sp, #12
    77fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    7802:	f000 b80d 	b.w	7820 <z_impl_k_thread_abort>
    7806:	bf00      	nop
    7808:	200036b0 	.word	0x200036b0
    780c:	0000c3ca 	.word	0x0000c3ca
    7810:	0000c3ce 	.word	0x0000c3ce
    7814:	0000c3df 	.word	0x0000c3df
    7818:	20001894 	.word	0x20001894
    781c:	0000c3ff 	.word	0x0000c3ff

00007820 <z_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    7820:	b573      	push	{r0, r1, r4, r5, r6, lr}
    7822:	4c15      	ldr	r4, [pc, #84]	; (7878 <z_impl_k_thread_abort+0x58>)
    7824:	6823      	ldr	r3, [r4, #0]
    7826:	9301      	str	r3, [sp, #4]
    7828:	4606      	mov	r6, r0
	__asm__ volatile(
    782a:	f04f 0320 	mov.w	r3, #32
    782e:	f3ef 8511 	mrs	r5, BASEPRI
    7832:	f383 8811 	msr	BASEPRI, r3
    7836:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    783a:	f003 fb17 	bl	ae6c <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    783e:	4b0f      	ldr	r3, [pc, #60]	; (787c <z_impl_k_thread_abort+0x5c>)
    7840:	689b      	ldr	r3, [r3, #8]
    7842:	42b3      	cmp	r3, r6
    7844:	d10b      	bne.n	785e <z_impl_k_thread_abort+0x3e>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    7846:	4b0e      	ldr	r3, [pc, #56]	; (7880 <z_impl_k_thread_abort+0x60>)
    7848:	685a      	ldr	r2, [r3, #4]
    784a:	f3c2 0208 	ubfx	r2, r2, #0, #9
    784e:	b912      	cbnz	r2, 7856 <z_impl_k_thread_abort+0x36>
#ifndef CONFIG_ARM
#ifdef CONFIG_TRACING
	sys_trace_thread_switched_out();
#endif
#endif
	ret = __swap(key);
    7850:	4628      	mov	r0, r5
    7852:	f7ff fc69 	bl	7128 <__swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    7856:	685a      	ldr	r2, [r3, #4]
    7858:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    785c:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    785e:	9a01      	ldr	r2, [sp, #4]
    7860:	6823      	ldr	r3, [r4, #0]
    7862:	429a      	cmp	r2, r3
    7864:	d001      	beq.n	786a <z_impl_k_thread_abort+0x4a>
    7866:	f003 fbd9 	bl	b01c <_StackCheckHandler>
    786a:	4628      	mov	r0, r5
}
    786c:	b002      	add	sp, #8
    786e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule_irqlock(key);
    7872:	f002 bc9b 	b.w	a1ac <z_reschedule_irqlock>
    7876:	bf00      	nop
    7878:	200036b0 	.word	0x200036b0
    787c:	20001894 	.word	0x20001894
    7880:	e000ed00 	.word	0xe000ed00

00007884 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {r0,lr}		/* r0, lr are now the first items on the stack */
    7884:	b501      	push	{r0, lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, z_sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    7886:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    7888:	4a0b      	ldr	r2, [pc, #44]	; (78b8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    788a:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    788c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    788e:	bf1e      	ittt	ne
	movne	r1, #0
    7890:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    7892:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    7894:	f001 fe76 	blne	9584 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    7898:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    789a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    789e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    78a2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    78a6:	4905      	ldr	r1, [pc, #20]	; (78bc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    78a8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    78aa:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    78ac:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    78ae:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * _IntExit() */
	ldr r0, =_IntExit
    78b2:	4803      	ldr	r0, [pc, #12]	; (78c0 <_isr_wrapper+0x3c>)
	bx r0
    78b4:	4700      	bx	r0
    78b6:	0000      	.short	0x0000
	ldr r2, =_kernel
    78b8:	20001894 	.word	0x20001894
	ldr r1, =_sw_isr_table
    78bc:	0000b3e8 	.word	0x0000b3e8
	ldr r0, =_IntExit
    78c0:	000070d9 	.word	0x000070d9

000078c4 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    78c4:	2020      	movs	r0, #32
    msr BASEPRI, r0
    78c6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
    78ca:	4808      	ldr	r0, [pc, #32]	; (78ec <__reset+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    78cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    78d0:	1840      	adds	r0, r0, r1
    msr PSP, r0
    78d2:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    78d6:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    78da:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    78dc:	4308      	orrs	r0, r1
    msr CONTROL, r0
    78de:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    78e2:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to _PrepC
     * (even though we do not intend to return).
     */
    bl _PrepC
    78e6:	f000 f807 	bl	78f8 <_PrepC>
    78ea:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    78ec:	20002610 	.word	0x20002610

000078f0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    78f0:	bf30      	wfi
    b z_SysNmiOnReset
    78f2:	f7ff bffd 	b.w	78f0 <z_SysNmiOnReset>
    78f6:	bf00      	nop

000078f8 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    78f8:	b507      	push	{r0, r1, r2, lr}
    78fa:	4b0a      	ldr	r3, [pc, #40]	; (7924 <_PrepC+0x2c>)
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    78fc:	4a0a      	ldr	r2, [pc, #40]	; (7928 <_PrepC+0x30>)
{
    78fe:	681b      	ldr	r3, [r3, #0]
    7900:	9301      	str	r3, [sp, #4]
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    7902:	4b0a      	ldr	r3, [pc, #40]	; (792c <_PrepC+0x34>)
    7904:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    7908:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    790a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    790e:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    7912:	f001 fe67 	bl	95e4 <z_bss_zero>
	z_data_copy();
    7916:	f001 fe7f 	bl	9618 <z_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0U;
#endif
	z_IntLibInit();
    791a:	f7ff fbeb 	bl	70f4 <z_IntLibInit>
	z_cstart();
    791e:	f001 fef1 	bl	9704 <z_cstart>
    7922:	bf00      	nop
    7924:	200036b0 	.word	0x200036b0
    7928:	e000ed00 	.word	0xe000ed00
    792c:	00000000 	.word	0x00000000

00007930 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    7930:	b513      	push	{r0, r1, r4, lr}
    7932:	4c08      	ldr	r4, [pc, #32]	; (7954 <__nmi+0x24>)
    7934:	6823      	ldr	r3, [r4, #0]
    7936:	9301      	str	r3, [sp, #4]
	handler();
    7938:	f7ff ffda 	bl	78f0 <z_SysNmiOnReset>
	z_ExcExit();
    793c:	9a01      	ldr	r2, [sp, #4]
    793e:	6823      	ldr	r3, [r4, #0]
    7940:	429a      	cmp	r2, r3
    7942:	d001      	beq.n	7948 <__nmi+0x18>
    7944:	f003 fb6a 	bl	b01c <_StackCheckHandler>
}
    7948:	b002      	add	sp, #8
    794a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_ExcExit();
    794e:	f7ff bbc3 	b.w	70d8 <_IntExit>
    7952:	bf00      	nop
    7954:	200036b0 	.word	0x200036b0

00007958 <z_arch_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arch_configure_static_mpu_regions(void)
{
    7958:	b510      	push	{r4, lr}
    795a:	4c0d      	ldr	r4, [pc, #52]	; (7990 <z_arch_configure_static_mpu_regions+0x38>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    795c:	4a0d      	ldr	r2, [pc, #52]	; (7994 <z_arch_configure_static_mpu_regions+0x3c>)
{
    795e:	6823      	ldr	r3, [r4, #0]
    7960:	b086      	sub	sp, #24
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    7962:	2101      	movs	r1, #1
{
    7964:	9305      	str	r3, [sp, #20]
		const struct k_mem_partition ramfunc_region =
    7966:	4b0c      	ldr	r3, [pc, #48]	; (7998 <z_arch_configure_static_mpu_regions+0x40>)
    7968:	9301      	str	r3, [sp, #4]
    796a:	4b0c      	ldr	r3, [pc, #48]	; (799c <z_arch_configure_static_mpu_regions+0x44>)
    796c:	9302      	str	r3, [sp, #8]
    796e:	4b0c      	ldr	r3, [pc, #48]	; (79a0 <z_arch_configure_static_mpu_regions+0x48>)
    7970:	9303      	str	r3, [sp, #12]
	const struct k_mem_partition *static_regions[] = {
    7972:	ab01      	add	r3, sp, #4
    7974:	9304      	str	r3, [sp, #16]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    7976:	a804      	add	r0, sp, #16
    7978:	4b0a      	ldr	r3, [pc, #40]	; (79a4 <z_arch_configure_static_mpu_regions+0x4c>)
    797a:	f000 f909 	bl	7b90 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    797e:	9a05      	ldr	r2, [sp, #20]
    7980:	6823      	ldr	r3, [r4, #0]
    7982:	429a      	cmp	r2, r3
    7984:	d001      	beq.n	798a <z_arch_configure_static_mpu_regions+0x32>
    7986:	f003 fb49 	bl	b01c <_StackCheckHandler>
    798a:	b006      	add	sp, #24
    798c:	bd10      	pop	{r4, pc}
    798e:	bf00      	nop
    7990:	200036b0 	.word	0x200036b0
    7994:	20000000 	.word	0x20000000
    7998:	20000000 	.word	0x20000000
    799c:	00000000 	.word	0x00000000
    79a0:	060b0000 	.word	0x060b0000
    79a4:	20040000 	.word	0x20040000

000079a8 <z_arch_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arch_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    79a8:	b513      	push	{r0, r1, r4, lr}
    79aa:	4c07      	ldr	r4, [pc, #28]	; (79c8 <z_arch_configure_dynamic_mpu_regions+0x20>)

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
    79ac:	2100      	movs	r1, #0
{
    79ae:	6823      	ldr	r3, [r4, #0]
    79b0:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_dynamic_mpu_regions(
    79b2:	4668      	mov	r0, sp
    79b4:	f000 f902 	bl	7bbc <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
    79b8:	9a01      	ldr	r2, [sp, #4]
    79ba:	6823      	ldr	r3, [r4, #0]
    79bc:	429a      	cmp	r2, r3
    79be:	d001      	beq.n	79c4 <z_arch_configure_dynamic_mpu_regions+0x1c>
    79c0:	f003 fb2c 	bl	b01c <_StackCheckHandler>
    79c4:	b002      	add	sp, #8
    79c6:	bd10      	pop	{r4, pc}
    79c8:	200036b0 	.word	0x200036b0

000079cc <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], u8_t regions_num, u8_t start_reg_index,
	bool do_sanity_check)
{
    79cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    79d0:	4e35      	ldr	r6, [pc, #212]	; (7aa8 <mpu_configure_regions+0xdc>)
	MPU->RNR = index;
    79d2:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 7abc <mpu_configure_regions+0xf0>
{
    79d6:	460f      	mov	r7, r1
    79d8:	6831      	ldr	r1, [r6, #0]
    79da:	9101      	str	r1, [sp, #4]
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    79dc:	2100      	movs	r1, #0
    79de:	42b9      	cmp	r1, r7
    79e0:	da22      	bge.n	7a28 <mpu_configure_regions+0x5c>
		if (regions[i]->size == 0U) {
    79e2:	f850 e021 	ldr.w	lr, [r0, r1, lsl #2]
    79e6:	f8de 4004 	ldr.w	r4, [lr, #4]
    79ea:	2c00      	cmp	r4, #0
    79ec:	d057      	beq.n	7a9e <mpu_configure_regions+0xd2>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    79ee:	b313      	cbz	r3, 7a36 <mpu_configure_regions+0x6a>
		((part->size & (part->size - 1)) == 0U)
    79f0:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
		&&
    79f4:	ea14 0f08 	tst.w	r4, r8
    79f8:	d106      	bne.n	7a08 <mpu_configure_regions+0x3c>
		&&
    79fa:	2c1f      	cmp	r4, #31
    79fc:	d904      	bls.n	7a08 <mpu_configure_regions+0x3c>
		((part->start & (part->size - 1)) == 0U);
    79fe:	f8de 5000 	ldr.w	r5, [lr]
		&&
    7a02:	ea18 0f05 	tst.w	r8, r5
    7a06:	d016      	beq.n	7a36 <mpu_configure_regions+0x6a>
				(!mpu_partition_is_valid(regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    7a08:	2301      	movs	r3, #1
    7a0a:	f04f 0200 	mov.w	r2, #0
    7a0e:	f363 0207 	bfi	r2, r3, #0, #8
    7a12:	4826      	ldr	r0, [pc, #152]	; (7aac <mpu_configure_regions+0xe0>)
    7a14:	4b26      	ldr	r3, [pc, #152]	; (7ab0 <mpu_configure_regions+0xe4>)
    7a16:	1a1b      	subs	r3, r3, r0
    7a18:	08db      	lsrs	r3, r3, #3
    7a1a:	4826      	ldr	r0, [pc, #152]	; (7ab4 <mpu_configure_regions+0xe8>)
    7a1c:	f363 128f 	bfi	r2, r3, #6, #10
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    7a20:	f7fb fa10 	bl	2e44 <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, regions[i]);
    7a24:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    7a28:	4610      	mov	r0, r2
    7a2a:	9a01      	ldr	r2, [sp, #4]
    7a2c:	6833      	ldr	r3, [r6, #0]
    7a2e:	429a      	cmp	r2, r3
    7a30:	d037      	beq.n	7aa2 <mpu_configure_regions+0xd6>
    7a32:	f003 faf3 	bl	b01c <_StackCheckHandler>
	if (size <= 32U) {
    7a36:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, regions[i]);
    7a38:	b2d5      	uxtb	r5, r2
	struct arm_mpu_region region_conf;

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
    7a3a:	f8de 2000 	ldr.w	r2, [lr]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    7a3e:	f8de e008 	ldr.w	lr, [lr, #8]
	if (size <= 32U) {
    7a42:	d91a      	bls.n	7a7a <mpu_configure_regions+0xae>
	if (size > (1UL << 31)) {
    7a44:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    7a48:	d819      	bhi.n	7a7e <mpu_configure_regions+0xb2>
	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    7a4a:	3c01      	subs	r4, #1
    7a4c:	fab4 f484 	clz	r4, r4
    7a50:	f1c4 041f 	rsb	r4, r4, #31
    7a54:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1)) {
    7a56:	2d07      	cmp	r5, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    7a58:	ea4e 0404 	orr.w	r4, lr, r4
    7a5c:	d911      	bls.n	7a82 <mpu_configure_regions+0xb6>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    7a5e:	2301      	movs	r3, #1
    7a60:	f04f 0200 	mov.w	r2, #0
    7a64:	f363 0207 	bfi	r2, r3, #0, #8
    7a68:	4910      	ldr	r1, [pc, #64]	; (7aac <mpu_configure_regions+0xe0>)
    7a6a:	4b11      	ldr	r3, [pc, #68]	; (7ab0 <mpu_configure_regions+0xe4>)
    7a6c:	4812      	ldr	r0, [pc, #72]	; (7ab8 <mpu_configure_regions+0xec>)
    7a6e:	1a5b      	subs	r3, r3, r1
    7a70:	08db      	lsrs	r3, r3, #3
    7a72:	f363 128f 	bfi	r2, r3, #6, #10
    7a76:	4629      	mov	r1, r5
    7a78:	e7d2      	b.n	7a20 <mpu_configure_regions+0x54>
		return REGION_32B;
    7a7a:	2408      	movs	r4, #8
    7a7c:	e7eb      	b.n	7a56 <mpu_configure_regions+0x8a>
		return REGION_4G;
    7a7e:	243e      	movs	r4, #62	; 0x3e
    7a80:	e7e9      	b.n	7a56 <mpu_configure_regions+0x8a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7a82:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    7a86:	432a      	orrs	r2, r5
    7a88:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    7a8c:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    7a90:	f8cc 5008 	str.w	r5, [ip, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7a94:	f8cc 200c 	str.w	r2, [ip, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    7a98:	f8cc 4010 	str.w	r4, [ip, #16]
		reg_index++;
    7a9c:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
    7a9e:	3101      	adds	r1, #1
    7aa0:	e79d      	b.n	79de <mpu_configure_regions+0x12>
}
    7aa2:	b002      	add	sp, #8
    7aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7aa8:	200036b0 	.word	0x200036b0
    7aac:	0000b634 	.word	0x0000b634
    7ab0:	0000b64c 	.word	0x0000b64c
    7ab4:	0000c428 	.word	0x0000c428
    7ab8:	0000c44b 	.word	0x0000c44b
    7abc:	e000ed90 	.word	0xe000ed90

00007ac0 <arm_core_mpu_enable>:

/**
 * @brief enable the MPU
 */
void arm_core_mpu_enable(void)
{
    7ac0:	b507      	push	{r0, r1, r2, lr}
    7ac2:	4b09      	ldr	r3, [pc, #36]	; (7ae8 <arm_core_mpu_enable+0x28>)
    7ac4:	681a      	ldr	r2, [r3, #0]
    7ac6:	9201      	str	r2, [sp, #4]
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    7ac8:	4a08      	ldr	r2, [pc, #32]	; (7aec <arm_core_mpu_enable+0x2c>)
    7aca:	2105      	movs	r1, #5
    7acc:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    7ace:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7ad2:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    7ad6:	9a01      	ldr	r2, [sp, #4]
    7ad8:	681b      	ldr	r3, [r3, #0]
    7ada:	429a      	cmp	r2, r3
    7adc:	d001      	beq.n	7ae2 <arm_core_mpu_enable+0x22>
    7ade:	f003 fa9d 	bl	b01c <_StackCheckHandler>
    7ae2:	b003      	add	sp, #12
    7ae4:	f85d fb04 	ldr.w	pc, [sp], #4
    7ae8:	200036b0 	.word	0x200036b0
    7aec:	e000ed90 	.word	0xe000ed90

00007af0 <arm_core_mpu_disable>:

/**
 * @brief disable the MPU
 */
void arm_core_mpu_disable(void)
{
    7af0:	b507      	push	{r0, r1, r2, lr}
    7af2:	4b08      	ldr	r3, [pc, #32]	; (7b14 <arm_core_mpu_disable+0x24>)
    7af4:	681a      	ldr	r2, [r3, #0]
    7af6:	9201      	str	r2, [sp, #4]
  __ASM volatile ("dmb 0xF":::"memory");
    7af8:	f3bf 8f5f 	dmb	sy
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    7afc:	4a06      	ldr	r2, [pc, #24]	; (7b18 <arm_core_mpu_disable+0x28>)
    7afe:	2100      	movs	r1, #0
    7b00:	6051      	str	r1, [r2, #4]
}
    7b02:	9a01      	ldr	r2, [sp, #4]
    7b04:	681b      	ldr	r3, [r3, #0]
    7b06:	429a      	cmp	r2, r3
    7b08:	d001      	beq.n	7b0e <arm_core_mpu_disable+0x1e>
    7b0a:	f003 fa87 	bl	b01c <_StackCheckHandler>
    7b0e:	b003      	add	sp, #12
    7b10:	f85d fb04 	ldr.w	pc, [sp], #4
    7b14:	200036b0 	.word	0x200036b0
    7b18:	e000ed90 	.word	0xe000ed90

00007b1c <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
    7b1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    7b1e:	4e18      	ldr	r6, [pc, #96]	; (7b80 <arm_mpu_init+0x64>)
{
    7b20:	4c18      	ldr	r4, [pc, #96]	; (7b84 <arm_mpu_init+0x68>)
	if (mpu_config.num_regions > get_num_regions()) {
    7b22:	6835      	ldr	r5, [r6, #0]
{
    7b24:	6823      	ldr	r3, [r4, #0]
    7b26:	9301      	str	r3, [sp, #4]
	if (mpu_config.num_regions > get_num_regions()) {
    7b28:	2d08      	cmp	r5, #8
    7b2a:	d823      	bhi.n	7b74 <arm_mpu_init+0x58>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    7b2c:	f7ff ffe0 	bl	7af0 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    7b30:	6871      	ldr	r1, [r6, #4]
	MPU->RNR = index;
    7b32:	4815      	ldr	r0, [pc, #84]	; (7b88 <arm_mpu_init+0x6c>)
    7b34:	2200      	movs	r2, #0
    7b36:	4295      	cmp	r5, r2
    7b38:	f101 010c 	add.w	r1, r1, #12
    7b3c:	d10a      	bne.n	7b54 <arm_mpu_init+0x38>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    7b3e:	4b13      	ldr	r3, [pc, #76]	; (7b8c <arm_mpu_init+0x70>)
    7b40:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    7b42:	f7ff ffbd 	bl	7ac0 <arm_core_mpu_enable>
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#endif
	return 0;
    7b46:	2000      	movs	r0, #0
}
    7b48:	9a01      	ldr	r2, [sp, #4]
    7b4a:	6823      	ldr	r3, [r4, #0]
    7b4c:	429a      	cmp	r2, r3
    7b4e:	d014      	beq.n	7b7a <arm_mpu_init+0x5e>
    7b50:	f003 fa64 	bl	b01c <_StackCheckHandler>
    7b54:	6082      	str	r2, [r0, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7b56:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    7b5a:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    7b5e:	4313      	orrs	r3, r2
    7b60:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7b64:	60c3      	str	r3, [r0, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    7b66:	f851 3c04 	ldr.w	r3, [r1, #-4]
    7b6a:	f043 0301 	orr.w	r3, r3, #1
    7b6e:	6103      	str	r3, [r0, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    7b70:	3201      	adds	r2, #1
    7b72:	e7e0      	b.n	7b36 <arm_mpu_init+0x1a>
		return -1;
    7b74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7b78:	e7e6      	b.n	7b48 <arm_mpu_init+0x2c>
}
    7b7a:	b002      	add	sp, #8
    7b7c:	bd70      	pop	{r4, r5, r6, pc}
    7b7e:	bf00      	nop
    7b80:	0000b6cc 	.word	0x0000b6cc
    7b84:	200036b0 	.word	0x200036b0
    7b88:	e000ed90 	.word	0xe000ed90
    7b8c:	20001bca 	.word	0x20001bca

00007b90 <arm_core_mpu_configure_static_mpu_regions>:
{
    7b90:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7b92:	4c08      	ldr	r4, [pc, #32]	; (7bb4 <arm_core_mpu_configure_static_mpu_regions+0x24>)
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    7b94:	4d08      	ldr	r5, [pc, #32]	; (7bb8 <arm_core_mpu_configure_static_mpu_regions+0x28>)
    7b96:	6823      	ldr	r3, [r4, #0]
    7b98:	9301      	str	r3, [sp, #4]
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    7b9a:	782a      	ldrb	r2, [r5, #0]
    7b9c:	2301      	movs	r3, #1
    7b9e:	f7ff ff15 	bl	79cc <mpu_configure_regions>
}
    7ba2:	9a01      	ldr	r2, [sp, #4]
    7ba4:	6823      	ldr	r3, [r4, #0]
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    7ba6:	7028      	strb	r0, [r5, #0]
    7ba8:	429a      	cmp	r2, r3
    7baa:	d001      	beq.n	7bb0 <arm_core_mpu_configure_static_mpu_regions+0x20>
    7bac:	f003 fa36 	bl	b01c <_StackCheckHandler>
    7bb0:	b003      	add	sp, #12
    7bb2:	bd30      	pop	{r4, r5, pc}
    7bb4:	200036b0 	.word	0x200036b0
    7bb8:	20001bca 	.word	0x20001bca

00007bbc <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    7bbc:	b513      	push	{r0, r1, r4, lr}
    7bbe:	4c0d      	ldr	r4, [pc, #52]	; (7bf4 <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    7bc0:	4a0d      	ldr	r2, [pc, #52]	; (7bf8 <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
    7bc2:	6823      	ldr	r3, [r4, #0]
    7bc4:	9301      	str	r3, [sp, #4]
    7bc6:	7812      	ldrb	r2, [r2, #0]
    7bc8:	2300      	movs	r3, #0
    7bca:	f7ff feff 	bl	79cc <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    7bce:	f110 0f16 	cmn.w	r0, #22
    7bd2:	d003      	beq.n	7bdc <arm_core_mpu_configure_dynamic_mpu_regions+0x20>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    7bd4:	4b09      	ldr	r3, [pc, #36]	; (7bfc <arm_core_mpu_configure_dynamic_mpu_regions+0x40>)
  MPU->RASR = 0U;
    7bd6:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    7bd8:	2807      	cmp	r0, #7
    7bda:	dd05      	ble.n	7be8 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>
}
    7bdc:	9a01      	ldr	r2, [sp, #4]
    7bde:	6823      	ldr	r3, [r4, #0]
    7be0:	429a      	cmp	r2, r3
    7be2:	d005      	beq.n	7bf0 <arm_core_mpu_configure_dynamic_mpu_regions+0x34>
    7be4:	f003 fa1a 	bl	b01c <_StackCheckHandler>
  MPU->RNR = rnr;
    7be8:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    7bea:	611a      	str	r2, [r3, #16]
    7bec:	3001      	adds	r0, #1
    7bee:	e7f3      	b.n	7bd8 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
    7bf0:	b002      	add	sp, #8
    7bf2:	bd10      	pop	{r4, pc}
    7bf4:	200036b0 	.word	0x200036b0
    7bf8:	20001bca 	.word	0x20001bca
    7bfc:	e000ed90 	.word	0xe000ed90

00007c00 <strchr>:
 *
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
    7c00:	b513      	push	{r0, r1, r4, lr}
    7c02:	4b0c      	ldr	r3, [pc, #48]	; (7c34 <strchr+0x34>)
    7c04:	681a      	ldr	r2, [r3, #0]
    7c06:	9201      	str	r2, [sp, #4]
	char tmp = (char) c;
    7c08:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0'))
    7c0a:	461a      	mov	r2, r3
    7c0c:	7804      	ldrb	r4, [r0, #0]
    7c0e:	428c      	cmp	r4, r1
    7c10:	4603      	mov	r3, r0
    7c12:	f100 0001 	add.w	r0, r0, #1
    7c16:	d004      	beq.n	7c22 <strchr+0x22>
    7c18:	2c00      	cmp	r4, #0
    7c1a:	d1f7      	bne.n	7c0c <strchr+0xc>
		s++;

	return (*s == tmp) ? (char *) s : NULL;
    7c1c:	2900      	cmp	r1, #0
    7c1e:	bf18      	it	ne
    7c20:	2300      	movne	r3, #0
}
    7c22:	9901      	ldr	r1, [sp, #4]
    7c24:	4618      	mov	r0, r3
    7c26:	6813      	ldr	r3, [r2, #0]
    7c28:	4299      	cmp	r1, r3
    7c2a:	d001      	beq.n	7c30 <strchr+0x30>
    7c2c:	f003 f9f6 	bl	b01c <_StackCheckHandler>
    7c30:	b002      	add	sp, #8
    7c32:	bd10      	pop	{r4, pc}
    7c34:	200036b0 	.word	0x200036b0

00007c38 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    7c38:	b507      	push	{r0, r1, r2, lr}
    7c3a:	4b09      	ldr	r3, [pc, #36]	; (7c60 <strlen+0x28>)
    7c3c:	681a      	ldr	r2, [r3, #0]
    7c3e:	9201      	str	r2, [sp, #4]
	size_t n = 0;
    7c40:	2200      	movs	r2, #0

	while (*s != '\0') {
    7c42:	5c81      	ldrb	r1, [r0, r2]
    7c44:	b931      	cbnz	r1, 7c54 <strlen+0x1c>
		s++;
		n++;
	}

	return n;
}
    7c46:	4610      	mov	r0, r2
    7c48:	9a01      	ldr	r2, [sp, #4]
    7c4a:	681b      	ldr	r3, [r3, #0]
    7c4c:	429a      	cmp	r2, r3
    7c4e:	d003      	beq.n	7c58 <strlen+0x20>
    7c50:	f003 f9e4 	bl	b01c <_StackCheckHandler>
		n++;
    7c54:	3201      	adds	r2, #1
    7c56:	e7f4      	b.n	7c42 <strlen+0xa>
}
    7c58:	b003      	add	sp, #12
    7c5a:	f85d fb04 	ldr.w	pc, [sp], #4
    7c5e:	bf00      	nop
    7c60:	200036b0 	.word	0x200036b0

00007c64 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
    7c64:	b513      	push	{r0, r1, r4, lr}
    7c66:	4b0b      	ldr	r3, [pc, #44]	; (7c94 <strcmp+0x30>)
    7c68:	681a      	ldr	r2, [r3, #0]
    7c6a:	9201      	str	r2, [sp, #4]
	while ((*s1 == *s2) && (*s1 != '\0')) {
    7c6c:	1e44      	subs	r4, r0, #1
    7c6e:	3901      	subs	r1, #1
    7c70:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    7c74:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    7c78:	4282      	cmp	r2, r0
    7c7a:	d101      	bne.n	7c80 <strcmp+0x1c>
    7c7c:	2a00      	cmp	r2, #0
    7c7e:	d1f7      	bne.n	7c70 <strcmp+0xc>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    7c80:	1a10      	subs	r0, r2, r0
    7c82:	9a01      	ldr	r2, [sp, #4]
    7c84:	681b      	ldr	r3, [r3, #0]
    7c86:	429a      	cmp	r2, r3
    7c88:	d001      	beq.n	7c8e <strcmp+0x2a>
    7c8a:	f003 f9c7 	bl	b01c <_StackCheckHandler>
    7c8e:	b002      	add	sp, #8
    7c90:	bd10      	pop	{r4, pc}
    7c92:	bf00      	nop
    7c94:	200036b0 	.word	0x200036b0

00007c98 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
    7c98:	b573      	push	{r0, r1, r4, r5, r6, lr}
    7c9a:	4d0c      	ldr	r5, [pc, #48]	; (7ccc <strncmp+0x34>)
    7c9c:	682c      	ldr	r4, [r5, #0]
    7c9e:	9401      	str	r4, [sp, #4]
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    7ca0:	2400      	movs	r4, #0
    7ca2:	42a2      	cmp	r2, r4
    7ca4:	d008      	beq.n	7cb8 <strncmp+0x20>
    7ca6:	5d03      	ldrb	r3, [r0, r4]
    7ca8:	5d0e      	ldrb	r6, [r1, r4]
    7caa:	42b3      	cmp	r3, r6
    7cac:	d102      	bne.n	7cb4 <strncmp+0x1c>
    7cae:	3401      	adds	r4, #1
    7cb0:	2b00      	cmp	r3, #0
    7cb2:	d1f6      	bne.n	7ca2 <strncmp+0xa>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
    7cb4:	1b98      	subs	r0, r3, r6
    7cb6:	e000      	b.n	7cba <strncmp+0x22>
    7cb8:	2000      	movs	r0, #0
}
    7cba:	9a01      	ldr	r2, [sp, #4]
    7cbc:	682b      	ldr	r3, [r5, #0]
    7cbe:	429a      	cmp	r2, r3
    7cc0:	d001      	beq.n	7cc6 <strncmp+0x2e>
    7cc2:	f003 f9ab 	bl	b01c <_StackCheckHandler>
    7cc6:	b002      	add	sp, #8
    7cc8:	bd70      	pop	{r4, r5, r6, pc}
    7cca:	bf00      	nop
    7ccc:	200036b0 	.word	0x200036b0

00007cd0 <memmove>:
 *
 * @return pointer to destination buffer <d>
 */

void *memmove(void *d, const void *s, size_t n)
{
    7cd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7cd2:	4b10      	ldr	r3, [pc, #64]	; (7d14 <memmove+0x44>)
    7cd4:	681c      	ldr	r4, [r3, #0]
    7cd6:	9401      	str	r4, [sp, #4]
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    7cd8:	1a44      	subs	r4, r0, r1
    7cda:	4294      	cmp	r4, r2
    7cdc:	461c      	mov	r4, r3
    7cde:	eb00 0302 	add.w	r3, r0, r2
    7ce2:	d308      	bcc.n	7cf6 <memmove+0x26>
    7ce4:	3901      	subs	r1, #1
	char *dest = d;
    7ce6:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    7ce8:	429a      	cmp	r2, r3
    7cea:	d00b      	beq.n	7d04 <memmove+0x34>
			*dest = *src;
    7cec:	f811 5f01 	ldrb.w	r5, [r1, #1]!
    7cf0:	f802 5b01 	strb.w	r5, [r2], #1
			dest++;
			src++;
			n--;
    7cf4:	e7f8      	b.n	7ce8 <memmove+0x18>
    7cf6:	440a      	add	r2, r1
			dest[n] = src[n];
    7cf8:	f812 5d01 	ldrb.w	r5, [r2, #-1]!
    7cfc:	f803 5d01 	strb.w	r5, [r3, #-1]!
		while (n > 0) {
    7d00:	428a      	cmp	r2, r1
    7d02:	d1f9      	bne.n	7cf8 <memmove+0x28>
		}
	}

	return d;
}
    7d04:	9a01      	ldr	r2, [sp, #4]
    7d06:	6823      	ldr	r3, [r4, #0]
    7d08:	429a      	cmp	r2, r3
    7d0a:	d001      	beq.n	7d10 <memmove+0x40>
    7d0c:	f003 f986 	bl	b01c <_StackCheckHandler>
    7d10:	b003      	add	sp, #12
    7d12:	bd30      	pop	{r4, r5, pc}
    7d14:	200036b0 	.word	0x200036b0

00007d18 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    7d18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7d1a:	4f19      	ldr	r7, [pc, #100]	; (7d80 <memcpy+0x68>)
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0U) {
    7d1c:	ea81 0500 	eor.w	r5, r1, r0
{
    7d20:	683b      	ldr	r3, [r7, #0]
    7d22:	9301      	str	r3, [sp, #4]
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0U) {
    7d24:	07ad      	lsls	r5, r5, #30
    7d26:	4603      	mov	r3, r0
    7d28:	d014      	beq.n	7d54 <memcpy+0x3c>
    7d2a:	3b01      	subs	r3, #1
    7d2c:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    7d2e:	4291      	cmp	r1, r2
    7d30:	d005      	beq.n	7d3e <memcpy+0x26>
		*(d_byte++) = *(s_byte++);
    7d32:	f811 4b01 	ldrb.w	r4, [r1], #1
    7d36:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    7d3a:	e7f8      	b.n	7d2e <memcpy+0x16>
			if (n == 0) {
    7d3c:	b92a      	cbnz	r2, 7d4a <memcpy+0x32>
	}

	return d;
}
    7d3e:	9a01      	ldr	r2, [sp, #4]
    7d40:	683b      	ldr	r3, [r7, #0]
    7d42:	429a      	cmp	r2, r3
    7d44:	d01a      	beq.n	7d7c <memcpy+0x64>
    7d46:	f003 f969 	bl	b01c <_StackCheckHandler>
			*(d_byte++) = *(s_byte++);
    7d4a:	f811 4b01 	ldrb.w	r4, [r1], #1
    7d4e:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    7d52:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
    7d54:	079c      	lsls	r4, r3, #30
    7d56:	d1f1      	bne.n	7d3c <memcpy+0x24>
    7d58:	0895      	lsrs	r5, r2, #2
    7d5a:	00ac      	lsls	r4, r5, #2
    7d5c:	1f1e      	subs	r6, r3, #4
    7d5e:	eb01 0c04 	add.w	ip, r1, r4
		while (n >= sizeof(unsigned int)) {
    7d62:	4561      	cmp	r1, ip
    7d64:	d105      	bne.n	7d72 <memcpy+0x5a>
    7d66:	f06f 0603 	mvn.w	r6, #3
    7d6a:	fb06 2205 	mla	r2, r6, r5, r2
    7d6e:	4423      	add	r3, r4
    7d70:	e7db      	b.n	7d2a <memcpy+0x12>
			*(d_word++) = *(s_word++);
    7d72:	f851 eb04 	ldr.w	lr, [r1], #4
    7d76:	f846 ef04 	str.w	lr, [r6, #4]!
			n -= sizeof(unsigned int);
    7d7a:	e7f2      	b.n	7d62 <memcpy+0x4a>
}
    7d7c:	b003      	add	sp, #12
    7d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7d80:	200036b0 	.word	0x200036b0

00007d84 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    7d84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7d86:	4d15      	ldr	r5, [pc, #84]	; (7ddc <memset+0x58>)
    7d88:	682b      	ldr	r3, [r5, #0]
    7d8a:	9301      	str	r3, [sp, #4]
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    7d8c:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    7d8e:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
    7d90:	079c      	lsls	r4, r3, #30
    7d92:	d112      	bne.n	7dba <memset+0x36>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
    7d94:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    7d98:	ea44 4604 	orr.w	r6, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
    7d9c:	0894      	lsrs	r4, r2, #2
    7d9e:	eb03 0784 	add.w	r7, r3, r4, lsl #2
    7da2:	42bb      	cmp	r3, r7
    7da4:	d114      	bne.n	7dd0 <memset+0x4c>
    7da6:	f06f 0603 	mvn.w	r6, #3
    7daa:	fb06 2404 	mla	r4, r6, r4, r2
    7dae:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    7db0:	42a3      	cmp	r3, r4
    7db2:	d003      	beq.n	7dbc <memset+0x38>
		*(d_byte++) = c_byte;
    7db4:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    7db8:	e7fa      	b.n	7db0 <memset+0x2c>
		if (n == 0) {
    7dba:	b92a      	cbnz	r2, 7dc8 <memset+0x44>
	}

	return buf;
}
    7dbc:	9a01      	ldr	r2, [sp, #4]
    7dbe:	682b      	ldr	r3, [r5, #0]
    7dc0:	429a      	cmp	r2, r3
    7dc2:	d008      	beq.n	7dd6 <memset+0x52>
    7dc4:	f003 f92a 	bl	b01c <_StackCheckHandler>
		*(d_byte++) = c_byte;
    7dc8:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    7dcc:	3a01      	subs	r2, #1
    7dce:	e7df      	b.n	7d90 <memset+0xc>
		*(d_word++) = c_word;
    7dd0:	f843 6b04 	str.w	r6, [r3], #4
		n -= sizeof(unsigned int);
    7dd4:	e7e5      	b.n	7da2 <memset+0x1e>
}
    7dd6:	b003      	add	sp, #12
    7dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7dda:	bf00      	nop
    7ddc:	200036b0 	.word	0x200036b0

00007de0 <_to_x>:
/* Writes the specified number into the buffer in the given base,
 * using the digit characters 0-9a-z (i.e. base>36 will start writing
 * odd bytes), padding with leading zeros up to the minimum length.
 */
static int _to_x(char *buf, uint32_t n, int base, int minlen)
{
    7de0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7de2:	4d19      	ldr	r5, [pc, #100]	; (7e48 <_to_x+0x68>)
    7de4:	682c      	ldr	r4, [r5, #0]
    7de6:	9401      	str	r4, [sp, #4]
	char *buf0 = buf;
    7de8:	46ac      	mov	ip, r5
{
    7dea:	4604      	mov	r4, r0

	do {
		int d = n % base;
    7dec:	fbb1 f7f2 	udiv	r7, r1, r2
    7df0:	fb02 1517 	mls	r5, r2, r7, r1

		n /= base;
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
    7df4:	2d09      	cmp	r5, #9
    7df6:	bf8c      	ite	hi
    7df8:	2627      	movhi	r6, #39	; 0x27
    7dfa:	2600      	movls	r6, #0
    7dfc:	3530      	adds	r5, #48	; 0x30
    7dfe:	4435      	add	r5, r6
	} while (n);
    7e00:	428a      	cmp	r2, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
    7e02:	f804 5b01 	strb.w	r5, [r4], #1
	} while (n);
    7e06:	d910      	bls.n	7e2a <_to_x+0x4a>
		*end++ = '0';
    7e08:	2130      	movs	r1, #48	; 0x30
	while (end - start < minlen) {
    7e0a:	1a22      	subs	r2, r4, r0
    7e0c:	4293      	cmp	r3, r2
    7e0e:	dc0e      	bgt.n	7e2e <_to_x+0x4e>
	*end = 0;
    7e10:	2300      	movs	r3, #0
    7e12:	f804 3901 	strb.w	r3, [r4], #-1
	for (end--; end > start; end--, start++) {
    7e16:	4284      	cmp	r4, r0
    7e18:	d80c      	bhi.n	7e34 <_to_x+0x54>
	return _reverse_and_pad(buf0, buf, minlen);
}
    7e1a:	4610      	mov	r0, r2
    7e1c:	9a01      	ldr	r2, [sp, #4]
    7e1e:	f8dc 3000 	ldr.w	r3, [ip]
    7e22:	429a      	cmp	r2, r3
    7e24:	d00d      	beq.n	7e42 <_to_x+0x62>
    7e26:	f003 f8f9 	bl	b01c <_StackCheckHandler>
		n /= base;
    7e2a:	4639      	mov	r1, r7
    7e2c:	e7de      	b.n	7dec <_to_x+0xc>
		*end++ = '0';
    7e2e:	f804 1b01 	strb.w	r1, [r4], #1
    7e32:	e7ea      	b.n	7e0a <_to_x+0x2a>
		char tmp = *end;
    7e34:	7823      	ldrb	r3, [r4, #0]
		*end = *start;
    7e36:	7801      	ldrb	r1, [r0, #0]
    7e38:	f804 1901 	strb.w	r1, [r4], #-1
		*start = tmp;
    7e3c:	f800 3b01 	strb.w	r3, [r0], #1
    7e40:	e7e9      	b.n	7e16 <_to_x+0x36>
}
    7e42:	b003      	add	sp, #12
    7e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7e46:	bf00      	nop
    7e48:	200036b0 	.word	0x200036b0

00007e4c <_rlrshift>:

	return (buf + _to_udec(buf, (uint32_t) value, precision)) - start;
}

static	void _rlrshift(uint64_t *v)
{
    7e4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*v = (*v & 1) + (*v >> 1);
    7e4e:	e9d0 7600 	ldrd	r7, r6, [r0]
{
    7e52:	4c0c      	ldr	r4, [pc, #48]	; (7e84 <_rlrshift+0x38>)
	*v = (*v & 1) + (*v >> 1);
    7e54:	087a      	lsrs	r2, r7, #1
{
    7e56:	6823      	ldr	r3, [r4, #0]
    7e58:	9301      	str	r3, [sp, #4]
	*v = (*v & 1) + (*v >> 1);
    7e5a:	ea42 72c6 	orr.w	r2, r2, r6, lsl #31
    7e5e:	f007 0301 	and.w	r3, r7, #1
    7e62:	189b      	adds	r3, r3, r2
    7e64:	f04f 0100 	mov.w	r1, #0
    7e68:	ea4f 0556 	mov.w	r5, r6, lsr #1
    7e6c:	eb45 0101 	adc.w	r1, r5, r1
}
    7e70:	9a01      	ldr	r2, [sp, #4]
	*v = (*v & 1) + (*v >> 1);
    7e72:	e9c0 3100 	strd	r3, r1, [r0]
}
    7e76:	6823      	ldr	r3, [r4, #0]
    7e78:	429a      	cmp	r2, r3
    7e7a:	d001      	beq.n	7e80 <_rlrshift+0x34>
    7e7c:	f003 f8ce 	bl	b01c <_StackCheckHandler>
    7e80:	b003      	add	sp, #12
    7e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7e84:	200036b0 	.word	0x200036b0

00007e88 <_ldiv5>:
 * six.  This was tested exhaustively through the first ~10B values in
 * the input space, and for ~2e12 (4 hours runtime) random inputs
 * taken from the full 64 bit space.
 */
static void _ldiv5(uint64_t *v)
{
    7e88:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    7e8c:	4e19      	ldr	r6, [pc, #100]	; (7ef4 <_ldiv5+0x6c>)
    7e8e:	6833      	ldr	r3, [r6, #0]
    7e90:	9301      	str	r3, [sp, #4]
	uint32_t i, hi;
	uint64_t rem = *v, quot = 0U, q;
    7e92:	e9d0 3200 	ldrd	r3, r2, [r0]
	 */
	rem += 2U;

	for (i = 0U; i < 3; i++) {
		hi = rem >> shifts[i];
		q = (uint64_t)(hi / 5U) << shifts[i];
    7e96:	f04f 0c05 	mov.w	ip, #5
	rem += 2U;
    7e9a:	3302      	adds	r3, #2
		q = (uint64_t)(hi / 5U) << shifts[i];
    7e9c:	f04f 0e00 	mov.w	lr, #0
	rem += 2U;
    7ea0:	f142 0200 	adc.w	r2, r2, #0
		rem -= q * 5U;
    7ea4:	ebb3 070e 	subs.w	r7, r3, lr
		q = (uint64_t)(hi / 5U) << shifts[i];
    7ea8:	fbb2 f8fc 	udiv	r8, r2, ip
		rem -= q * 5U;
    7eac:	fb0c f108 	mul.w	r1, ip, r8
    7eb0:	eb62 0101 	sbc.w	r1, r2, r1
		hi = rem >> shifts[i];
    7eb4:	08fa      	lsrs	r2, r7, #3
    7eb6:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
    7eba:	fbb2 f1fc 	udiv	r1, r2, ip
    7ebe:	00ca      	lsls	r2, r1, #3
		quot += q;
    7ec0:	eb1e 0902 	adds.w	r9, lr, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
    7ec4:	ea4f 7351 	mov.w	r3, r1, lsr #29
		quot += q;
    7ec8:	eb48 0a03 	adc.w	sl, r8, r3
		rem -= q * 5U;
    7ecc:	fba2 230c 	umull	r2, r3, r2, ip
    7ed0:	1abb      	subs	r3, r7, r2
	}

	*v = quot;
}
    7ed2:	9a01      	ldr	r2, [sp, #4]
		q = (uint64_t)(hi / 5U) << shifts[i];
    7ed4:	fbb3 f3fc 	udiv	r3, r3, ip
		quot += q;
    7ed8:	eb19 0403 	adds.w	r4, r9, r3
}
    7edc:	6833      	ldr	r3, [r6, #0]
		quot += q;
    7ede:	f14a 0500 	adc.w	r5, sl, #0
}
    7ee2:	429a      	cmp	r2, r3
	*v = quot;
    7ee4:	e9c0 4500 	strd	r4, r5, [r0]
}
    7ee8:	d001      	beq.n	7eee <_ldiv5+0x66>
    7eea:	f003 f897 	bl	b01c <_StackCheckHandler>
    7eee:	b002      	add	sp, #8
    7ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7ef4:	200036b0 	.word	0x200036b0

00007ef8 <_get_digit>:

static	char _get_digit(uint64_t *fr, int *digit_count)
{
    7ef8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7efa:	4c10      	ldr	r4, [pc, #64]	; (7f3c <_get_digit+0x44>)
    7efc:	6823      	ldr	r3, [r4, #0]
    7efe:	9301      	str	r3, [sp, #4]
	int		rval;

	if (*digit_count > 0) {
    7f00:	680b      	ldr	r3, [r1, #0]
    7f02:	2b00      	cmp	r3, #0
    7f04:	dd15      	ble.n	7f32 <_get_digit+0x3a>
		*digit_count -= 1;
    7f06:	3b01      	subs	r3, #1
		*fr = *fr * 10U;
    7f08:	6802      	ldr	r2, [r0, #0]
		*digit_count -= 1;
    7f0a:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
    7f0c:	6845      	ldr	r5, [r0, #4]
    7f0e:	210a      	movs	r1, #10
    7f10:	fba2 6701 	umull	r6, r7, r2, r1
    7f14:	fb01 7705 	mla	r7, r1, r5, r7
		rval = ((*fr >> 60) & 0xF) + '0';
		*fr &= 0x0FFFFFFFFFFFFFFFull;
    7f18:	f027 4370 	bic.w	r3, r7, #4026531840	; 0xf0000000
    7f1c:	e9c0 6300 	strd	r6, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
    7f20:	0f39      	lsrs	r1, r7, #28
    7f22:	3130      	adds	r1, #48	; 0x30
	} else {
		rval = '0';
	}

	return (char) (rval);
}
    7f24:	9a01      	ldr	r2, [sp, #4]
    7f26:	6823      	ldr	r3, [r4, #0]
    7f28:	429a      	cmp	r2, r3
    7f2a:	b2c8      	uxtb	r0, r1
    7f2c:	d003      	beq.n	7f36 <_get_digit+0x3e>
    7f2e:	f003 f875 	bl	b01c <_StackCheckHandler>
		rval = '0';
    7f32:	2130      	movs	r1, #48	; 0x30
    7f34:	e7f6      	b.n	7f24 <_get_digit+0x2c>
}
    7f36:	b003      	add	sp, #12
    7f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7f3a:	bf00      	nop
    7f3c:	200036b0 	.word	0x200036b0

00007f40 <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, char *format, va_list vargs)
{
    7f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7f44:	b0cd      	sub	sp, #308	; 0x134
    7f46:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    7f4a:	9201      	str	r2, [sp, #4]
    7f4c:	4aa3      	ldr	r2, [pc, #652]	; (81dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1dc>)
    7f4e:	6812      	ldr	r2, [r2, #0]
    7f50:	924b      	str	r2, [sp, #300]	; 0x12c
    7f52:	469a      	mov	sl, r3
	int32_t			*int32ptr_temp;
	int32_t			int32_temp;
	uint32_t			uint32_temp;
	uint64_t			double_temp;

	count = 0;
    7f54:	2300      	movs	r3, #0
			case '%':
				if ((*func)('%', dest) == EOF) {
					return EOF;
				}

				count++;
    7f56:	9304      	str	r3, [sp, #16]
				break;
    7f58:	e003      	b.n	7f62 <z_prf+0x22>
			count++;
    7f5a:	9b04      	ldr	r3, [sp, #16]
	while ((c = *format++)) {
    7f5c:	9501      	str	r5, [sp, #4]
			count++;
    7f5e:	3301      	adds	r3, #1
    7f60:	9304      	str	r3, [sp, #16]
	while ((c = *format++)) {
    7f62:	9d01      	ldr	r5, [sp, #4]
    7f64:	f815 0b01 	ldrb.w	r0, [r5], #1
    7f68:	b148      	cbz	r0, 7f7e <z_prf+0x3e>
		if (c != '%') {
    7f6a:	2825      	cmp	r0, #37	; 0x25
    7f6c:	d079      	beq.n	8062 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x62>
			if ((*func) (c, dest) == EOF) {
    7f6e:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
    7f72:	4798      	blx	r3
    7f74:	3001      	adds	r0, #1
    7f76:	d1f0      	bne.n	7f5a <z_prf+0x1a>
				return EOF;
    7f78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7f7c:	9304      	str	r3, [sp, #16]
				}
			}
		}
	}
	return count;
}
    7f7e:	4b97      	ldr	r3, [pc, #604]	; (81dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1dc>)
    7f80:	9a4b      	ldr	r2, [sp, #300]	; 0x12c
    7f82:	681b      	ldr	r3, [r3, #0]
    7f84:	9804      	ldr	r0, [sp, #16]
    7f86:	429a      	cmp	r2, r3
    7f88:	f000 8388 	beq.w	869c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x69c>
    7f8c:	f003 f846 	bl	b01c <_StackCheckHandler>
				switch (c) {
    7f90:	2c23      	cmp	r4, #35	; 0x23
    7f92:	d05e      	beq.n	8052 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x52>
    7f94:	d853      	bhi.n	803e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3e>
    7f96:	2c00      	cmp	r4, #0
    7f98:	d0f1      	beq.n	7f7e <z_prf+0x3e>
					fspace = true;
    7f9a:	2c20      	cmp	r4, #32
    7f9c:	9b05      	ldr	r3, [sp, #20]
    7f9e:	bf08      	it	eq
    7fa0:	2301      	moveq	r3, #1
    7fa2:	9305      	str	r3, [sp, #20]
					fminus = true;
    7fa4:	9d01      	ldr	r5, [sp, #4]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
    7fa6:	488e      	ldr	r0, [pc, #568]	; (81e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e0>)
    7fa8:	462b      	mov	r3, r5
    7faa:	f813 4b01 	ldrb.w	r4, [r3], #1
    7fae:	9301      	str	r3, [sp, #4]
    7fb0:	4621      	mov	r1, r4
    7fb2:	f7ff fe25 	bl	7c00 <strchr>
    7fb6:	2800      	cmp	r0, #0
    7fb8:	d1ea      	bne.n	7f90 <z_prf+0x50>
			if (c == '*') {
    7fba:	2c2a      	cmp	r4, #42	; 0x2a
    7fbc:	d159      	bne.n	8072 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x72>
				width = (int32_t) va_arg(vargs, int32_t);
    7fbe:	f85a 3b04 	ldr.w	r3, [sl], #4
    7fc2:	9303      	str	r3, [sp, #12]
				if (width < 0) {
    7fc4:	2b00      	cmp	r3, #0
					width = -width;
    7fc6:	bfbf      	itttt	lt
    7fc8:	425b      	neglt	r3, r3
    7fca:	9303      	strlt	r3, [sp, #12]
					fminus = true;
    7fcc:	2301      	movlt	r3, #1
    7fce:	930b      	strlt	r3, [sp, #44]	; 0x2c
				c = *format++;
    7fd0:	9b01      	ldr	r3, [sp, #4]
    7fd2:	781c      	ldrb	r4, [r3, #0]
    7fd4:	1cab      	adds	r3, r5, #2
    7fd6:	9301      	str	r3, [sp, #4]
				width = MAXFLD;
    7fd8:	9b03      	ldr	r3, [sp, #12]
    7fda:	2bc9      	cmp	r3, #201	; 0xc9
    7fdc:	bf28      	it	cs
    7fde:	23c8      	movcs	r3, #200	; 0xc8
    7fe0:	9303      	str	r3, [sp, #12]
			if (c == '.') {
    7fe2:	2c2e      	cmp	r4, #46	; 0x2e
    7fe4:	d16b      	bne.n	80be <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbe>
				if (c == '*') {
    7fe6:	9b01      	ldr	r3, [sp, #4]
    7fe8:	781b      	ldrb	r3, [r3, #0]
    7fea:	2b2a      	cmp	r3, #42	; 0x2a
    7fec:	d164      	bne.n	80b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb8>
				c = *format++;
    7fee:	9b01      	ldr	r3, [sp, #4]
					precision = (int32_t)
    7ff0:	f85a 5b04 	ldr.w	r5, [sl], #4
				c = *format++;
    7ff4:	3301      	adds	r3, #1
    7ff6:	9301      	str	r3, [sp, #4]
				c = *format++;
    7ff8:	9b01      	ldr	r3, [sp, #4]
					precision = -1;
    7ffa:	2dc9      	cmp	r5, #201	; 0xc9
				c = *format++;
    7ffc:	f813 4b01 	ldrb.w	r4, [r3], #1
    8000:	9301      	str	r3, [sp, #4]
					precision = -1;
    8002:	bfa8      	it	ge
    8004:	f04f 35ff 	movge.w	r5, #4294967295	; 0xffffffff
			if (strchr("hlLz", c) != NULL) {
    8008:	4621      	mov	r1, r4
    800a:	4876      	ldr	r0, [pc, #472]	; (81e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e4>)
    800c:	f7ff fdf8 	bl	7c00 <strchr>
    8010:	b118      	cbz	r0, 801a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a>
				c = *format++;
    8012:	9b01      	ldr	r3, [sp, #4]
    8014:	f813 4b01 	ldrb.w	r4, [r3], #1
    8018:	9301      	str	r3, [sp, #4]
			switch (c) {
    801a:	2c67      	cmp	r4, #103	; 0x67
    801c:	dc7b      	bgt.n	8116 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x116>
    801e:	2c65      	cmp	r4, #101	; 0x65
    8020:	f280 80e2 	bge.w	81e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e8>
    8024:	2c47      	cmp	r4, #71	; 0x47
    8026:	dc4d      	bgt.n	80c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc4>
    8028:	2c45      	cmp	r4, #69	; 0x45
    802a:	f280 80dd 	bge.w	81e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e8>
    802e:	2c00      	cmp	r4, #0
    8030:	d0a5      	beq.n	7f7e <z_prf+0x3e>
    8032:	2c25      	cmp	r4, #37	; 0x25
    8034:	f000 82ff 	beq.w	8636 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x636>
			if (c >= MAXFLD + 1) {
    8038:	2cc8      	cmp	r4, #200	; 0xc8
    803a:	dd92      	ble.n	7f62 <z_prf+0x22>
    803c:	e79c      	b.n	7f78 <z_prf+0x38>
				switch (c) {
    803e:	2c2d      	cmp	r4, #45	; 0x2d
    8040:	d00a      	beq.n	8058 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x58>
    8042:	2c30      	cmp	r4, #48	; 0x30
    8044:	d00b      	beq.n	805e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5e>
					fplus = true;
    8046:	2c2b      	cmp	r4, #43	; 0x2b
    8048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    804a:	bf08      	it	eq
    804c:	2301      	moveq	r3, #1
    804e:	930a      	str	r3, [sp, #40]	; 0x28
    8050:	e7a8      	b.n	7fa4 <z_prf+0x64>
					falt = true;
    8052:	f04f 0901 	mov.w	r9, #1
    8056:	e7a5      	b.n	7fa4 <z_prf+0x64>
					fminus = true;
    8058:	2301      	movs	r3, #1
    805a:	930b      	str	r3, [sp, #44]	; 0x2c
    805c:	e7a2      	b.n	7fa4 <z_prf+0x64>
					pad = '0';
    805e:	9402      	str	r4, [sp, #8]
    8060:	e7a0      	b.n	7fa4 <z_prf+0x64>
			pad = ' ';		/* Default pad character    */
    8062:	2320      	movs	r3, #32
    8064:	9302      	str	r3, [sp, #8]
			fminus = fplus = fspace = falt = false;
    8066:	2300      	movs	r3, #0
    8068:	9305      	str	r3, [sp, #20]
    806a:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
    806e:	4699      	mov	r9, r3
    8070:	e799      	b.n	7fa6 <z_prf+0x66>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    8072:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
			} else if (!isdigit(c)) {
    8076:	2b09      	cmp	r3, #9
				width = 0;
    8078:	9003      	str	r0, [sp, #12]
			} else if (!isdigit(c)) {
    807a:	d8b2      	bhi.n	7fe2 <z_prf+0xa2>
		i = 10 * i + *p++ - '0';
    807c:	220a      	movs	r2, #10
	while (isdigit(((int) *p))) {
    807e:	462b      	mov	r3, r5
    8080:	f813 0b01 	ldrb.w	r0, [r3], #1
    8084:	9301      	str	r3, [sp, #4]
    8086:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    808a:	2b09      	cmp	r3, #9
    808c:	4604      	mov	r4, r0
    808e:	d8a3      	bhi.n	7fd8 <z_prf+0x98>
		i = 10 * i + *p++ - '0';
    8090:	9b03      	ldr	r3, [sp, #12]
    8092:	9d01      	ldr	r5, [sp, #4]
    8094:	fb02 0003 	mla	r0, r2, r3, r0
    8098:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    809c:	9303      	str	r3, [sp, #12]
    809e:	e7ee      	b.n	807e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7e>
    80a0:	fb00 3505 	mla	r5, r0, r5, r3
    80a4:	3d30      	subs	r5, #48	; 0x30
    80a6:	9201      	str	r2, [sp, #4]
	while (isdigit(((int) *p))) {
    80a8:	9a01      	ldr	r2, [sp, #4]
    80aa:	f812 3b01 	ldrb.w	r3, [r2], #1
    80ae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    80b2:	2909      	cmp	r1, #9
    80b4:	d9f4      	bls.n	80a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa0>
    80b6:	e79f      	b.n	7ff8 <z_prf+0xb8>
	i = 0;
    80b8:	2500      	movs	r5, #0
		i = 10 * i + *p++ - '0';
    80ba:	200a      	movs	r0, #10
    80bc:	e7f4      	b.n	80a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa8>
			precision = -1;	/* No precision specified   */
    80be:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    80c2:	e7a1      	b.n	8008 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8>
			switch (c) {
    80c4:	2c63      	cmp	r4, #99	; 0x63
    80c6:	d06e      	beq.n	81a6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a6>
    80c8:	dc30      	bgt.n	812c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12c>
    80ca:	2c58      	cmp	r4, #88	; 0x58
    80cc:	d1b4      	bne.n	8038 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    80ce:	f85a 1b04 	ldr.w	r1, [sl], #4
	if (alt_form) {
    80d2:	f1b9 0f00 	cmp.w	r9, #0
    80d6:	f000 82a4 	beq.w	8622 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x622>
		*buf++ = '0';
    80da:	f647 0330 	movw	r3, #30768	; 0x7830
    80de:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
		*buf++ = 'x';
    80e2:	f10d 0662 	add.w	r6, sp, #98	; 0x62
	len = _to_x(buf, value, 16, precision);
    80e6:	462b      	mov	r3, r5
    80e8:	2210      	movs	r2, #16
    80ea:	4630      	mov	r0, r6
    80ec:	f7ff fe78 	bl	7de0 <_to_x>
	if (prefix == 'X') {
    80f0:	2c58      	cmp	r4, #88	; 0x58
    80f2:	d105      	bne.n	8100 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x100>
    80f4:	aa18      	add	r2, sp, #96	; 0x60
	for (/**/; *buf; buf++) {
    80f6:	f812 3b01 	ldrb.w	r3, [r2], #1
    80fa:	2b00      	cmp	r3, #0
    80fc:	f040 8293 	bne.w	8626 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x626>
	return len + (buf - buf0);
    8100:	f10d 0b60 	add.w	fp, sp, #96	; 0x60
			prefix = 0;
    8104:	f1b9 0f00 	cmp.w	r9, #0
	return len + (buf - buf0);
    8108:	eba6 0b0b 	sub.w	fp, r6, fp
    810c:	4458      	add	r0, fp
			prefix = 0;
    810e:	bf14      	ite	ne
    8110:	2702      	movne	r7, #2
    8112:	2700      	moveq	r7, #0
				if (precision != -1) {
    8114:	e027      	b.n	8166 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x166>
			switch (c) {
    8116:	2c70      	cmp	r4, #112	; 0x70
    8118:	f000 825f 	beq.w	85da <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5da>
    811c:	dc29      	bgt.n	8172 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x172>
    811e:	2c6e      	cmp	r4, #110	; 0x6e
    8120:	f000 8220 	beq.w	8564 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x564>
    8124:	f300 8223 	bgt.w	856e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x56e>
    8128:	2c69      	cmp	r4, #105	; 0x69
    812a:	d185      	bne.n	8038 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38>
				int32_temp = (int32_t) va_arg(vargs, int32_t);
    812c:	f85a 4b04 	ldr.w	r4, [sl], #4
	if (value < 0) {
    8130:	2c00      	cmp	r4, #0
    8132:	da43      	bge.n	81bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1bc>
		*buf++ = '-';
    8134:	232d      	movs	r3, #45	; 0x2d
		if (value != 0x80000000) {
    8136:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
		*buf++ = '-';
    813a:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
		if (value != 0x80000000) {
    813e:	d042      	beq.n	81c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c6>
			value = -value;
    8140:	4261      	negs	r1, r4
		*buf++ = '-';
    8142:	f10d 0b61 	add.w	fp, sp, #97	; 0x61
	return _to_x(buf, value, 10, precision);
    8146:	462b      	mov	r3, r5
    8148:	220a      	movs	r2, #10
    814a:	4658      	mov	r0, fp
    814c:	f7ff fe48 	bl	7de0 <_to_x>
				if (fplus || fspace || (int32_temp < 0)) {
    8150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8152:	9a05      	ldr	r2, [sp, #20]
	return (buf + _to_udec(buf, (uint32_t) value, precision)) - start;
    8154:	4458      	add	r0, fp
				if (fplus || fspace || (int32_temp < 0)) {
    8156:	ea53 0702 	orrs.w	r7, r3, r2
	return (buf + _to_udec(buf, (uint32_t) value, precision)) - start;
    815a:	f10d 0b60 	add.w	fp, sp, #96	; 0x60
    815e:	eba0 000b 	sub.w	r0, r0, fp
				if (fplus || fspace || (int32_temp < 0)) {
    8162:	d100      	bne.n	8166 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x166>
    8164:	0fe7      	lsrs	r7, r4, #31
			prefix = 0;
    8166:	3501      	adds	r5, #1
    8168:	9b02      	ldr	r3, [sp, #8]
    816a:	bf18      	it	ne
    816c:	2320      	movne	r3, #32
    816e:	9302      	str	r3, [sp, #8]
    8170:	e081      	b.n	8276 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x276>
			switch (c) {
    8172:	2c75      	cmp	r4, #117	; 0x75
    8174:	f000 824d 	beq.w	8612 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x612>
    8178:	2c78      	cmp	r4, #120	; 0x78
    817a:	d0a8      	beq.n	80ce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xce>
    817c:	2c73      	cmp	r4, #115	; 0x73
    817e:	f47f af5b 	bne.w	8038 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38>
				cptr_temp = (char *) va_arg(vargs, char *);
    8182:	f85a 1b04 	ldr.w	r1, [sl], #4
				for (c = 0; c < MAXFLD; c++) {
    8186:	f04f 0900 	mov.w	r9, #0
					if (cptr_temp[c] == '\0') {
    818a:	f811 3009 	ldrb.w	r3, [r1, r9]
    818e:	2b00      	cmp	r3, #0
    8190:	f000 8231 	beq.w	85f6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5f6>
				for (c = 0; c < MAXFLD; c++) {
    8194:	f109 0901 	add.w	r9, r9, #1
    8198:	f1b9 0fc8 	cmp.w	r9, #200	; 0xc8
    819c:	d1f5      	bne.n	818a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18a>
				if ((precision >= 0) && (precision < c)) {
    819e:	2d00      	cmp	r5, #0
    81a0:	f280 822b 	bge.w	85fa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5fa>
    81a4:	e230      	b.n	8608 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x608>
				buf[0] = (char) ((int32_t) va_arg(vargs, int32_t));
    81a6:	f85a 3b04 	ldr.w	r3, [sl], #4
    81aa:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
				buf[1] = '\0';
    81ae:	2300      	movs	r3, #0
    81b0:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
				c = 1;
    81b4:	f04f 0901 	mov.w	r9, #1
					prefix = 2;
    81b8:	2700      	movs	r7, #0
    81ba:	e1e9      	b.n	8590 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x590>
	} else if (fplus) {
    81bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    81be:	b123      	cbz	r3, 81ca <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1ca>
		*buf++ = '+';
    81c0:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
    81c2:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
		if (value != 0x80000000) {
    81c6:	4621      	mov	r1, r4
    81c8:	e7bb      	b.n	8142 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x142>
	} else if (fspace) {
    81ca:	9b05      	ldr	r3, [sp, #20]
    81cc:	b10b      	cbz	r3, 81d2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d2>
		*buf++ = ' ';
    81ce:	2320      	movs	r3, #32
    81d0:	e7f7      	b.n	81c2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c2>
	} else if (fspace) {
    81d2:	4621      	mov	r1, r4
    81d4:	f10d 0b60 	add.w	fp, sp, #96	; 0x60
    81d8:	e7b5      	b.n	8146 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x146>
    81da:	bf00      	nop
    81dc:	200036b0 	.word	0x200036b0
    81e0:	0000c471 	.word	0x0000c471
    81e4:	0000c477 	.word	0x0000c477
				u.d = (double) va_arg(vargs, double);
    81e8:	f10a 0a07 	add.w	sl, sl, #7
    81ec:	f02a 0307 	bic.w	r3, sl, #7
    81f0:	469a      	mov	sl, r3
    81f2:	6859      	ldr	r1, [r3, #4]
    81f4:	f85a 0b08 	ldr.w	r0, [sl], #8
	fract = (double_temp << 11) & ~HIGHBIT64;
    81f8:	02cb      	lsls	r3, r1, #11
    81fa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    81fe:	02c2      	lsls	r2, r0, #11
    8200:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    8204:	9206      	str	r2, [sp, #24]
    8206:	9307      	str	r3, [sp, #28]
    8208:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
	exp = double_temp >> 52 & 0x7ff;
    820c:	f3c1 580a 	ubfx	r8, r1, #20, #11
	fract = (double_temp << 11) & ~HIGHBIT64;
    8210:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
	sign = !!(double_temp & HIGHBIT64);
    8214:	460b      	mov	r3, r1
	if (exp == 0x7ff) {
    8216:	f240 71ff 	movw	r1, #2047	; 0x7ff
    821a:	4588      	cmp	r8, r1
	sign = !!(double_temp & HIGHBIT64);
    821c:	4602      	mov	r2, r0
	if (exp == 0x7ff) {
    821e:	d140      	bne.n	82a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2a2>
		if (sign) {
    8220:	2800      	cmp	r0, #0
		if (!fract) {
    8222:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
		if (sign) {
    8226:	f173 0300 	sbcs.w	r3, r3, #0
			*buf++ = '-';
    822a:	bfbb      	ittet	lt
    822c:	232d      	movlt	r3, #45	; 0x2d
    822e:	f88d 3060 	strblt.w	r3, [sp, #96]	; 0x60
		if (sign) {
    8232:	ab18      	addge	r3, sp, #96	; 0x60
			*buf++ = '-';
    8234:	f10d 0361 	addlt.w	r3, sp, #97	; 0x61
		if (!fract) {
    8238:	430a      	orrs	r2, r1
    823a:	f1a4 0441 	sub.w	r4, r4, #65	; 0x41
    823e:	f103 0003 	add.w	r0, r3, #3
    8242:	d123      	bne.n	828c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28c>
			if (isupper(c)) {
    8244:	2c19      	cmp	r4, #25
    8246:	d81b      	bhi.n	8280 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x280>
				*buf++ = 'I';
    8248:	2249      	movs	r2, #73	; 0x49
    824a:	701a      	strb	r2, [r3, #0]
				*buf++ = 'N';
    824c:	224e      	movs	r2, #78	; 0x4e
    824e:	705a      	strb	r2, [r3, #1]
				*buf++ = 'F';
    8250:	2246      	movs	r2, #70	; 0x46
				*buf++ = 'n';
    8252:	709a      	strb	r2, [r3, #2]
		return buf - start;
    8254:	f10d 0b60 	add.w	fp, sp, #96	; 0x60
		*buf = 0;
    8258:	2200      	movs	r2, #0
    825a:	70da      	strb	r2, [r3, #3]
		return buf - start;
    825c:	eba0 000b 	sub.w	r0, r0, fp
				if (fplus || fspace || (buf[0] == '-')) {
    8260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8262:	9a05      	ldr	r2, [sp, #20]
    8264:	ea53 0702 	orrs.w	r7, r3, r2
    8268:	d105      	bne.n	8276 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x276>
    826a:	f89d 7060 	ldrb.w	r7, [sp, #96]	; 0x60
    826e:	f1a7 032d 	sub.w	r3, r7, #45	; 0x2d
    8272:	425f      	negs	r7, r3
    8274:	415f      	adcs	r7, r3
			if (c >= MAXFLD + 1) {
    8276:	28c8      	cmp	r0, #200	; 0xc8
    8278:	f73f ae7e 	bgt.w	7f78 <z_prf+0x38>
    827c:	4681      	mov	r9, r0
    827e:	e187      	b.n	8590 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x590>
				*buf++ = 'i';
    8280:	2269      	movs	r2, #105	; 0x69
    8282:	701a      	strb	r2, [r3, #0]
				*buf++ = 'n';
    8284:	226e      	movs	r2, #110	; 0x6e
    8286:	705a      	strb	r2, [r3, #1]
				*buf++ = 'f';
    8288:	2266      	movs	r2, #102	; 0x66
    828a:	e7e2      	b.n	8252 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x252>
			if (isupper(c)) {
    828c:	2c19      	cmp	r4, #25
				*buf++ = 'N';
    828e:	bf99      	ittee	ls
    8290:	224e      	movls	r2, #78	; 0x4e
				*buf++ = 'A';
    8292:	2141      	movls	r1, #65	; 0x41
				*buf++ = 'n';
    8294:	226e      	movhi	r2, #110	; 0x6e
				*buf++ = 'a';
    8296:	2161      	movhi	r1, #97	; 0x61
				*buf++ = 'N';
    8298:	bf94      	ite	ls
    829a:	701a      	strbls	r2, [r3, #0]
				*buf++ = 'n';
    829c:	701a      	strbhi	r2, [r3, #0]
				*buf++ = 'a';
    829e:	7059      	strb	r1, [r3, #1]
    82a0:	e7d7      	b.n	8252 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x252>
	if ((exp | fract) != 0) {
    82a2:	9906      	ldr	r1, [sp, #24]
    82a4:	9e07      	ldr	r6, [sp, #28]
    82a6:	ea48 0101 	orr.w	r1, r8, r1
    82aa:	4640      	mov	r0, r8
    82ac:	910e      	str	r1, [sp, #56]	; 0x38
    82ae:	17c1      	asrs	r1, r0, #31
    82b0:	4331      	orrs	r1, r6
    82b2:	910f      	str	r1, [sp, #60]	; 0x3c
    82b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
		c = 'f';
    82b8:	2c46      	cmp	r4, #70	; 0x46
    82ba:	bf08      	it	eq
    82bc:	2466      	moveq	r4, #102	; 0x66
	if ((exp | fract) != 0) {
    82be:	4301      	orrs	r1, r0
    82c0:	d03e      	beq.n	8340 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x340>
		fract |= HIGHBIT64;
    82c2:	9806      	ldr	r0, [sp, #24]
	if (decexp && sign) {
    82c4:	2a00      	cmp	r2, #0
		fract |= HIGHBIT64;
    82c6:	f046 4100 	orr.w	r1, r6, #2147483648	; 0x80000000
	if (decexp && sign) {
    82ca:	f173 0300 	sbcs.w	r3, r3, #0
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    82ce:	f2a8 38fe 	subw	r8, r8, #1022	; 0x3fe
		fract |= HIGHBIT64;
    82d2:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
	if (decexp && sign) {
    82d6:	da35      	bge.n	8344 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x344>
		*buf++ = '-';
    82d8:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
    82da:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
    82de:	f10d 0761 	add.w	r7, sp, #97	; 0x61
	decexp = 0;
    82e2:	2600      	movs	r6, #0
	while (exp <= -3) {
    82e4:	f118 0f02 	cmn.w	r8, #2
    82e8:	db39      	blt.n	835e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x35e>
	while (exp > 0) {
    82ea:	f1b8 0f00 	cmp.w	r8, #0
    82ee:	dc66      	bgt.n	83be <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3be>
		_rlrshift(&fract);
    82f0:	a814      	add	r0, sp, #80	; 0x50
		exp++;
    82f2:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
    82f6:	f7ff fda9 	bl	7e4c <_rlrshift>
	while (exp < (0 + 4)) {
    82fa:	f1b8 0f04 	cmp.w	r8, #4
    82fe:	d1f7      	bne.n	82f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2f0>
		precision = 6;		/* Default precision if none given */
    8300:	2d00      	cmp	r5, #0
	if ((c == 'g') || (c == 'G')) {
    8302:	f024 0320 	bic.w	r3, r4, #32
		precision = 6;		/* Default precision if none given */
    8306:	bfb8      	it	lt
    8308:	2506      	movlt	r5, #6
	if ((c == 'g') || (c == 'G')) {
    830a:	2b47      	cmp	r3, #71	; 0x47
    830c:	d17b      	bne.n	8406 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x406>
		if (!falt && (precision > 0)) {
    830e:	f1b9 0f00 	cmp.w	r9, #0
    8312:	d175      	bne.n	8400 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x400>
    8314:	f115 0800 	adds.w	r8, r5, #0
    8318:	bf18      	it	ne
    831a:	f04f 0801 	movne.w	r8, #1
		if ((decexp < (-4 + 1)) || (decexp > (precision + 1))) {
    831e:	1cf2      	adds	r2, r6, #3
    8320:	db02      	blt.n	8328 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x328>
    8322:	1c6b      	adds	r3, r5, #1
    8324:	429e      	cmp	r6, r3
    8326:	dd72      	ble.n	840e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x40e>
				c = 'E';
    8328:	2c67      	cmp	r4, #103	; 0x67
    832a:	bf0c      	ite	eq
    832c:	2465      	moveq	r4, #101	; 0x65
    832e:	2445      	movne	r4, #69	; 0x45
		exp = precision + 1;
    8330:	f105 0b01 	add.w	fp, r5, #1
	digit_count = 16;
    8334:	2310      	movs	r3, #16
    8336:	459b      	cmp	fp, r3
    8338:	9313      	str	r3, [sp, #76]	; 0x4c
	if (exp > 16) {
    833a:	bfa8      	it	ge
    833c:	469b      	movge	fp, r3
    833e:	e06e      	b.n	841e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x41e>
	exp = double_temp >> 52 & 0x7ff;
    8340:	f04f 0800 	mov.w	r8, #0
	} else if (fplus) {
    8344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8346:	b10b      	cbz	r3, 834c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x34c>
		*buf++ = '+';
    8348:	232b      	movs	r3, #43	; 0x2b
    834a:	e7c6      	b.n	82da <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2da>
	} else if (fspace) {
    834c:	9b05      	ldr	r3, [sp, #20]
    834e:	b10b      	cbz	r3, 8354 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x354>
		*buf++ = ' ';
    8350:	2320      	movs	r3, #32
    8352:	e7c2      	b.n	82da <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2da>
	} else if (fspace) {
    8354:	af18      	add	r7, sp, #96	; 0x60
    8356:	e7c4      	b.n	82e2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2e2>
			_rlrshift(&fract);
    8358:	a814      	add	r0, sp, #80	; 0x50
    835a:	f7ff fd77 	bl	7e4c <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
    835e:	e9dd ec14 	ldrd	lr, ip, [sp, #80]	; 0x50
    8362:	2300      	movs	r3, #0
    8364:	f8cd c020 	str.w	ip, [sp, #32]
    8368:	9309      	str	r3, [sp, #36]	; 0x24
    836a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    836e:	48b7      	ldr	r0, [pc, #732]	; (864c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x64c>)
    8370:	2100      	movs	r1, #0
    8372:	4299      	cmp	r1, r3
    8374:	bf08      	it	eq
    8376:	4290      	cmpeq	r0, r2
    8378:	f108 0801 	add.w	r8, r8, #1
    837c:	d3ec      	bcc.n	8358 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x358>
		fract *= 5U;
    837e:	2005      	movs	r0, #5
    8380:	fbae 2300 	umull	r2, r3, lr, r0
    8384:	fb00 330c 	mla	r3, r0, ip, r3
    8388:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
		decexp--;
    838c:	3e01      	subs	r6, #1
    838e:	f04f 0e00 	mov.w	lr, #0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    8392:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
    8396:	f04f 0c00 	mov.w	ip, #0
    839a:	2100      	movs	r1, #0
    839c:	458c      	cmp	ip, r1
    839e:	bf08      	it	eq
    83a0:	459b      	cmpeq	fp, r3
    83a2:	d205      	bcs.n	83b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3b0>
    83a4:	f1be 0f00 	cmp.w	lr, #0
    83a8:	d09c      	beq.n	82e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2e4>
    83aa:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    83ae:	e799      	b.n	82e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2e4>
			fract <<= 1;
    83b0:	1892      	adds	r2, r2, r2
    83b2:	415b      	adcs	r3, r3
			exp--;
    83b4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    83b8:	f04f 0e01 	mov.w	lr, #1
    83bc:	e7ed      	b.n	839a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x39a>
		_ldiv5(&fract);
    83be:	a814      	add	r0, sp, #80	; 0x50
    83c0:	f7ff fd62 	bl	7e88 <_ldiv5>
		exp--;
    83c4:	e9dd 1014 	ldrd	r1, r0, [sp, #80]	; 0x50
    83c8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
    83cc:	3601      	adds	r6, #1
    83ce:	f04f 0e00 	mov.w	lr, #0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    83d2:	2300      	movs	r3, #0
    83d4:	f04f 0c00 	mov.w	ip, #0
    83d8:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
    83dc:	459c      	cmp	ip, r3
    83de:	bf08      	it	eq
    83e0:	4583      	cmpeq	fp, r0
    83e2:	d206      	bcs.n	83f2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3f2>
    83e4:	f1be 0f00 	cmp.w	lr, #0
    83e8:	f43f af7f 	beq.w	82ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2ea>
    83ec:	e9cd 1014 	strd	r1, r0, [sp, #80]	; 0x50
    83f0:	e77b      	b.n	82ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2ea>
			fract <<= 1;
    83f2:	1849      	adds	r1, r1, r1
    83f4:	4140      	adcs	r0, r0
			exp--;
    83f6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    83fa:	f04f 0e01 	mov.w	lr, #1
    83fe:	e7e8      	b.n	83d2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3d2>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    8400:	f04f 0800 	mov.w	r8, #0
    8404:	e78b      	b.n	831e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x31e>
	if (c == 'f') {
    8406:	2c66      	cmp	r4, #102	; 0x66
	prune_zero = false;		/* Assume trailing 0's allowed     */
    8408:	f04f 0800 	mov.w	r8, #0
	if (c == 'f') {
    840c:	d190      	bne.n	8330 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x330>
		if (exp < 0) {
    840e:	eb16 0b05 	adds.w	fp, r6, r5
    8412:	d540      	bpl.n	8496 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x496>
	digit_count = 16;
    8414:	2310      	movs	r3, #16
    8416:	9313      	str	r3, [sp, #76]	; 0x4c
    8418:	2466      	movs	r4, #102	; 0x66
			exp = 0;
    841a:	f04f 0b00 	mov.w	fp, #0
	ltemp = 0x0800000000000000;
    841e:	2200      	movs	r2, #0
    8420:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    8424:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
	while (exp--) {
    8428:	f11b 3bff 	adds.w	fp, fp, #4294967295	; 0xffffffff
    842c:	d235      	bcs.n	849a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x49a>
	fract += ltemp;
    842e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    8430:	9a16      	ldr	r2, [sp, #88]	; 0x58
    8432:	9917      	ldr	r1, [sp, #92]	; 0x5c
    8434:	189b      	adds	r3, r3, r2
    8436:	9a15      	ldr	r2, [sp, #84]	; 0x54
    8438:	eb41 0202 	adc.w	r2, r1, r2
    843c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
	if ((fract >> 32) & 0xF0000000) {
    8440:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
    8444:	9310      	str	r3, [sp, #64]	; 0x40
    8446:	2300      	movs	r3, #0
    8448:	9311      	str	r3, [sp, #68]	; 0x44
    844a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    844e:	4313      	orrs	r3, r2
    8450:	d006      	beq.n	8460 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x460>
		_ldiv5(&fract);
    8452:	a814      	add	r0, sp, #80	; 0x50
    8454:	f7ff fd18 	bl	7e88 <_ldiv5>
		_rlrshift(&fract);
    8458:	a814      	add	r0, sp, #80	; 0x50
    845a:	f7ff fcf7 	bl	7e4c <_rlrshift>
		decexp++;
    845e:	3601      	adds	r6, #1
	if (c == 'f') {
    8460:	2c66      	cmp	r4, #102	; 0x66
    8462:	f107 0b01 	add.w	fp, r7, #1
    8466:	d135      	bne.n	84d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4d4>
		if (decexp > 0) {
    8468:	2e00      	cmp	r6, #0
    846a:	dd1d      	ble.n	84a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4a8>
    846c:	eb07 0b06 	add.w	fp, r7, r6
				*buf++ = _get_digit(&fract, &digit_count);
    8470:	a913      	add	r1, sp, #76	; 0x4c
    8472:	a814      	add	r0, sp, #80	; 0x50
    8474:	f7ff fd40 	bl	7ef8 <_get_digit>
    8478:	f807 0b01 	strb.w	r0, [r7], #1
			while (decexp > 0) {
    847c:	45bb      	cmp	fp, r7
    847e:	d1f7      	bne.n	8470 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x470>
    8480:	2600      	movs	r6, #0
		if (falt || (precision > 0)) {
    8482:	ea59 0905 	orrs.w	r9, r9, r5
    8486:	d003      	beq.n	8490 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x490>
			*buf++ = '.';
    8488:	232e      	movs	r3, #46	; 0x2e
    848a:	f80b 3b01 	strb.w	r3, [fp], #1
    848e:	46a9      	mov	r9, r5
    8490:	44d9      	add	r9, fp
				*buf++ = '0';
    8492:	2530      	movs	r5, #48	; 0x30
    8494:	e011      	b.n	84ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4ba>
		if (exp < 0) {
    8496:	2466      	movs	r4, #102	; 0x66
    8498:	e74c      	b.n	8334 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x334>
		_ldiv5(&ltemp);
    849a:	a816      	add	r0, sp, #88	; 0x58
    849c:	f7ff fcf4 	bl	7e88 <_ldiv5>
		_rlrshift(&ltemp);
    84a0:	a816      	add	r0, sp, #88	; 0x58
    84a2:	f7ff fcd3 	bl	7e4c <_rlrshift>
    84a6:	e7bf      	b.n	8428 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x428>
			*buf++ = '0';
    84a8:	2330      	movs	r3, #48	; 0x30
    84aa:	703b      	strb	r3, [r7, #0]
    84ac:	e7e9      	b.n	8482 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x482>
			if (decexp < 0) {
    84ae:	f10b 0b01 	add.w	fp, fp, #1
    84b2:	b146      	cbz	r6, 84c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c6>
				*buf++ = '0';
    84b4:	f80b 5c01 	strb.w	r5, [fp, #-1]
				decexp++;
    84b8:	3601      	adds	r6, #1
		while (precision-- > 0) {
    84ba:	45d9      	cmp	r9, fp
    84bc:	d1f7      	bne.n	84ae <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4ae>
	if (prune_zero) {
    84be:	f1b8 0f00 	cmp.w	r8, #0
    84c2:	d048      	beq.n	8556 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x556>
    84c4:	e024      	b.n	8510 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x510>
				*buf++ = _get_digit(&fract, &digit_count);
    84c6:	a913      	add	r1, sp, #76	; 0x4c
    84c8:	a814      	add	r0, sp, #80	; 0x50
    84ca:	f7ff fd15 	bl	7ef8 <_get_digit>
    84ce:	f80b 0c01 	strb.w	r0, [fp, #-1]
    84d2:	e7f2      	b.n	84ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4ba>
		*buf = _get_digit(&fract, &digit_count);
    84d4:	a913      	add	r1, sp, #76	; 0x4c
    84d6:	a814      	add	r0, sp, #80	; 0x50
    84d8:	f7ff fd0e 	bl	7ef8 <_get_digit>
		if (*buf++ != '0') {
    84dc:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    84de:	bf18      	it	ne
    84e0:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (falt || (precision > 0)) {
    84e4:	ea59 0905 	orrs.w	r9, r9, r5
		*buf = _get_digit(&fract, &digit_count);
    84e8:	7038      	strb	r0, [r7, #0]
		if (falt || (precision > 0)) {
    84ea:	d004      	beq.n	84f6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4f6>
			*buf++ = '.';
    84ec:	232e      	movs	r3, #46	; 0x2e
    84ee:	f107 0b02 	add.w	fp, r7, #2
    84f2:	707b      	strb	r3, [r7, #1]
    84f4:	46a9      	mov	r9, r5
    84f6:	44d9      	add	r9, fp
    84f8:	e005      	b.n	8506 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x506>
			*buf++ = _get_digit(&fract, &digit_count);
    84fa:	a913      	add	r1, sp, #76	; 0x4c
    84fc:	a814      	add	r0, sp, #80	; 0x50
    84fe:	f7ff fcfb 	bl	7ef8 <_get_digit>
    8502:	f80b 0b01 	strb.w	r0, [fp], #1
		while (precision-- > 0) {
    8506:	45d9      	cmp	r9, fp
    8508:	d1f7      	bne.n	84fa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4fa>
	if (prune_zero) {
    850a:	f1b8 0f00 	cmp.w	r8, #0
    850e:	d007      	beq.n	8520 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x520>
		while (*--buf == '0')
    8510:	465b      	mov	r3, fp
    8512:	f81b 2d01 	ldrb.w	r2, [fp, #-1]!
    8516:	2a30      	cmp	r2, #48	; 0x30
    8518:	d0fa      	beq.n	8510 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x510>
		if (*buf != '.') {
    851a:	2a2e      	cmp	r2, #46	; 0x2e
    851c:	bf18      	it	ne
    851e:	469b      	movne	fp, r3
	if ((c == 'e') || (c == 'E')) {
    8520:	f024 0320 	bic.w	r3, r4, #32
    8524:	2b45      	cmp	r3, #69	; 0x45
    8526:	d116      	bne.n	8556 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x556>
		if (decexp < 0) {
    8528:	2e00      	cmp	r6, #0
			decexp = -decexp;
    852a:	bfba      	itte	lt
    852c:	4276      	neglt	r6, r6
			*buf++ = '-';
    852e:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
    8530:	232b      	movge	r3, #43	; 0x2b
		*buf++ = (char) ((decexp / 10) + '0');
    8532:	220a      	movs	r2, #10
    8534:	f88b 3001 	strb.w	r3, [fp, #1]
    8538:	fb96 f3f2 	sdiv	r3, r6, r2
		decexp %= 10;
    853c:	fb02 6613 	mls	r6, r2, r3, r6
		*buf++ = (char) ((decexp / 10) + '0');
    8540:	f103 0130 	add.w	r1, r3, #48	; 0x30
		*buf++ = (char) (decexp + '0');
    8544:	3630      	adds	r6, #48	; 0x30
		*buf++ = (char) c;
    8546:	f88b 4000 	strb.w	r4, [fp]
		*buf++ = (char) ((decexp / 10) + '0');
    854a:	f88b 1002 	strb.w	r1, [fp, #2]
		*buf++ = (char) (decexp + '0');
    854e:	f88b 6003 	strb.w	r6, [fp, #3]
    8552:	f10b 0b04 	add.w	fp, fp, #4
	*buf = 0;
    8556:	2300      	movs	r3, #0
	return buf - start;
    8558:	a818      	add	r0, sp, #96	; 0x60
	*buf = 0;
    855a:	f88b 3000 	strb.w	r3, [fp]
	return buf - start;
    855e:	ebab 0000 	sub.w	r0, fp, r0
    8562:	e67d      	b.n	8260 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x260>
				*int32ptr_temp = count;
    8564:	f85a 3b04 	ldr.w	r3, [sl], #4
    8568:	9a04      	ldr	r2, [sp, #16]
    856a:	601a      	str	r2, [r3, #0]
				break;
    856c:	e4f9      	b.n	7f62 <z_prf+0x22>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    856e:	f85a 1b04 	ldr.w	r1, [sl], #4
	if (alt_form) {
    8572:	f1b9 0f00 	cmp.w	r9, #0
    8576:	d020      	beq.n	85ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5ba>
		*buf++ = '0';
    8578:	2330      	movs	r3, #48	; 0x30
    857a:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
		if (!value) {
    857e:	bb49      	cbnz	r1, 85d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5d4>
			prefix = 0;
    8580:	3501      	adds	r5, #1
    8582:	9b02      	ldr	r3, [sp, #8]
			*buf++ = 0;
    8584:	f88d 1061 	strb.w	r1, [sp, #97]	; 0x61
			prefix = 0;
    8588:	bf18      	it	ne
    858a:	2320      	movne	r3, #32
    858c:	460f      	mov	r7, r1
    858e:	9302      	str	r3, [sp, #8]
				if (c < width) {
    8590:	9b03      	ldr	r3, [sp, #12]
    8592:	454b      	cmp	r3, r9
    8594:	dd7f      	ble.n	8696 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x696>
					if (fminus) {
    8596:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8598:	ac18      	add	r4, sp, #96	; 0x60
    859a:	2b00      	cmp	r3, #0
    859c:	d058      	beq.n	8650 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x650>
							buf[i] = ' ';
    859e:	2320      	movs	r3, #32
						for (i = c; i < width; i++)
    85a0:	9a03      	ldr	r2, [sp, #12]
							buf[i] = ' ';
    85a2:	f804 3009 	strb.w	r3, [r4, r9]
						for (i = c; i < width; i++)
    85a6:	f109 0901 	add.w	r9, r9, #1
    85aa:	454a      	cmp	r2, r9
    85ac:	d1f8      	bne.n	85a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5a0>
    85ae:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
    85b2:	4413      	add	r3, r2
    85b4:	ac18      	add	r4, sp, #96	; 0x60
    85b6:	461d      	mov	r5, r3
    85b8:	e069      	b.n	868e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x68e>
	if (alt_form) {
    85ba:	f10d 0b60 	add.w	fp, sp, #96	; 0x60
	return (buf - buf0) + _to_x(buf, value, 8, precision);
    85be:	4658      	mov	r0, fp
    85c0:	462b      	mov	r3, r5
    85c2:	2208      	movs	r2, #8
    85c4:	f7ff fc0c 	bl	7de0 <_to_x>
    85c8:	ae18      	add	r6, sp, #96	; 0x60
    85ca:	ebab 0b06 	sub.w	fp, fp, r6
    85ce:	4458      	add	r0, fp
			prefix = 0;
    85d0:	2700      	movs	r7, #0
    85d2:	e5c8      	b.n	8166 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x166>
		*buf++ = '0';
    85d4:	f10d 0b61 	add.w	fp, sp, #97	; 0x61
    85d8:	e7f1      	b.n	85be <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5be>
		*buf++ = '0';
    85da:	f647 0330 	movw	r3, #30768	; 0x7830
    85de:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
	len = _to_x(buf, value, 16, precision);
    85e2:	2210      	movs	r2, #16
    85e4:	2308      	movs	r3, #8
    85e6:	f85a 1b04 	ldr.w	r1, [sl], #4
    85ea:	f10d 0062 	add.w	r0, sp, #98	; 0x62
    85ee:	f7ff fbf7 	bl	7de0 <_to_x>
	return len + (buf - buf0);
    85f2:	3002      	adds	r0, #2
    85f4:	e7ec      	b.n	85d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5d0>
				if ((precision >= 0) && (precision < c)) {
    85f6:	2d00      	cmp	r5, #0
    85f8:	db02      	blt.n	8600 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x600>
    85fa:	45a9      	cmp	r9, r5
    85fc:	bfa8      	it	ge
    85fe:	46a9      	movge	r9, r5
				if (c > 0) {
    8600:	f1b9 0f00 	cmp.w	r9, #0
    8604:	f43f acad 	beq.w	7f62 <z_prf+0x22>
					memcpy(buf, cptr_temp, (size_t) c);
    8608:	464a      	mov	r2, r9
    860a:	a818      	add	r0, sp, #96	; 0x60
    860c:	f7ff fb84 	bl	7d18 <memcpy>
					need_justifying = true;
    8610:	e5d2      	b.n	81b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b8>
	return _to_x(buf, value, 10, precision);
    8612:	462b      	mov	r3, r5
    8614:	220a      	movs	r2, #10
    8616:	f85a 1b04 	ldr.w	r1, [sl], #4
    861a:	a818      	add	r0, sp, #96	; 0x60
    861c:	f7ff fbe0 	bl	7de0 <_to_x>
				if (precision != -1) {
    8620:	e7d6      	b.n	85d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5d0>
	if (alt_form) {
    8622:	ae18      	add	r6, sp, #96	; 0x60
    8624:	e55f      	b.n	80e6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe6>
		if (*buf >= 'a' && *buf <= 'z') {
    8626:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    862a:	2919      	cmp	r1, #25
			*buf += 'A' - 'a';
    862c:	bf9c      	itt	ls
    862e:	3b20      	subls	r3, #32
    8630:	f802 3c01 	strbls.w	r3, [r2, #-1]
    8634:	e55f      	b.n	80f6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf6>
				if ((*func)('%', dest) == EOF) {
    8636:	990d      	ldr	r1, [sp, #52]	; 0x34
    8638:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    863a:	4620      	mov	r0, r4
    863c:	4798      	blx	r3
    863e:	3001      	adds	r0, #1
    8640:	f43f ac9a 	beq.w	7f78 <z_prf+0x38>
				count++;
    8644:	9b04      	ldr	r3, [sp, #16]
    8646:	3301      	adds	r3, #1
    8648:	e485      	b.n	7f56 <z_prf+0x16>
    864a:	bf00      	nop
    864c:	33333332 	.word	0x33333332
						(void) memmove((buf + (width - c)), buf, (size_t) (c
    8650:	9b03      	ldr	r3, [sp, #12]
    8652:	eba3 0509 	sub.w	r5, r3, r9
    8656:	1960      	adds	r0, r4, r5
    8658:	f109 0201 	add.w	r2, r9, #1
    865c:	4621      	mov	r1, r4
    865e:	f7ff fb37 	bl	7cd0 <memmove>
							prefix = 0;
    8662:	9b02      	ldr	r3, [sp, #8]
    8664:	2b20      	cmp	r3, #32
    8666:	bf08      	it	eq
    8668:	2700      	moveq	r7, #0
						c = width - c + prefix;
    866a:	443d      	add	r5, r7
						for (i = prefix; i < c; i++)
    866c:	42af      	cmp	r7, r5
    866e:	da9e      	bge.n	85ae <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5ae>
							buf[i] = pad;
    8670:	9b02      	ldr	r3, [sp, #8]
    8672:	553b      	strb	r3, [r7, r4]
						for (i = prefix; i < c; i++)
    8674:	3701      	adds	r7, #1
    8676:	e7f9      	b.n	866c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x66c>
					if ((*func)(*cptr, dest) == EOF) {
    8678:	990d      	ldr	r1, [sp, #52]	; 0x34
    867a:	f814 0b01 	ldrb.w	r0, [r4], #1
    867e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8680:	4798      	blx	r3
    8682:	3001      	adds	r0, #1
    8684:	f43f ac78 	beq.w	7f78 <z_prf+0x38>
				for (cptr = buf; c > 0; c--, cptr++, count++) {
    8688:	9b04      	ldr	r3, [sp, #16]
    868a:	3301      	adds	r3, #1
    868c:	9304      	str	r3, [sp, #16]
    868e:	9b04      	ldr	r3, [sp, #16]
    8690:	42ab      	cmp	r3, r5
    8692:	d1f1      	bne.n	8678 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x678>
    8694:	e465      	b.n	7f62 <z_prf+0x22>
    8696:	f8cd 900c 	str.w	r9, [sp, #12]
    869a:	e788      	b.n	85ae <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5ae>
}
    869c:	b04d      	add	sp, #308	; 0x134
    869e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    86a2:	bf00      	nop

000086a4 <_stdout_hook_default>:
#include <misc/libc-hooks.h>
#include <syscall_handler.h>
#include <string.h>

static int _stdout_hook_default(int c)
{
    86a4:	b507      	push	{r0, r1, r2, lr}
    86a6:	4b07      	ldr	r3, [pc, #28]	; (86c4 <_stdout_hook_default+0x20>)
    86a8:	681a      	ldr	r2, [r3, #0]
    86aa:	9201      	str	r2, [sp, #4]
	(void)(c);  /* Prevent warning about unused argument */

	return EOF;
}
    86ac:	9a01      	ldr	r2, [sp, #4]
    86ae:	681b      	ldr	r3, [r3, #0]
    86b0:	429a      	cmp	r2, r3
    86b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    86b6:	d001      	beq.n	86bc <_stdout_hook_default+0x18>
    86b8:	f002 fcb0 	bl	b01c <_StackCheckHandler>
    86bc:	b003      	add	sp, #12
    86be:	f85d fb04 	ldr.w	pc, [sp], #4
    86c2:	bf00      	nop
    86c4:	200036b0 	.word	0x200036b0

000086c8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
    86c8:	b507      	push	{r0, r1, r2, lr}
    86ca:	4b07      	ldr	r3, [pc, #28]	; (86e8 <__stdout_hook_install+0x20>)
    86cc:	681a      	ldr	r2, [r3, #0]
    86ce:	9201      	str	r2, [sp, #4]
	_stdout_hook = hook;
    86d0:	4a06      	ldr	r2, [pc, #24]	; (86ec <__stdout_hook_install+0x24>)
    86d2:	6010      	str	r0, [r2, #0]
}
    86d4:	9a01      	ldr	r2, [sp, #4]
    86d6:	681b      	ldr	r3, [r3, #0]
    86d8:	429a      	cmp	r2, r3
    86da:	d001      	beq.n	86e0 <__stdout_hook_install+0x18>
    86dc:	f002 fc9e 	bl	b01c <_StackCheckHandler>
    86e0:	b003      	add	sp, #12
    86e2:	f85d fb04 	ldr.w	pc, [sp], #4
    86e6:	bf00      	nop
    86e8:	200036b0 	.word	0x200036b0
    86ec:	200036e0 	.word	0x200036e0

000086f0 <sprintf_out>:
	char *ptr;
	int len;
};

static int sprintf_out(int c, struct emitter *p)
{
    86f0:	b507      	push	{r0, r1, r2, lr}
    86f2:	4b0c      	ldr	r3, [pc, #48]	; (8724 <sprintf_out+0x34>)
    86f4:	681a      	ldr	r2, [r3, #0]
    86f6:	9201      	str	r2, [sp, #4]
	if (p->len > 1) { /* need to reserve a byte for EOS */
    86f8:	684a      	ldr	r2, [r1, #4]
    86fa:	2a01      	cmp	r2, #1
    86fc:	dd07      	ble.n	870e <sprintf_out+0x1e>
		*(p->ptr) = c;
    86fe:	680a      	ldr	r2, [r1, #0]
    8700:	7010      	strb	r0, [r2, #0]
		p->ptr += 1;
    8702:	680a      	ldr	r2, [r1, #0]
    8704:	3201      	adds	r2, #1
    8706:	600a      	str	r2, [r1, #0]
		p->len -= 1;
    8708:	684a      	ldr	r2, [r1, #4]
    870a:	3a01      	subs	r2, #1
    870c:	604a      	str	r2, [r1, #4]
	}
	return 0; /* indicate keep going so we get the total count */
}
    870e:	9a01      	ldr	r2, [sp, #4]
    8710:	681b      	ldr	r3, [r3, #0]
    8712:	429a      	cmp	r2, r3
    8714:	f04f 0000 	mov.w	r0, #0
    8718:	d001      	beq.n	871e <sprintf_out+0x2e>
    871a:	f002 fc7f 	bl	b01c <_StackCheckHandler>
    871e:	b003      	add	sp, #12
    8720:	f85d fb04 	ldr.w	pc, [sp], #4
    8724:	200036b0 	.word	0x200036b0

00008728 <snprintf>:

int snprintf(char *_MLIBC_RESTRICT s, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
    8728:	b40c      	push	{r2, r3}
    872a:	b510      	push	{r4, lr}
    872c:	4b0f      	ldr	r3, [pc, #60]	; (876c <snprintf+0x44>)
    872e:	b086      	sub	sp, #24
    8730:	681c      	ldr	r4, [r3, #0]
    8732:	9405      	str	r4, [sp, #20]
    8734:	9a08      	ldr	r2, [sp, #32]
    8736:	461c      	mov	r4, r3

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    8738:	b909      	cbnz	r1, 873e <snprintf+0x16>
		s = &dummy; /* write final NUL to dummy, can't change *s */
    873a:	f10d 0007 	add.w	r0, sp, #7
	}

	p.ptr = s;
	p.len = (int) len;
    873e:	e9cd 0103 	strd	r0, r1, [sp, #12]

	va_start(vargs, format);
    8742:	ab09      	add	r3, sp, #36	; 0x24
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    8744:	a903      	add	r1, sp, #12
    8746:	480a      	ldr	r0, [pc, #40]	; (8770 <snprintf+0x48>)
	va_start(vargs, format);
    8748:	9302      	str	r3, [sp, #8]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    874a:	f7ff fbf9 	bl	7f40 <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
    874e:	9b03      	ldr	r3, [sp, #12]
    8750:	2200      	movs	r2, #0
    8752:	701a      	strb	r2, [r3, #0]
	return r;
}
    8754:	9a05      	ldr	r2, [sp, #20]
    8756:	6823      	ldr	r3, [r4, #0]
    8758:	429a      	cmp	r2, r3
    875a:	d001      	beq.n	8760 <snprintf+0x38>
    875c:	f002 fc5e 	bl	b01c <_StackCheckHandler>
    8760:	b006      	add	sp, #24
    8762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8766:	b002      	add	sp, #8
    8768:	4770      	bx	lr
    876a:	bf00      	nop
    876c:	200036b0 	.word	0x200036b0
    8770:	000086f1 	.word	0x000086f1

00008774 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					struct device *port,
					u32_t pins)
{
    8774:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8776:	4c0d      	ldr	r4, [pc, #52]	; (87ac <gpio_fire_callbacks+0x38>)
    8778:	460f      	mov	r7, r1
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    877a:	6801      	ldr	r1, [r0, #0]
{
    877c:	4616      	mov	r6, r2
    877e:	6822      	ldr	r2, [r4, #0]
    8780:	9201      	str	r2, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    8782:	b159      	cbz	r1, 879c <gpio_fire_callbacks+0x28>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    8784:	680d      	ldr	r5, [r1, #0]
		if (cb->pin_mask & pins) {
    8786:	688b      	ldr	r3, [r1, #8]
    8788:	421e      	tst	r6, r3
    878a:	d003      	beq.n	8794 <gpio_fire_callbacks+0x20>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    878c:	684b      	ldr	r3, [r1, #4]
    878e:	4632      	mov	r2, r6
    8790:	4638      	mov	r0, r7
    8792:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    8794:	b115      	cbz	r5, 879c <gpio_fire_callbacks+0x28>
    8796:	4629      	mov	r1, r5
    8798:	682d      	ldr	r5, [r5, #0]
    879a:	e7f4      	b.n	8786 <gpio_fire_callbacks+0x12>
		}
	}
}
    879c:	9a01      	ldr	r2, [sp, #4]
    879e:	6823      	ldr	r3, [r4, #0]
    87a0:	429a      	cmp	r2, r3
    87a2:	d001      	beq.n	87a8 <gpio_fire_callbacks+0x34>
    87a4:	f002 fc3a 	bl	b01c <_StackCheckHandler>
    87a8:	b003      	add	sp, #12
    87aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    87ac:	200036b0 	.word	0x200036b0

000087b0 <gpio_nrfx_write>:
	return 0;
}

static int gpio_nrfx_write(struct device *port, int access_op,
			   u32_t pin, u32_t value)
{
    87b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    87b2:	4c14      	ldr	r4, [pc, #80]	; (8804 <gpio_nrfx_write+0x54>)
    87b4:	6825      	ldr	r5, [r4, #0]
    87b6:	9501      	str	r5, [sp, #4]
	return port->config->config_info;
    87b8:	6805      	ldr	r5, [r0, #0]
    87ba:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    87bc:	68ad      	ldr	r5, [r5, #8]
    87be:	69c0      	ldr	r0, [r0, #28]
    87c0:	682d      	ldr	r5, [r5, #0]
	struct gpio_nrfx_data *data = get_port_data(port);

	if (access_op == GPIO_ACCESS_BY_PORT) {
    87c2:	2901      	cmp	r1, #1
    87c4:	d10a      	bne.n	87dc <gpio_nrfx_write+0x2c>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
    87c6:	4058      	eors	r0, r3
}


__STATIC_INLINE void nrf_gpio_port_out_write(NRF_GPIO_Type * p_reg, uint32_t value)
{
    p_reg->OUT = value;
    87c8:	f8c5 0504 	str.w	r0, [r5, #1284]	; 0x504
			nrf_gpio_port_out_clear(reg, BIT(pin));
		}
	}

	return 0;
}
    87cc:	9a01      	ldr	r2, [sp, #4]
    87ce:	6823      	ldr	r3, [r4, #0]
    87d0:	429a      	cmp	r2, r3
    87d2:	f04f 0000 	mov.w	r0, #0
    87d6:	d012      	beq.n	87fe <gpio_nrfx_write+0x4e>
    87d8:	f002 fc20 	bl	b01c <_StackCheckHandler>
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
    87dc:	3300      	adds	r3, #0
    87de:	fa20 f002 	lsr.w	r0, r0, r2
    87e2:	f04f 0101 	mov.w	r1, #1
    87e6:	bf18      	it	ne
    87e8:	2301      	movne	r3, #1
    87ea:	f000 0001 	and.w	r0, r0, #1
    87ee:	4091      	lsls	r1, r2
    87f0:	4283      	cmp	r3, r0
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    87f2:	bf14      	ite	ne
    87f4:	f8c5 1508 	strne.w	r1, [r5, #1288]	; 0x508
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
    87f8:	f8c5 150c 	streq.w	r1, [r5, #1292]	; 0x50c
    87fc:	e7e6      	b.n	87cc <gpio_nrfx_write+0x1c>
}
    87fe:	b003      	add	sp, #12
    8800:	bd30      	pop	{r4, r5, pc}
    8802:	bf00      	nop
    8804:	200036b0 	.word	0x200036b0

00008808 <gpio_nrfx_read>:

static int gpio_nrfx_read(struct device *port, int access_op,
			  u32_t pin, u32_t *value)
{
    8808:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    880a:	4d11      	ldr	r5, [pc, #68]	; (8850 <gpio_nrfx_read+0x48>)
    880c:	682c      	ldr	r4, [r5, #0]
    880e:	9401      	str	r4, [sp, #4]
	return port->config->config_info;
    8810:	6804      	ldr	r4, [r0, #0]
	struct gpio_nrfx_data *data = get_port_data(port);

	u32_t dir = nrf_gpio_port_dir_read(reg);
	u32_t port_in = nrf_gpio_port_in_read(reg) & ~dir;
	u32_t port_out = nrf_gpio_port_out_read(reg) & dir;
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    8812:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8814:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    8816:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8818:	6826      	ldr	r6, [r4, #0]
    return p_reg->DIR;
    881a:	f8d6 7514 	ldr.w	r7, [r6, #1300]	; 0x514
    return p_reg->IN;
    881e:	f8d6 4510 	ldr.w	r4, [r6, #1296]	; 0x510
    return p_reg->OUT;
    8822:	f8d6 6504 	ldr.w	r6, [r6, #1284]	; 0x504
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    8826:	4060      	eors	r0, r4
    8828:	4074      	eors	r4, r6
    882a:	403c      	ands	r4, r7
    882c:	4060      	eors	r0, r4

	if (access_op == GPIO_ACCESS_BY_PORT) {
    882e:	2901      	cmp	r1, #1
		*value = port_val;
	} else {
		*value = (port_val & BIT(pin)) ? 1 : 0;
    8830:	bf1c      	itt	ne
    8832:	40d0      	lsrne	r0, r2
    8834:	f000 0001 	andne.w	r0, r0, #1
    8838:	6018      	str	r0, [r3, #0]
	}

	return 0;
}
    883a:	9a01      	ldr	r2, [sp, #4]
    883c:	682b      	ldr	r3, [r5, #0]
    883e:	429a      	cmp	r2, r3
    8840:	f04f 0000 	mov.w	r0, #0
    8844:	d001      	beq.n	884a <gpio_nrfx_read+0x42>
    8846:	f002 fbe9 	bl	b01c <_StackCheckHandler>
    884a:	b003      	add	sp, #12
    884c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    884e:	bf00      	nop
    8850:	200036b0 	.word	0x200036b0

00008854 <gpio_nrfx_manage_callback>:

static int gpio_nrfx_manage_callback(struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    8854:	b573      	push	{r0, r1, r4, r5, r6, lr}
    8856:	4e1a      	ldr	r6, [pc, #104]	; (88c0 <gpio_nrfx_manage_callback+0x6c>)
    8858:	6833      	ldr	r3, [r6, #0]
    885a:	9301      	str	r3, [sp, #4]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    885c:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_IS_EMPTY(slist)
    885e:	6818      	ldr	r0, [r3, #0]
	if (!sys_slist_is_empty(callbacks)) {
    8860:	b158      	cbz	r0, 887a <gpio_nrfx_manage_callback+0x26>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    8862:	2400      	movs	r4, #0
    8864:	4281      	cmp	r1, r0
    8866:	d118      	bne.n	889a <gpio_nrfx_manage_callback+0x46>
Z_GENLIST_REMOVE(slist, snode)
    8868:	6808      	ldr	r0, [r1, #0]
    886a:	b984      	cbnz	r4, 888e <gpio_nrfx_manage_callback+0x3a>
    886c:	685c      	ldr	r4, [r3, #4]
	list->head = node;
    886e:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    8870:	42a1      	cmp	r1, r4
    8872:	d100      	bne.n	8876 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    8874:	6058      	str	r0, [r3, #4]
	parent->next = child;
    8876:	2000      	movs	r0, #0
    8878:	6008      	str	r0, [r1, #0]
	if (set) {
    887a:	b99a      	cbnz	r2, 88a4 <gpio_nrfx_manage_callback+0x50>
	return 0;
    887c:	2000      	movs	r0, #0
				     callback, set);
}
    887e:	9a01      	ldr	r2, [sp, #4]
    8880:	6833      	ldr	r3, [r6, #0]
    8882:	429a      	cmp	r2, r3
    8884:	d019      	beq.n	88ba <gpio_nrfx_manage_callback+0x66>
    8886:	f002 fbc9 	bl	b01c <_StackCheckHandler>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    888a:	4628      	mov	r0, r5
    888c:	e7ea      	b.n	8864 <gpio_nrfx_manage_callback+0x10>
	parent->next = child;
    888e:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    8890:	6858      	ldr	r0, [r3, #4]
    8892:	4281      	cmp	r1, r0
	list->tail = node;
    8894:	bf08      	it	eq
    8896:	605c      	streq	r4, [r3, #4]
    8898:	e7ed      	b.n	8876 <gpio_nrfx_manage_callback+0x22>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    889a:	6805      	ldr	r5, [r0, #0]
	return node->next;
    889c:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    889e:	2d00      	cmp	r5, #0
    88a0:	d1f3      	bne.n	888a <gpio_nrfx_manage_callback+0x36>
			if (!set) {
    88a2:	b13a      	cbz	r2, 88b4 <gpio_nrfx_manage_callback+0x60>
Z_GENLIST_PREPEND(slist, snode)
    88a4:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
    88a6:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    88a8:	6858      	ldr	r0, [r3, #4]
	list->head = node;
    88aa:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    88ac:	2800      	cmp	r0, #0
    88ae:	d1e5      	bne.n	887c <gpio_nrfx_manage_callback+0x28>
	list->tail = node;
    88b0:	6059      	str	r1, [r3, #4]
    88b2:	e7e4      	b.n	887e <gpio_nrfx_manage_callback+0x2a>
				return -EINVAL;
    88b4:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    88b8:	e7e1      	b.n	887e <gpio_nrfx_manage_callback+0x2a>
}
    88ba:	b002      	add	sp, #8
    88bc:	bd70      	pop	{r4, r5, r6, pc}
    88be:	bf00      	nop
    88c0:	200036b0 	.word	0x200036b0

000088c4 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
    88c4:	b513      	push	{r0, r1, r4, lr}
    88c6:	4c0f      	ldr	r4, [pc, #60]	; (8904 <gpio_nrfx_init+0x40>)
	static bool gpio_initialized;

	if (!gpio_initialized) {
    88c8:	490f      	ldr	r1, [pc, #60]	; (8908 <gpio_nrfx_init+0x44>)
{
    88ca:	6822      	ldr	r2, [r4, #0]
    88cc:	9201      	str	r2, [sp, #4]
	if (!gpio_initialized) {
    88ce:	780a      	ldrb	r2, [r1, #0]
    88d0:	b96a      	cbnz	r2, 88ee <gpio_nrfx_init+0x2a>
		gpio_initialized = true;
    88d2:	2301      	movs	r3, #1
    88d4:	700b      	strb	r3, [r1, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ,
    88d6:	2006      	movs	r0, #6
    88d8:	2105      	movs	r1, #5
    88da:	f7fe fe83 	bl	75e4 <z_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ);
    88de:	2006      	movs	r0, #6
    88e0:	f7fe fe24 	bl	752c <z_arch_irq_enable>
    return ((uint32_t)NRF_GPIOTE + event);
}

__STATIC_INLINE void nrf_gpiote_int_enable(uint32_t mask)
{
    NRF_GPIOTE->INTENSET = mask;
    88e4:	4b09      	ldr	r3, [pc, #36]	; (890c <gpio_nrfx_init+0x48>)
    88e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    88ea:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    88ee:	9a01      	ldr	r2, [sp, #4]
    88f0:	6823      	ldr	r3, [r4, #0]
    88f2:	429a      	cmp	r2, r3
    88f4:	f04f 0000 	mov.w	r0, #0
    88f8:	d001      	beq.n	88fe <gpio_nrfx_init+0x3a>
    88fa:	f002 fb8f 	bl	b01c <_StackCheckHandler>
    88fe:	b002      	add	sp, #8
    8900:	bd10      	pop	{r4, pc}
    8902:	bf00      	nop
    8904:	200036b0 	.word	0x200036b0
    8908:	20001bcb 	.word	0x20001bcb
    890c:	40006000 	.word	0x40006000

00008910 <nrf_gpio_cfg_sense_set>:
{
    8910:	b513      	push	{r0, r1, r4, lr}
    8912:	4b10      	ldr	r3, [pc, #64]	; (8954 <nrf_gpio_cfg_sense_set+0x44>)
    if (*p_pin < P0_PIN_NUM)
    8914:	281f      	cmp	r0, #31
{
    8916:	681a      	ldr	r2, [r3, #0]
    8918:	9201      	str	r2, [sp, #4]
    if (*p_pin < P0_PIN_NUM)
    891a:	461a      	mov	r2, r3
        return NRF_P1;
    891c:	bf8a      	itet	hi
    891e:	4b0e      	ldrhi	r3, [pc, #56]	; (8958 <nrf_gpio_cfg_sense_set+0x48>)
        return NRF_P0;
    8920:	f04f 43a0 	movls.w	r3, #1342177280	; 0x50000000
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
    8924:	f000 001f 	andhi.w	r0, r0, #31
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
    8928:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    892c:	f8d0 4700 	ldr.w	r4, [r0, #1792]	; 0x700
    8930:	f424 3440 	bic.w	r4, r4, #196608	; 0x30000
    8934:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    8938:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    893c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    8940:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
    8944:	9901      	ldr	r1, [sp, #4]
    8946:	6813      	ldr	r3, [r2, #0]
    8948:	4299      	cmp	r1, r3
    894a:	d001      	beq.n	8950 <nrf_gpio_cfg_sense_set+0x40>
    894c:	f002 fb66 	bl	b01c <_StackCheckHandler>
    8950:	b002      	add	sp, #8
    8952:	bd10      	pop	{r4, pc}
    8954:	200036b0 	.word	0x200036b0
    8958:	50000300 	.word	0x50000300

0000895c <check_level_trigger_pins>:
{
    895c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    8960:	4e1b      	ldr	r6, [pc, #108]	; (89d0 <check_level_trigger_pins+0x74>)
	return port->config->config_info;
    8962:	6801      	ldr	r1, [r0, #0]
{
    8964:	6833      	ldr	r3, [r6, #0]
    8966:	9301      	str	r3, [sp, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
    8968:	6883      	ldr	r3, [r0, #8]
	return port->config->config_info;
    896a:	f8d1 8008 	ldr.w	r8, [r1, #8]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    896e:	69dd      	ldr	r5, [r3, #28]
	u32_t out = data->int_en & data->pin_int_en;
    8970:	e9d3 1402 	ldrd	r1, r4, [r3, #8]
    8974:	400c      	ands	r4, r1
	out &= ~data->trig_edge & ~data->double_edge;
    8976:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
    897a:	4301      	orrs	r1, r0
    897c:	ea24 0401 	bic.w	r4, r4, r1
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
    8980:	f8d8 1000 	ldr.w	r1, [r8]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    8984:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
    8986:	f8d1 1510 	ldr.w	r1, [r1, #1296]	; 0x510
    898a:	405d      	eors	r5, r3
    898c:	404d      	eors	r5, r1
	u32_t out = pin_states & level_pins;
    898e:	ea24 0505 	bic.w	r5, r4, r5
	u32_t bit = 1U << pin;
    8992:	2701      	movs	r7, #1
	u32_t pin = 0U;
    8994:	f04f 0900 	mov.w	r9, #0
	while (level_pins) {
    8998:	b934      	cbnz	r4, 89a8 <check_level_trigger_pins+0x4c>
}
    899a:	9a01      	ldr	r2, [sp, #4]
    899c:	6833      	ldr	r3, [r6, #0]
    899e:	429a      	cmp	r2, r3
    89a0:	4628      	mov	r0, r5
    89a2:	d012      	beq.n	89ca <check_level_trigger_pins+0x6e>
    89a4:	f002 fb3a 	bl	b01c <_StackCheckHandler>
		if (level_pins & bit) {
    89a8:	423c      	tst	r4, r7
    89aa:	d00a      	beq.n	89c2 <check_level_trigger_pins+0x66>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    89ac:	f898 3004 	ldrb.w	r3, [r8, #4]
    89b0:	f009 001f 	and.w	r0, r9, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    89b4:	2100      	movs	r1, #0
    89b6:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
    89ba:	f7ff ffa9 	bl	8910 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    89be:	ea24 0407 	bic.w	r4, r4, r7
		++pin;
    89c2:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
    89c6:	007f      	lsls	r7, r7, #1
    89c8:	e7e6      	b.n	8998 <check_level_trigger_pins+0x3c>
}
    89ca:	b003      	add	sp, #12
    89cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    89d0:	200036b0 	.word	0x200036b0

000089d4 <cfg_level_pins>:
{
    89d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    89d8:	4e1a      	ldr	r6, [pc, #104]	; (8a44 <cfg_level_pins+0x70>)
	const struct gpio_nrfx_data *data = get_port_data(port);
    89da:	6885      	ldr	r5, [r0, #8]
{
    89dc:	6833      	ldr	r3, [r6, #0]
    89de:	9301      	str	r3, [sp, #4]
	return port->config->config_info;
    89e0:	6803      	ldr	r3, [r0, #0]
    89e2:	f8d3 9008 	ldr.w	r9, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
    89e6:	e9d5 3402 	ldrd	r3, r4, [r5, #8]
    89ea:	401c      	ands	r4, r3
	out &= ~data->trig_edge & ~data->double_edge;
    89ec:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
    89f0:	4313      	orrs	r3, r2
    89f2:	ea24 0403 	bic.w	r4, r4, r3
	u32_t bit = 1U << pin;
    89f6:	f04f 0801 	mov.w	r8, #1
	u32_t pin = 0U;
    89fa:	2700      	movs	r7, #0
	while (level_pins) {
    89fc:	b92c      	cbnz	r4, 8a0a <cfg_level_pins+0x36>
}
    89fe:	9a01      	ldr	r2, [sp, #4]
    8a00:	6833      	ldr	r3, [r6, #0]
    8a02:	429a      	cmp	r2, r3
    8a04:	d01b      	beq.n	8a3e <cfg_level_pins+0x6a>
    8a06:	f002 fb09 	bl	b01c <_StackCheckHandler>
		if (level_pins & bit) {
    8a0a:	ea18 0f04 	tst.w	r8, r4
    8a0e:	d012      	beq.n	8a36 <cfg_level_pins+0x62>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    8a10:	692b      	ldr	r3, [r5, #16]
    8a12:	69ea      	ldr	r2, [r5, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    8a14:	f899 c004 	ldrb.w	ip, [r9, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    8a18:	4053      	eors	r3, r2
    8a1a:	40fb      	lsrs	r3, r7
		return NRF_GPIO_PIN_SENSE_HIGH;
    8a1c:	f013 0f01 	tst.w	r3, #1
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    8a20:	f007 001f 	and.w	r0, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    8a24:	bf0c      	ite	eq
    8a26:	2103      	moveq	r1, #3
    8a28:	2102      	movne	r1, #2
    8a2a:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
    8a2e:	f7ff ff6f 	bl	8910 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    8a32:	ea24 0408 	bic.w	r4, r4, r8
		++pin;
    8a36:	3701      	adds	r7, #1
		bit <<= 1;
    8a38:	ea4f 0848 	mov.w	r8, r8, lsl #1
    8a3c:	e7de      	b.n	89fc <cfg_level_pins+0x28>
}
    8a3e:	b003      	add	sp, #12
    8a40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8a44:	200036b0 	.word	0x200036b0

00008a48 <gpiote_pin_int_cfg>:
{
    8a48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    8a4c:	4c56      	ldr	r4, [pc, #344]	; (8ba8 <gpiote_pin_int_cfg+0x160>)
	struct gpio_nrfx_data *data = get_port_data(port);
    8a4e:	6887      	ldr	r7, [r0, #8]
{
    8a50:	6823      	ldr	r3, [r4, #0]
    8a52:	9301      	str	r3, [sp, #4]
	return port->config->config_info;
    8a54:	6803      	ldr	r3, [r0, #0]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    8a56:	689b      	ldr	r3, [r3, #8]
    8a58:	f001 051f 	and.w	r5, r1, #31
    8a5c:	791b      	ldrb	r3, [r3, #4]
{
    8a5e:	460e      	mov	r6, r1
    NRF_GPIOTE->INTENCLR = mask;
}

__STATIC_INLINE uint32_t nrf_gpiote_int_is_enabled(uint32_t mask)
{
    return (NRF_GPIOTE->INTENSET & mask);
    8a60:	4952      	ldr	r1, [pc, #328]	; (8bac <gpiote_pin_int_cfg+0x164>)
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    8a62:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
    8a66:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    8a6a:	2200      	movs	r2, #0
    8a6c:	b2db      	uxtb	r3, r3
                              ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

__STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(uint32_t idx)
{
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    8a6e:	f502 70a2 	add.w	r0, r2, #324	; 0x144
    8a72:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    8a76:	f3c0 2005 	ubfx	r0, r0, #8, #6
		if ((nrf_gpiote_event_pin_get(i) == abs_pin)
    8a7a:	4285      	cmp	r5, r0
    8a7c:	d175      	bne.n	8b6a <gpiote_pin_int_cfg+0x122>
		    && (intenset & BIT(i))) {
    8a7e:	fa23 f002 	lsr.w	r0, r3, r2
    8a82:	07c0      	lsls	r0, r0, #31
    8a84:	d571      	bpl.n	8b6a <gpiote_pin_int_cfg+0x122>
   NRF_GPIOTE->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    8a86:	0093      	lsls	r3, r2, #2
    8a88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8a8c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    8a90:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    8a94:	f020 0001 	bic.w	r0, r0, #1
    8a98:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(BIT(i));
    8a9c:	2301      	movs	r3, #1
    8a9e:	fa03 f202 	lsl.w	r2, r3, r2
    NRF_GPIOTE->INTENCLR = mask;
    8aa2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    8aa6:	4628      	mov	r0, r5
    8aa8:	2100      	movs	r1, #0
    8aaa:	f7ff ff31 	bl	8910 <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    8aae:	68b8      	ldr	r0, [r7, #8]
    8ab0:	40f0      	lsrs	r0, r6
    8ab2:	f010 0001 	ands.w	r0, r0, #1
    8ab6:	d052      	beq.n	8b5e <gpiote_pin_int_cfg+0x116>
    8ab8:	68f8      	ldr	r0, [r7, #12]
    8aba:	40f0      	lsrs	r0, r6
    8abc:	f010 0001 	ands.w	r0, r0, #1
    8ac0:	d04d      	beq.n	8b5e <gpiote_pin_int_cfg+0x116>
		if (data->trig_edge & BIT(pin)) {
    8ac2:	6978      	ldr	r0, [r7, #20]
    8ac4:	40f0      	lsrs	r0, r6
    8ac6:	f010 0801 	ands.w	r8, r0, #1
    8aca:	d05b      	beq.n	8b84 <gpiote_pin_int_cfg+0x13c>
			if (data->double_edge & BIT(pin)) {
    8acc:	69bb      	ldr	r3, [r7, #24]
    8ace:	40f3      	lsrs	r3, r6
    8ad0:	07db      	lsls	r3, r3, #31
    8ad2:	d44f      	bmi.n	8b74 <gpiote_pin_int_cfg+0x12c>
			} else if (((data->active_level & BIT(pin)) != 0U)
    8ad4:	693b      	ldr	r3, [r7, #16]
    8ad6:	fa23 f206 	lsr.w	r2, r3, r6
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    8ada:	69fb      	ldr	r3, [r7, #28]
    8adc:	fa23 f606 	lsr.w	r6, r3, r6
			} else if (((data->active_level & BIT(pin)) != 0U)
    8ae0:	f006 0601 	and.w	r6, r6, #1
    8ae4:	f002 0301 	and.w	r3, r2, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
    8ae8:	42b3      	cmp	r3, r6
    8aea:	bf14      	ite	ne
    8aec:	2601      	movne	r6, #1
    8aee:	2602      	moveq	r6, #2
    NRF_GPIOTE->CONFIG[idx] = 0;
}

__STATIC_INLINE bool nrf_gpiote_te_is_enabled(uint32_t idx)
{
    return (NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
    8af0:	4f2e      	ldr	r7, [pc, #184]	; (8bac <gpiote_pin_int_cfg+0x164>)
    8af2:	2100      	movs	r1, #0
    8af4:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    8af8:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(channel)) {
    8afc:	f010 0003 	ands.w	r0, r0, #3
    8b00:	d13a      	bne.n	8b78 <gpiote_pin_int_cfg+0x130>
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    8b02:	008b      	lsls	r3, r1, #2
    8b04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8b08:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    8b0c:	022d      	lsls	r5, r5, #8
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    8b0e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    8b12:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
    8b16:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    8b1a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    8b1e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    8b22:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
    8b26:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    8b2a:	4316      	orrs	r6, r2
			nrf_gpiote_events_t evt =
    8b2c:	f101 0240 	add.w	r2, r1, #64	; 0x40
    8b30:	0092      	lsls	r2, r2, #2
    return ((uint32_t)NRF_GPIOTE + event);
    8b32:	b292      	uxth	r2, r2
    8b34:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    8b38:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    8b3c:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    8b40:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
    8b42:	6812      	ldr	r2, [r2, #0]
    8b44:	9200      	str	r2, [sp, #0]
    (void)dummy;
    8b46:	9a00      	ldr	r2, [sp, #0]
   NRF_GPIOTE->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    8b48:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    8b4c:	f042 0201 	orr.w	r2, r2, #1
    8b50:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
			nrf_gpiote_int_enable(BIT(channel));
    8b54:	2301      	movs	r3, #1
    8b56:	fa03 f101 	lsl.w	r1, r3, r1
    NRF_GPIOTE->INTENSET = mask;
    8b5a:	f8c7 1304 	str.w	r1, [r7, #772]	; 0x304
}
    8b5e:	9a01      	ldr	r2, [sp, #4]
    8b60:	6823      	ldr	r3, [r4, #0]
    8b62:	429a      	cmp	r2, r3
    8b64:	d01d      	beq.n	8ba2 <gpiote_pin_int_cfg+0x15a>
    8b66:	f002 fa59 	bl	b01c <_StackCheckHandler>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    8b6a:	3201      	adds	r2, #1
    8b6c:	2a08      	cmp	r2, #8
    8b6e:	f47f af7e 	bne.w	8a6e <gpiote_pin_int_cfg+0x26>
    8b72:	e798      	b.n	8aa6 <gpiote_pin_int_cfg+0x5e>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    8b74:	2603      	movs	r6, #3
    8b76:	e7bb      	b.n	8af0 <gpiote_pin_int_cfg+0xa8>
    8b78:	3101      	adds	r1, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    8b7a:	2908      	cmp	r1, #8
    8b7c:	d1ba      	bne.n	8af4 <gpiote_pin_int_cfg+0xac>
	return -ENODEV;
    8b7e:	f06f 0012 	mvn.w	r0, #18
    8b82:	e7ec      	b.n	8b5e <gpiote_pin_int_cfg+0x116>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    8b84:	693b      	ldr	r3, [r7, #16]
    8b86:	69fa      	ldr	r2, [r7, #28]
    8b88:	4053      	eors	r3, r2
    8b8a:	fa23 f606 	lsr.w	r6, r3, r6
		return NRF_GPIO_PIN_SENSE_HIGH;
    8b8e:	f016 0f01 	tst.w	r6, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    8b92:	4628      	mov	r0, r5
    8b94:	bf0c      	ite	eq
    8b96:	2103      	moveq	r1, #3
    8b98:	2102      	movne	r1, #2
    8b9a:	f7ff feb9 	bl	8910 <nrf_gpio_cfg_sense_set>
	int res = 0;
    8b9e:	4640      	mov	r0, r8
    8ba0:	e7dd      	b.n	8b5e <gpiote_pin_int_cfg+0x116>
}
    8ba2:	b002      	add	sp, #8
    8ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8ba8:	200036b0 	.word	0x200036b0
    8bac:	40006000 	.word	0x40006000

00008bb0 <gpio_nrfx_config>:
{
    8bb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8bb4:	461e      	mov	r6, r3
    8bb6:	4b4e      	ldr	r3, [pc, #312]	; (8cf0 <gpio_nrfx_config+0x140>)
    8bb8:	4680      	mov	r8, r0
    8bba:	6818      	ldr	r0, [r3, #0]
    8bbc:	9001      	str	r0, [sp, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    8bbe:	f406 4070 	and.w	r0, r6, #61440	; 0xf000
    8bc2:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
	struct gpio_nrfx_data *data = get_port_data(port);
    8bc6:	f8d8 5008 	ldr.w	r5, [r8, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    8bca:	4699      	mov	r9, r3
    8bcc:	d042      	beq.n	8c54 <gpio_nrfx_config+0xa4>
    8bce:	dc09      	bgt.n	8be4 <gpio_nrfx_config+0x34>
    8bd0:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    8bd4:	d040      	beq.n	8c58 <gpio_nrfx_config+0xa8>
    8bd6:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
    8bda:	d03f      	beq.n	8c5c <gpio_nrfx_config+0xac>
    8bdc:	b190      	cbz	r0, 8c04 <gpio_nrfx_config+0x54>
		return -EINVAL;
    8bde:	f06f 0015 	mvn.w	r0, #21
    8be2:	e030      	b.n	8c46 <gpio_nrfx_config+0x96>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    8be4:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
    8be8:	d03a      	beq.n	8c60 <gpio_nrfx_config+0xb0>
    8bea:	dc04      	bgt.n	8bf6 <gpio_nrfx_config+0x46>
    8bec:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
    8bf0:	d1f5      	bne.n	8bde <gpio_nrfx_config+0x2e>
		drive = NRF_GPIO_PIN_H0H1;
    8bf2:	2003      	movs	r0, #3
    8bf4:	e006      	b.n	8c04 <gpio_nrfx_config+0x54>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    8bf6:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
    8bfa:	d033      	beq.n	8c64 <gpio_nrfx_config+0xb4>
    8bfc:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
    8c00:	d1ed      	bne.n	8bde <gpio_nrfx_config+0x2e>
		drive = NRF_GPIO_PIN_H0D1;
    8c02:	2007      	movs	r0, #7
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    8c04:	f406 7740 	and.w	r7, r6, #768	; 0x300
    8c08:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
    8c0c:	d02c      	beq.n	8c68 <gpio_nrfx_config+0xb8>
		pull = NRF_GPIO_PIN_NOPULL;
    8c0e:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
    8c12:	4263      	negs	r3, r4
    8c14:	4163      	adcs	r3, r4
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
    8c16:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
    8c1a:	ea4f 074c 	mov.w	r7, ip, lsl #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    8c1e:	ea47 070c 	orr.w	r7, r7, ip
	if (access_op == GPIO_ACCESS_BY_PORT) {
    8c22:	2901      	cmp	r1, #1
    8c24:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
		from_pin = pin;
    8c28:	bf18      	it	ne
    8c2a:	b2d4      	uxtbne	r4, r2
    8c2c:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
        return NRF_P1;
    8c30:	4b30      	ldr	r3, [pc, #192]	; (8cf4 <gpio_nrfx_config+0x144>)
		to_pin   = pin;
    8c32:	bf12      	itee	ne
    8c34:	46a2      	movne	sl, r4
		to_pin   = 31U;
    8c36:	f04f 0a1f 	moveq.w	sl, #31
		from_pin = 0U;
    8c3a:	2400      	moveq	r4, #0
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    8c3c:	f04f 0b01 	mov.w	fp, #1
    8c40:	45a2      	cmp	sl, r4
    8c42:	d213      	bcs.n	8c6c <gpio_nrfx_config+0xbc>
	return 0;
    8c44:	2000      	movs	r0, #0
}
    8c46:	9a01      	ldr	r2, [sp, #4]
    8c48:	f8d9 3000 	ldr.w	r3, [r9]
    8c4c:	429a      	cmp	r2, r3
    8c4e:	d04b      	beq.n	8ce8 <gpio_nrfx_config+0x138>
    8c50:	f002 f9e4 	bl	b01c <_StackCheckHandler>
		drive = NRF_GPIO_PIN_S0H1;
    8c54:	2002      	movs	r0, #2
    8c56:	e7d5      	b.n	8c04 <gpio_nrfx_config+0x54>
		drive = NRF_GPIO_PIN_H0S1;
    8c58:	2001      	movs	r0, #1
    8c5a:	e7d3      	b.n	8c04 <gpio_nrfx_config+0x54>
		drive = NRF_GPIO_PIN_D0S1;
    8c5c:	2004      	movs	r0, #4
    8c5e:	e7d1      	b.n	8c04 <gpio_nrfx_config+0x54>
		drive = NRF_GPIO_PIN_D0H1;
    8c60:	2005      	movs	r0, #5
    8c62:	e7cf      	b.n	8c04 <gpio_nrfx_config+0x54>
		drive = NRF_GPIO_PIN_S0D1;
    8c64:	2006      	movs	r0, #6
    8c66:	e7cd      	b.n	8c04 <gpio_nrfx_config+0x54>
		pull = NRF_GPIO_PIN_PULLUP;
    8c68:	2303      	movs	r3, #3
    8c6a:	e7d4      	b.n	8c16 <gpio_nrfx_config+0x66>
	return port->config->config_info;
    8c6c:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
    8c70:	6892      	ldr	r2, [r2, #8]
    8c72:	7911      	ldrb	r1, [r2, #4]
    8c74:	f004 021f 	and.w	r2, r4, #31
    8c78:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    if (*p_pin < P0_PIN_NUM)
    8c7c:	2a1f      	cmp	r2, #31
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
    8c7e:	bfc6      	itte	gt
    8c80:	f002 021f 	andgt.w	r2, r2, #31
        return NRF_P1;
    8c84:	4619      	movgt	r1, r3
        return NRF_P0;
    8c86:	f04f 41a0 	movle.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    8c8a:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    8c8e:	07b3      	lsls	r3, r6, #30
    8c90:	f841 7022 	str.w	r7, [r1, r2, lsl #2]
    8c94:	68a9      	ldr	r1, [r5, #8]
    8c96:	fa0b f204 	lsl.w	r2, fp, r4
    8c9a:	bf4c      	ite	mi
    8c9c:	4311      	orrmi	r1, r2
    8c9e:	4391      	bicpl	r1, r2
    8ca0:	60a9      	str	r1, [r5, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
    8ca2:	6969      	ldr	r1, [r5, #20]
    8ca4:	06b0      	lsls	r0, r6, #26
    8ca6:	bf4c      	ite	mi
    8ca8:	4311      	orrmi	r1, r2
    8caa:	4391      	bicpl	r1, r2
    8cac:	6169      	str	r1, [r5, #20]
		WRITE_BIT(data->double_edge, curr_pin,
    8cae:	69a9      	ldr	r1, [r5, #24]
    8cb0:	0673      	lsls	r3, r6, #25
    8cb2:	bf4c      	ite	mi
    8cb4:	4311      	orrmi	r1, r2
    8cb6:	4391      	bicpl	r1, r2
    8cb8:	61a9      	str	r1, [r5, #24]
		WRITE_BIT(data->active_level, curr_pin,
    8cba:	6929      	ldr	r1, [r5, #16]
    8cbc:	0770      	lsls	r0, r6, #29
    8cbe:	bf4c      	ite	mi
    8cc0:	4311      	orrmi	r1, r2
    8cc2:	4391      	bicpl	r1, r2
    8cc4:	6129      	str	r1, [r5, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
    8cc6:	69e9      	ldr	r1, [r5, #28]
    8cc8:	0633      	lsls	r3, r6, #24
    8cca:	bf4c      	ite	mi
    8ccc:	430a      	orrmi	r2, r1
    8cce:	ea21 0202 	bicpl.w	r2, r1, r2
    8cd2:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
    8cd4:	4621      	mov	r1, r4
    8cd6:	4640      	mov	r0, r8
    8cd8:	f7ff feb6 	bl	8a48 <gpiote_pin_int_cfg>
		if (res != 0) {
    8cdc:	2800      	cmp	r0, #0
    8cde:	d1b2      	bne.n	8c46 <gpio_nrfx_config+0x96>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    8ce0:	3401      	adds	r4, #1
    8ce2:	b2e4      	uxtb	r4, r4
    8ce4:	4b03      	ldr	r3, [pc, #12]	; (8cf4 <gpio_nrfx_config+0x144>)
    8ce6:	e7ab      	b.n	8c40 <gpio_nrfx_config+0x90>
}
    8ce8:	b003      	add	sp, #12
    8cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8cee:	bf00      	nop
    8cf0:	200036b0 	.word	0x200036b0
    8cf4:	50000300 	.word	0x50000300

00008cf8 <gpio_nrfx_pin_disable_callback>:
{
    8cf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    8cfc:	4d14      	ldr	r5, [pc, #80]	; (8d50 <gpio_nrfx_pin_disable_callback+0x58>)
	struct gpio_nrfx_data *data = get_port_data(port);
    8cfe:	6887      	ldr	r7, [r0, #8]
{
    8d00:	682b      	ldr	r3, [r5, #0]
    8d02:	9301      	str	r3, [sp, #4]
	if (access_op == GPIO_ACCESS_BY_PORT) {
    8d04:	2901      	cmp	r1, #1
		from_pin = pin;
    8d06:	bf18      	it	ne
    8d08:	b2d4      	uxtbne	r4, r2
{
    8d0a:	4680      	mov	r8, r0
		to_pin   = pin;
    8d0c:	bf12      	itee	ne
    8d0e:	4626      	movne	r6, r4
		to_pin   = 31U;
    8d10:	261f      	moveq	r6, #31
		from_pin = 0U;
    8d12:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
    8d14:	f04f 0901 	mov.w	r9, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    8d18:	42b4      	cmp	r4, r6
    8d1a:	d906      	bls.n	8d2a <gpio_nrfx_pin_disable_callback+0x32>
	return res;
    8d1c:	2000      	movs	r0, #0
}
    8d1e:	9a01      	ldr	r2, [sp, #4]
    8d20:	682b      	ldr	r3, [r5, #0]
    8d22:	429a      	cmp	r2, r3
    8d24:	d010      	beq.n	8d48 <gpio_nrfx_pin_disable_callback+0x50>
    8d26:	f002 f979 	bl	b01c <_StackCheckHandler>
		WRITE_BIT(data->int_en, curr_pin, enable);
    8d2a:	68fb      	ldr	r3, [r7, #12]
    8d2c:	fa09 f204 	lsl.w	r2, r9, r4
    8d30:	ea23 0302 	bic.w	r3, r3, r2
    8d34:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    8d36:	4621      	mov	r1, r4
    8d38:	4640      	mov	r0, r8
    8d3a:	f7ff fe85 	bl	8a48 <gpiote_pin_int_cfg>
		if (res != 0) {
    8d3e:	2800      	cmp	r0, #0
    8d40:	d1ed      	bne.n	8d1e <gpio_nrfx_pin_disable_callback+0x26>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    8d42:	3401      	adds	r4, #1
    8d44:	b2e4      	uxtb	r4, r4
    8d46:	e7e7      	b.n	8d18 <gpio_nrfx_pin_disable_callback+0x20>
}
    8d48:	b003      	add	sp, #12
    8d4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8d4e:	bf00      	nop
    8d50:	200036b0 	.word	0x200036b0

00008d54 <gpiote_event_handler>:
{
    8d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u32_t fired_triggers[GPIO_COUNT] = {0};
    8d58:	2700      	movs	r7, #0
{
    8d5a:	b086      	sub	sp, #24
	u32_t fired_triggers[GPIO_COUNT] = {0};
    8d5c:	e9cd 7703 	strd	r7, r7, [sp, #12]
    return (*(uint32_t *)nrf_gpiote_event_addr_get(event) == 0x1UL) ? true : false;
    8d60:	4e32      	ldr	r6, [pc, #200]	; (8e2c <gpiote_event_handler+0xd8>)
{
    8d62:	4c33      	ldr	r4, [pc, #204]	; (8e30 <gpiote_event_handler+0xdc>)
    8d64:	6835      	ldr	r5, [r6, #0]
    8d66:	6823      	ldr	r3, [r4, #0]
    8d68:	9305      	str	r3, [sp, #20]
	if (port_event) {
    8d6a:	2d01      	cmp	r5, #1
    8d6c:	d10b      	bne.n	8d86 <gpiote_event_handler+0x32>
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p0));
    8d6e:	4831      	ldr	r0, [pc, #196]	; (8e34 <gpiote_event_handler+0xe0>)
    8d70:	f7ff fdf4 	bl	895c <check_level_trigger_pins>
		fired_triggers[0] =
    8d74:	9003      	str	r0, [sp, #12]
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p1));
    8d76:	4830      	ldr	r0, [pc, #192]	; (8e38 <gpiote_event_handler+0xe4>)
    8d78:	f7ff fdf0 	bl	895c <check_level_trigger_pins>
		fired_triggers[1] =
    8d7c:	9004      	str	r0, [sp, #16]
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    8d7e:	6037      	str	r7, [r6, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
    8d80:	6833      	ldr	r3, [r6, #0]
    8d82:	9301      	str	r3, [sp, #4]
    (void)dummy;
    8d84:	9b01      	ldr	r3, [sp, #4]
    return (NRF_GPIOTE->INTENSET & mask);
    8d86:	4f2d      	ldr	r7, [pc, #180]	; (8e3c <gpiote_event_handler+0xe8>)
{
    8d88:	2300      	movs	r3, #0
		if (nrf_gpiote_int_is_enabled(BIT(i)) &&
    8d8a:	f04f 0c01 	mov.w	ip, #1
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    8d8e:	469e      	mov	lr, r3
    return (NRF_GPIOTE->INTENSET & mask);
    8d90:	f8d7 2304 	ldr.w	r2, [r7, #772]	; 0x304
    8d94:	fa0c f103 	lsl.w	r1, ip, r3
    8d98:	4211      	tst	r1, r2
    8d9a:	d01e      	beq.n	8dda <gpiote_event_handler+0x86>
    return ((uint32_t)NRF_GPIOTE + event);
    8d9c:	009a      	lsls	r2, r3, #2
    8d9e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    8da2:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
    8da6:	6811      	ldr	r1, [r2, #0]
    8da8:	2901      	cmp	r1, #1
    8daa:	d116      	bne.n	8dda <gpiote_event_handler+0x86>
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    8dac:	f503 70a2 	add.w	r0, r3, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    8db0:	f10d 0818 	add.w	r8, sp, #24
    8db4:	f857 6020 	ldr.w	r6, [r7, r0, lsl #2]
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    8db8:	f8c2 e000 	str.w	lr, [r2]
    8dbc:	f3c6 3040 	ubfx	r0, r6, #13, #1
    8dc0:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    8dc4:	f3c6 2604 	ubfx	r6, r6, #8, #5
    8dc8:	40b1      	lsls	r1, r6
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
    8dca:	6812      	ldr	r2, [r2, #0]
    8dcc:	f850 6c0c 	ldr.w	r6, [r0, #-12]
    8dd0:	9202      	str	r2, [sp, #8]
    8dd2:	4331      	orrs	r1, r6
    (void)dummy;
    8dd4:	9a02      	ldr	r2, [sp, #8]
    8dd6:	f840 1c0c 	str.w	r1, [r0, #-12]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    8dda:	3301      	adds	r3, #1
    8ddc:	2b08      	cmp	r3, #8
    8dde:	d1d7      	bne.n	8d90 <gpiote_event_handler+0x3c>
	if (fired_triggers[0]) {
    8de0:	9a03      	ldr	r2, [sp, #12]
    8de2:	b11a      	cbz	r2, 8dec <gpiote_event_handler+0x98>
	gpio_fire_callbacks(&get_port_data(port)->callbacks, port, pins);
    8de4:	4913      	ldr	r1, [pc, #76]	; (8e34 <gpiote_event_handler+0xe0>)
    8de6:	6888      	ldr	r0, [r1, #8]
    8de8:	f7ff fcc4 	bl	8774 <gpio_fire_callbacks>
	if (fired_triggers[1]) {
    8dec:	9a04      	ldr	r2, [sp, #16]
    8dee:	b12a      	cbz	r2, 8dfc <gpiote_event_handler+0xa8>
	gpio_fire_callbacks(&get_port_data(port)->callbacks, port, pins);
    8df0:	4b10      	ldr	r3, [pc, #64]	; (8e34 <gpiote_event_handler+0xe0>)
    8df2:	f103 010c 	add.w	r1, r3, #12
    8df6:	6958      	ldr	r0, [r3, #20]
    8df8:	f7ff fcbc 	bl	8774 <gpio_fire_callbacks>
	if (port_event) {
    8dfc:	2d01      	cmp	r5, #1
    8dfe:	d10e      	bne.n	8e1e <gpiote_event_handler+0xca>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p0));
    8e00:	480c      	ldr	r0, [pc, #48]	; (8e34 <gpiote_event_handler+0xe0>)
    8e02:	f7ff fde7 	bl	89d4 <cfg_level_pins>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
    8e06:	9a05      	ldr	r2, [sp, #20]
    8e08:	6823      	ldr	r3, [r4, #0]
    8e0a:	429a      	cmp	r2, r3
    8e0c:	d001      	beq.n	8e12 <gpiote_event_handler+0xbe>
}
    8e0e:	f002 f905 	bl	b01c <_StackCheckHandler>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
    8e12:	4809      	ldr	r0, [pc, #36]	; (8e38 <gpiote_event_handler+0xe4>)
}
    8e14:	b006      	add	sp, #24
    8e16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
    8e1a:	f7ff bddb 	b.w	89d4 <cfg_level_pins>
}
    8e1e:	9a05      	ldr	r2, [sp, #20]
    8e20:	6823      	ldr	r3, [r4, #0]
    8e22:	429a      	cmp	r2, r3
    8e24:	d1f3      	bne.n	8e0e <gpiote_event_handler+0xba>
    8e26:	b006      	add	sp, #24
    8e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8e2c:	4000617c 	.word	0x4000617c
    8e30:	200036b0 	.word	0x200036b0
    8e34:	20007784 	.word	0x20007784
    8e38:	20007790 	.word	0x20007790
    8e3c:	40006000 	.word	0x40006000

00008e40 <gpio_nrfx_pin_enable_callback>:
{
    8e40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    8e44:	4d13      	ldr	r5, [pc, #76]	; (8e94 <gpio_nrfx_pin_enable_callback+0x54>)
	struct gpio_nrfx_data *data = get_port_data(port);
    8e46:	6887      	ldr	r7, [r0, #8]
{
    8e48:	682b      	ldr	r3, [r5, #0]
    8e4a:	9301      	str	r3, [sp, #4]
	if (access_op == GPIO_ACCESS_BY_PORT) {
    8e4c:	2901      	cmp	r1, #1
		from_pin = pin;
    8e4e:	bf18      	it	ne
    8e50:	b2d4      	uxtbne	r4, r2
{
    8e52:	4680      	mov	r8, r0
		to_pin   = pin;
    8e54:	bf12      	itee	ne
    8e56:	4626      	movne	r6, r4
		to_pin   = 31U;
    8e58:	261f      	moveq	r6, #31
		from_pin = 0U;
    8e5a:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
    8e5c:	f04f 0901 	mov.w	r9, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    8e60:	42b4      	cmp	r4, r6
    8e62:	d906      	bls.n	8e72 <gpio_nrfx_pin_enable_callback+0x32>
	return res;
    8e64:	2000      	movs	r0, #0
}
    8e66:	9a01      	ldr	r2, [sp, #4]
    8e68:	682b      	ldr	r3, [r5, #0]
    8e6a:	429a      	cmp	r2, r3
    8e6c:	d00f      	beq.n	8e8e <gpio_nrfx_pin_enable_callback+0x4e>
    8e6e:	f002 f8d5 	bl	b01c <_StackCheckHandler>
		WRITE_BIT(data->int_en, curr_pin, enable);
    8e72:	68fb      	ldr	r3, [r7, #12]
    8e74:	fa09 f204 	lsl.w	r2, r9, r4
    8e78:	4313      	orrs	r3, r2
    8e7a:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    8e7c:	4621      	mov	r1, r4
    8e7e:	4640      	mov	r0, r8
    8e80:	f7ff fde2 	bl	8a48 <gpiote_pin_int_cfg>
		if (res != 0) {
    8e84:	2800      	cmp	r0, #0
    8e86:	d1ee      	bne.n	8e66 <gpio_nrfx_pin_enable_callback+0x26>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    8e88:	3401      	adds	r4, #1
    8e8a:	b2e4      	uxtb	r4, r4
    8e8c:	e7e8      	b.n	8e60 <gpio_nrfx_pin_enable_callback+0x20>
}
    8e8e:	b003      	add	sp, #12
    8e90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8e94:	200036b0 	.word	0x200036b0

00008e98 <uart_nrfx_err_check>:
	nrf_uart_task_trigger(uart0_addr, NRF_UART_TASK_STOPTX);
}

/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
    8e98:	b507      	push	{r0, r1, r2, lr}
    8e9a:	4b09      	ldr	r3, [pc, #36]	; (8ec0 <uart_nrfx_err_check+0x28>)
    8e9c:	681a      	ldr	r2, [r3, #0]
    8e9e:	9201      	str	r2, [sp, #4]

}

__STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8ea0:	4a08      	ldr	r2, [pc, #32]	; (8ec4 <uart_nrfx_err_check+0x2c>)
    8ea2:	6810      	ldr	r0, [r2, #0]
	u32_t error = 0U;

	if (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_ERROR)) {
    8ea4:	b118      	cbz	r0, 8eae <uart_nrfx_err_check+0x16>
    p_reg->INTENCLR = int_mask;
}

__STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    8ea6:	f8d2 035c 	ldr.w	r0, [r2, #860]	; 0x35c
    p_reg->ERRORSRC = errsrc_mask;
    8eaa:	f8c2 035c 	str.w	r0, [r2, #860]	; 0x35c
		/* register bitfields maps to the defines in uart.h */
		error = nrf_uart_errorsrc_get_and_clear(uart0_addr);
	}

	return error;
}
    8eae:	9a01      	ldr	r2, [sp, #4]
    8eb0:	681b      	ldr	r3, [r3, #0]
    8eb2:	429a      	cmp	r2, r3
    8eb4:	d001      	beq.n	8eba <uart_nrfx_err_check+0x22>
    8eb6:	f002 f8b1 	bl	b01c <_StackCheckHandler>
    8eba:	b003      	add	sp, #12
    8ebc:	f85d fb04 	ldr.w	pc, [sp], #4
    8ec0:	200036b0 	.word	0x200036b0
    8ec4:	40002124 	.word	0x40002124

00008ec8 <uart_nrfx_config_get>:

	return 0;
}

static int uart_nrfx_config_get(struct device *dev, struct uart_config *cfg)
{
    8ec8:	b507      	push	{r0, r1, r2, lr}
    8eca:	4b09      	ldr	r3, [pc, #36]	; (8ef0 <uart_nrfx_config_get+0x28>)
    8ecc:	460a      	mov	r2, r1
    8ece:	6819      	ldr	r1, [r3, #0]
    8ed0:	9101      	str	r1, [sp, #4]
	*cfg = get_dev_data(dev)->uart_config;
    8ed2:	6881      	ldr	r1, [r0, #8]
    8ed4:	c903      	ldmia	r1, {r0, r1}
    8ed6:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
}
    8eda:	9a01      	ldr	r2, [sp, #4]
    8edc:	681b      	ldr	r3, [r3, #0]
    8ede:	429a      	cmp	r2, r3
    8ee0:	f04f 0000 	mov.w	r0, #0
    8ee4:	d001      	beq.n	8eea <uart_nrfx_config_get+0x22>
    8ee6:	f002 f899 	bl	b01c <_StackCheckHandler>
    8eea:	b003      	add	sp, #12
    8eec:	f85d fb04 	ldr.w	pc, [sp], #4
    8ef0:	200036b0 	.word	0x200036b0

00008ef4 <uart_nrfx_configure>:
{
    8ef4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    8ef6:	4e51      	ldr	r6, [pc, #324]	; (903c <uart_nrfx_configure+0x148>)
    8ef8:	6832      	ldr	r2, [r6, #0]
    8efa:	9201      	str	r2, [sp, #4]
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    8efc:	794a      	ldrb	r2, [r1, #5]
    8efe:	2a01      	cmp	r2, #1
    8f00:	d120      	bne.n	8f44 <uart_nrfx_configure+0x50>
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    8f02:	798b      	ldrb	r3, [r1, #6]
    8f04:	2b03      	cmp	r3, #3
    8f06:	d11d      	bne.n	8f44 <uart_nrfx_configure+0x50>
	switch (cfg->flow_ctrl) {
    8f08:	79cc      	ldrb	r4, [r1, #7]
    8f0a:	b12c      	cbz	r4, 8f18 <uart_nrfx_configure+0x24>
    8f0c:	2c01      	cmp	r4, #1
    8f0e:	d119      	bne.n	8f44 <uart_nrfx_configure+0x50>
	return dev->config->config_info;
    8f10:	6803      	ldr	r3, [r0, #0]
		if (get_dev_config(dev)->rts_cts_pins_set) {
    8f12:	689b      	ldr	r3, [r3, #8]
    8f14:	781b      	ldrb	r3, [r3, #0]
    8f16:	b1ab      	cbz	r3, 8f44 <uart_nrfx_configure+0x50>
	switch (cfg->parity) {
    8f18:	790a      	ldrb	r2, [r1, #4]
    8f1a:	b112      	cbz	r2, 8f22 <uart_nrfx_configure+0x2e>
    8f1c:	2a02      	cmp	r2, #2
    8f1e:	d111      	bne.n	8f44 <uart_nrfx_configure+0x50>
		parity = NRF_UART_PARITY_INCLUDED;
    8f20:	220e      	movs	r2, #14
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    8f22:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
    8f24:	f647 2512 	movw	r5, #31250	; 0x7a12
    8f28:	42ab      	cmp	r3, r5
    8f2a:	d064      	beq.n	8ff6 <uart_nrfx_configure+0x102>
    8f2c:	d827      	bhi.n	8f7e <uart_nrfx_configure+0x8a>
    8f2e:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    8f32:	d063      	beq.n	8ffc <uart_nrfx_configure+0x108>
    8f34:	d812      	bhi.n	8f5c <uart_nrfx_configure+0x68>
    8f36:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    8f3a:	d061      	beq.n	9000 <uart_nrfx_configure+0x10c>
    8f3c:	d805      	bhi.n	8f4a <uart_nrfx_configure+0x56>
    8f3e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    8f42:	d060      	beq.n	9006 <uart_nrfx_configure+0x112>
		return -ENOTSUP;
    8f44:	f06f 0022 	mvn.w	r0, #34	; 0x22
    8f48:	e04f      	b.n	8fea <uart_nrfx_configure+0xf6>
	switch (baudrate) {
    8f4a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    8f4e:	d05d      	beq.n	900c <uart_nrfx_configure+0x118>
    8f50:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    8f54:	d1f6      	bne.n	8f44 <uart_nrfx_configure+0x50>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
    8f56:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    8f5a:	e03b      	b.n	8fd4 <uart_nrfx_configure+0xe0>
	switch (baudrate) {
    8f5c:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    8f60:	d057      	beq.n	9012 <uart_nrfx_configure+0x11e>
    8f62:	d804      	bhi.n	8f6e <uart_nrfx_configure+0x7a>
    8f64:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    8f68:	d1ec      	bne.n	8f44 <uart_nrfx_configure+0x50>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
    8f6a:	4b35      	ldr	r3, [pc, #212]	; (9040 <uart_nrfx_configure+0x14c>)
    8f6c:	e032      	b.n	8fd4 <uart_nrfx_configure+0xe0>
	switch (baudrate) {
    8f6e:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    8f72:	d051      	beq.n	9018 <uart_nrfx_configure+0x124>
    8f74:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    8f78:	d1e4      	bne.n	8f44 <uart_nrfx_configure+0x50>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
    8f7a:	4b32      	ldr	r3, [pc, #200]	; (9044 <uart_nrfx_configure+0x150>)
    8f7c:	e02a      	b.n	8fd4 <uart_nrfx_configure+0xe0>
	switch (baudrate) {
    8f7e:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    8f82:	d04b      	beq.n	901c <uart_nrfx_configure+0x128>
    8f84:	d811      	bhi.n	8faa <uart_nrfx_configure+0xb6>
    8f86:	f64d 25c0 	movw	r5, #56000	; 0xdac0
    8f8a:	42ab      	cmp	r3, r5
    8f8c:	d048      	beq.n	9020 <uart_nrfx_configure+0x12c>
    8f8e:	d804      	bhi.n	8f9a <uart_nrfx_configure+0xa6>
    8f90:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    8f94:	d1d6      	bne.n	8f44 <uart_nrfx_configure+0x50>
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
    8f96:	4b2c      	ldr	r3, [pc, #176]	; (9048 <uart_nrfx_configure+0x154>)
    8f98:	e01c      	b.n	8fd4 <uart_nrfx_configure+0xe0>
	switch (baudrate) {
    8f9a:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    8f9e:	d042      	beq.n	9026 <uart_nrfx_configure+0x132>
    8fa0:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    8fa4:	d1ce      	bne.n	8f44 <uart_nrfx_configure+0x50>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
    8fa6:	4b29      	ldr	r3, [pc, #164]	; (904c <uart_nrfx_configure+0x158>)
    8fa8:	e014      	b.n	8fd4 <uart_nrfx_configure+0xe0>
	switch (baudrate) {
    8faa:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    8fae:	d03c      	beq.n	902a <uart_nrfx_configure+0x136>
    8fb0:	d808      	bhi.n	8fc4 <uart_nrfx_configure+0xd0>
    8fb2:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    8fb6:	d03a      	beq.n	902e <uart_nrfx_configure+0x13a>
    8fb8:	4d25      	ldr	r5, [pc, #148]	; (9050 <uart_nrfx_configure+0x15c>)
    8fba:	42ab      	cmp	r3, r5
    8fbc:	d1c2      	bne.n	8f44 <uart_nrfx_configure+0x50>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
    8fbe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    8fc2:	e007      	b.n	8fd4 <uart_nrfx_configure+0xe0>
	switch (baudrate) {
    8fc4:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    8fc8:	d033      	beq.n	9032 <uart_nrfx_configure+0x13e>
    8fca:	4d22      	ldr	r5, [pc, #136]	; (9054 <uart_nrfx_configure+0x160>)
    8fcc:	42ab      	cmp	r3, r5
    8fce:	d1b9      	bne.n	8f44 <uart_nrfx_configure+0x50>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
    8fd0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
}

__STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type   * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    8fd4:	4d20      	ldr	r5, [pc, #128]	; (9058 <uart_nrfx_configure+0x164>)
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
    8fd6:	4322      	orrs	r2, r4
    p_reg->BAUDRATE = baudrate;
    8fd8:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
    8fdc:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
	get_dev_data(dev)->uart_config = *cfg;
    8fe0:	6883      	ldr	r3, [r0, #8]
    8fe2:	c903      	ldmia	r1, {r0, r1}
    8fe4:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
    8fe8:	2000      	movs	r0, #0
}
    8fea:	9a01      	ldr	r2, [sp, #4]
    8fec:	6833      	ldr	r3, [r6, #0]
    8fee:	429a      	cmp	r2, r3
    8ff0:	d021      	beq.n	9036 <uart_nrfx_configure+0x142>
    8ff2:	f002 f813 	bl	b01c <_StackCheckHandler>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
    8ff6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    8ffa:	e7eb      	b.n	8fd4 <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
    8ffc:	4b17      	ldr	r3, [pc, #92]	; (905c <uart_nrfx_configure+0x168>)
    8ffe:	e7e9      	b.n	8fd4 <uart_nrfx_configure+0xe0>
		nrf_baudrate = 0x00027000;
    9000:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    9004:	e7e6      	b.n	8fd4 <uart_nrfx_configure+0xe0>
		nrf_baudrate = 0x00014000;
    9006:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    900a:	e7e3      	b.n	8fd4 <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
    900c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    9010:	e7e0      	b.n	8fd4 <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
    9012:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
    9016:	e7dd      	b.n	8fd4 <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
    9018:	4b11      	ldr	r3, [pc, #68]	; (9060 <uart_nrfx_configure+0x16c>)
    901a:	e7db      	b.n	8fd4 <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
    901c:	4b11      	ldr	r3, [pc, #68]	; (9064 <uart_nrfx_configure+0x170>)
    901e:	e7d9      	b.n	8fd4 <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
    9020:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    9024:	e7d6      	b.n	8fd4 <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
    9026:	4b10      	ldr	r3, [pc, #64]	; (9068 <uart_nrfx_configure+0x174>)
    9028:	e7d4      	b.n	8fd4 <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
    902a:	4b10      	ldr	r3, [pc, #64]	; (906c <uart_nrfx_configure+0x178>)
    902c:	e7d2      	b.n	8fd4 <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
    902e:	4b10      	ldr	r3, [pc, #64]	; (9070 <uart_nrfx_configure+0x17c>)
    9030:	e7d0      	b.n	8fd4 <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
    9032:	4b10      	ldr	r3, [pc, #64]	; (9074 <uart_nrfx_configure+0x180>)
    9034:	e7ce      	b.n	8fd4 <uart_nrfx_configure+0xe0>
}
    9036:	b002      	add	sp, #8
    9038:	bd70      	pop	{r4, r5, r6, pc}
    903a:	bf00      	nop
    903c:	200036b0 	.word	0x200036b0
    9040:	00275000 	.word	0x00275000
    9044:	0075f000 	.word	0x0075f000
    9048:	009d5000 	.word	0x009d5000
    904c:	013a9000 	.word	0x013a9000
    9050:	0003d090 	.word	0x0003d090
    9054:	000f4240 	.word	0x000f4240
    9058:	40002000 	.word	0x40002000
    905c:	0013b000 	.word	0x0013b000
    9060:	004ea000 	.word	0x004ea000
    9064:	01d7e000 	.word	0x01d7e000
    9068:	00ebf000 	.word	0x00ebf000
    906c:	075f7000 	.word	0x075f7000
    9070:	03afb000 	.word	0x03afb000
    9074:	0ebed000 	.word	0x0ebed000

00009078 <uart_nrfx_poll_in>:
{
    9078:	b507      	push	{r0, r1, r2, lr}
    907a:	4b0d      	ldr	r3, [pc, #52]	; (90b0 <uart_nrfx_poll_in+0x38>)
    907c:	681a      	ldr	r2, [r3, #0]
    907e:	9201      	str	r2, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9080:	4a0c      	ldr	r2, [pc, #48]	; (90b4 <uart_nrfx_poll_in+0x3c>)
    9082:	6810      	ldr	r0, [r2, #0]
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
    9084:	b170      	cbz	r0, 90a4 <uart_nrfx_poll_in+0x2c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9086:	2000      	movs	r0, #0
    9088:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    908a:	6812      	ldr	r2, [r2, #0]
    908c:	9200      	str	r2, [sp, #0]
    (void)dummy;
    908e:	9a00      	ldr	r2, [sp, #0]
    return p_reg->RXD;
    9090:	4a09      	ldr	r2, [pc, #36]	; (90b8 <uart_nrfx_poll_in+0x40>)
    9092:	f8d2 2518 	ldr.w	r2, [r2, #1304]	; 0x518
    9096:	700a      	strb	r2, [r1, #0]
}
    9098:	9a01      	ldr	r2, [sp, #4]
    909a:	681b      	ldr	r3, [r3, #0]
    909c:	429a      	cmp	r2, r3
    909e:	d004      	beq.n	90aa <uart_nrfx_poll_in+0x32>
    90a0:	f001 ffbc 	bl	b01c <_StackCheckHandler>
		return -1;
    90a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    90a8:	e7f6      	b.n	9098 <uart_nrfx_poll_in+0x20>
}
    90aa:	b003      	add	sp, #12
    90ac:	f85d fb04 	ldr.w	pc, [sp], #4
    90b0:	200036b0 	.word	0x200036b0
    90b4:	40002108 	.word	0x40002108
    90b8:	40002000 	.word	0x40002000

000090bc <uart_nrfx_poll_out>:
{
    90bc:	b513      	push	{r0, r1, r4, lr}
    90be:	4a0e      	ldr	r2, [pc, #56]	; (90f8 <uart_nrfx_poll_out+0x3c>)
    90c0:	6813      	ldr	r3, [r2, #0]
    90c2:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    90c4:	4b0d      	ldr	r3, [pc, #52]	; (90fc <uart_nrfx_poll_out+0x40>)
    90c6:	2000      	movs	r0, #0
    90c8:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    90ca:	6818      	ldr	r0, [r3, #0]
    90cc:	9000      	str	r0, [sp, #0]
    (void)dummy;
    90ce:	9800      	ldr	r0, [sp, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    90d0:	480b      	ldr	r0, [pc, #44]	; (9100 <uart_nrfx_poll_out+0x44>)
    90d2:	2401      	movs	r4, #1
    90d4:	6004      	str	r4, [r0, #0]
    p_reg->TXD = txd;
    90d6:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    90da:	6819      	ldr	r1, [r3, #0]
	while (!event_txdrdy_check()) {
    90dc:	2900      	cmp	r1, #0
    90de:	d0fc      	beq.n	90da <uart_nrfx_poll_out+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    90e0:	4b08      	ldr	r3, [pc, #32]	; (9104 <uart_nrfx_poll_out+0x48>)
    90e2:	2101      	movs	r1, #1
    90e4:	6019      	str	r1, [r3, #0]
}
    90e6:	9901      	ldr	r1, [sp, #4]
    90e8:	6813      	ldr	r3, [r2, #0]
    90ea:	4299      	cmp	r1, r3
    90ec:	d001      	beq.n	90f2 <uart_nrfx_poll_out+0x36>
    90ee:	f001 ff95 	bl	b01c <_StackCheckHandler>
    90f2:	b002      	add	sp, #8
    90f4:	bd10      	pop	{r4, pc}
    90f6:	bf00      	nop
    90f8:	200036b0 	.word	0x200036b0
    90fc:	4000211c 	.word	0x4000211c
    9100:	40002008 	.word	0x40002008
    9104:	4000200c 	.word	0x4000200c

00009108 <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
    9108:	b573      	push	{r0, r1, r4, r5, r6, lr}
    910a:	4d1c      	ldr	r5, [pc, #112]	; (917c <uart_nrfx_init+0x74>)
    p_reg->PSEL.RXD = pselrxd;
    910c:	4c1c      	ldr	r4, [pc, #112]	; (9180 <uart_nrfx_init+0x78>)
    910e:	682b      	ldr	r3, [r5, #0]
    9110:	9301      	str	r3, [sp, #4]
    p_reg->OUTSET = set_mask;
    9112:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    9116:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    911a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    911e:	2103      	movs	r1, #3
    9120:	2200      	movs	r2, #0
    9122:	2613      	movs	r6, #19
    9124:	f8c3 1750 	str.w	r1, [r3, #1872]	; 0x750
    9128:	f8c3 274c 	str.w	r2, [r3, #1868]	; 0x74c
    912c:	f8c4 6514 	str.w	r6, [r4, #1300]	; 0x514
    p_reg->PSEL.TXD = pseltxd;
    9130:	2614      	movs	r6, #20
    9132:	f8c4 650c 	str.w	r6, [r4, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
    9136:	2620      	movs	r6, #32
    9138:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    913c:	f8c3 1714 	str.w	r1, [r3, #1812]	; 0x714
    9140:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
    p_reg->PSEL.RTS = pselrts;
    9144:	2305      	movs	r3, #5
    9146:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    914a:	2307      	movs	r3, #7
    914c:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
			       DT_NORDIC_NRF_UART_UART_0_RTS_PIN,
			       DT_NORDIC_NRF_UART_UART_0_CTS_PIN);
#endif

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    9150:	6881      	ldr	r1, [r0, #8]
    9152:	f7ff fecf 	bl	8ef4 <uart_nrfx_configure>
	if (err) {
    9156:	b948      	cbnz	r0, 916c <uart_nrfx_init+0x64>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
    9158:	2304      	movs	r3, #4
    915a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    915e:	4b09      	ldr	r3, [pc, #36]	; (9184 <uart_nrfx_init+0x7c>)
    9160:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    9162:	681b      	ldr	r3, [r3, #0]
    9164:	9300      	str	r3, [sp, #0]
    (void)dummy;
    9166:	9b00      	ldr	r3, [sp, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9168:	2301      	movs	r3, #1
    916a:	6023      	str	r3, [r4, #0]
	defined(DT_NORDIC_NRF_UART_UART_0_CTS_PIN)
	k_delayed_work_init(&uart0_cb.tx_timeout_work, tx_timeout);
#endif
#endif
	return 0;
}
    916c:	9a01      	ldr	r2, [sp, #4]
    916e:	682b      	ldr	r3, [r5, #0]
    9170:	429a      	cmp	r2, r3
    9172:	d001      	beq.n	9178 <uart_nrfx_init+0x70>
    9174:	f001 ff52 	bl	b01c <_StackCheckHandler>
    9178:	b002      	add	sp, #8
    917a:	bd70      	pop	{r4, r5, r6, pc}
    917c:	200036b0 	.word	0x200036b0
    9180:	40002000 	.word	0x40002000
    9184:	40002108 	.word	0x40002108

00009188 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static u16_t rng_pool_get(struct rng_pool *rngp, u8_t *buf, u16_t len)
{
    9188:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    918c:	4e29      	ldr	r6, [pc, #164]	; (9234 <rng_pool_get+0xac>)
	u32_t last  = rngp->last;
	u32_t mask  = rngp->mask;
    918e:	f890 c003 	ldrb.w	ip, [r0, #3]
{
    9192:	6833      	ldr	r3, [r6, #0]
    9194:	9301      	str	r3, [sp, #4]
	u32_t last  = rngp->last;
    9196:	7883      	ldrb	r3, [r0, #2]
    9198:	f04f 0520 	mov.w	r5, #32
    919c:	f3ef 8411 	mrs	r4, BASEPRI
    91a0:	f385 8811 	msr	BASEPRI, r5
    91a4:	f3bf 8f6f 	isb	sy
	u32_t first, available;
	u32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
    91a8:	7807      	ldrb	r7, [r0, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
    91aa:	f890 8001 	ldrb.w	r8, [r0, #1]

	available = (last - first) & mask;
    91ae:	1bdb      	subs	r3, r3, r7
    91b0:	ea03 030c 	and.w	r3, r3, ip
	if (available < len) {
    91b4:	429a      	cmp	r2, r3
		len = available;
    91b6:	bf88      	it	hi
    91b8:	b29a      	uxthhi	r2, r3

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
    91ba:	eb07 0e02 	add.w	lr, r7, r2
    91be:	ea0c 0e0e 	and.w	lr, ip, lr
	first = rngp->first_alloc;
    91c2:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
    91c4:	f880 e000 	strb.w	lr, [r0]
	__asm__ volatile(
    91c8:	f384 8811 	msr	BASEPRI, r4
    91cc:	f3bf 8f6f 	isb	sy
    91d0:	440a      	add	r2, r1
	u8_t *dst   = buf;
    91d2:	460c      	mov	r4, r1
	irq_unlock(key);

	while (likely(len--)) {
    91d4:	42a2      	cmp	r2, r4
    91d6:	d11f      	bne.n	9218 <rng_pool_get+0x90>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
    91d8:	4547      	cmp	r7, r8
    91da:	d10d      	bne.n	91f8 <rng_pool_get+0x70>
	__asm__ volatile(
    91dc:	f04f 0520 	mov.w	r5, #32
    91e0:	f3ef 8211 	mrs	r2, BASEPRI
    91e4:	f385 8811 	msr	BASEPRI, r5
    91e8:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
    91ec:	7805      	ldrb	r5, [r0, #0]
    91ee:	7045      	strb	r5, [r0, #1]
	__asm__ volatile(
    91f0:	f382 8811 	msr	BASEPRI, r2
    91f4:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
    91f8:	1a64      	subs	r4, r4, r1
    91fa:	b2a2      	uxth	r2, r4
	available = available - len;
	if (available <= rngp->threshold) {
    91fc:	7901      	ldrb	r1, [r0, #4]
	available = available - len;
    91fe:	1a9c      	subs	r4, r3, r2
	if (available <= rngp->threshold) {
    9200:	42a1      	cmp	r1, r4
    return (uint32_t *)((uint8_t *)NRF_RNG + rng_task);
}

__STATIC_INLINE void nrf_rng_task_trigger(nrf_rng_task_t rng_task)
{
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_task)) = NRF_RNG_TASK_SET;
    9202:	bf22      	ittt	cs
    9204:	4b0c      	ldrcs	r3, [pc, #48]	; (9238 <rng_pool_get+0xb0>)
    9206:	2101      	movcs	r1, #1
    9208:	6019      	strcs	r1, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG_TASK_START);
	}

	return len;
}
    920a:	4610      	mov	r0, r2
    920c:	9a01      	ldr	r2, [sp, #4]
    920e:	6833      	ldr	r3, [r6, #0]
    9210:	429a      	cmp	r2, r3
    9212:	d00b      	beq.n	922c <rng_pool_get+0xa4>
    9214:	f001 ff02 	bl	b01c <_StackCheckHandler>
		*dst++ = rngp->buffer[first];
    9218:	eb00 0e05 	add.w	lr, r0, r5
		first = (first + 1) & mask;
    921c:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
    921e:	f89e e005 	ldrb.w	lr, [lr, #5]
    9222:	f804 eb01 	strb.w	lr, [r4], #1
		first = (first + 1) & mask;
    9226:	ea05 050c 	and.w	r5, r5, ip
    922a:	e7d3      	b.n	91d4 <rng_pool_get+0x4c>
}
    922c:	b002      	add	sp, #8
    922e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9232:	bf00      	nop
    9234:	200036b0 	.word	0x200036b0
    9238:	4000d000 	.word	0x4000d000

0000923c <entropy_nrf5_get_entropy>:
		k_sem_give(&entropy_nrf5_data.sem_sync);
	}
}

static int entropy_nrf5_get_entropy(struct device *device, u8_t *buf, u16_t len)
{
    923c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    9240:	4f16      	ldr	r7, [pc, #88]	; (929c <entropy_nrf5_get_entropy+0x60>)
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    9242:	4d17      	ldr	r5, [pc, #92]	; (92a0 <entropy_nrf5_get_entropy+0x64>)
    9244:	4614      	mov	r4, r2
    9246:	683a      	ldr	r2, [r7, #0]
    9248:	9201      	str	r2, [sp, #4]
    924a:	4688      	mov	r8, r1

	while (len) {
		u16_t bytes;

		k_sem_take(&entropy_nrf5_data.sem_lock, K_FOREVER);
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
    924c:	f105 0935 	add.w	r9, r5, #53	; 0x35
    9250:	f105 0a10 	add.w	sl, r5, #16
	while (len) {
    9254:	b934      	cbnz	r4, 9264 <entropy_nrf5_get_entropy+0x28>
		len -= bytes;
		buf += bytes;
	}

	return 0;
}
    9256:	9a01      	ldr	r2, [sp, #4]
    9258:	683b      	ldr	r3, [r7, #0]
    925a:	429a      	cmp	r2, r3
    925c:	4620      	mov	r0, r4
    925e:	d01a      	beq.n	9296 <entropy_nrf5_get_entropy+0x5a>
    9260:	f001 fedc 	bl	b01c <_StackCheckHandler>
    9264:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9268:	4628      	mov	r0, r5
    926a:	f001 fcb1 	bl	abd0 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
    926e:	4622      	mov	r2, r4
    9270:	4641      	mov	r1, r8
    9272:	4648      	mov	r0, r9
    9274:	f7ff ff88 	bl	9188 <rng_pool_get>
    9278:	4606      	mov	r6, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    927a:	4628      	mov	r0, r5
    927c:	f001 fc76 	bl	ab6c <z_impl_k_sem_give>
		if (bytes == 0U) {
    9280:	b92e      	cbnz	r6, 928e <entropy_nrf5_get_entropy+0x52>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    9282:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9286:	4650      	mov	r0, sl
    9288:	f001 fca2 	bl	abd0 <z_impl_k_sem_take>
    928c:	e7e2      	b.n	9254 <entropy_nrf5_get_entropy+0x18>
		len -= bytes;
    928e:	1ba4      	subs	r4, r4, r6
    9290:	b2a4      	uxth	r4, r4
		buf += bytes;
    9292:	44b0      	add	r8, r6
    9294:	e7de      	b.n	9254 <entropy_nrf5_get_entropy+0x18>
}
    9296:	b002      	add	sp, #8
    9298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    929c:	200036b0 	.word	0x200036b0
    92a0:	20001778 	.word	0x20001778

000092a4 <random_byte_get>:
{
    92a4:	b513      	push	{r0, r1, r4, lr}
    92a6:	4b13      	ldr	r3, [pc, #76]	; (92f4 <random_byte_get+0x50>)
    92a8:	681a      	ldr	r2, [r3, #0]
    92aa:	9201      	str	r2, [sp, #4]
	__asm__ volatile(
    92ac:	f04f 0220 	mov.w	r2, #32
    92b0:	f3ef 8111 	mrs	r1, BASEPRI
    92b4:	f382 8811 	msr	BASEPRI, r2
    92b8:	f3bf 8f6f 	isb	sy
#endif
}

__STATIC_INLINE bool nrf_rng_event_get(nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
    92bc:	4a0e      	ldr	r2, [pc, #56]	; (92f8 <random_byte_get+0x54>)
    92be:	6810      	ldr	r0, [r2, #0]
	if (nrf_rng_event_get(NRF_RNG_EVENT_VALRDY)) {
    92c0:	b190      	cbz	r0, 92e8 <random_byte_get+0x44>
     NRF_RNG->SHORTS &= ~rng_short_mask;
}

__STATIC_INLINE uint8_t nrf_rng_random_value_get(void)
{
    return (uint8_t)(NRF_RNG->VALUE & RNG_VALUE_VALUE_Msk);
    92c2:	480e      	ldr	r0, [pc, #56]	; (92fc <random_byte_get+0x58>)
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event)) = NRF_RNG_EVENT_CLEAR;
    92c4:	2400      	movs	r4, #0
    return (uint8_t)(NRF_RNG->VALUE & RNG_VALUE_VALUE_Msk);
    92c6:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event)) = NRF_RNG_EVENT_CLEAR;
    92ca:	6014      	str	r4, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
    92cc:	6812      	ldr	r2, [r2, #0]
    92ce:	9200      	str	r2, [sp, #0]
    (void)dummy;
    92d0:	9a00      	ldr	r2, [sp, #0]
		retval = nrf_rng_random_value_get();
    92d2:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
    92d4:	f381 8811 	msr	BASEPRI, r1
    92d8:	f3bf 8f6f 	isb	sy
}
    92dc:	9a01      	ldr	r2, [sp, #4]
    92de:	681b      	ldr	r3, [r3, #0]
    92e0:	429a      	cmp	r2, r3
    92e2:	d004      	beq.n	92ee <random_byte_get+0x4a>
    92e4:	f001 fe9a 	bl	b01c <_StackCheckHandler>
	int retval = -EAGAIN;
    92e8:	f06f 000a 	mvn.w	r0, #10
    92ec:	e7f2      	b.n	92d4 <random_byte_get+0x30>
}
    92ee:	b002      	add	sp, #8
    92f0:	bd10      	pop	{r4, pc}
    92f2:	bf00      	nop
    92f4:	200036b0 	.word	0x200036b0
    92f8:	4000d100 	.word	0x4000d100
    92fc:	4000d000 	.word	0x4000d000

00009300 <entropy_nrf5_get_entropy_isr>:

static int entropy_nrf5_get_entropy_isr(struct device *dev, u8_t *buf, u16_t len,
					u32_t flags)
{
    9300:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9304:	4f27      	ldr	r7, [pc, #156]	; (93a4 <entropy_nrf5_get_entropy_isr+0xa4>)
	u16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
    9306:	07db      	lsls	r3, r3, #31
{
    9308:	683d      	ldr	r5, [r7, #0]
    930a:	9501      	str	r5, [sp, #4]
    930c:	4688      	mov	r8, r1
    930e:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
    9310:	d408      	bmi.n	9324 <entropy_nrf5_get_entropy_isr+0x24>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
    9312:	4825      	ldr	r0, [pc, #148]	; (93a8 <entropy_nrf5_get_entropy_isr+0xa8>)
    9314:	f7ff ff38 	bl	9188 <rng_pool_get>
			irq_enable(RNG_IRQn);
		}
	}

	return cnt;
}
    9318:	9a01      	ldr	r2, [sp, #4]
    931a:	683b      	ldr	r3, [r7, #0]
    931c:	429a      	cmp	r2, r3
    931e:	d03e      	beq.n	939e <entropy_nrf5_get_entropy_isr+0x9e>
    9320:	f001 fe7c 	bl	b01c <_StackCheckHandler>
	if (len) {
    9324:	2a00      	cmp	r2, #0
    9326:	d034      	beq.n	9392 <entropy_nrf5_get_entropy_isr+0x92>
	__asm__ volatile(
    9328:	f04f 0320 	mov.w	r3, #32
    932c:	f3ef 8511 	mrs	r5, BASEPRI
    9330:	f383 8811 	msr	BASEPRI, r3
    9334:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(RNG_IRQn);
    9338:	200d      	movs	r0, #13
    933a:	f7fe f937 	bl	75ac <z_arch_irq_is_enabled>
    933e:	4681      	mov	r9, r0
		irq_disable(RNG_IRQn);
    9340:	200d      	movs	r0, #13
    9342:	f7fe f911 	bl	7568 <z_arch_irq_disable>
	__asm__ volatile(
    9346:	f385 8811 	msr	BASEPRI, r5
    934a:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event)) = NRF_RNG_EVENT_CLEAR;
    934e:	4e17      	ldr	r6, [pc, #92]	; (93ac <entropy_nrf5_get_entropy_isr+0xac>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9350:	f8df a060 	ldr.w	sl, [pc, #96]	; 93b4 <entropy_nrf5_get_entropy_isr+0xb4>
    9354:	2200      	movs	r2, #0
    9356:	6032      	str	r2, [r6, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
    9358:	6832      	ldr	r2, [r6, #0]
    935a:	9200      	str	r2, [sp, #0]
    (void)dummy;
    935c:	9a00      	ldr	r2, [sp, #0]
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_task)) = NRF_RNG_TASK_SET;
    935e:	4a14      	ldr	r2, [pc, #80]	; (93b0 <entropy_nrf5_get_entropy_isr+0xb0>)
    9360:	2101      	movs	r1, #1
    9362:	6011      	str	r1, [r2, #0]
    9364:	4625      	mov	r5, r4
    9366:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
    return (bool) * ((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
    936a:	6833      	ldr	r3, [r6, #0]
			while (!nrf_rng_event_get(NRF_RNG_EVENT_VALRDY)) {
    936c:	b19b      	cbz	r3, 9396 <entropy_nrf5_get_entropy_isr+0x96>
			byte = random_byte_get();
    936e:	f7ff ff99 	bl	92a4 <random_byte_get>
			if (byte < 0) {
    9372:	2800      	cmp	r0, #0
    9374:	f8ca b180 	str.w	fp, [sl, #384]	; 0x180
    9378:	dbf7      	blt.n	936a <entropy_nrf5_get_entropy_isr+0x6a>
    937a:	3d01      	subs	r5, #1
    937c:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
    937e:	f808 0005 	strb.w	r0, [r8, r5]
		} while (len);
    9382:	2d00      	cmp	r5, #0
    9384:	d1f1      	bne.n	936a <entropy_nrf5_get_entropy_isr+0x6a>
		if (irq_enabled) {
    9386:	f1b9 0f00 	cmp.w	r9, #0
    938a:	d002      	beq.n	9392 <entropy_nrf5_get_entropy_isr+0x92>
			irq_enable(RNG_IRQn);
    938c:	200d      	movs	r0, #13
    938e:	f7fe f8cd 	bl	752c <z_arch_irq_enable>
	return cnt;
    9392:	4620      	mov	r0, r4
    9394:	e7c0      	b.n	9318 <entropy_nrf5_get_entropy_isr+0x18>
				__WFE();
    9396:	bf20      	wfe
				__SEV();
    9398:	bf40      	sev
				__WFE();
    939a:	bf20      	wfe
    939c:	e7e5      	b.n	936a <entropy_nrf5_get_entropy_isr+0x6a>
}
    939e:	b003      	add	sp, #12
    93a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    93a4:	200036b0 	.word	0x200036b0
    93a8:	20001798 	.word	0x20001798
    93ac:	4000d100 	.word	0x4000d100
    93b0:	4000d000 	.word	0x4000d000
    93b4:	e000e100 	.word	0xe000e100

000093b8 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
    93b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
    93ba:	4c1e      	ldr	r4, [pc, #120]	; (9434 <entropy_nrf5_init+0x7c>)
    93bc:	4e1e      	ldr	r6, [pc, #120]	; (9438 <entropy_nrf5_init+0x80>)
    93be:	2201      	movs	r2, #1
    93c0:	6833      	ldr	r3, [r6, #0]
    93c2:	9301      	str	r3, [sp, #4]
    93c4:	4611      	mov	r1, r2
    93c6:	4620      	mov	r0, r4
    93c8:	f001 fbbe 	bl	ab48 <z_impl_k_sem_init>
    93cc:	2201      	movs	r2, #1
    93ce:	2100      	movs	r1, #0
    93d0:	f104 0010 	add.w	r0, r4, #16
    93d4:	f001 fbb8 	bl	ab48 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
    93d8:	f240 4307 	movw	r3, #1031	; 0x407
    93dc:	8723      	strh	r3, [r4, #56]	; 0x38
	rngp->first_alloc = 0U;
    93de:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    93e2:	6223      	str	r3, [r4, #32]
	rngp->threshold	  = threshold;
    93e4:	230c      	movs	r3, #12
    93e6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rngp->first_alloc = 0U;
    93ea:	2500      	movs	r5, #0
    NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

__STATIC_INLINE void nrf_rng_error_correction_disable(void)
{
    NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
    93ec:	4b13      	ldr	r3, [pc, #76]	; (943c <entropy_nrf5_init+0x84>)
    93ee:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
	rngp->first_read  = 0U;
    93f2:	86e5      	strh	r5, [r4, #54]	; 0x36
    93f4:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    93f8:	f022 0201 	bic.w	r2, r2, #1
    93fc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event)) = NRF_RNG_EVENT_CLEAR;
    9400:	4a0f      	ldr	r2, [pc, #60]	; (9440 <entropy_nrf5_init+0x88>)
    9402:	6015      	str	r5, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
    9404:	6812      	ldr	r2, [r2, #0]
    9406:	9200      	str	r2, [sp, #0]
    (void)dummy;
    9408:	9a00      	ldr	r2, [sp, #0]
    NRF_RNG->INTENSET = rng_int_mask;
    940a:	2201      	movs	r2, #1
    940c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG_TASK_START);

	IRQ_CONNECT(RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr,
    9410:	2105      	movs	r1, #5
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_task)) = NRF_RNG_TASK_SET;
    9412:	601a      	str	r2, [r3, #0]
    9414:	200d      	movs	r0, #13
    9416:	462a      	mov	r2, r5
    9418:	f7fe f8e4 	bl	75e4 <z_irq_priority_set>
		    &entropy_nrf5_data, 0);
	irq_enable(RNG_IRQn);
    941c:	200d      	movs	r0, #13
    941e:	f7fe f885 	bl	752c <z_arch_irq_enable>

	return 0;
}
    9422:	9a01      	ldr	r2, [sp, #4]
    9424:	6833      	ldr	r3, [r6, #0]
    9426:	429a      	cmp	r2, r3
    9428:	4628      	mov	r0, r5
    942a:	d001      	beq.n	9430 <entropy_nrf5_init+0x78>
    942c:	f001 fdf6 	bl	b01c <_StackCheckHandler>
    9430:	b002      	add	sp, #8
    9432:	bd70      	pop	{r4, r5, r6, pc}
    9434:	20001778 	.word	0x20001778
    9438:	200036b0 	.word	0x200036b0
    943c:	4000d000 	.word	0x4000d000
    9440:	4000d100 	.word	0x4000d100

00009444 <isr>:
{
    9444:	b537      	push	{r0, r1, r2, r4, r5, lr}
    9446:	4c21      	ldr	r4, [pc, #132]	; (94cc <isr+0x88>)
    9448:	6823      	ldr	r3, [r4, #0]
    944a:	9301      	str	r3, [sp, #4]
	byte = random_byte_get();
    944c:	f7ff ff2a 	bl	92a4 <random_byte_get>
	if (byte < 0) {
    9450:	2800      	cmp	r0, #0
    9452:	4621      	mov	r1, r4
    9454:	db20      	blt.n	9498 <isr+0x54>
	u8_t last  = rngp->last;
    9456:	4b1e      	ldr	r3, [pc, #120]	; (94d0 <isr+0x8c>)
    9458:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
	if (((last - first) & mask) == mask) {
    945c:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
	u8_t mask  = rngp->mask;
    9460:	f893 5023 	ldrb.w	r5, [r3, #35]	; 0x23
	if (((last - first) & mask) == mask) {
    9464:	1b14      	subs	r4, r2, r4
    9466:	ea35 0404 	bics.w	r4, r5, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
    946a:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
    946c:	d10d      	bne.n	948a <isr+0x46>
	u8_t last  = rngp->last;
    946e:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
	if (((last - first) & mask) == mask) {
    9472:	f893 4036 	ldrb.w	r4, [r3, #54]	; 0x36
	u8_t mask  = rngp->mask;
    9476:	f893 5038 	ldrb.w	r5, [r3, #56]	; 0x38
	if (((last - first) & mask) == mask) {
    947a:	1b14      	subs	r4, r2, r4
    947c:	ea35 0404 	bics.w	r4, r5, r4
    9480:	d110      	bne.n	94a4 <isr+0x60>
    9482:	4b14      	ldr	r3, [pc, #80]	; (94d4 <isr+0x90>)
    9484:	2201      	movs	r2, #1
    9486:	601a      	str	r2, [r3, #0]
    9488:	e013      	b.n	94b2 <isr+0x6e>
	rngp->buffer[last] = byte;
    948a:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
    948c:	3201      	adds	r2, #1
    948e:	402a      	ands	r2, r5
	rngp->buffer[last] = byte;
    9490:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
	rngp->last = (last + 1) & mask;
    9494:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
    9498:	9a01      	ldr	r2, [sp, #4]
    949a:	680b      	ldr	r3, [r1, #0]
    949c:	429a      	cmp	r2, r3
    949e:	d10c      	bne.n	94ba <isr+0x76>
    94a0:	b003      	add	sp, #12
    94a2:	bd30      	pop	{r4, r5, pc}
	rngp->buffer[last] = byte;
    94a4:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
    94a6:	3201      	adds	r2, #1
    94a8:	402a      	ands	r2, r5
	rngp->buffer[last] = byte;
    94aa:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
	rngp->last = (last + 1) & mask;
    94ae:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    94b2:	9a01      	ldr	r2, [sp, #4]
    94b4:	680b      	ldr	r3, [r1, #0]
    94b6:	429a      	cmp	r2, r3
    94b8:	d001      	beq.n	94be <isr+0x7a>
}
    94ba:	f001 fdaf 	bl	b01c <_StackCheckHandler>
    94be:	4806      	ldr	r0, [pc, #24]	; (94d8 <isr+0x94>)
    94c0:	b003      	add	sp, #12
    94c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    94c6:	f001 bb51 	b.w	ab6c <z_impl_k_sem_give>
    94ca:	bf00      	nop
    94cc:	200036b0 	.word	0x200036b0
    94d0:	20001778 	.word	0x20001778
    94d4:	4000d004 	.word	0x4000d004
    94d8:	20001788 	.word	0x20001788

000094dc <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
    94dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    94de:	4d0e      	ldr	r5, [pc, #56]	; (9518 <z_sys_device_do_config_level+0x3c>)
    94e0:	682a      	ldr	r2, [r5, #0]
    94e2:	9201      	str	r2, [sp, #4]
		__device_APPLICATION_start,
		/* End marker */
		__device_init_end,
	};

	for (info = config_levels[level]; info < config_levels[level+1];
    94e4:	4a0d      	ldr	r2, [pc, #52]	; (951c <z_sys_device_do_config_level+0x40>)
    94e6:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
    94ea:	3001      	adds	r0, #1
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
    94ec:	2700      	movs	r7, #0
	for (info = config_levels[level]; info < config_levels[level+1];
    94ee:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
    94f2:	42a6      	cmp	r6, r4
    94f4:	d805      	bhi.n	9502 <z_sys_device_do_config_level+0x26>
		} else {
			z_object_init(info);
		}
	}
}
    94f6:	9a01      	ldr	r2, [sp, #4]
    94f8:	682b      	ldr	r3, [r5, #0]
    94fa:	429a      	cmp	r2, r3
    94fc:	d009      	beq.n	9512 <z_sys_device_do_config_level+0x36>
    94fe:	f001 fd8d 	bl	b01c <_StackCheckHandler>
		retval = device_conf->init(info);
    9502:	6823      	ldr	r3, [r4, #0]
    9504:	4620      	mov	r0, r4
    9506:	685b      	ldr	r3, [r3, #4]
    9508:	4798      	blx	r3
		if (retval != 0) {
    950a:	b100      	cbz	r0, 950e <z_sys_device_do_config_level+0x32>
			info->driver_api = NULL;
    950c:	6067      	str	r7, [r4, #4]
								info++) {
    950e:	340c      	adds	r4, #12
    9510:	e7ef      	b.n	94f2 <z_sys_device_do_config_level+0x16>
}
    9512:	b003      	add	sp, #12
    9514:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9516:	bf00      	nop
    9518:	200036b0 	.word	0x200036b0
    951c:	0000b814 	.word	0x0000b814

00009520 <z_impl_device_get_binding>:

struct device *z_impl_device_get_binding(const char *name)
{
    9520:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9522:	4d15      	ldr	r5, [pc, #84]	; (9578 <z_impl_device_get_binding+0x58>)
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    9524:	4b15      	ldr	r3, [pc, #84]	; (957c <z_impl_device_get_binding+0x5c>)
{
    9526:	682a      	ldr	r2, [r5, #0]
	for (info = __device_init_start; info != __device_init_end; info++) {
    9528:	4c15      	ldr	r4, [pc, #84]	; (9580 <z_impl_device_get_binding+0x60>)
{
    952a:	9201      	str	r2, [sp, #4]
    952c:	4606      	mov	r6, r0
    952e:	461f      	mov	r7, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    9530:	429c      	cmp	r4, r3
    9532:	d104      	bne.n	953e <z_impl_device_get_binding+0x1e>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    9534:	4c12      	ldr	r4, [pc, #72]	; (9580 <z_impl_device_get_binding+0x60>)
    9536:	42bc      	cmp	r4, r7
    9538:	d109      	bne.n	954e <z_impl_device_get_binding+0x2e>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
    953a:	2400      	movs	r4, #0
    953c:	e012      	b.n	9564 <z_impl_device_get_binding+0x44>
		if ((info->driver_api != NULL) &&
    953e:	6862      	ldr	r2, [r4, #4]
    9540:	b11a      	cbz	r2, 954a <z_impl_device_get_binding+0x2a>
		    (info->config->name == name)) {
    9542:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
    9544:	6812      	ldr	r2, [r2, #0]
    9546:	42b2      	cmp	r2, r6
    9548:	d00c      	beq.n	9564 <z_impl_device_get_binding+0x44>
	for (info = __device_init_start; info != __device_init_end; info++) {
    954a:	340c      	adds	r4, #12
    954c:	e7f0      	b.n	9530 <z_impl_device_get_binding+0x10>
		if (info->driver_api == NULL) {
    954e:	6863      	ldr	r3, [r4, #4]
    9550:	b90b      	cbnz	r3, 9556 <z_impl_device_get_binding+0x36>
	for (info = __device_init_start; info != __device_init_end; info++) {
    9552:	340c      	adds	r4, #12
    9554:	e7ef      	b.n	9536 <z_impl_device_get_binding+0x16>
		if (strcmp(name, info->config->name) == 0) {
    9556:	6823      	ldr	r3, [r4, #0]
    9558:	4630      	mov	r0, r6
    955a:	6819      	ldr	r1, [r3, #0]
    955c:	f7fe fb82 	bl	7c64 <strcmp>
    9560:	2800      	cmp	r0, #0
    9562:	d1f6      	bne.n	9552 <z_impl_device_get_binding+0x32>
}
    9564:	9a01      	ldr	r2, [sp, #4]
    9566:	682b      	ldr	r3, [r5, #0]
    9568:	429a      	cmp	r2, r3
    956a:	4620      	mov	r0, r4
    956c:	d001      	beq.n	9572 <z_impl_device_get_binding+0x52>
    956e:	f001 fd55 	bl	b01c <_StackCheckHandler>
    9572:	b003      	add	sp, #12
    9574:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9576:	bf00      	nop
    9578:	200036b0 	.word	0x200036b0
    957c:	200077c0 	.word	0x200077c0
    9580:	200076f4 	.word	0x200076f4

00009584 <z_sys_power_save_idle_exit>:
#endif
}
#endif

void z_sys_power_save_idle_exit(s32_t ticks)
{
    9584:	b507      	push	{r0, r1, r2, lr}
    9586:	4b07      	ldr	r3, [pc, #28]	; (95a4 <z_sys_power_save_idle_exit+0x20>)
    9588:	681a      	ldr	r2, [r3, #0]
    958a:	9201      	str	r2, [sp, #4]
	if (sys_pm_idle_exit_notify) {
		_sys_resume();
	}
#endif

	z_clock_idle_exit();
    958c:	9a01      	ldr	r2, [sp, #4]
    958e:	681b      	ldr	r3, [r3, #0]
    9590:	429a      	cmp	r2, r3
    9592:	d001      	beq.n	9598 <z_sys_power_save_idle_exit+0x14>
    9594:	f001 fd42 	bl	b01c <_StackCheckHandler>
}
    9598:	b003      	add	sp, #12
    959a:	f85d eb04 	ldr.w	lr, [sp], #4
	z_clock_idle_exit();
    959e:	f7fd bc69 	b.w	6e74 <z_clock_idle_exit>
    95a2:	bf00      	nop
    95a4:	200036b0 	.word	0x200036b0

000095a8 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    95a8:	b507      	push	{r0, r1, r2, lr}
    95aa:	4b0c      	ldr	r3, [pc, #48]	; (95dc <idle+0x34>)
	_kernel.idle = ticks;
    95ac:	4d0c      	ldr	r5, [pc, #48]	; (95e0 <idle+0x38>)
{
    95ae:	681b      	ldr	r3, [r3, #0]
    95b0:	9301      	str	r3, [sp, #4]
	__asm__ volatile(
    95b2:	f04f 0220 	mov.w	r2, #32
    95b6:	f3ef 8311 	mrs	r3, BASEPRI
    95ba:	f382 8811 	msr	BASEPRI, r2
    95be:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
    95c2:	f001 fe1d 	bl	b200 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    95c6:	2101      	movs	r1, #1
    95c8:	2802      	cmp	r0, #2
	s32_t ticks = z_get_next_timeout_expiry();
    95ca:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    95cc:	bfd8      	it	le
    95ce:	4608      	movle	r0, r1
    95d0:	f001 fe32 	bl	b238 <z_set_timeout_expiry>
	_kernel.idle = ticks;
    95d4:	622c      	str	r4, [r5, #32]
	k_cpu_idle();
    95d6:	f7fe f879 	bl	76cc <k_cpu_idle>
    95da:	e7ea      	b.n	95b2 <idle+0xa>
    95dc:	200036b0 	.word	0x200036b0
    95e0:	20001894 	.word	0x20001894

000095e4 <z_bss_zero>:
 * This routine clears the BSS region, so all bytes are 0.
 *
 * @return N/A
 */
void z_bss_zero(void)
{
    95e4:	b507      	push	{r0, r1, r2, lr}
    95e6:	4b09      	ldr	r3, [pc, #36]	; (960c <z_bss_zero+0x28>)
    95e8:	681a      	ldr	r2, [r3, #0]
    95ea:	9201      	str	r2, [sp, #4]
	(void)memset(&__bss_start, 0,
    95ec:	9a01      	ldr	r2, [sp, #4]
    95ee:	681b      	ldr	r3, [r3, #0]
    95f0:	429a      	cmp	r2, r3
    95f2:	d001      	beq.n	95f8 <z_bss_zero+0x14>
    95f4:	f001 fd12 	bl	b01c <_StackCheckHandler>
    95f8:	4805      	ldr	r0, [pc, #20]	; (9610 <z_bss_zero+0x2c>)
    95fa:	4a06      	ldr	r2, [pc, #24]	; (9614 <z_bss_zero+0x30>)
    95fc:	2100      	movs	r1, #0
    95fe:	1a12      	subs	r2, r2, r0
#endif	/* CONFIG_CODE_DATA_RELOCATION */
#ifdef CONFIG_COVERAGE_GCOV
	(void)memset(&__gcov_bss_start, 0,
		 ((u32_t) &__gcov_bss_end - (u32_t) &__gcov_bss_start));
#endif
}
    9600:	b003      	add	sp, #12
    9602:	f85d eb04 	ldr.w	lr, [sp], #4
	(void)memset(&__bss_start, 0,
    9606:	f7fe bbbd 	b.w	7d84 <memset>
    960a:	bf00      	nop
    960c:	200036b0 	.word	0x200036b0
    9610:	20000000 	.word	0x20000000
    9614:	20001bd0 	.word	0x20001bd0

00009618 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    9618:	b513      	push	{r0, r1, r4, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    961a:	4a0b      	ldr	r2, [pc, #44]	; (9648 <z_data_copy+0x30>)
{
    961c:	4c0b      	ldr	r4, [pc, #44]	; (964c <z_data_copy+0x34>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    961e:	480c      	ldr	r0, [pc, #48]	; (9650 <z_data_copy+0x38>)
{
    9620:	6823      	ldr	r3, [r4, #0]
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    9622:	490c      	ldr	r1, [pc, #48]	; (9654 <z_data_copy+0x3c>)
{
    9624:	9301      	str	r3, [sp, #4]
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    9626:	1a12      	subs	r2, r2, r0
    9628:	f7fe fb76 	bl	7d18 <memcpy>
		 ((u32_t) &__data_ram_end - (u32_t) &__data_ram_start));
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    962c:	9a01      	ldr	r2, [sp, #4]
    962e:	6823      	ldr	r3, [r4, #0]
    9630:	429a      	cmp	r2, r3
    9632:	d001      	beq.n	9638 <z_data_copy+0x20>
    9634:	f001 fcf2 	bl	b01c <_StackCheckHandler>
    9638:	4a07      	ldr	r2, [pc, #28]	; (9658 <z_data_copy+0x40>)
    963a:	4908      	ldr	r1, [pc, #32]	; (965c <z_data_copy+0x44>)
    963c:	4808      	ldr	r0, [pc, #32]	; (9660 <z_data_copy+0x48>)
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 ((u32_t) &_app_smem_end - (u32_t) &_app_smem_start));
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    963e:	b002      	add	sp, #8
    9640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    9644:	f7fe bb68 	b.w	7d18 <memcpy>
    9648:	200078cc 	.word	0x200078cc
    964c:	200036b0 	.word	0x200036b0
    9650:	200036b4 	.word	0x200036b4
    9654:	0000c4d8 	.word	0x0000c4d8
    9658:	00000000 	.word	0x00000000
    965c:	0000c4d8 	.word	0x0000c4d8
    9660:	20000000 	.word	0x20000000

00009664 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    9664:	b513      	push	{r0, r1, r4, lr}
    9666:	4c0e      	ldr	r4, [pc, #56]	; (96a0 <bg_thread_main+0x3c>)
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    9668:	2002      	movs	r0, #2
{
    966a:	6823      	ldr	r3, [r4, #0]
    966c:	9301      	str	r3, [sp, #4]
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    966e:	f7ff ff35 	bl	94dc <z_sys_device_do_config_level>
	if (boot_delay > 0 && IS_ENABLED(CONFIG_MULTITHREADING)) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
    9672:	480c      	ldr	r0, [pc, #48]	; (96a4 <bg_thread_main+0x40>)
    9674:	f7f7 fc06 	bl	e84 <printk>

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    9678:	2003      	movs	r0, #3
    967a:	f7ff ff2f 	bl	94dc <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
    967e:	f001 fc21 	bl	aec4 <z_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
    9682:	f7f6 ff01 	bl	488 <main>

	/* Mark nonessenrial since main() has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
    9686:	4a08      	ldr	r2, [pc, #32]	; (96a8 <bg_thread_main+0x44>)
    9688:	7b13      	ldrb	r3, [r2, #12]
    968a:	f023 0301 	bic.w	r3, r3, #1
    968e:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    9690:	9a01      	ldr	r2, [sp, #4]
    9692:	6823      	ldr	r3, [r4, #0]
    9694:	429a      	cmp	r2, r3
    9696:	d001      	beq.n	969c <bg_thread_main+0x38>
    9698:	f001 fcc0 	bl	b01c <_StackCheckHandler>
    969c:	b002      	add	sp, #8
    969e:	bd10      	pop	{r4, pc}
    96a0:	200036b0 	.word	0x200036b0
    96a4:	0000c48b 	.word	0x0000c48b
    96a8:	20001828 	.word	0x20001828

000096ac <z_early_boot_rand32_get>:
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
}
#endif /* CONFIG_MULTITHREADING */

u32_t z_early_boot_rand32_get(void)
{
    96ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
    96ae:	4e13      	ldr	r6, [pc, #76]	; (96fc <z_early_boot_rand32_get+0x50>)
    96b0:	4813      	ldr	r0, [pc, #76]	; (9700 <z_early_boot_rand32_get+0x54>)
    96b2:	6833      	ldr	r3, [r6, #0]
    96b4:	9301      	str	r3, [sp, #4]
    96b6:	f7ff ff33 	bl	9520 <z_impl_device_get_binding>
#ifdef CONFIG_ENTROPY_HAS_DRIVER
	struct device *entropy = device_get_binding(CONFIG_ENTROPY_NAME);
	int rc;
	u32_t retval;

	if (entropy == NULL) {
    96ba:	4604      	mov	r4, r0
    96bc:	b1c8      	cbz	r0, 96f2 <z_early_boot_rand32_get+0x46>
					  u32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->driver_api;

	if (unlikely(!api->get_entropy_isr)) {
    96be:	6843      	ldr	r3, [r0, #4]
    96c0:	685d      	ldr	r5, [r3, #4]
    96c2:	b975      	cbnz	r5, 96e2 <z_early_boot_rand32_get+0x36>
	return api->get_entropy(dev, buffer, length);
    96c4:	6863      	ldr	r3, [r4, #4]
    96c6:	2204      	movs	r2, #4
    96c8:	681b      	ldr	r3, [r3, #0]
    96ca:	4669      	mov	r1, sp
    96cc:	4620      	mov	r0, r4
    96ce:	4798      	blx	r3
		 */
		rc = entropy_get_entropy(entropy, (u8_t *)&retval,
					 sizeof(retval));
	}

	if (rc >= 0) {
    96d0:	2800      	cmp	r0, #0
    96d2:	db0e      	blt.n	96f2 <z_early_boot_rand32_get+0x46>
		return retval;
    96d4:	9800      	ldr	r0, [sp, #0]
	 * process to use any of them.  Ideally, only the path where entropy
	 * devices are available should be built, this is only a fallback for
	 * those devices without a HWRNG entropy driver.
	 */
	return sys_rand32_get();
}
    96d6:	9a01      	ldr	r2, [sp, #4]
    96d8:	6833      	ldr	r3, [r6, #0]
    96da:	429a      	cmp	r2, r3
    96dc:	d00c      	beq.n	96f8 <z_early_boot_rand32_get+0x4c>
    96de:	f001 fc9d 	bl	b01c <_StackCheckHandler>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
    96e2:	2301      	movs	r3, #1
    96e4:	2204      	movs	r2, #4
    96e6:	4669      	mov	r1, sp
    96e8:	47a8      	blx	r5
	if (rc == -ENOTSUP) {
    96ea:	f110 0f23 	cmn.w	r0, #35	; 0x23
    96ee:	d1ef      	bne.n	96d0 <z_early_boot_rand32_get+0x24>
    96f0:	e7e8      	b.n	96c4 <z_early_boot_rand32_get+0x18>
	return sys_rand32_get();
    96f2:	f7fc f859 	bl	57a8 <sys_rand32_get>
    96f6:	e7ee      	b.n	96d6 <z_early_boot_rand32_get+0x2a>
}
    96f8:	b002      	add	sp, #8
    96fa:	bd70      	pop	{r4, r5, r6, pc}
    96fc:	200036b0 	.word	0x200036b0
    9700:	0000bcdd 	.word	0x0000bcdd

00009704 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    9704:	b580      	push	{r7, lr}
    9706:	4d41      	ldr	r5, [pc, #260]	; (980c <z_cstart+0x108>)
    9708:	b0a2      	sub	sp, #136	; 0x88
    970a:	682b      	ldr	r3, [r5, #0]
    970c:	9321      	str	r3, [sp, #132]	; 0x84
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	if (IS_ENABLED(CONFIG_LOG)) {
		log_core_init();
    970e:	f7f9 fa57 	bl	2bc0 <log_core_init>
#if defined(CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT) && \
	defined(CONFIG_USERSPACE)
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack) +
			    CONFIG_ISR_STACK_SIZE - MPU_GUARD_ALIGN_AND_SIZE);
#else
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack) +
    9712:	4b3f      	ldr	r3, [pc, #252]	; (9810 <z_cstart+0x10c>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    9714:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    9718:	4b3e      	ldr	r3, [pc, #248]	; (9814 <z_cstart+0x110>)
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
    971a:	4e3f      	ldr	r6, [pc, #252]	; (9818 <z_cstart+0x114>)
    971c:	695a      	ldr	r2, [r3, #20]
    971e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    9722:	615a      	str	r2, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9724:	2400      	movs	r4, #0
    9726:	22e0      	movs	r2, #224	; 0xe0
    9728:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    972c:	77dc      	strb	r4, [r3, #31]
    972e:	761c      	strb	r4, [r3, #24]
    9730:	765c      	strb	r4, [r3, #25]
    9732:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    9734:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    9736:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
    973a:	625a      	str	r2, [r3, #36]	; 0x24

static ALWAYS_INLINE void kernel_arch_init(void)
{
	z_InterruptStackSetup();
	z_ExcSetup();
	z_FaultInit();
    973c:	f7fd fee0 	bl	7500 <z_FaultInit>
	z_CpuIdleInit();
    9740:	f7fd ffbe 	bl	76c0 <z_CpuIdleInit>
	struct k_thread dummy_thread = {
    9744:	ab06      	add	r3, sp, #24
    9746:	4621      	mov	r1, r4
    9748:	226c      	movs	r2, #108	; 0x6c
    974a:	4618      	mov	r0, r3
    974c:	f7fe fb1a 	bl	7d84 <memset>
    9750:	2701      	movs	r7, #1
	_current = &dummy_thread;
    9752:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    9754:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
    9756:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    975a:	f7ff febf 	bl	94dc <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    975e:	4638      	mov	r0, r7
    9760:	f7ff febc 	bl	94dc <z_sys_device_do_config_level>

#ifdef CONFIG_STACK_CANARIES
	__stack_chk_guard = z_early_boot_rand32_get();
    9764:	f7ff ffa2 	bl	96ac <z_early_boot_rand32_get>
    9768:	6028      	str	r0, [r5, #0]
	z_sched_init();
    976a:	f001 f8d9 	bl	a920 <z_sched_init>
	_kernel.ready_q.cache = _main_thread;
    976e:	4d2b      	ldr	r5, [pc, #172]	; (981c <z_cstart+0x118>)
	z_setup_new_thread(_main_thread, _main_stack,
    9770:	4b2b      	ldr	r3, [pc, #172]	; (9820 <z_cstart+0x11c>)
	_kernel.ready_q.cache = _main_thread;
    9772:	6275      	str	r5, [r6, #36]	; 0x24
	z_setup_new_thread(_main_thread, _main_stack,
    9774:	f44f 6280 	mov.w	r2, #1024	; 0x400
    9778:	e9cd 7304 	strd	r7, r3, [sp, #16]
    977c:	e9cd 4402 	strd	r4, r4, [sp, #8]
    9780:	e9cd 4400 	strd	r4, r4, [sp]
    9784:	4b27      	ldr	r3, [pc, #156]	; (9824 <z_cstart+0x120>)
    9786:	4928      	ldr	r1, [pc, #160]	; (9828 <z_cstart+0x124>)
    9788:	4628      	mov	r0, r5
    978a:	f001 fb0f 	bl	adac <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    978e:	7b6b      	ldrb	r3, [r5, #13]
    9790:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    9794:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9798:	736a      	strb	r2, [r5, #13]
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
    979a:	4634      	mov	r4, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    979c:	d104      	bne.n	97a8 <z_cstart+0xa4>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
    979e:	69ab      	ldr	r3, [r5, #24]
    97a0:	b913      	cbnz	r3, 97a8 <z_cstart+0xa4>
		z_add_thread_to_ready_q(thread);
    97a2:	4628      	mov	r0, r5
    97a4:	f000 fe10 	bl	a3c8 <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
    97a8:	4b20      	ldr	r3, [pc, #128]	; (982c <z_cstart+0x128>)
    97aa:	4e21      	ldr	r6, [pc, #132]	; (9830 <z_cstart+0x12c>)
    97ac:	9305      	str	r3, [sp, #20]
    97ae:	2201      	movs	r2, #1
    97b0:	230f      	movs	r3, #15
    97b2:	e9cd 3203 	strd	r3, r2, [sp, #12]
    97b6:	2300      	movs	r3, #0
    97b8:	f44f 72a0 	mov.w	r2, #320	; 0x140
    97bc:	491d      	ldr	r1, [pc, #116]	; (9834 <z_cstart+0x130>)
    97be:	9300      	str	r3, [sp, #0]
    97c0:	4630      	mov	r0, r6
    97c2:	e9cd 3301 	strd	r3, r3, [sp, #4]
    97c6:	4b1c      	ldr	r3, [pc, #112]	; (9838 <z_cstart+0x134>)
    97c8:	f001 faf0 	bl	adac <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    97cc:	7b73      	ldrb	r3, [r6, #13]
	_kernel.cpus[0].idle_thread = _idle_thread;
    97ce:	60e6      	str	r6, [r4, #12]
    97d0:	f023 0304 	bic.w	r3, r3, #4
    97d4:	7373      	strb	r3, [r6, #13]
	list->head = (sys_dnode_t *)list;
    97d6:	4b19      	ldr	r3, [pc, #100]	; (983c <z_cstart+0x138>)
	list->tail = (sys_dnode_t *)list;
    97d8:	e9c4 3306 	strd	r3, r3, [r4, #24]
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arch_configure_static_mpu_regions();
    97dc:	f7fe f8bc 	bl	7958 <z_arch_configure_static_mpu_regions>
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arch_configure_dynamic_mpu_regions(main_thread);
    97e0:	480e      	ldr	r0, [pc, #56]	; (981c <z_cstart+0x118>)
	_current = main_thread;
    97e2:	60a5      	str	r5, [r4, #8]
	z_arch_configure_dynamic_mpu_regions(main_thread);
    97e4:	f7fe f8e0 	bl	79a8 <z_arch_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    97e8:	4b0e      	ldr	r3, [pc, #56]	; (9824 <z_cstart+0x120>)
    97ea:	4a15      	ldr	r2, [pc, #84]	; (9840 <z_cstart+0x13c>)
    97ec:	4618      	mov	r0, r3
    97ee:	f382 8809 	msr	PSP, r2
    97f2:	b663      	cpsie	if
    97f4:	f04f 0100 	mov.w	r1, #0
    97f8:	f381 8811 	msr	BASEPRI, r1
    97fc:	f3bf 8f6f 	isb	sy
    9800:	2100      	movs	r1, #0
    9802:	2200      	movs	r2, #0
    9804:	2300      	movs	r3, #0
    9806:	f7f7 f8dd 	bl	9c4 <z_thread_entry>
	"bl z_thread_entry \n\t"   /* z_thread_entry(_main, 0, 0, 0); */
	:
	: "r" (_main), "r" (start_of_main_stack)
	);

	CODE_UNREACHABLE;
    980a:	bf00      	nop
    980c:	200036b0 	.word	0x200036b0
    9810:	20002e10 	.word	0x20002e10
    9814:	e000ed00 	.word	0xe000ed00
    9818:	20001894 	.word	0x20001894
    981c:	20001828 	.word	0x20001828
    9820:	0000b881 	.word	0x0000b881
    9824:	00009665 	.word	0x00009665
    9828:	200020d0 	.word	0x200020d0
    982c:	0000c4c0 	.word	0x0000c4c0
    9830:	200017bc 	.word	0x200017bc
    9834:	200024d0 	.word	0x200024d0
    9838:	000095a9 	.word	0x000095a9
    983c:	200018ac 	.word	0x200018ac
    9840:	200024d0 	.word	0x200024d0

00009844 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
    9844:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9846:	4a10      	ldr	r2, [pc, #64]	; (9888 <init_mem_slab_module+0x44>)
	ARG_UNUSED(dev);

	struct k_mem_slab *slab;

	for (slab = _k_mem_slab_list_start;
    9848:	4c10      	ldr	r4, [pc, #64]	; (988c <init_mem_slab_module+0x48>)
{
    984a:	6813      	ldr	r3, [r2, #0]
    984c:	9301      	str	r3, [sp, #4]
	for (slab = _k_mem_slab_list_start;
    984e:	4b10      	ldr	r3, [pc, #64]	; (9890 <init_mem_slab_module+0x4c>)
	slab->free_list = NULL;
    9850:	2500      	movs	r5, #0
	for (slab = _k_mem_slab_list_start;
    9852:	42a3      	cmp	r3, r4
    9854:	d307      	bcc.n	9866 <init_mem_slab_module+0x22>
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
    9856:	9901      	ldr	r1, [sp, #4]
    9858:	6813      	ldr	r3, [r2, #0]
    985a:	4299      	cmp	r1, r3
    985c:	f04f 0000 	mov.w	r0, #0
    9860:	d010      	beq.n	9884 <init_mem_slab_module+0x40>
    9862:	f001 fbdb 	bl	b01c <_StackCheckHandler>
	p = slab->buffer;
    9866:	6919      	ldr	r1, [r3, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
    9868:	689e      	ldr	r6, [r3, #8]
	slab->free_list = NULL;
    986a:	615d      	str	r5, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    986c:	2000      	movs	r0, #0
    986e:	42b0      	cmp	r0, r6
    9870:	d101      	bne.n	9876 <init_mem_slab_module+0x32>
	     slab++) {
    9872:	331c      	adds	r3, #28
    9874:	e7ed      	b.n	9852 <init_mem_slab_module+0xe>
		*(char **)p = slab->free_list;
    9876:	695f      	ldr	r7, [r3, #20]
    9878:	600f      	str	r7, [r1, #0]
		p += slab->block_size;
    987a:	68df      	ldr	r7, [r3, #12]
		slab->free_list = p;
    987c:	6159      	str	r1, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    987e:	3001      	adds	r0, #1
		p += slab->block_size;
    9880:	4439      	add	r1, r7
    9882:	e7f4      	b.n	986e <init_mem_slab_module+0x2a>
}
    9884:	b003      	add	sp, #12
    9886:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9888:	200036b0 	.word	0x200036b0
    988c:	200077c0 	.word	0x200077c0
    9890:	200077c0 	.word	0x200077c0

00009894 <k_mem_slab_init>:
SYS_INIT(init_mem_slab_module, PRE_KERNEL_1,
	 CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void k_mem_slab_init(struct k_mem_slab *slab, void *buffer,
		    size_t block_size, u32_t num_blocks)
{
    9894:	b573      	push	{r0, r1, r4, r5, r6, lr}
    9896:	4d0d      	ldr	r5, [pc, #52]	; (98cc <k_mem_slab_init+0x38>)
	__ASSERT((slab->block_size & (sizeof(void *) - 1)) == 0,
		 "block size not word aligned");

	slab->num_blocks = num_blocks;
	slab->block_size = block_size;
	slab->buffer = buffer;
    9898:	6101      	str	r1, [r0, #16]
{
    989a:	682c      	ldr	r4, [r5, #0]
    989c:	9401      	str	r4, [sp, #4]
	slab->num_used = 0U;
    989e:	2400      	movs	r4, #0
	slab->block_size = block_size;
    98a0:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->free_list = NULL;
    98a4:	e9c0 4405 	strd	r4, r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    98a8:	42a3      	cmp	r3, r4
    98aa:	d107      	bne.n	98bc <k_mem_slab_init+0x28>
	create_free_list(slab);
	z_waitq_init(&slab->wait_q);
	SYS_TRACING_OBJ_INIT(k_mem_slab, slab);

	z_object_init(slab);
}
    98ac:	9a01      	ldr	r2, [sp, #4]
    98ae:	682b      	ldr	r3, [r5, #0]
    98b0:	429a      	cmp	r2, r3
    98b2:	e9c0 0000 	strd	r0, r0, [r0]
    98b6:	d007      	beq.n	98c8 <k_mem_slab_init+0x34>
    98b8:	f001 fbb0 	bl	b01c <_StackCheckHandler>
		*(char **)p = slab->free_list;
    98bc:	6946      	ldr	r6, [r0, #20]
    98be:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    98c0:	3401      	adds	r4, #1
		slab->free_list = p;
    98c2:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    98c4:	4411      	add	r1, r2
    98c6:	e7ef      	b.n	98a8 <k_mem_slab_init+0x14>
}
    98c8:	b002      	add	sp, #8
    98ca:	bd70      	pop	{r4, r5, r6, pc}
    98cc:	200036b0 	.word	0x200036b0

000098d0 <k_mem_slab_alloc>:

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
    98d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    98d2:	4c18      	ldr	r4, [pc, #96]	; (9934 <k_mem_slab_alloc+0x64>)
    98d4:	4613      	mov	r3, r2
    98d6:	6822      	ldr	r2, [r4, #0]
    98d8:	9201      	str	r2, [sp, #4]
    98da:	460d      	mov	r5, r1
    98dc:	f04f 0220 	mov.w	r2, #32
    98e0:	f3ef 8111 	mrs	r1, BASEPRI
    98e4:	f382 8811 	msr	BASEPRI, r2
    98e8:	f3bf 8f6f 	isb	sy

	/* block size must be word aligned */
	__ASSERT((slab->block_size & (sizeof(void *) - 1)) == 0,
		 "block size not word aligned");

	if (slab->free_list != NULL) {
    98ec:	6942      	ldr	r2, [r0, #20]
    98ee:	b15a      	cbz	r2, 9908 <k_mem_slab_alloc+0x38>
		/* take a free block */
		*mem = slab->free_list;
    98f0:	602a      	str	r2, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
    98f2:	6813      	ldr	r3, [r2, #0]
    98f4:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    98f6:	6983      	ldr	r3, [r0, #24]
    98f8:	3301      	adds	r3, #1
    98fa:	6183      	str	r3, [r0, #24]
		result = 0;
    98fc:	2000      	movs	r0, #0
	__asm__ volatile(
    98fe:	f381 8811 	msr	BASEPRI, r1
    9902:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
    9906:	e00d      	b.n	9924 <k_mem_slab_alloc+0x54>
	} else if (timeout == K_NO_WAIT) {
    9908:	b91b      	cbnz	r3, 9912 <k_mem_slab_alloc+0x42>
		*mem = NULL;
    990a:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
    990c:	f06f 000b 	mvn.w	r0, #11
    9910:	e7f5      	b.n	98fe <k_mem_slab_alloc+0x2e>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    9912:	4602      	mov	r2, r0
    9914:	4808      	ldr	r0, [pc, #32]	; (9938 <k_mem_slab_alloc+0x68>)
    9916:	f000 ff27 	bl	a768 <z_pend_curr>
		if (result == 0) {
    991a:	b918      	cbnz	r0, 9924 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    991c:	4b07      	ldr	r3, [pc, #28]	; (993c <k_mem_slab_alloc+0x6c>)
    991e:	689b      	ldr	r3, [r3, #8]
    9920:	695b      	ldr	r3, [r3, #20]
    9922:	602b      	str	r3, [r5, #0]
}
    9924:	9a01      	ldr	r2, [sp, #4]
    9926:	6823      	ldr	r3, [r4, #0]
    9928:	429a      	cmp	r2, r3
    992a:	d001      	beq.n	9930 <k_mem_slab_alloc+0x60>
    992c:	f001 fb76 	bl	b01c <_StackCheckHandler>
    9930:	b003      	add	sp, #12
    9932:	bd30      	pop	{r4, r5, pc}
    9934:	200036b0 	.word	0x200036b0
    9938:	20001bcc 	.word	0x20001bcc
    993c:	20001894 	.word	0x20001894

00009940 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    9940:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    9944:	4d1e      	ldr	r5, [pc, #120]	; (99c0 <k_mem_slab_free+0x80>)
    9946:	682b      	ldr	r3, [r5, #0]
    9948:	9301      	str	r3, [sp, #4]
    994a:	4604      	mov	r4, r0
    994c:	460e      	mov	r6, r1
	__asm__ volatile(
    994e:	f04f 0320 	mov.w	r3, #32
    9952:	f3ef 8711 	mrs	r7, BASEPRI
    9956:	f383 8811 	msr	BASEPRI, r3
    995a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    995e:	f000 ff83 	bl	a868 <z_unpend_first_thread>

	if (pending_thread != NULL) {
    9962:	46a8      	mov	r8, r5
    9964:	b1c0      	cbz	r0, 9998 <k_mem_slab_free+0x58>
		z_set_thread_return_value_with_data(pending_thread, 0, *mem);
    9966:	6832      	ldr	r2, [r6, #0]
	thread->base.swap_data = data;
    9968:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    996a:	7b42      	ldrb	r2, [r0, #13]
}

static ALWAYS_INLINE void
z_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    996c:	2100      	movs	r1, #0
    996e:	06d2      	lsls	r2, r2, #27
    9970:	6681      	str	r1, [r0, #104]	; 0x68
    9972:	d103      	bne.n	997c <k_mem_slab_free+0x3c>
	if (z_is_thread_ready(thread)) {
    9974:	6983      	ldr	r3, [r0, #24]
    9976:	b90b      	cbnz	r3, 997c <k_mem_slab_free+0x3c>
		z_add_thread_to_ready_q(thread);
    9978:	f000 fd26 	bl	a3c8 <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
    997c:	9a01      	ldr	r2, [sp, #4]
    997e:	f8d8 3000 	ldr.w	r3, [r8]
    9982:	429a      	cmp	r2, r3
    9984:	d001      	beq.n	998a <k_mem_slab_free+0x4a>
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
    9986:	f001 fb49 	bl	b01c <_StackCheckHandler>
		z_reschedule(&lock, key);
    998a:	480e      	ldr	r0, [pc, #56]	; (99c4 <k_mem_slab_free+0x84>)
    998c:	4639      	mov	r1, r7
}
    998e:	b002      	add	sp, #8
    9990:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		z_reschedule(&lock, key);
    9994:	f000 bbea 	b.w	a16c <z_reschedule>
		**(char ***)mem = slab->free_list;
    9998:	6833      	ldr	r3, [r6, #0]
    999a:	6962      	ldr	r2, [r4, #20]
    999c:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
    999e:	6833      	ldr	r3, [r6, #0]
    99a0:	6163      	str	r3, [r4, #20]
		slab->num_used--;
    99a2:	69a3      	ldr	r3, [r4, #24]
    99a4:	3b01      	subs	r3, #1
    99a6:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    99a8:	f387 8811 	msr	BASEPRI, r7
    99ac:	f3bf 8f6f 	isb	sy
}
    99b0:	9a01      	ldr	r2, [sp, #4]
    99b2:	682b      	ldr	r3, [r5, #0]
    99b4:	429a      	cmp	r2, r3
    99b6:	d1e6      	bne.n	9986 <k_mem_slab_free+0x46>
    99b8:	b002      	add	sp, #8
    99ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    99be:	bf00      	nop
    99c0:	200036b0 	.word	0x200036b0
    99c4:	20001bcc 	.word	0x20001bcc

000099c8 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
    99c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    99ca:	4d0d      	ldr	r5, [pc, #52]	; (9a00 <init_static_pools+0x38>)
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    99cc:	4c0d      	ldr	r4, [pc, #52]	; (9a04 <init_static_pools+0x3c>)
{
    99ce:	682a      	ldr	r2, [r5, #0]
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    99d0:	4e0d      	ldr	r6, [pc, #52]	; (9a08 <init_static_pools+0x40>)
{
    99d2:	9201      	str	r2, [sp, #4]
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    99d4:	42b4      	cmp	r4, r6
    99d6:	d307      	bcc.n	99e8 <init_static_pools+0x20>
		k_mem_pool_init(p);
	}

	return 0;
}
    99d8:	9a01      	ldr	r2, [sp, #4]
    99da:	682b      	ldr	r3, [r5, #0]
    99dc:	429a      	cmp	r2, r3
    99de:	f04f 0000 	mov.w	r0, #0
    99e2:	d00a      	beq.n	99fa <init_static_pools+0x32>
    99e4:	f001 fb1a 	bl	b01c <_StackCheckHandler>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    99e8:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
    99ec:	4620      	mov	r0, r4
    99ee:	e9c4 3305 	strd	r3, r3, [r4, #20]
    99f2:	f7f6 fe19 	bl	628 <z_sys_mem_pool_base_init>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    99f6:	341c      	adds	r4, #28
    99f8:	e7ec      	b.n	99d4 <init_static_pools+0xc>
}
    99fa:	b002      	add	sp, #8
    99fc:	bd70      	pop	{r4, r5, r6, pc}
    99fe:	bf00      	nop
    9a00:	200036b0 	.word	0x200036b0
    9a04:	200077c0 	.word	0x200077c0
    9a08:	200077f8 	.word	0x200077f8

00009a0c <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
    9a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9a10:	4692      	mov	sl, r2
    9a12:	4a33      	ldr	r2, [pc, #204]	; (9ae0 <k_mem_pool_alloc+0xd4>)
    9a14:	b087      	sub	sp, #28
    9a16:	460c      	mov	r4, r1
	int ret;
	s64_t end = 0;

	__ASSERT(!(z_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
    9a18:	1e1e      	subs	r6, r3, #0
{
    9a1a:	6811      	ldr	r1, [r2, #0]
    9a1c:	9105      	str	r1, [sp, #20]
    9a1e:	4681      	mov	r9, r0
    9a20:	4690      	mov	r8, r2
	if (timeout > 0) {
    9a22:	dd58      	ble.n	9ad6 <k_mem_pool_alloc+0xca>
		end = z_tick_get() + z_ms_to_ticks(timeout);
    9a24:	f001 fc92 	bl	b34c <z_tick_get>
    9a28:	4605      	mov	r5, r0
{
#ifdef CONFIG_SYS_CLOCK_EXISTS

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	/* use 64-bit math to keep precision */
	return (s32_t)ceiling_fraction(
    9a2a:	482e      	ldr	r0, [pc, #184]	; (9ae4 <k_mem_pool_alloc+0xd8>)
    9a2c:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    9a30:	2100      	movs	r1, #0
    9a32:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    9a36:	2300      	movs	r3, #0
    9a38:	fbc7 0106 	smlal	r0, r1, r7, r6
    9a3c:	f7f6 fb60 	bl	100 <__aeabi_ldivmod>
    9a40:	1945      	adds	r5, r0, r5
	return pool - &_k_mem_pool_list_start[0];
    9a42:	4b29      	ldr	r3, [pc, #164]	; (9ae8 <k_mem_pool_alloc+0xdc>)
    9a44:	4f29      	ldr	r7, [pc, #164]	; (9aec <k_mem_pool_alloc+0xe0>)
    9a46:	eba9 0303 	sub.w	r3, r9, r3
    9a4a:	109b      	asrs	r3, r3, #2
    9a4c:	435f      	muls	r7, r3

		if (ret == -EAGAIN) {
			ret = -ENOMEM;
		}

		block->id.pool = pool_id(p);
    9a4e:	b2ff      	uxtb	r7, r7
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
    9a50:	f109 0b14 	add.w	fp, r9, #20
			ret = z_sys_mem_pool_block_alloc(&p->base, size,
    9a54:	9400      	str	r4, [sp, #0]
    9a56:	ab04      	add	r3, sp, #16
    9a58:	aa03      	add	r2, sp, #12
    9a5a:	4651      	mov	r1, sl
    9a5c:	4648      	mov	r0, r9
    9a5e:	f7f6 fe39 	bl	6d4 <z_sys_mem_pool_block_alloc>
			if (ret != -EAGAIN) {
    9a62:	f110 0f0b 	cmn.w	r0, #11
    9a66:	d10b      	bne.n	9a80 <k_mem_pool_alloc+0x74>
			ret = z_sys_mem_pool_block_alloc(&p->base, size,
    9a68:	9400      	str	r4, [sp, #0]
    9a6a:	ab04      	add	r3, sp, #16
    9a6c:	aa03      	add	r2, sp, #12
    9a6e:	4651      	mov	r1, sl
    9a70:	4648      	mov	r0, r9
    9a72:	f7f6 fe2f 	bl	6d4 <z_sys_mem_pool_block_alloc>
			ret = -ENOMEM;
    9a76:	f110 0f0b 	cmn.w	r0, #11
    9a7a:	bf08      	it	eq
    9a7c:	f06f 000b 	mvneq.w	r0, #11
		block->id.level = level_num;
    9a80:	7963      	ldrb	r3, [r4, #5]
    9a82:	9a03      	ldr	r2, [sp, #12]
		block->id.pool = pool_id(p);
    9a84:	7127      	strb	r7, [r4, #4]
		block->id.level = level_num;
    9a86:	f362 0303 	bfi	r3, r2, #0, #4
    9a8a:	7163      	strb	r3, [r4, #5]
		block->id.block = block_num;
    9a8c:	6863      	ldr	r3, [r4, #4]
    9a8e:	9a04      	ldr	r2, [sp, #16]
    9a90:	f362 331f 	bfi	r3, r2, #12, #20
    9a94:	6063      	str	r3, [r4, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
    9a96:	b1b8      	cbz	r0, 9ac8 <k_mem_pool_alloc+0xbc>
    9a98:	b1b6      	cbz	r6, 9ac8 <k_mem_pool_alloc+0xbc>
    9a9a:	f110 0f0c 	cmn.w	r0, #12
    9a9e:	d113      	bne.n	9ac8 <k_mem_pool_alloc+0xbc>
	__asm__ volatile(
    9aa0:	f04f 0320 	mov.w	r3, #32
    9aa4:	f3ef 8011 	mrs	r0, BASEPRI
    9aa8:	f383 8811 	msr	BASEPRI, r3
    9aac:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(z_arch_irq_lock(), wait_q, timeout);
    9ab0:	4632      	mov	r2, r6
    9ab2:	4659      	mov	r1, fp
    9ab4:	f000 fe28 	bl	a708 <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
    9ab8:	1c73      	adds	r3, r6, #1
    9aba:	d0cb      	beq.n	9a54 <k_mem_pool_alloc+0x48>
			timeout = end - z_tick_get();
    9abc:	f001 fc46 	bl	b34c <z_tick_get>

			if (timeout < 0) {
    9ac0:	1a2e      	subs	r6, r5, r0
    9ac2:	d5c7      	bpl.n	9a54 <k_mem_pool_alloc+0x48>
				break;
			}
		}
	}

	return -EAGAIN;
    9ac4:	f06f 000a 	mvn.w	r0, #10
}
    9ac8:	9a05      	ldr	r2, [sp, #20]
    9aca:	f8d8 3000 	ldr.w	r3, [r8]
    9ace:	429a      	cmp	r2, r3
    9ad0:	d003      	beq.n	9ada <k_mem_pool_alloc+0xce>
    9ad2:	f001 faa3 	bl	b01c <_StackCheckHandler>
	s64_t end = 0;
    9ad6:	2500      	movs	r5, #0
    9ad8:	e7b3      	b.n	9a42 <k_mem_pool_alloc+0x36>
}
    9ada:	b007      	add	sp, #28
    9adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9ae0:	200036b0 	.word	0x200036b0
    9ae4:	0004ffff 	.word	0x0004ffff
    9ae8:	200077c0 	.word	0x200077c0
    9aec:	b6db6db7 	.word	0xb6db6db7

00009af0 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
    9af0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9af2:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
    9af4:	6802      	ldr	r2, [r0, #0]
    9af6:	7841      	ldrb	r1, [r0, #1]
{
    9af8:	4d18      	ldr	r5, [pc, #96]	; (9b5c <k_mem_pool_free_id+0x6c>)
	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
    9afa:	4f19      	ldr	r7, [pc, #100]	; (9b60 <k_mem_pool_free_id+0x70>)
{
    9afc:	682b      	ldr	r3, [r5, #0]
    9afe:	9301      	str	r3, [sp, #4]
	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
    9b00:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    9b04:	00a4      	lsls	r4, r4, #2
    9b06:	0b12      	lsrs	r2, r2, #12
    9b08:	f001 010f 	and.w	r1, r1, #15
    9b0c:	1938      	adds	r0, r7, r4
    9b0e:	f7f6 feab 	bl	868 <z_sys_mem_pool_block_free>
    9b12:	f04f 0320 	mov.w	r3, #32
    9b16:	f3ef 8611 	mrs	r6, BASEPRI
    9b1a:	f383 8811 	msr	BASEPRI, r3
    9b1e:	f3bf 8f6f 	isb	sy
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
    9b22:	f104 0014 	add.w	r0, r4, #20
    9b26:	4438      	add	r0, r7
    9b28:	f000 fed8 	bl	a8dc <z_unpend_all>

	if (need_sched != 0) {
    9b2c:	b160      	cbz	r0, 9b48 <k_mem_pool_free_id+0x58>
		z_reschedule(&lock, key);
    9b2e:	9a01      	ldr	r2, [sp, #4]
    9b30:	682b      	ldr	r3, [r5, #0]
    9b32:	429a      	cmp	r2, r3
    9b34:	d001      	beq.n	9b3a <k_mem_pool_free_id+0x4a>
	} else {
		k_spin_unlock(&lock, key);
	}
}
    9b36:	f001 fa71 	bl	b01c <_StackCheckHandler>
		z_reschedule(&lock, key);
    9b3a:	480a      	ldr	r0, [pc, #40]	; (9b64 <k_mem_pool_free_id+0x74>)
    9b3c:	4631      	mov	r1, r6
}
    9b3e:	b003      	add	sp, #12
    9b40:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		z_reschedule(&lock, key);
    9b44:	f000 bb12 	b.w	a16c <z_reschedule>
	__asm__ volatile(
    9b48:	f386 8811 	msr	BASEPRI, r6
    9b4c:	f3bf 8f6f 	isb	sy
}
    9b50:	9a01      	ldr	r2, [sp, #4]
    9b52:	682b      	ldr	r3, [r5, #0]
    9b54:	429a      	cmp	r2, r3
    9b56:	d1ee      	bne.n	9b36 <k_mem_pool_free_id+0x46>
    9b58:	b003      	add	sp, #12
    9b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9b5c:	200036b0 	.word	0x200036b0
    9b60:	200077c0 	.word	0x200077c0
    9b64:	20001bcc 	.word	0x20001bcc

00009b68 <k_mem_pool_free>:

void k_mem_pool_free(struct k_mem_block *block)
{
    9b68:	b507      	push	{r0, r1, r2, lr}
    9b6a:	4b07      	ldr	r3, [pc, #28]	; (9b88 <k_mem_pool_free+0x20>)
    9b6c:	681a      	ldr	r2, [r3, #0]
    9b6e:	9201      	str	r2, [sp, #4]
	k_mem_pool_free_id(&block->id);
    9b70:	9a01      	ldr	r2, [sp, #4]
    9b72:	681b      	ldr	r3, [r3, #0]
    9b74:	429a      	cmp	r2, r3
    9b76:	d001      	beq.n	9b7c <k_mem_pool_free+0x14>
    9b78:	f001 fa50 	bl	b01c <_StackCheckHandler>
    9b7c:	3004      	adds	r0, #4
}
    9b7e:	b003      	add	sp, #12
    9b80:	f85d eb04 	ldr.w	lr, [sp], #4
	k_mem_pool_free_id(&block->id);
    9b84:	f7ff bfb4 	b.w	9af0 <k_mem_pool_free_id>
    9b88:	200036b0 	.word	0x200036b0

00009b8c <k_mem_pool_malloc>:

void *k_mem_pool_malloc(struct k_mem_pool *pool, size_t size)
{
    9b8c:	b530      	push	{r4, r5, lr}
    9b8e:	4c0f      	ldr	r4, [pc, #60]	; (9bcc <k_mem_pool_malloc+0x40>)
    9b90:	b085      	sub	sp, #20
    9b92:	6822      	ldr	r2, [r4, #0]
    9b94:	9203      	str	r2, [sp, #12]

	/*
	 * get a block large enough to hold an initial (hidden) block
	 * descriptor, as well as the space the caller requested
	 */
	if (__builtin_add_overflow(size, sizeof(struct k_mem_block_id),
    9b96:	2504      	movs	r5, #4
    9b98:	194a      	adds	r2, r1, r5
    9b9a:	d205      	bcs.n	9ba8 <k_mem_pool_malloc+0x1c>
				   &size)) {
		return NULL;
	}
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
    9b9c:	2300      	movs	r3, #0
    9b9e:	eb0d 0105 	add.w	r1, sp, r5
    9ba2:	f7ff ff33 	bl	9a0c <k_mem_pool_alloc>
    9ba6:	b130      	cbz	r0, 9bb6 <k_mem_pool_malloc+0x2a>
		return NULL;
    9ba8:	2000      	movs	r0, #0
	/* save the block descriptor info at the start of the actual block */
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));

	/* return address of the user area part of the block to the caller */
	return (char *)block.data + sizeof(struct k_mem_block_id);
}
    9baa:	9a03      	ldr	r2, [sp, #12]
    9bac:	6823      	ldr	r3, [r4, #0]
    9bae:	429a      	cmp	r2, r3
    9bb0:	d009      	beq.n	9bc6 <k_mem_pool_malloc+0x3a>
    9bb2:	f001 fa33 	bl	b01c <_StackCheckHandler>
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
    9bb6:	462a      	mov	r2, r5
    9bb8:	a902      	add	r1, sp, #8
    9bba:	9801      	ldr	r0, [sp, #4]
    9bbc:	f7fe f8ac 	bl	7d18 <memcpy>
	return (char *)block.data + sizeof(struct k_mem_block_id);
    9bc0:	9801      	ldr	r0, [sp, #4]
    9bc2:	3004      	adds	r0, #4
    9bc4:	e7f1      	b.n	9baa <k_mem_pool_malloc+0x1e>
}
    9bc6:	b005      	add	sp, #20
    9bc8:	bd30      	pop	{r4, r5, pc}
    9bca:	bf00      	nop
    9bcc:	200036b0 	.word	0x200036b0

00009bd0 <k_free>:

void k_free(void *ptr)
{
    9bd0:	b507      	push	{r0, r1, r2, lr}
    9bd2:	4b0a      	ldr	r3, [pc, #40]	; (9bfc <k_free+0x2c>)
    9bd4:	681a      	ldr	r2, [r3, #0]
    9bd6:	9201      	str	r2, [sp, #4]
	if (ptr != NULL) {
		/* point to hidden block descriptor at start of block */
		ptr = (char *)ptr - sizeof(struct k_mem_block_id);

		/* return block to the heap memory pool */
		k_mem_pool_free_id(ptr);
    9bd8:	9a01      	ldr	r2, [sp, #4]
    9bda:	681b      	ldr	r3, [r3, #0]
	if (ptr != NULL) {
    9bdc:	b148      	cbz	r0, 9bf2 <k_free+0x22>
		k_mem_pool_free_id(ptr);
    9bde:	429a      	cmp	r2, r3
    9be0:	d001      	beq.n	9be6 <k_free+0x16>
	}
}
    9be2:	f001 fa1b 	bl	b01c <_StackCheckHandler>
		k_mem_pool_free_id(ptr);
    9be6:	3804      	subs	r0, #4
}
    9be8:	b003      	add	sp, #12
    9bea:	f85d eb04 	ldr.w	lr, [sp], #4
		k_mem_pool_free_id(ptr);
    9bee:	f7ff bf7f 	b.w	9af0 <k_mem_pool_free_id>
}
    9bf2:	429a      	cmp	r2, r3
    9bf4:	d1f5      	bne.n	9be2 <k_free+0x12>
    9bf6:	b003      	add	sp, #12
    9bf8:	f85d fb04 	ldr.w	pc, [sp], #4
    9bfc:	200036b0 	.word	0x200036b0

00009c00 <z_thread_malloc>:
	thread->resource_pool = _HEAP_MEM_POOL;
}
#endif

void *z_thread_malloc(size_t size)
{
    9c00:	b507      	push	{r0, r1, r2, lr}
    9c02:	4b0c      	ldr	r3, [pc, #48]	; (9c34 <z_thread_malloc+0x34>)
    9c04:	681a      	ldr	r2, [r3, #0]
    9c06:	9201      	str	r2, [sp, #4]
	void *ret;

	if (_current->resource_pool != NULL) {
    9c08:	4a0b      	ldr	r2, [pc, #44]	; (9c38 <z_thread_malloc+0x38>)
    9c0a:	6892      	ldr	r2, [r2, #8]
{
    9c0c:	4601      	mov	r1, r0
	if (_current->resource_pool != NULL) {
    9c0e:	6e10      	ldr	r0, [r2, #96]	; 0x60
		ret = k_mem_pool_malloc(_current->resource_pool, size);
    9c10:	9a01      	ldr	r2, [sp, #4]
    9c12:	681b      	ldr	r3, [r3, #0]
	if (_current->resource_pool != NULL) {
    9c14:	b140      	cbz	r0, 9c28 <z_thread_malloc+0x28>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
    9c16:	429a      	cmp	r2, r3
    9c18:	d001      	beq.n	9c1e <z_thread_malloc+0x1e>
	} else {
		ret = NULL;
	}

	return ret;
}
    9c1a:	f001 f9ff 	bl	b01c <_StackCheckHandler>
    9c1e:	b003      	add	sp, #12
    9c20:	f85d eb04 	ldr.w	lr, [sp], #4
		ret = k_mem_pool_malloc(_current->resource_pool, size);
    9c24:	f7ff bfb2 	b.w	9b8c <k_mem_pool_malloc>
}
    9c28:	429a      	cmp	r2, r3
    9c2a:	d1f6      	bne.n	9c1a <z_thread_malloc+0x1a>
    9c2c:	b003      	add	sp, #12
    9c2e:	f85d fb04 	ldr.w	pc, [sp], #4
    9c32:	bf00      	nop
    9c34:	200036b0 	.word	0x200036b0
    9c38:	20001894 	.word	0x20001894

00009c3c <z_impl_k_mutex_init>:
SYS_INIT(init_mutex_module, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

#endif /* CONFIG_OBJECT_TRACING */

void z_impl_k_mutex_init(struct k_mutex *mutex)
{
    9c3c:	b507      	push	{r0, r1, r2, lr}
    9c3e:	4b08      	ldr	r3, [pc, #32]	; (9c60 <z_impl_k_mutex_init+0x24>)
    9c40:	681a      	ldr	r2, [r3, #0]
    9c42:	9201      	str	r2, [sp, #4]
	mutex->owner = NULL;
    9c44:	2200      	movs	r2, #0
	mutex->lock_count = 0U;
    9c46:	e9c0 2202 	strd	r2, r2, [r0, #8]
	z_waitq_init(&mutex->wait_q);

	SYS_TRACING_OBJ_INIT(k_mutex, mutex);
	z_object_init(mutex);
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_INIT);
}
    9c4a:	9a01      	ldr	r2, [sp, #4]
    9c4c:	681b      	ldr	r3, [r3, #0]
    9c4e:	429a      	cmp	r2, r3
    9c50:	e9c0 0000 	strd	r0, r0, [r0]
    9c54:	d001      	beq.n	9c5a <z_impl_k_mutex_init+0x1e>
    9c56:	f001 f9e1 	bl	b01c <_StackCheckHandler>
    9c5a:	b003      	add	sp, #12
    9c5c:	f85d fb04 	ldr.w	pc, [sp], #4
    9c60:	200036b0 	.word	0x200036b0

00009c64 <z_impl_k_mutex_lock>:
		z_thread_priority_set(mutex->owner, new_prio);
	}
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
    9c64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9c66:	4e3a      	ldr	r6, [pc, #232]	; (9d50 <z_impl_k_mutex_lock+0xec>)
    9c68:	460d      	mov	r5, r1
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!z_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    9c6a:	493a      	ldr	r1, [pc, #232]	; (9d54 <z_impl_k_mutex_lock+0xf0>)
    9c6c:	6833      	ldr	r3, [r6, #0]
    9c6e:	9301      	str	r3, [sp, #4]
    9c70:	688b      	ldr	r3, [r1, #8]
    9c72:	7bda      	ldrb	r2, [r3, #15]
    9c74:	3a01      	subs	r2, #1
    9c76:	4604      	mov	r4, r0
    9c78:	73da      	strb	r2, [r3, #15]
	k_spinlock_key_t key;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	z_sched_lock();

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    9c7a:	68c2      	ldr	r2, [r0, #12]
    9c7c:	4608      	mov	r0, r1
    9c7e:	b14a      	cbz	r2, 9c94 <z_impl_k_mutex_lock+0x30>
    9c80:	68a3      	ldr	r3, [r4, #8]
    9c82:	6889      	ldr	r1, [r1, #8]
    9c84:	428b      	cmp	r3, r1
    9c86:	d017      	beq.n	9cb8 <z_impl_k_mutex_lock+0x54>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
    9c88:	b9c5      	cbnz	r5, 9cbc <z_impl_k_mutex_lock+0x58>
		k_sched_unlock();
    9c8a:	f000 fb75 	bl	a378 <k_sched_unlock>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    9c8e:	f06f 050f 	mvn.w	r5, #15
    9c92:	e00a      	b.n	9caa <z_impl_k_mutex_lock+0x46>
					_current->base.prio :
    9c94:	688b      	ldr	r3, [r1, #8]
    9c96:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    9c9a:	6123      	str	r3, [r4, #16]
		mutex->lock_count++;
    9c9c:	3201      	adds	r2, #1
		mutex->owner = _current;
    9c9e:	6883      	ldr	r3, [r0, #8]
		mutex->lock_count++;
    9ca0:	60e2      	str	r2, [r4, #12]
		mutex->owner = _current;
    9ca2:	60a3      	str	r3, [r4, #8]
		k_sched_unlock();
    9ca4:	f000 fb68 	bl	a378 <k_sched_unlock>
		return 0;
    9ca8:	2500      	movs	r5, #0

	k_sched_unlock();

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    9caa:	9a01      	ldr	r2, [sp, #4]
    9cac:	6833      	ldr	r3, [r6, #0]
    9cae:	429a      	cmp	r2, r3
    9cb0:	4628      	mov	r0, r5
    9cb2:	d04a      	beq.n	9d4a <z_impl_k_mutex_lock+0xe6>
    9cb4:	f001 f9b2 	bl	b01c <_StackCheckHandler>
					_current->base.prio :
    9cb8:	6923      	ldr	r3, [r4, #16]
    9cba:	e7ee      	b.n	9c9a <z_impl_k_mutex_lock+0x36>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    9cbc:	f991 100e 	ldrsb.w	r1, [r1, #14]
    9cc0:	f993 300e 	ldrsb.w	r3, [r3, #14]
    9cc4:	4299      	cmp	r1, r3
    9cc6:	bfa8      	it	ge
    9cc8:	4619      	movge	r1, r3
    9cca:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	__asm__ volatile(
    9cce:	f04f 0320 	mov.w	r3, #32
    9cd2:	f3ef 8711 	mrs	r7, BASEPRI
    9cd6:	f383 8811 	msr	BASEPRI, r3
    9cda:	f3bf 8f6f 	isb	sy
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    9cde:	68a0      	ldr	r0, [r4, #8]
    9ce0:	f990 300e 	ldrsb.w	r3, [r0, #14]
    9ce4:	4299      	cmp	r1, r3
    9ce6:	da01      	bge.n	9cec <z_impl_k_mutex_lock+0x88>
		z_thread_priority_set(mutex->owner, new_prio);
    9ce8:	f000 fd5e 	bl	a7a8 <z_thread_priority_set>
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    9cec:	462b      	mov	r3, r5
    9cee:	4622      	mov	r2, r4
    9cf0:	4639      	mov	r1, r7
    9cf2:	4819      	ldr	r0, [pc, #100]	; (9d58 <z_impl_k_mutex_lock+0xf4>)
    9cf4:	f000 fd38 	bl	a768 <z_pend_curr>
	if (got_mutex == 0) {
    9cf8:	4605      	mov	r5, r0
    9cfa:	b910      	cbnz	r0, 9d02 <z_impl_k_mutex_lock+0x9e>
		k_sched_unlock();
    9cfc:	f000 fb3c 	bl	a378 <k_sched_unlock>
		return 0;
    9d00:	e7d3      	b.n	9caa <z_impl_k_mutex_lock+0x46>
	return list->head == list;
    9d02:	6823      	ldr	r3, [r4, #0]
    9d04:	6921      	ldr	r1, [r4, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9d06:	429c      	cmp	r4, r3
    9d08:	d007      	beq.n	9d1a <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
    9d0a:	b133      	cbz	r3, 9d1a <z_impl_k_mutex_lock+0xb6>
    9d0c:	f993 300e 	ldrsb.w	r3, [r3, #14]
    9d10:	4299      	cmp	r1, r3
    9d12:	bfa8      	it	ge
    9d14:	4619      	movge	r1, r3
    9d16:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    9d1a:	f04f 0320 	mov.w	r3, #32
    9d1e:	f3ef 8511 	mrs	r5, BASEPRI
    9d22:	f383 8811 	msr	BASEPRI, r3
    9d26:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, new_prio);
    9d2a:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    9d2c:	f990 300e 	ldrsb.w	r3, [r0, #14]
    9d30:	4299      	cmp	r1, r3
    9d32:	d001      	beq.n	9d38 <z_impl_k_mutex_lock+0xd4>
		z_thread_priority_set(mutex->owner, new_prio);
    9d34:	f000 fd38 	bl	a7a8 <z_thread_priority_set>
	__asm__ volatile(
    9d38:	f385 8811 	msr	BASEPRI, r5
    9d3c:	f3bf 8f6f 	isb	sy
	k_sched_unlock();
    9d40:	f000 fb1a 	bl	a378 <k_sched_unlock>
	return -EAGAIN;
    9d44:	f06f 050a 	mvn.w	r5, #10
    9d48:	e7af      	b.n	9caa <z_impl_k_mutex_lock+0x46>
}
    9d4a:	b003      	add	sp, #12
    9d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9d4e:	bf00      	nop
    9d50:	200036b0 	.word	0x200036b0
    9d54:	20001894 	.word	0x20001894
    9d58:	20001bcc 	.word	0x20001bcc

00009d5c <z_impl_k_mutex_unlock>:
	return z_impl_k_mutex_lock((struct k_mutex *)mutex, (s32_t)timeout);
}
#endif

void z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    9d5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9d5e:	4f23      	ldr	r7, [pc, #140]	; (9dec <z_impl_k_mutex_unlock+0x90>)
    9d60:	683b      	ldr	r3, [r7, #0]
    9d62:	9301      	str	r3, [sp, #4]
    9d64:	4b22      	ldr	r3, [pc, #136]	; (9df0 <z_impl_k_mutex_unlock+0x94>)
    9d66:	6899      	ldr	r1, [r3, #8]
    9d68:	7bcb      	ldrb	r3, [r1, #15]
    9d6a:	3b01      	subs	r3, #1
    9d6c:	4604      	mov	r4, r0
    9d6e:	73cb      	strb	r3, [r1, #15]
	sys_trace_void(SYS_TRACE_ID_MUTEX_UNLOCK);
	z_sched_lock();

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count - 1U != 0U) {
    9d70:	68c3      	ldr	r3, [r0, #12]
    9d72:	2b01      	cmp	r3, #1
    9d74:	d007      	beq.n	9d86 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    9d76:	3b01      	subs	r3, #1
    9d78:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
    9d7a:	9a01      	ldr	r2, [sp, #4]
    9d7c:	683b      	ldr	r3, [r7, #0]
    9d7e:	429a      	cmp	r2, r3
    9d80:	d02e      	beq.n	9de0 <z_impl_k_mutex_unlock+0x84>
    9d82:	f001 f94b 	bl	b01c <_StackCheckHandler>
	__asm__ volatile(
    9d86:	f04f 0320 	mov.w	r3, #32
    9d8a:	f3ef 8611 	mrs	r6, BASEPRI
    9d8e:	f383 8811 	msr	BASEPRI, r3
    9d92:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    9d96:	6901      	ldr	r1, [r0, #16]
    9d98:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    9d9a:	f990 300e 	ldrsb.w	r3, [r0, #14]
    9d9e:	4299      	cmp	r1, r3
    9da0:	d001      	beq.n	9da6 <z_impl_k_mutex_unlock+0x4a>
		z_thread_priority_set(mutex->owner, new_prio);
    9da2:	f000 fd01 	bl	a7a8 <z_thread_priority_set>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    9da6:	4620      	mov	r0, r4
    9da8:	f000 fd5e 	bl	a868 <z_unpend_first_thread>
    9dac:	4605      	mov	r5, r0
	mutex->owner = new_owner;
    9dae:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    9db0:	b180      	cbz	r0, 9dd4 <z_impl_k_mutex_unlock+0x78>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    9db2:	7b43      	ldrb	r3, [r0, #13]
    9db4:	06db      	lsls	r3, r3, #27
    9db6:	d103      	bne.n	9dc0 <z_impl_k_mutex_unlock+0x64>
	if (z_is_thread_ready(thread)) {
    9db8:	6983      	ldr	r3, [r0, #24]
    9dba:	b90b      	cbnz	r3, 9dc0 <z_impl_k_mutex_unlock+0x64>
		z_add_thread_to_ready_q(thread);
    9dbc:	f000 fb04 	bl	a3c8 <z_add_thread_to_ready_q>
	__asm__ volatile(
    9dc0:	f386 8811 	msr	BASEPRI, r6
    9dc4:	f3bf 8f6f 	isb	sy
    9dc8:	2300      	movs	r3, #0
    9dca:	66ab      	str	r3, [r5, #104]	; 0x68
		mutex->owner_orig_prio = new_owner->base.prio;
    9dcc:	f995 300e 	ldrsb.w	r3, [r5, #14]
    9dd0:	6123      	str	r3, [r4, #16]
    9dd2:	e7d2      	b.n	9d7a <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count = 0U;
    9dd4:	60e0      	str	r0, [r4, #12]
    9dd6:	f386 8811 	msr	BASEPRI, r6
    9dda:	f3bf 8f6f 	isb	sy
    9dde:	e7cc      	b.n	9d7a <z_impl_k_mutex_unlock+0x1e>
}
    9de0:	b003      	add	sp, #12
    9de2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
    9de6:	f000 bac7 	b.w	a378 <k_sched_unlock>
    9dea:	bf00      	nop
    9dec:	200036b0 	.word	0x200036b0
    9df0:	20001894 	.word	0x20001894

00009df4 <prepare_thread_to_run>:
}
#endif

#if !defined(CONFIG_POLL)
static void prepare_thread_to_run(struct k_thread *thread, void *data)
{
    9df4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    9df6:	4c0b      	ldr	r4, [pc, #44]	; (9e24 <prepare_thread_to_run+0x30>)
    9df8:	6822      	ldr	r2, [r4, #0]
    9dfa:	9201      	str	r2, [sp, #4]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    9dfc:	7b42      	ldrb	r2, [r0, #13]
    9dfe:	06d3      	lsls	r3, r2, #27
    9e00:	4605      	mov	r5, r0
    9e02:	460e      	mov	r6, r1
    9e04:	d103      	bne.n	9e0e <prepare_thread_to_run+0x1a>
	if (z_is_thread_ready(thread)) {
    9e06:	6983      	ldr	r3, [r0, #24]
    9e08:	b90b      	cbnz	r3, 9e0e <prepare_thread_to_run+0x1a>
		z_add_thread_to_ready_q(thread);
    9e0a:	f000 fadd 	bl	a3c8 <z_add_thread_to_ready_q>
    9e0e:	2300      	movs	r3, #0
	z_ready_thread(thread);
	z_set_thread_return_value_with_data(thread, 0, data);
}
    9e10:	9a01      	ldr	r2, [sp, #4]
    9e12:	66ab      	str	r3, [r5, #104]	; 0x68
    9e14:	6823      	ldr	r3, [r4, #0]
    9e16:	616e      	str	r6, [r5, #20]
    9e18:	429a      	cmp	r2, r3
    9e1a:	d001      	beq.n	9e20 <prepare_thread_to_run+0x2c>
    9e1c:	f001 f8fe 	bl	b01c <_StackCheckHandler>
    9e20:	b002      	add	sp, #8
    9e22:	bd70      	pop	{r4, r5, r6, pc}
    9e24:	200036b0 	.word	0x200036b0

00009e28 <queue_insert>:
			       struct k_queue *);
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
    9e28:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    9e2c:	4d32      	ldr	r5, [pc, #200]	; (9ef8 <queue_insert+0xd0>)
    9e2e:	469a      	mov	sl, r3
    9e30:	682b      	ldr	r3, [r5, #0]
    9e32:	9301      	str	r3, [sp, #4]
    9e34:	4604      	mov	r4, r0
    9e36:	4688      	mov	r8, r1
    9e38:	4691      	mov	r9, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    9e3a:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    9e3e:	f04f 0320 	mov.w	r3, #32
    9e42:	f3ef 8711 	mrs	r7, BASEPRI
    9e46:	f383 8811 	msr	BASEPRI, r3
    9e4a:	f3bf 8f6f 	isb	sy
#if !defined(CONFIG_POLL)
	struct k_thread *first_pending_thread;

	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    9e4e:	4630      	mov	r0, r6
    9e50:	f000 fd0a 	bl	a868 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
    9e54:	b140      	cbz	r0, 9e68 <queue_insert+0x40>
		prepare_thread_to_run(first_pending_thread, data);
    9e56:	4649      	mov	r1, r9
    9e58:	f7ff ffcc 	bl	9df4 <prepare_thread_to_run>

#if defined(CONFIG_POLL)
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
    9e5c:	4630      	mov	r0, r6
    9e5e:	4639      	mov	r1, r7
    9e60:	f000 f984 	bl	a16c <z_reschedule>
	return 0;
    9e64:	2000      	movs	r0, #0
    9e66:	e00c      	b.n	9e82 <queue_insert+0x5a>
	if (alloc) {
    9e68:	f1ba 0f00 	cmp.w	sl, #0
    9e6c:	d022      	beq.n	9eb4 <queue_insert+0x8c>
		anode = z_thread_malloc(sizeof(*anode));
    9e6e:	2008      	movs	r0, #8
    9e70:	f7ff fec6 	bl	9c00 <z_thread_malloc>
		if (anode == NULL) {
    9e74:	b958      	cbnz	r0, 9e8e <queue_insert+0x66>
	__asm__ volatile(
    9e76:	f387 8811 	msr	BASEPRI, r7
    9e7a:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    9e7e:	f06f 000b 	mvn.w	r0, #11
}
    9e82:	9a01      	ldr	r2, [sp, #4]
    9e84:	682b      	ldr	r3, [r5, #0]
    9e86:	429a      	cmp	r2, r3
    9e88:	d033      	beq.n	9ef2 <queue_insert+0xca>
    9e8a:	f001 f8c7 	bl	b01c <_StackCheckHandler>
	node->next_and_flags = flags;
    9e8e:	2301      	movs	r3, #1
		anode->data = data;
    9e90:	f8c0 9004 	str.w	r9, [r0, #4]
    9e94:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
    9e96:	6803      	ldr	r3, [r0, #0]
    9e98:	f003 0203 	and.w	r2, r3, #3
    9e9c:	f1b8 0f00 	cmp.w	r8, #0
    9ea0:	d10c      	bne.n	9ebc <queue_insert+0x94>
	parent->next_and_flags = cur_flags | (unative_t)child;
    9ea2:	6823      	ldr	r3, [r4, #0]
    9ea4:	4313      	orrs	r3, r2
    9ea6:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    9ea8:	6863      	ldr	r3, [r4, #4]
	list->head = node;
    9eaa:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    9eac:	2b00      	cmp	r3, #0
    9eae:	d1d5      	bne.n	9e5c <queue_insert+0x34>
	list->tail = node;
    9eb0:	6060      	str	r0, [r4, #4]
    9eb2:	e7d3      	b.n	9e5c <queue_insert+0x34>
	node->next_and_flags = flags;
    9eb4:	f8c9 a000 	str.w	sl, [r9]
    9eb8:	4648      	mov	r0, r9
    9eba:	e7ec      	b.n	9e96 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    9ebc:	f8d8 3000 	ldr.w	r3, [r8]
Z_GENLIST_INSERT(sflist, sfnode)
    9ec0:	f033 0303 	bics.w	r3, r3, #3
    9ec4:	d10b      	bne.n	9ede <queue_insert+0xb6>
	parent->next_and_flags = cur_flags | (unative_t)child;
    9ec6:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
    9ec8:	6862      	ldr	r2, [r4, #4]
    9eca:	b912      	cbnz	r2, 9ed2 <queue_insert+0xaa>
	list->head = node;
    9ecc:	e9c4 0000 	strd	r0, r0, [r4]
    9ed0:	e7c4      	b.n	9e5c <queue_insert+0x34>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    9ed2:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    9ed4:	f003 0303 	and.w	r3, r3, #3
    9ed8:	4303      	orrs	r3, r0
    9eda:	6013      	str	r3, [r2, #0]
    9edc:	e7e8      	b.n	9eb0 <queue_insert+0x88>
    9ede:	4313      	orrs	r3, r2
    9ee0:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    9ee2:	f8d8 3000 	ldr.w	r3, [r8]
	parent->next_and_flags = cur_flags | (unative_t)child;
    9ee6:	f003 0303 	and.w	r3, r3, #3
    9eea:	4318      	orrs	r0, r3
    9eec:	f8c8 0000 	str.w	r0, [r8]
    9ef0:	e7b4      	b.n	9e5c <queue_insert+0x34>
}
    9ef2:	b002      	add	sp, #8
    9ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9ef8:	200036b0 	.word	0x200036b0

00009efc <z_queue_node_peek>:
{
    9efc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    9efe:	4d0a      	ldr	r5, [pc, #40]	; (9f28 <z_queue_node_peek+0x2c>)
    9f00:	682b      	ldr	r3, [r5, #0]
    9f02:	9301      	str	r3, [sp, #4]
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
    9f04:	4604      	mov	r4, r0
    9f06:	b130      	cbz	r0, 9f16 <z_queue_node_peek+0x1a>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    9f08:	6802      	ldr	r2, [r0, #0]
    9f0a:	0793      	lsls	r3, r2, #30
    9f0c:	d003      	beq.n	9f16 <z_queue_node_peek+0x1a>
		ret = anode->data;
    9f0e:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    9f10:	b109      	cbz	r1, 9f16 <z_queue_node_peek+0x1a>
			k_free(anode);
    9f12:	f7ff fe5d 	bl	9bd0 <k_free>
}
    9f16:	9a01      	ldr	r2, [sp, #4]
    9f18:	682b      	ldr	r3, [r5, #0]
    9f1a:	429a      	cmp	r2, r3
    9f1c:	4620      	mov	r0, r4
    9f1e:	d001      	beq.n	9f24 <z_queue_node_peek+0x28>
    9f20:	f001 f87c 	bl	b01c <_StackCheckHandler>
    9f24:	b003      	add	sp, #12
    9f26:	bd30      	pop	{r4, r5, pc}
    9f28:	200036b0 	.word	0x200036b0

00009f2c <z_impl_k_queue_init>:
{
    9f2c:	b507      	push	{r0, r1, r2, lr}
    9f2e:	4b09      	ldr	r3, [pc, #36]	; (9f54 <z_impl_k_queue_init+0x28>)
    9f30:	681a      	ldr	r2, [r3, #0]
    9f32:	9201      	str	r2, [sp, #4]
	list->head = NULL;
    9f34:	2200      	movs	r2, #0
	list->tail = NULL;
    9f36:	e9c0 2200 	strd	r2, r2, [r0]
    9f3a:	f100 0208 	add.w	r2, r0, #8
	list->tail = (sys_dnode_t *)list;
    9f3e:	e9c0 2202 	strd	r2, r2, [r0, #8]
}
    9f42:	9a01      	ldr	r2, [sp, #4]
    9f44:	681b      	ldr	r3, [r3, #0]
    9f46:	429a      	cmp	r2, r3
    9f48:	d001      	beq.n	9f4e <z_impl_k_queue_init+0x22>
    9f4a:	f001 f867 	bl	b01c <_StackCheckHandler>
    9f4e:	b003      	add	sp, #12
    9f50:	f85d fb04 	ldr.w	pc, [sp], #4
    9f54:	200036b0 	.word	0x200036b0

00009f58 <k_queue_append>:
{
	(void)queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
    9f58:	b513      	push	{r0, r1, r4, lr}
    9f5a:	4b08      	ldr	r3, [pc, #32]	; (9f7c <k_queue_append+0x24>)
    9f5c:	460a      	mov	r2, r1
    9f5e:	6819      	ldr	r1, [r3, #0]
    9f60:	9101      	str	r1, [sp, #4]
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
    9f62:	9901      	ldr	r1, [sp, #4]
    9f64:	681b      	ldr	r3, [r3, #0]
    9f66:	4299      	cmp	r1, r3
    9f68:	d001      	beq.n	9f6e <k_queue_append+0x16>
    9f6a:	f001 f857 	bl	b01c <_StackCheckHandler>
    9f6e:	6841      	ldr	r1, [r0, #4]
    9f70:	2300      	movs	r3, #0
			   data, false);
}
    9f72:	b002      	add	sp, #8
    9f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
    9f78:	f7ff bf56 	b.w	9e28 <queue_insert>
    9f7c:	200036b0 	.word	0x200036b0

00009f80 <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
    9f80:	b573      	push	{r0, r1, r4, r5, r6, lr}
    9f82:	4e1b      	ldr	r6, [pc, #108]	; (9ff0 <z_impl_k_queue_get+0x70>)
    9f84:	460b      	mov	r3, r1
    9f86:	6831      	ldr	r1, [r6, #0]
    9f88:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
    9f8a:	f04f 0120 	mov.w	r1, #32
    9f8e:	f3ef 8511 	mrs	r5, BASEPRI
    9f92:	f381 8811 	msr	BASEPRI, r1
    9f96:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
    9f9a:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    9f9c:	b1bc      	cbz	r4, 9fce <z_impl_k_queue_get+0x4e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    9f9e:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    9fa0:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    9fa2:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    9fa6:	4294      	cmp	r4, r2
	list->head = node;
    9fa8:	6003      	str	r3, [r0, #0]
	list->tail = node;
    9faa:	bf08      	it	eq
    9fac:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    9fae:	2101      	movs	r1, #1
    9fb0:	4620      	mov	r0, r4
    9fb2:	f7ff ffa3 	bl	9efc <z_queue_node_peek>
    9fb6:	4604      	mov	r4, r0
	__asm__ volatile(
    9fb8:	f385 8811 	msr	BASEPRI, r5
    9fbc:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
    9fc0:	9a01      	ldr	r2, [sp, #4]
    9fc2:	6833      	ldr	r3, [r6, #0]
    9fc4:	429a      	cmp	r2, r3
    9fc6:	4620      	mov	r0, r4
    9fc8:	d00f      	beq.n	9fea <z_impl_k_queue_get+0x6a>
    9fca:	f001 f827 	bl	b01c <_StackCheckHandler>
	if (timeout == K_NO_WAIT) {
    9fce:	2b00      	cmp	r3, #0
    9fd0:	d0f2      	beq.n	9fb8 <z_impl_k_queue_get+0x38>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    9fd2:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    9fd6:	4629      	mov	r1, r5
    9fd8:	4610      	mov	r0, r2
    9fda:	f000 fbc5 	bl	a768 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    9fde:	2800      	cmp	r0, #0
    9fe0:	d1ee      	bne.n	9fc0 <z_impl_k_queue_get+0x40>
    9fe2:	4b04      	ldr	r3, [pc, #16]	; (9ff4 <z_impl_k_queue_get+0x74>)
    9fe4:	689b      	ldr	r3, [r3, #8]
    9fe6:	695c      	ldr	r4, [r3, #20]
    9fe8:	e7ea      	b.n	9fc0 <z_impl_k_queue_get+0x40>
}
    9fea:	b002      	add	sp, #8
    9fec:	bd70      	pop	{r4, r5, r6, pc}
    9fee:	bf00      	nop
    9ff0:	200036b0 	.word	0x200036b0
    9ff4:	20001894 	.word	0x20001894

00009ff8 <z_is_thread_ready>:
{
    9ff8:	b507      	push	{r0, r1, r2, lr}
    9ffa:	4b0a      	ldr	r3, [pc, #40]	; (a024 <z_is_thread_ready+0x2c>)
    9ffc:	681a      	ldr	r2, [r3, #0]
    9ffe:	9201      	str	r2, [sp, #4]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    a000:	7b42      	ldrb	r2, [r0, #13]
    a002:	06d2      	lsls	r2, r2, #27
    a004:	bf08      	it	eq
    a006:	6980      	ldreq	r0, [r0, #24]
}
    a008:	9a01      	ldr	r2, [sp, #4]
    a00a:	681b      	ldr	r3, [r3, #0]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    a00c:	bf06      	itte	eq
    a00e:	fab0 f080 	clzeq	r0, r0
    a012:	0940      	lsreq	r0, r0, #5
    a014:	2000      	movne	r0, #0
}
    a016:	429a      	cmp	r2, r3
    a018:	d001      	beq.n	a01e <z_is_thread_ready+0x26>
    a01a:	f000 ffff 	bl	b01c <_StackCheckHandler>
    a01e:	b003      	add	sp, #12
    a020:	f85d fb04 	ldr.w	pc, [sp], #4
    a024:	200036b0 	.word	0x200036b0

0000a028 <resched>:
		z_reschedule_unlocked();
	}
}

static inline int resched(void)
{
    a028:	b507      	push	{r0, r1, r2, lr}
    a02a:	4b0d      	ldr	r3, [pc, #52]	; (a060 <resched+0x38>)
    a02c:	681a      	ldr	r2, [r3, #0]
    a02e:	9201      	str	r2, [sp, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    a030:	f3ef 8005 	mrs	r0, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
    a034:	280d      	cmp	r0, #13
    a036:	d80e      	bhi.n	a056 <resched+0x2e>
    a038:	b128      	cbz	r0, a046 <resched+0x1e>
    a03a:	4a0a      	ldr	r2, [pc, #40]	; (a064 <resched+0x3c>)
    a03c:	6850      	ldr	r0, [r2, #4]
    a03e:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
    a042:	f3c0 20c0 	ubfx	r0, r0, #11, #1
	}
	_current_cpu->swap_ok = 0;
#endif

	return !z_is_in_isr();
}
    a046:	9a01      	ldr	r2, [sp, #4]
    a048:	681b      	ldr	r3, [r3, #0]
    a04a:	429a      	cmp	r2, r3
    a04c:	f080 0001 	eor.w	r0, r0, #1
    a050:	d003      	beq.n	a05a <resched+0x32>
    a052:	f000 ffe3 	bl	b01c <_StackCheckHandler>
    a056:	2001      	movs	r0, #1
    a058:	e7f5      	b.n	a046 <resched+0x1e>
    a05a:	b003      	add	sp, #12
    a05c:	f85d fb04 	ldr.w	pc, [sp], #4
    a060:	200036b0 	.word	0x200036b0
    a064:	e000ed00 	.word	0xe000ed00

0000a068 <reset_time_slice>:
{
    a068:	b513      	push	{r0, r1, r4, lr}
    a06a:	4c0b      	ldr	r4, [pc, #44]	; (a098 <reset_time_slice+0x30>)
    a06c:	6823      	ldr	r3, [r4, #0]
    a06e:	9301      	str	r3, [sp, #4]
	_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    a070:	f7fc ffde 	bl	7030 <z_clock_elapsed>
    a074:	4b09      	ldr	r3, [pc, #36]	; (a09c <reset_time_slice+0x34>)
    a076:	4a0a      	ldr	r2, [pc, #40]	; (a0a0 <reset_time_slice+0x38>)
    a078:	681b      	ldr	r3, [r3, #0]
	z_set_timeout_expiry(slice_time, false);
    a07a:	9901      	ldr	r1, [sp, #4]
	_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    a07c:	4418      	add	r0, r3
    a07e:	6110      	str	r0, [r2, #16]
	z_set_timeout_expiry(slice_time, false);
    a080:	6822      	ldr	r2, [r4, #0]
    a082:	4291      	cmp	r1, r2
    a084:	d001      	beq.n	a08a <reset_time_slice+0x22>
    a086:	f000 ffc9 	bl	b01c <_StackCheckHandler>
    a08a:	2100      	movs	r1, #0
    a08c:	4618      	mov	r0, r3
}
    a08e:	b002      	add	sp, #8
    a090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_set_timeout_expiry(slice_time, false);
    a094:	f001 b8d0 	b.w	b238 <z_set_timeout_expiry>
    a098:	200036b0 	.word	0x200036b0
    a09c:	200018cc 	.word	0x200018cc
    a0a0:	20001894 	.word	0x20001894

0000a0a4 <k_sched_time_slice_set>:
{
    a0a4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
    a0a8:	4c18      	ldr	r4, [pc, #96]	; (a10c <k_sched_time_slice_set+0x68>)
    a0aa:	6823      	ldr	r3, [r4, #0]
    a0ac:	9301      	str	r3, [sp, #4]
    a0ae:	460e      	mov	r6, r1
	__asm__ volatile(
    a0b0:	f04f 0320 	mov.w	r3, #32
    a0b4:	f3ef 8511 	mrs	r5, BASEPRI
    a0b8:	f383 8811 	msr	BASEPRI, r3
    a0bc:	f3bf 8f6f 	isb	sy
    a0c0:	f8df 8058 	ldr.w	r8, [pc, #88]	; a11c <k_sched_time_slice_set+0x78>
		_current_cpu->slice_ticks = 0;
    a0c4:	4b12      	ldr	r3, [pc, #72]	; (a110 <k_sched_time_slice_set+0x6c>)
    a0c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    a0ca:	f04f 0900 	mov.w	r9, #0
    a0ce:	fbc1 8900 	smlal	r8, r9, r1, r0
    a0d2:	2200      	movs	r2, #0
    a0d4:	611a      	str	r2, [r3, #16]
    a0d6:	4640      	mov	r0, r8
    a0d8:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    a0dc:	2300      	movs	r3, #0
    a0de:	4649      	mov	r1, r9
    a0e0:	f7f6 f80e 	bl	100 <__aeabi_ldivmod>
    a0e4:	4b0b      	ldr	r3, [pc, #44]	; (a114 <k_sched_time_slice_set+0x70>)
    a0e6:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    a0e8:	4b0b      	ldr	r3, [pc, #44]	; (a118 <k_sched_time_slice_set+0x74>)
    a0ea:	601e      	str	r6, [r3, #0]
		reset_time_slice();
    a0ec:	f7ff ffbc 	bl	a068 <reset_time_slice>
	__asm__ volatile(
    a0f0:	f385 8811 	msr	BASEPRI, r5
    a0f4:	f3bf 8f6f 	isb	sy
}
    a0f8:	9a01      	ldr	r2, [sp, #4]
    a0fa:	6823      	ldr	r3, [r4, #0]
    a0fc:	429a      	cmp	r2, r3
    a0fe:	d001      	beq.n	a104 <k_sched_time_slice_set+0x60>
    a100:	f000 ff8c 	bl	b01c <_StackCheckHandler>
    a104:	b002      	add	sp, #8
    a106:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    a10a:	bf00      	nop
    a10c:	200036b0 	.word	0x200036b0
    a110:	20001894 	.word	0x20001894
    a114:	200018cc 	.word	0x200018cc
    a118:	200018c8 	.word	0x200018c8
    a11c:	0004ffff 	.word	0x0004ffff

0000a120 <z_unpend_thread_no_timeout>:
{
    a120:	b573      	push	{r0, r1, r4, r5, r6, lr}
    a122:	4d11      	ldr	r5, [pc, #68]	; (a168 <z_unpend_thread_no_timeout+0x48>)
    a124:	682b      	ldr	r3, [r5, #0]
    a126:	9301      	str	r3, [sp, #4]
    a128:	4604      	mov	r4, r0
	__asm__ volatile(
    a12a:	f04f 0320 	mov.w	r3, #32
    a12e:	f3ef 8611 	mrs	r6, BASEPRI
    a132:	f383 8811 	msr	BASEPRI, r3
    a136:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    a13a:	4601      	mov	r1, r0
    a13c:	6880      	ldr	r0, [r0, #8]
    a13e:	f000 f891 	bl	a264 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    a142:	7b63      	ldrb	r3, [r4, #13]
    a144:	f023 0302 	bic.w	r3, r3, #2
    a148:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    a14a:	f386 8811 	msr	BASEPRI, r6
    a14e:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    a152:	2300      	movs	r3, #0
}
    a154:	9a01      	ldr	r2, [sp, #4]
	thread->base.pended_on = NULL;
    a156:	60a3      	str	r3, [r4, #8]
}
    a158:	682b      	ldr	r3, [r5, #0]
    a15a:	429a      	cmp	r2, r3
    a15c:	d001      	beq.n	a162 <z_unpend_thread_no_timeout+0x42>
    a15e:	f000 ff5d 	bl	b01c <_StackCheckHandler>
    a162:	b002      	add	sp, #8
    a164:	bd70      	pop	{r4, r5, r6, pc}
    a166:	bf00      	nop
    a168:	200036b0 	.word	0x200036b0

0000a16c <z_reschedule>:

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    a16c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    a16e:	4c0e      	ldr	r4, [pc, #56]	; (a1a8 <z_reschedule+0x3c>)
    a170:	6823      	ldr	r3, [r4, #0]
    a172:	9301      	str	r3, [sp, #4]
    a174:	460d      	mov	r5, r1
	if (resched()) {
    a176:	f7ff ff57 	bl	a028 <resched>
    a17a:	b158      	cbz	r0, a194 <z_reschedule+0x28>
    a17c:	9a01      	ldr	r2, [sp, #4]
    a17e:	6823      	ldr	r3, [r4, #0]
    a180:	429a      	cmp	r2, r3
    a182:	d001      	beq.n	a188 <z_reschedule+0x1c>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    a184:	f000 ff4a 	bl	b01c <_StackCheckHandler>
    a188:	4628      	mov	r0, r5
    a18a:	b003      	add	sp, #12
    a18c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    a190:	f7fc bfca 	b.w	7128 <__swap>
    a194:	f385 8811 	msr	BASEPRI, r5
    a198:	f3bf 8f6f 	isb	sy
    a19c:	9a01      	ldr	r2, [sp, #4]
    a19e:	6823      	ldr	r3, [r4, #0]
    a1a0:	429a      	cmp	r2, r3
    a1a2:	d1ef      	bne.n	a184 <z_reschedule+0x18>
    a1a4:	b003      	add	sp, #12
    a1a6:	bd30      	pop	{r4, r5, pc}
    a1a8:	200036b0 	.word	0x200036b0

0000a1ac <z_reschedule_irqlock>:

void z_reschedule_irqlock(u32_t key)
{
    a1ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    a1ae:	4c0e      	ldr	r4, [pc, #56]	; (a1e8 <z_reschedule_irqlock+0x3c>)
    a1b0:	6823      	ldr	r3, [r4, #0]
    a1b2:	9301      	str	r3, [sp, #4]
    a1b4:	4605      	mov	r5, r0
	if (resched()) {
    a1b6:	f7ff ff37 	bl	a028 <resched>
    a1ba:	b158      	cbz	r0, a1d4 <z_reschedule_irqlock+0x28>
    a1bc:	9a01      	ldr	r2, [sp, #4]
    a1be:	6823      	ldr	r3, [r4, #0]
    a1c0:	429a      	cmp	r2, r3
    a1c2:	d001      	beq.n	a1c8 <z_reschedule_irqlock+0x1c>
		z_swap_irqlock(key);
	} else {
		irq_unlock(key);
	}
}
    a1c4:	f000 ff2a 	bl	b01c <_StackCheckHandler>
    a1c8:	4628      	mov	r0, r5
    a1ca:	b003      	add	sp, #12
    a1cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    a1d0:	f7fc bfaa 	b.w	7128 <__swap>
    a1d4:	f385 8811 	msr	BASEPRI, r5
    a1d8:	f3bf 8f6f 	isb	sy
    a1dc:	9a01      	ldr	r2, [sp, #4]
    a1de:	6823      	ldr	r3, [r4, #0]
    a1e0:	429a      	cmp	r2, r3
    a1e2:	d1ef      	bne.n	a1c4 <z_reschedule_irqlock+0x18>
    a1e4:	b003      	add	sp, #12
    a1e6:	bd30      	pop	{r4, r5, pc}
    a1e8:	200036b0 	.word	0x200036b0

0000a1ec <z_reschedule_unlocked>:
{
    a1ec:	b507      	push	{r0, r1, r2, lr}
    a1ee:	4b0b      	ldr	r3, [pc, #44]	; (a21c <z_reschedule_unlocked+0x30>)
    a1f0:	681a      	ldr	r2, [r3, #0]
    a1f2:	9201      	str	r2, [sp, #4]
	__asm__ volatile(
    a1f4:	f04f 0220 	mov.w	r2, #32
    a1f8:	f3ef 8011 	mrs	r0, BASEPRI
    a1fc:	f382 8811 	msr	BASEPRI, r2
    a200:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(z_arch_irq_lock());
    a204:	9a01      	ldr	r2, [sp, #4]
    a206:	681b      	ldr	r3, [r3, #0]
    a208:	429a      	cmp	r2, r3
    a20a:	d001      	beq.n	a210 <z_reschedule_unlocked+0x24>
    a20c:	f000 ff06 	bl	b01c <_StackCheckHandler>
}
    a210:	b003      	add	sp, #12
    a212:	f85d eb04 	ldr.w	lr, [sp], #4
	(void) z_reschedule_irqlock(z_arch_irq_lock());
    a216:	f7ff bfc9 	b.w	a1ac <z_reschedule_irqlock>
    a21a:	bf00      	nop
    a21c:	200036b0 	.word	0x200036b0

0000a220 <k_sched_lock>:

void k_sched_lock(void)
{
    a220:	b507      	push	{r0, r1, r2, lr}
    a222:	4a0e      	ldr	r2, [pc, #56]	; (a25c <k_sched_lock+0x3c>)
    a224:	6813      	ldr	r3, [r2, #0]
    a226:	9301      	str	r3, [sp, #4]
    a228:	f04f 0320 	mov.w	r3, #32
    a22c:	f3ef 8011 	mrs	r0, BASEPRI
    a230:	f383 8811 	msr	BASEPRI, r3
    a234:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    a238:	4b09      	ldr	r3, [pc, #36]	; (a260 <k_sched_lock+0x40>)
    a23a:	6899      	ldr	r1, [r3, #8]
    a23c:	7bcb      	ldrb	r3, [r1, #15]
    a23e:	3b01      	subs	r3, #1
    a240:	73cb      	strb	r3, [r1, #15]
	__asm__ volatile(
    a242:	f380 8811 	msr	BASEPRI, r0
    a246:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    a24a:	9901      	ldr	r1, [sp, #4]
    a24c:	6813      	ldr	r3, [r2, #0]
    a24e:	4299      	cmp	r1, r3
    a250:	d001      	beq.n	a256 <k_sched_lock+0x36>
    a252:	f000 fee3 	bl	b01c <_StackCheckHandler>
    a256:	b003      	add	sp, #12
    a258:	f85d fb04 	ldr.w	pc, [sp], #4
    a25c:	200036b0 	.word	0x200036b0
    a260:	20001894 	.word	0x20001894

0000a264 <z_priq_dumb_remove>:

	sys_dlist_append(pq, &thread->base.qnode_dlist);
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
    a264:	b513      	push	{r0, r1, r4, lr}
    a266:	4b0e      	ldr	r3, [pc, #56]	; (a2a0 <z_priq_dumb_remove+0x3c>)
    a268:	681a      	ldr	r2, [r3, #0]
    a26a:	9201      	str	r2, [sp, #4]
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    a26c:	4a0d      	ldr	r2, [pc, #52]	; (a2a4 <z_priq_dumb_remove+0x40>)
    a26e:	f102 0428 	add.w	r4, r2, #40	; 0x28
    a272:	4284      	cmp	r4, r0
    a274:	d105      	bne.n	a282 <z_priq_dumb_remove+0x1e>
    a276:	6892      	ldr	r2, [r2, #8]
    a278:	428a      	cmp	r2, r1
    a27a:	d102      	bne.n	a282 <z_priq_dumb_remove+0x1e>
    a27c:	7b4a      	ldrb	r2, [r1, #13]
    a27e:	06d2      	lsls	r2, r2, #27
    a280:	d106      	bne.n	a290 <z_priq_dumb_remove+0x2c>
	node->prev->next = node->next;
    a282:	e9d1 2000 	ldrd	r2, r0, [r1]
    a286:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
    a288:	6050      	str	r0, [r2, #4]
	node->next = NULL;
    a28a:	2200      	movs	r2, #0
	node->prev = NULL;
    a28c:	e9c1 2200 	strd	r2, r2, [r1]
#endif

	__ASSERT_NO_MSG(!is_idle(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    a290:	9a01      	ldr	r2, [sp, #4]
    a292:	681b      	ldr	r3, [r3, #0]
    a294:	429a      	cmp	r2, r3
    a296:	d001      	beq.n	a29c <z_priq_dumb_remove+0x38>
    a298:	f000 fec0 	bl	b01c <_StackCheckHandler>
    a29c:	b002      	add	sp, #8
    a29e:	bd10      	pop	{r4, pc}
    a2a0:	200036b0 	.word	0x200036b0
    a2a4:	20001894 	.word	0x20001894

0000a2a8 <z_unpend_thread>:
{
    a2a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    a2aa:	4d13      	ldr	r5, [pc, #76]	; (a2f8 <z_unpend_thread+0x50>)
    a2ac:	682b      	ldr	r3, [r5, #0]
    a2ae:	9301      	str	r3, [sp, #4]
    a2b0:	4604      	mov	r4, r0
	__asm__ volatile(
    a2b2:	f04f 0320 	mov.w	r3, #32
    a2b6:	f3ef 8611 	mrs	r6, BASEPRI
    a2ba:	f383 8811 	msr	BASEPRI, r3
    a2be:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    a2c2:	4601      	mov	r1, r0
    a2c4:	6880      	ldr	r0, [r0, #8]
    a2c6:	f7ff ffcd 	bl	a264 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    a2ca:	7b63      	ldrb	r3, [r4, #13]
    a2cc:	f023 0302 	bic.w	r3, r3, #2
    a2d0:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    a2d2:	f386 8811 	msr	BASEPRI, r6
    a2d6:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    a2da:	2300      	movs	r3, #0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    a2dc:	9a01      	ldr	r2, [sp, #4]
    a2de:	60a3      	str	r3, [r4, #8]
    a2e0:	682b      	ldr	r3, [r5, #0]
    a2e2:	429a      	cmp	r2, r3
    a2e4:	d001      	beq.n	a2ea <z_unpend_thread+0x42>
    a2e6:	f000 fe99 	bl	b01c <_StackCheckHandler>
    a2ea:	f104 0018 	add.w	r0, r4, #24
}
    a2ee:	b002      	add	sp, #8
    a2f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a2f4:	f000 bf62 	b.w	b1bc <z_abort_timeout>
    a2f8:	200036b0 	.word	0x200036b0

0000a2fc <z_priq_dumb_best>:

struct k_thread *z_priq_dumb_best(sys_dlist_t *pq)
{
    a2fc:	b507      	push	{r0, r1, r2, lr}
    a2fe:	4b08      	ldr	r3, [pc, #32]	; (a320 <z_priq_dumb_best+0x24>)
    a300:	681a      	ldr	r2, [r3, #0]
    a302:	9201      	str	r2, [sp, #4]
	return list->head == list;
    a304:	6802      	ldr	r2, [r0, #0]

	if (n != NULL) {
		t = CONTAINER_OF(n, struct k_thread, base.qnode_dlist);
	}
	return t;
}
    a306:	4290      	cmp	r0, r2
    a308:	bf14      	ite	ne
    a30a:	4610      	movne	r0, r2
    a30c:	2000      	moveq	r0, #0
    a30e:	9a01      	ldr	r2, [sp, #4]
    a310:	681b      	ldr	r3, [r3, #0]
    a312:	429a      	cmp	r2, r3
    a314:	d001      	beq.n	a31a <z_priq_dumb_best+0x1e>
    a316:	f000 fe81 	bl	b01c <_StackCheckHandler>
    a31a:	b003      	add	sp, #12
    a31c:	f85d fb04 	ldr.w	pc, [sp], #4
    a320:	200036b0 	.word	0x200036b0

0000a324 <update_cache>:
{
    a324:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a326:	4e12      	ldr	r6, [pc, #72]	; (a370 <update_cache+0x4c>)
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    a328:	4c12      	ldr	r4, [pc, #72]	; (a374 <update_cache+0x50>)
{
    a32a:	6833      	ldr	r3, [r6, #0]
    a32c:	9301      	str	r3, [sp, #4]
    a32e:	4607      	mov	r7, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    a330:	f104 0028 	add.w	r0, r4, #40	; 0x28
    a334:	f7ff ffe2 	bl	a2fc <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
    a338:	4605      	mov	r5, r0
    a33a:	b900      	cbnz	r0, a33e <update_cache+0x1a>
    a33c:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    a33e:	68a3      	ldr	r3, [r4, #8]
    a340:	b977      	cbnz	r7, a360 <update_cache+0x3c>
	if (z_is_thread_prevented_from_running(_current)) {
    a342:	7b5a      	ldrb	r2, [r3, #13]
    a344:	06d2      	lsls	r2, r2, #27
    a346:	d10b      	bne.n	a360 <update_cache+0x3c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    a348:	69aa      	ldr	r2, [r5, #24]
    a34a:	b94a      	cbnz	r2, a360 <update_cache+0x3c>
	if (is_preempt(_current) || is_metairq(th)) {
    a34c:	89da      	ldrh	r2, [r3, #14]
    a34e:	2a7f      	cmp	r2, #127	; 0x7f
    a350:	d906      	bls.n	a360 <update_cache+0x3c>
		_kernel.ready_q.cache = _current;
    a352:	6263      	str	r3, [r4, #36]	; 0x24
}
    a354:	9a01      	ldr	r2, [sp, #4]
    a356:	6833      	ldr	r3, [r6, #0]
    a358:	429a      	cmp	r2, r3
    a35a:	d007      	beq.n	a36c <update_cache+0x48>
    a35c:	f000 fe5e 	bl	b01c <_StackCheckHandler>
		if (th != _current) {
    a360:	429d      	cmp	r5, r3
    a362:	d001      	beq.n	a368 <update_cache+0x44>
			reset_time_slice();
    a364:	f7ff fe80 	bl	a068 <reset_time_slice>
		_kernel.ready_q.cache = th;
    a368:	6265      	str	r5, [r4, #36]	; 0x24
}
    a36a:	e7f3      	b.n	a354 <update_cache+0x30>
    a36c:	b003      	add	sp, #12
    a36e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a370:	200036b0 	.word	0x200036b0
    a374:	20001894 	.word	0x20001894

0000a378 <k_sched_unlock>:
{
    a378:	b537      	push	{r0, r1, r2, r4, r5, lr}
    a37a:	4c11      	ldr	r4, [pc, #68]	; (a3c0 <k_sched_unlock+0x48>)
    a37c:	6823      	ldr	r3, [r4, #0]
    a37e:	9301      	str	r3, [sp, #4]
	__asm__ volatile(
    a380:	f04f 0320 	mov.w	r3, #32
    a384:	f3ef 8511 	mrs	r5, BASEPRI
    a388:	f383 8811 	msr	BASEPRI, r3
    a38c:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    a390:	4b0c      	ldr	r3, [pc, #48]	; (a3c4 <k_sched_unlock+0x4c>)
    a392:	689a      	ldr	r2, [r3, #8]
    a394:	7bd3      	ldrb	r3, [r2, #15]
    a396:	3301      	adds	r3, #1
    a398:	73d3      	strb	r3, [r2, #15]
		update_cache(1);
    a39a:	2001      	movs	r0, #1
    a39c:	f7ff ffc2 	bl	a324 <update_cache>
	__asm__ volatile(
    a3a0:	f385 8811 	msr	BASEPRI, r5
    a3a4:	f3bf 8f6f 	isb	sy
	z_reschedule_unlocked();
    a3a8:	9a01      	ldr	r2, [sp, #4]
    a3aa:	6823      	ldr	r3, [r4, #0]
    a3ac:	429a      	cmp	r2, r3
    a3ae:	d001      	beq.n	a3b4 <k_sched_unlock+0x3c>
    a3b0:	f000 fe34 	bl	b01c <_StackCheckHandler>
}
    a3b4:	b003      	add	sp, #12
    a3b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_reschedule_unlocked();
    a3ba:	f7ff bf17 	b.w	a1ec <z_reschedule_unlocked>
    a3be:	bf00      	nop
    a3c0:	200036b0 	.word	0x200036b0
    a3c4:	20001894 	.word	0x20001894

0000a3c8 <z_add_thread_to_ready_q>:
{
    a3c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a3ca:	4c1e      	ldr	r4, [pc, #120]	; (a444 <z_add_thread_to_ready_q+0x7c>)
    a3cc:	6823      	ldr	r3, [r4, #0]
    a3ce:	9301      	str	r3, [sp, #4]
	__asm__ volatile(
    a3d0:	f04f 0320 	mov.w	r3, #32
    a3d4:	f3ef 8511 	mrs	r5, BASEPRI
    a3d8:	f383 8811 	msr	BASEPRI, r3
    a3dc:	f3bf 8f6f 	isb	sy
    a3e0:	4a19      	ldr	r2, [pc, #100]	; (a448 <z_add_thread_to_ready_q+0x80>)
    a3e2:	4611      	mov	r1, r2
    a3e4:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a3e8:	428b      	cmp	r3, r1
    a3ea:	d022      	beq.n	a432 <z_add_thread_to_ready_q+0x6a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a3ec:	b30b      	cbz	r3, a432 <z_add_thread_to_ready_q+0x6a>
    a3ee:	6ad7      	ldr	r7, [r2, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    a3f0:	f990 600e 	ldrsb.w	r6, [r0, #14]
    a3f4:	f993 c00e 	ldrsb.w	ip, [r3, #14]
    a3f8:	45b4      	cmp	ip, r6
    a3fa:	dd15      	ble.n	a428 <z_add_thread_to_ready_q+0x60>
	node->prev = successor->prev;
    a3fc:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    a3fe:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    a402:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    a404:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    a406:	7b43      	ldrb	r3, [r0, #13]
    a408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a40c:	7343      	strb	r3, [r0, #13]
		update_cache(0);
    a40e:	2000      	movs	r0, #0
    a410:	f7ff ff88 	bl	a324 <update_cache>
	__asm__ volatile(
    a414:	f385 8811 	msr	BASEPRI, r5
    a418:	f3bf 8f6f 	isb	sy
}
    a41c:	9a01      	ldr	r2, [sp, #4]
    a41e:	6823      	ldr	r3, [r4, #0]
    a420:	429a      	cmp	r2, r3
    a422:	d00d      	beq.n	a440 <z_add_thread_to_ready_q+0x78>
    a424:	f000 fdfa 	bl	b01c <_StackCheckHandler>
	return (node == list->tail) ? NULL : node->next;
    a428:	42bb      	cmp	r3, r7
    a42a:	d002      	beq.n	a432 <z_add_thread_to_ready_q+0x6a>
    a42c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a42e:	2b00      	cmp	r3, #0
    a430:	d1e0      	bne.n	a3f4 <z_add_thread_to_ready_q+0x2c>
	node->prev = list->tail;
    a432:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    a434:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
    a436:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    a438:	6001      	str	r1, [r0, #0]
	list->tail->next = node;
    a43a:	6018      	str	r0, [r3, #0]
	list->tail = node;
    a43c:	62d0      	str	r0, [r2, #44]	; 0x2c
    a43e:	e7e2      	b.n	a406 <z_add_thread_to_ready_q+0x3e>
}
    a440:	b003      	add	sp, #12
    a442:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a444:	200036b0 	.word	0x200036b0
    a448:	20001894 	.word	0x20001894

0000a44c <z_thread_timeout>:
{
    a44c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a44e:	4d1e      	ldr	r5, [pc, #120]	; (a4c8 <z_thread_timeout+0x7c>)
    a450:	682b      	ldr	r3, [r5, #0]
    a452:	9301      	str	r3, [sp, #4]
	if (th->base.pended_on != NULL) {
    a454:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
    a458:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
    a45a:	f1a0 0618 	sub.w	r6, r0, #24
	if (th->base.pended_on != NULL) {
    a45e:	b1cb      	cbz	r3, a494 <z_thread_timeout+0x48>
	__asm__ volatile(
    a460:	f04f 0320 	mov.w	r3, #32
    a464:	f3ef 8711 	mrs	r7, BASEPRI
    a468:	f383 8811 	msr	BASEPRI, r3
    a46c:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    a470:	4631      	mov	r1, r6
    a472:	f850 0c10 	ldr.w	r0, [r0, #-16]
    a476:	f7ff fef5 	bl	a264 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    a47a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    a47e:	f023 0302 	bic.w	r3, r3, #2
    a482:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
    a486:	f387 8811 	msr	BASEPRI, r7
    a48a:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    a48e:	2300      	movs	r3, #0
    a490:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    a494:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    a498:	f023 0314 	bic.w	r3, r3, #20
    a49c:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
    a4a0:	4630      	mov	r0, r6
    a4a2:	f7ff fda9 	bl	9ff8 <z_is_thread_ready>
		z_add_thread_to_ready_q(thread);
    a4a6:	9a01      	ldr	r2, [sp, #4]
    a4a8:	682b      	ldr	r3, [r5, #0]
	if (z_is_thread_ready(thread)) {
    a4aa:	b148      	cbz	r0, a4c0 <z_thread_timeout+0x74>
		z_add_thread_to_ready_q(thread);
    a4ac:	429a      	cmp	r2, r3
    a4ae:	d001      	beq.n	a4b4 <z_thread_timeout+0x68>
}
    a4b0:	f000 fdb4 	bl	b01c <_StackCheckHandler>
    a4b4:	4630      	mov	r0, r6
    a4b6:	b003      	add	sp, #12
    a4b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a4bc:	f7ff bf84 	b.w	a3c8 <z_add_thread_to_ready_q>
    a4c0:	429a      	cmp	r2, r3
    a4c2:	d1f5      	bne.n	a4b0 <z_thread_timeout+0x64>
    a4c4:	b003      	add	sp, #12
    a4c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a4c8:	200036b0 	.word	0x200036b0

0000a4cc <z_move_thread_to_end_of_prio_q>:
{
    a4cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    a4d0:	f8df 8094 	ldr.w	r8, [pc, #148]	; a568 <z_move_thread_to_end_of_prio_q+0x9c>
    a4d4:	f8d8 3000 	ldr.w	r3, [r8]
    a4d8:	9301      	str	r3, [sp, #4]
    a4da:	4604      	mov	r4, r0
	__asm__ volatile(
    a4dc:	f04f 0320 	mov.w	r3, #32
    a4e0:	f3ef 8611 	mrs	r6, BASEPRI
    a4e4:	f383 8811 	msr	BASEPRI, r3
    a4e8:	f3bf 8f6f 	isb	sy
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    a4ec:	4f1d      	ldr	r7, [pc, #116]	; (a564 <z_move_thread_to_end_of_prio_q+0x98>)
    a4ee:	f107 0528 	add.w	r5, r7, #40	; 0x28
    a4f2:	4601      	mov	r1, r0
    a4f4:	4628      	mov	r0, r5
    a4f6:	f7ff feb5 	bl	a264 <z_priq_dumb_remove>
	return list->head == list;
    a4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a4fc:	42ab      	cmp	r3, r5
    a4fe:	463a      	mov	r2, r7
    a500:	d026      	beq.n	a550 <z_move_thread_to_end_of_prio_q+0x84>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a502:	b32b      	cbz	r3, a550 <z_move_thread_to_end_of_prio_q+0x84>
    a504:	6af8      	ldr	r0, [r7, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    a506:	f994 100e 	ldrsb.w	r1, [r4, #14]
    a50a:	f993 700e 	ldrsb.w	r7, [r3, #14]
    a50e:	428f      	cmp	r7, r1
    a510:	dd19      	ble.n	a546 <z_move_thread_to_end_of_prio_q+0x7a>
	node->prev = successor->prev;
    a512:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    a514:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
    a518:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    a51a:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
    a51c:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
    a51e:	6890      	ldr	r0, [r2, #8]
    a520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a524:	7363      	strb	r3, [r4, #13]
    a526:	1b03      	subs	r3, r0, r4
    a528:	4258      	negs	r0, r3
    a52a:	4158      	adcs	r0, r3
    a52c:	f7ff fefa 	bl	a324 <update_cache>
	__asm__ volatile(
    a530:	f386 8811 	msr	BASEPRI, r6
    a534:	f3bf 8f6f 	isb	sy
}
    a538:	9a01      	ldr	r2, [sp, #4]
    a53a:	f8d8 3000 	ldr.w	r3, [r8]
    a53e:	429a      	cmp	r2, r3
    a540:	d00d      	beq.n	a55e <z_move_thread_to_end_of_prio_q+0x92>
    a542:	f000 fd6b 	bl	b01c <_StackCheckHandler>
	return (node == list->tail) ? NULL : node->next;
    a546:	4283      	cmp	r3, r0
    a548:	d002      	beq.n	a550 <z_move_thread_to_end_of_prio_q+0x84>
    a54a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a54c:	2b00      	cmp	r3, #0
    a54e:	d1dc      	bne.n	a50a <z_move_thread_to_end_of_prio_q+0x3e>
	node->prev = list->tail;
    a550:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    a552:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    a554:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    a556:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
    a558:	601c      	str	r4, [r3, #0]
	list->tail = node;
    a55a:	62d4      	str	r4, [r2, #44]	; 0x2c
    a55c:	e7de      	b.n	a51c <z_move_thread_to_end_of_prio_q+0x50>
}
    a55e:	b002      	add	sp, #8
    a560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a564:	20001894 	.word	0x20001894
    a568:	200036b0 	.word	0x200036b0

0000a56c <z_time_slice>:
{
    a56c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a56e:	4c1e      	ldr	r4, [pc, #120]	; (a5e8 <z_time_slice+0x7c>)
	if (pending_current == _current) {
    a570:	4a1e      	ldr	r2, [pc, #120]	; (a5ec <z_time_slice+0x80>)
    a572:	491f      	ldr	r1, [pc, #124]	; (a5f0 <z_time_slice+0x84>)
{
    a574:	6823      	ldr	r3, [r4, #0]
	if (pending_current == _current) {
    a576:	680d      	ldr	r5, [r1, #0]
{
    a578:	9301      	str	r3, [sp, #4]
	if (pending_current == _current) {
    a57a:	6893      	ldr	r3, [r2, #8]
    a57c:	42ab      	cmp	r3, r5
    a57e:	4616      	mov	r6, r2
    a580:	4625      	mov	r5, r4
    a582:	d105      	bne.n	a590 <z_time_slice+0x24>
			reset_time_slice();
    a584:	9a01      	ldr	r2, [sp, #4]
    a586:	6823      	ldr	r3, [r4, #0]
    a588:	429a      	cmp	r2, r3
    a58a:	d01c      	beq.n	a5c6 <z_time_slice+0x5a>
}
    a58c:	f000 fd46 	bl	b01c <_StackCheckHandler>
	pending_current = NULL;
    a590:	2700      	movs	r7, #0
    a592:	600f      	str	r7, [r1, #0]
	if (slice_time && sliceable(_current)) {
    a594:	4917      	ldr	r1, [pc, #92]	; (a5f4 <z_time_slice+0x88>)
    a596:	6809      	ldr	r1, [r1, #0]
    a598:	b311      	cbz	r1, a5e0 <z_time_slice+0x74>
		&& !z_is_thread_timeout_active(t);
    a59a:	89d9      	ldrh	r1, [r3, #14]
    a59c:	297f      	cmp	r1, #127	; 0x7f
    a59e:	d81f      	bhi.n	a5e0 <z_time_slice+0x74>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
    a5a0:	4915      	ldr	r1, [pc, #84]	; (a5f8 <z_time_slice+0x8c>)
    a5a2:	f993 700e 	ldrsb.w	r7, [r3, #14]
    a5a6:	6809      	ldr	r1, [r1, #0]
    a5a8:	428f      	cmp	r7, r1
    a5aa:	db19      	blt.n	a5e0 <z_time_slice+0x74>
	return thread == _idle_thread;
    a5ac:	4913      	ldr	r1, [pc, #76]	; (a5fc <z_time_slice+0x90>)
		&& !is_idle(t)
    a5ae:	6809      	ldr	r1, [r1, #0]
    a5b0:	428b      	cmp	r3, r1
    a5b2:	d015      	beq.n	a5e0 <z_time_slice+0x74>
		&& !z_is_thread_timeout_active(t);
    a5b4:	6999      	ldr	r1, [r3, #24]
    a5b6:	b999      	cbnz	r1, a5e0 <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
    a5b8:	6911      	ldr	r1, [r2, #16]
    a5ba:	4281      	cmp	r1, r0
    a5bc:	dc08      	bgt.n	a5d0 <z_time_slice+0x64>
			z_move_thread_to_end_of_prio_q(_current);
    a5be:	4618      	mov	r0, r3
    a5c0:	f7ff ff84 	bl	a4cc <z_move_thread_to_end_of_prio_q>
    a5c4:	e7de      	b.n	a584 <z_time_slice+0x18>
}
    a5c6:	b003      	add	sp, #12
    a5c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			reset_time_slice();
    a5cc:	f7ff bd4c 	b.w	a068 <reset_time_slice>
			_current_cpu->slice_ticks -= ticks;
    a5d0:	1a09      	subs	r1, r1, r0
    a5d2:	6111      	str	r1, [r2, #16]
}
    a5d4:	9a01      	ldr	r2, [sp, #4]
    a5d6:	682b      	ldr	r3, [r5, #0]
    a5d8:	429a      	cmp	r2, r3
    a5da:	d1d7      	bne.n	a58c <z_time_slice+0x20>
    a5dc:	b003      	add	sp, #12
    a5de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_current_cpu->slice_ticks = 0;
    a5e0:	2300      	movs	r3, #0
    a5e2:	6133      	str	r3, [r6, #16]
    a5e4:	e7f6      	b.n	a5d4 <z_time_slice+0x68>
    a5e6:	bf00      	nop
    a5e8:	200036b0 	.word	0x200036b0
    a5ec:	20001894 	.word	0x20001894
    a5f0:	200018c4 	.word	0x200018c4
    a5f4:	200018cc 	.word	0x200018cc
    a5f8:	200018c8 	.word	0x200018c8
    a5fc:	0000b82c 	.word	0x0000b82c

0000a600 <z_remove_thread_from_ready_q>:
{
    a600:	b573      	push	{r0, r1, r4, r5, r6, lr}
    a602:	4d15      	ldr	r5, [pc, #84]	; (a658 <z_remove_thread_from_ready_q+0x58>)
    a604:	682a      	ldr	r2, [r5, #0]
    a606:	9201      	str	r2, [sp, #4]
    a608:	4604      	mov	r4, r0
	__asm__ volatile(
    a60a:	f04f 0220 	mov.w	r2, #32
    a60e:	f3ef 8611 	mrs	r6, BASEPRI
    a612:	f382 8811 	msr	BASEPRI, r2
    a616:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    a61a:	7b42      	ldrb	r2, [r0, #13]
    a61c:	0652      	lsls	r2, r2, #25
    a61e:	d507      	bpl.n	a630 <z_remove_thread_from_ready_q+0x30>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    a620:	4601      	mov	r1, r0
    a622:	480e      	ldr	r0, [pc, #56]	; (a65c <z_remove_thread_from_ready_q+0x5c>)
    a624:	f7ff fe1e 	bl	a264 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    a628:	7b63      	ldrb	r3, [r4, #13]
    a62a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    a62e:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    a630:	4b0b      	ldr	r3, [pc, #44]	; (a660 <z_remove_thread_from_ready_q+0x60>)
    a632:	6898      	ldr	r0, [r3, #8]
    a634:	1b03      	subs	r3, r0, r4
    a636:	4258      	negs	r0, r3
    a638:	4158      	adcs	r0, r3
    a63a:	f7ff fe73 	bl	a324 <update_cache>
	__asm__ volatile(
    a63e:	f386 8811 	msr	BASEPRI, r6
    a642:	f3bf 8f6f 	isb	sy
}
    a646:	9a01      	ldr	r2, [sp, #4]
    a648:	682b      	ldr	r3, [r5, #0]
    a64a:	429a      	cmp	r2, r3
    a64c:	d001      	beq.n	a652 <z_remove_thread_from_ready_q+0x52>
    a64e:	f000 fce5 	bl	b01c <_StackCheckHandler>
    a652:	b002      	add	sp, #8
    a654:	bd70      	pop	{r4, r5, r6, pc}
    a656:	bf00      	nop
    a658:	200036b0 	.word	0x200036b0
    a65c:	200018bc 	.word	0x200018bc
    a660:	20001894 	.word	0x20001894

0000a664 <pend>:
{
    a664:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a666:	4e25      	ldr	r6, [pc, #148]	; (a6fc <pend+0x98>)
    a668:	4604      	mov	r4, r0
    a66a:	6833      	ldr	r3, [r6, #0]
    a66c:	9301      	str	r3, [sp, #4]
    a66e:	460d      	mov	r5, r1
    a670:	4617      	mov	r7, r2
	z_remove_thread_from_ready_q(thread);
    a672:	f7ff ffc5 	bl	a600 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
    a676:	7b63      	ldrb	r3, [r4, #13]
    a678:	f043 0302 	orr.w	r3, r3, #2
    a67c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    a67e:	b17d      	cbz	r5, a6a0 <pend+0x3c>
	return list->head == list;
    a680:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    a682:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a684:	429d      	cmp	r5, r3
    a686:	d019      	beq.n	a6bc <pend+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a688:	b1c3      	cbz	r3, a6bc <pend+0x58>
	if (t1->base.prio < t2->base.prio) {
    a68a:	f994 200e 	ldrsb.w	r2, [r4, #14]
    a68e:	f993 100e 	ldrsb.w	r1, [r3, #14]
    a692:	4291      	cmp	r1, r2
    a694:	dd0c      	ble.n	a6b0 <pend+0x4c>
	node->prev = successor->prev;
    a696:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    a698:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    a69c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    a69e:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
    a6a0:	1c79      	adds	r1, r7, #1
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    a6a2:	9a01      	ldr	r2, [sp, #4]
    a6a4:	6833      	ldr	r3, [r6, #0]
    a6a6:	d024      	beq.n	a6f2 <pend+0x8e>
    a6a8:	429a      	cmp	r2, r3
    a6aa:	d00e      	beq.n	a6ca <pend+0x66>
}
    a6ac:	f000 fcb6 	bl	b01c <_StackCheckHandler>
	return (node == list->tail) ? NULL : node->next;
    a6b0:	6869      	ldr	r1, [r5, #4]
    a6b2:	428b      	cmp	r3, r1
    a6b4:	d002      	beq.n	a6bc <pend+0x58>
    a6b6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a6b8:	2b00      	cmp	r3, #0
    a6ba:	d1e8      	bne.n	a68e <pend+0x2a>
	node->prev = list->tail;
    a6bc:	686b      	ldr	r3, [r5, #4]
    a6be:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    a6c0:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    a6c2:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
    a6c4:	601c      	str	r4, [r3, #0]
	list->tail = node;
    a6c6:	606c      	str	r4, [r5, #4]
    a6c8:	e7ea      	b.n	a6a0 <pend+0x3c>
    a6ca:	480d      	ldr	r0, [pc, #52]	; (a700 <pend+0x9c>)
    a6cc:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    a6d0:	2100      	movs	r1, #0
    a6d2:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    a6d6:	2300      	movs	r3, #0
    a6d8:	fbc5 0107 	smlal	r0, r1, r5, r7
    a6dc:	f7f5 fd10 	bl	100 <__aeabi_ldivmod>
    a6e0:	4908      	ldr	r1, [pc, #32]	; (a704 <pend+0xa0>)
    a6e2:	1c42      	adds	r2, r0, #1
    a6e4:	f104 0018 	add.w	r0, r4, #24
}
    a6e8:	b003      	add	sp, #12
    a6ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a6ee:	f000 bd17 	b.w	b120 <z_add_timeout>
    a6f2:	429a      	cmp	r2, r3
    a6f4:	d1da      	bne.n	a6ac <pend+0x48>
    a6f6:	b003      	add	sp, #12
    a6f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a6fa:	bf00      	nop
    a6fc:	200036b0 	.word	0x200036b0
    a700:	0004ffff 	.word	0x0004ffff
    a704:	0000a44d 	.word	0x0000a44d

0000a708 <z_pend_curr_irqlock>:
{
    a708:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	pend(_current, wait_q, timeout);
    a70a:	4e14      	ldr	r6, [pc, #80]	; (a75c <z_pend_curr_irqlock+0x54>)
{
    a70c:	4c14      	ldr	r4, [pc, #80]	; (a760 <z_pend_curr_irqlock+0x58>)
	pending_current = _current;
    a70e:	4d15      	ldr	r5, [pc, #84]	; (a764 <z_pend_curr_irqlock+0x5c>)
{
    a710:	6823      	ldr	r3, [r4, #0]
    a712:	9301      	str	r3, [sp, #4]
    a714:	4607      	mov	r7, r0
	pend(_current, wait_q, timeout);
    a716:	68b0      	ldr	r0, [r6, #8]
    a718:	f7ff ffa4 	bl	a664 <pend>
	pending_current = _current;
    a71c:	68b3      	ldr	r3, [r6, #8]
    a71e:	602b      	str	r3, [r5, #0]
    a720:	4638      	mov	r0, r7
    a722:	f7fc fd01 	bl	7128 <__swap>
	__asm__ volatile(
    a726:	f04f 0220 	mov.w	r2, #32
    a72a:	f3ef 8311 	mrs	r3, BASEPRI
    a72e:	f382 8811 	msr	BASEPRI, r2
    a732:	f3bf 8f6f 	isb	sy
		if (pending_current == _current) {
    a736:	682a      	ldr	r2, [r5, #0]
    a738:	68b1      	ldr	r1, [r6, #8]
    a73a:	4291      	cmp	r1, r2
			pending_current = NULL;
    a73c:	bf04      	itt	eq
    a73e:	2200      	moveq	r2, #0
    a740:	602a      	streq	r2, [r5, #0]
	__asm__ volatile(
    a742:	f383 8811 	msr	BASEPRI, r3
    a746:	f3bf 8f6f 	isb	sy
}
    a74a:	9a01      	ldr	r2, [sp, #4]
    a74c:	6823      	ldr	r3, [r4, #0]
    a74e:	429a      	cmp	r2, r3
    a750:	d001      	beq.n	a756 <z_pend_curr_irqlock+0x4e>
    a752:	f000 fc63 	bl	b01c <_StackCheckHandler>
    a756:	b003      	add	sp, #12
    a758:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a75a:	bf00      	nop
    a75c:	20001894 	.word	0x20001894
    a760:	200036b0 	.word	0x200036b0
    a764:	200018c4 	.word	0x200018c4

0000a768 <z_pend_curr>:
{
    a768:	b537      	push	{r0, r1, r2, r4, r5, lr}
    a76a:	4c0c      	ldr	r4, [pc, #48]	; (a79c <z_pend_curr+0x34>)
    a76c:	460d      	mov	r5, r1
    a76e:	4611      	mov	r1, r2
    a770:	6822      	ldr	r2, [r4, #0]
    a772:	9201      	str	r2, [sp, #4]
	pending_current = _current;
    a774:	4a0a      	ldr	r2, [pc, #40]	; (a7a0 <z_pend_curr+0x38>)
    a776:	6890      	ldr	r0, [r2, #8]
    a778:	4a0a      	ldr	r2, [pc, #40]	; (a7a4 <z_pend_curr+0x3c>)
    a77a:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
    a77c:	461a      	mov	r2, r3
    a77e:	f7ff ff71 	bl	a664 <pend>
    a782:	9a01      	ldr	r2, [sp, #4]
    a784:	6823      	ldr	r3, [r4, #0]
    a786:	429a      	cmp	r2, r3
    a788:	d001      	beq.n	a78e <z_pend_curr+0x26>
    a78a:	f000 fc47 	bl	b01c <_StackCheckHandler>
    a78e:	4628      	mov	r0, r5
}
    a790:	b003      	add	sp, #12
    a792:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    a796:	f7fc bcc7 	b.w	7128 <__swap>
    a79a:	bf00      	nop
    a79c:	200036b0 	.word	0x200036b0
    a7a0:	20001894 	.word	0x20001894
    a7a4:	200018c4 	.word	0x200018c4

0000a7a8 <z_thread_priority_set>:
{
    a7a8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    a7ac:	4e2c      	ldr	r6, [pc, #176]	; (a860 <z_thread_priority_set+0xb8>)
    a7ae:	6833      	ldr	r3, [r6, #0]
    a7b0:	9301      	str	r3, [sp, #4]
    a7b2:	4604      	mov	r4, r0
    a7b4:	460f      	mov	r7, r1
	__asm__ volatile(
    a7b6:	f04f 0320 	mov.w	r3, #32
    a7ba:	f3ef 8911 	mrs	r9, BASEPRI
    a7be:	f383 8811 	msr	BASEPRI, r3
    a7c2:	f3bf 8f6f 	isb	sy
		need_sched = z_is_thread_ready(thread);
    a7c6:	f7ff fc17 	bl	9ff8 <z_is_thread_ready>
		if (need_sched) {
    a7ca:	b27f      	sxtb	r7, r7
    a7cc:	4680      	mov	r8, r0
    a7ce:	2800      	cmp	r0, #0
    a7d0:	d037      	beq.n	a842 <z_thread_priority_set+0x9a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    a7d2:	4d24      	ldr	r5, [pc, #144]	; (a864 <z_thread_priority_set+0xbc>)
    a7d4:	f105 0a28 	add.w	sl, r5, #40	; 0x28
    a7d8:	4621      	mov	r1, r4
    a7da:	4650      	mov	r0, sl
    a7dc:	f7ff fd42 	bl	a264 <z_priq_dumb_remove>
	return list->head == list;
    a7e0:	6aab      	ldr	r3, [r5, #40]	; 0x28
			thread->base.prio = prio;
    a7e2:	73a7      	strb	r7, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a7e4:	4553      	cmp	r3, sl
    a7e6:	462a      	mov	r2, r5
    a7e8:	4651      	mov	r1, sl
    a7ea:	d023      	beq.n	a834 <z_thread_priority_set+0x8c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a7ec:	b313      	cbz	r3, a834 <z_thread_priority_set+0x8c>
    a7ee:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    a7f0:	f993 500e 	ldrsb.w	r5, [r3, #14]
    a7f4:	42bd      	cmp	r5, r7
    a7f6:	dd18      	ble.n	a82a <z_thread_priority_set+0x82>
	node->prev = successor->prev;
    a7f8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    a7fa:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    a7fe:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    a800:	605c      	str	r4, [r3, #4]
			update_cache(1);
    a802:	2001      	movs	r0, #1
    a804:	f7ff fd8e 	bl	a324 <update_cache>
	__asm__ volatile(
    a808:	f389 8811 	msr	BASEPRI, r9
    a80c:	f3bf 8f6f 	isb	sy
	if (need_sched && _current->base.sched_locked == 0) {
    a810:	f1b8 0f00 	cmp.w	r8, #0
    a814:	d01c      	beq.n	a850 <z_thread_priority_set+0xa8>
    a816:	4b13      	ldr	r3, [pc, #76]	; (a864 <z_thread_priority_set+0xbc>)
    a818:	689b      	ldr	r3, [r3, #8]
    a81a:	7bdb      	ldrb	r3, [r3, #15]
    a81c:	b9c3      	cbnz	r3, a850 <z_thread_priority_set+0xa8>
		z_reschedule_unlocked();
    a81e:	9a01      	ldr	r2, [sp, #4]
    a820:	6833      	ldr	r3, [r6, #0]
    a822:	429a      	cmp	r2, r3
    a824:	d00f      	beq.n	a846 <z_thread_priority_set+0x9e>
}
    a826:	f000 fbf9 	bl	b01c <_StackCheckHandler>
	return (node == list->tail) ? NULL : node->next;
    a82a:	4298      	cmp	r0, r3
    a82c:	d002      	beq.n	a834 <z_thread_priority_set+0x8c>
    a82e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a830:	2b00      	cmp	r3, #0
    a832:	d1dd      	bne.n	a7f0 <z_thread_priority_set+0x48>
	node->prev = list->tail;
    a834:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    a836:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    a838:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    a83a:	6021      	str	r1, [r4, #0]
	list->tail->next = node;
    a83c:	601c      	str	r4, [r3, #0]
	list->tail = node;
    a83e:	62d4      	str	r4, [r2, #44]	; 0x2c
    a840:	e7df      	b.n	a802 <z_thread_priority_set+0x5a>
			thread->base.prio = prio;
    a842:	73a7      	strb	r7, [r4, #14]
    a844:	e7e0      	b.n	a808 <z_thread_priority_set+0x60>
}
    a846:	b002      	add	sp, #8
    a848:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		z_reschedule_unlocked();
    a84c:	f7ff bcce 	b.w	a1ec <z_reschedule_unlocked>
}
    a850:	9a01      	ldr	r2, [sp, #4]
    a852:	6833      	ldr	r3, [r6, #0]
    a854:	429a      	cmp	r2, r3
    a856:	d1e6      	bne.n	a826 <z_thread_priority_set+0x7e>
    a858:	b002      	add	sp, #8
    a85a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a85e:	bf00      	nop
    a860:	200036b0 	.word	0x200036b0
    a864:	20001894 	.word	0x20001894

0000a868 <z_unpend_first_thread>:
{
    a868:	b573      	push	{r0, r1, r4, r5, r6, lr}
    a86a:	4d1b      	ldr	r5, [pc, #108]	; (a8d8 <z_unpend_first_thread+0x70>)
    a86c:	682b      	ldr	r3, [r5, #0]
    a86e:	9301      	str	r3, [sp, #4]
	__asm__ volatile(
    a870:	f04f 0320 	mov.w	r3, #32
    a874:	f3ef 8611 	mrs	r6, BASEPRI
    a878:	f383 8811 	msr	BASEPRI, r3
    a87c:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    a880:	f7ff fd3c 	bl	a2fc <z_priq_dumb_best>
    a884:	4604      	mov	r4, r0
	__asm__ volatile(
    a886:	f386 8811 	msr	BASEPRI, r6
    a88a:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    a88e:	b1c8      	cbz	r0, a8c4 <z_unpend_first_thread+0x5c>
	__asm__ volatile(
    a890:	f04f 0320 	mov.w	r3, #32
    a894:	f3ef 8611 	mrs	r6, BASEPRI
    a898:	f383 8811 	msr	BASEPRI, r3
    a89c:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    a8a0:	4601      	mov	r1, r0
    a8a2:	6880      	ldr	r0, [r0, #8]
    a8a4:	f7ff fcde 	bl	a264 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    a8a8:	7b63      	ldrb	r3, [r4, #13]
    a8aa:	f023 0302 	bic.w	r3, r3, #2
    a8ae:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    a8b0:	f386 8811 	msr	BASEPRI, r6
    a8b4:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    a8b8:	2300      	movs	r3, #0
    a8ba:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
    a8bc:	f104 0018 	add.w	r0, r4, #24
    a8c0:	f000 fc7c 	bl	b1bc <z_abort_timeout>
}
    a8c4:	9a01      	ldr	r2, [sp, #4]
    a8c6:	682b      	ldr	r3, [r5, #0]
    a8c8:	429a      	cmp	r2, r3
    a8ca:	4620      	mov	r0, r4
    a8cc:	d001      	beq.n	a8d2 <z_unpend_first_thread+0x6a>
    a8ce:	f000 fba5 	bl	b01c <_StackCheckHandler>
    a8d2:	b002      	add	sp, #8
    a8d4:	bd70      	pop	{r4, r5, r6, pc}
    a8d6:	bf00      	nop
    a8d8:	200036b0 	.word	0x200036b0

0000a8dc <z_unpend_all>:
	}
	return t;
}

int z_unpend_all(_wait_q_t *wait_q)
{
    a8dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a8de:	4d0f      	ldr	r5, [pc, #60]	; (a91c <z_unpend_all+0x40>)
    a8e0:	682a      	ldr	r2, [r5, #0]
    a8e2:	9201      	str	r2, [sp, #4]
    a8e4:	4607      	mov	r7, r0
	int need_sched = 0;
    a8e6:	2600      	movs	r6, #0
	return list->head == list;
    a8e8:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a8ea:	42a7      	cmp	r7, r4
    a8ec:	d000      	beq.n	a8f0 <z_unpend_all+0x14>
	struct k_thread *th;

	while ((th = z_waitq_head(wait_q)) != NULL) {
    a8ee:	b934      	cbnz	r4, a8fe <z_unpend_all+0x22>
		z_ready_thread(th);
		need_sched = 1;
	}

	return need_sched;
}
    a8f0:	9a01      	ldr	r2, [sp, #4]
    a8f2:	682b      	ldr	r3, [r5, #0]
    a8f4:	429a      	cmp	r2, r3
    a8f6:	4630      	mov	r0, r6
    a8f8:	d00e      	beq.n	a918 <z_unpend_all+0x3c>
    a8fa:	f000 fb8f 	bl	b01c <_StackCheckHandler>
		z_unpend_thread(th);
    a8fe:	4620      	mov	r0, r4
    a900:	f7ff fcd2 	bl	a2a8 <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
    a904:	4620      	mov	r0, r4
    a906:	f7ff fb77 	bl	9ff8 <z_is_thread_ready>
		need_sched = 1;
    a90a:	2601      	movs	r6, #1
    a90c:	2800      	cmp	r0, #0
    a90e:	d0eb      	beq.n	a8e8 <z_unpend_all+0xc>
		z_add_thread_to_ready_q(thread);
    a910:	4620      	mov	r0, r4
    a912:	f7ff fd59 	bl	a3c8 <z_add_thread_to_ready_q>
    a916:	e7e7      	b.n	a8e8 <z_unpend_all+0xc>
}
    a918:	b003      	add	sp, #12
    a91a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a91c:	200036b0 	.word	0x200036b0

0000a920 <z_sched_init>:

void z_sched_init(void)
{
    a920:	b507      	push	{r0, r1, r2, lr}
    a922:	4a0a      	ldr	r2, [pc, #40]	; (a94c <z_sched_init+0x2c>)
    a924:	6813      	ldr	r3, [r2, #0]
    a926:	9301      	str	r3, [sp, #4]
	list->head = (sys_dnode_t *)list;
    a928:	4b09      	ldr	r3, [pc, #36]	; (a950 <z_sched_init+0x30>)
    a92a:	f103 0128 	add.w	r1, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    a92e:	e9c3 110a 	strd	r1, r1, [r3, #40]	; 0x28
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    a932:	9901      	ldr	r1, [sp, #4]
    a934:	6813      	ldr	r3, [r2, #0]
    a936:	4299      	cmp	r1, r3
    a938:	d001      	beq.n	a93e <z_sched_init+0x1e>
    a93a:	f000 fb6f 	bl	b01c <_StackCheckHandler>
    a93e:	2100      	movs	r1, #0
    a940:	4608      	mov	r0, r1
		CONFIG_TIMESLICE_PRIORITY);
#endif
}
    a942:	b003      	add	sp, #12
    a944:	f85d eb04 	ldr.w	lr, [sp], #4
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    a948:	f7ff bbac 	b.w	a0a4 <k_sched_time_slice_set>
    a94c:	200036b0 	.word	0x200036b0
    a950:	20001894 	.word	0x20001894

0000a954 <z_impl_k_yield>:
}
#endif
#endif

void z_impl_k_yield(void)
{
    a954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a956:	4e27      	ldr	r6, [pc, #156]	; (a9f4 <z_impl_k_yield+0xa0>)
	__ASSERT(!z_is_in_isr(), "");

	if (!is_idle(_current)) {
    a958:	4c27      	ldr	r4, [pc, #156]	; (a9f8 <z_impl_k_yield+0xa4>)
{
    a95a:	6832      	ldr	r2, [r6, #0]
    a95c:	9201      	str	r2, [sp, #4]
	if (!is_idle(_current)) {
    a95e:	4a27      	ldr	r2, [pc, #156]	; (a9fc <z_impl_k_yield+0xa8>)
    a960:	68a1      	ldr	r1, [r4, #8]
    a962:	6812      	ldr	r2, [r2, #0]
    a964:	4291      	cmp	r1, r2
    a966:	d025      	beq.n	a9b4 <z_impl_k_yield+0x60>
	__asm__ volatile(
    a968:	f04f 0320 	mov.w	r3, #32
    a96c:	f3ef 8711 	mrs	r7, BASEPRI
    a970:	f383 8811 	msr	BASEPRI, r3
    a974:	f3bf 8f6f 	isb	sy
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
    a978:	f104 0528 	add.w	r5, r4, #40	; 0x28
    a97c:	68a1      	ldr	r1, [r4, #8]
    a97e:	4628      	mov	r0, r5
    a980:	f7ff fc70 	bl	a264 <z_priq_dumb_remove>
	return list->head == list;
    a984:	6aa3      	ldr	r3, [r4, #40]	; 0x28
						 _current);
				_priq_run_add(&_kernel.ready_q.runq,
    a986:	68a2      	ldr	r2, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a988:	42ab      	cmp	r3, r5
    a98a:	d026      	beq.n	a9da <z_impl_k_yield+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a98c:	b32b      	cbz	r3, a9da <z_impl_k_yield+0x86>
    a98e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    a990:	f992 000e 	ldrsb.w	r0, [r2, #14]
    a994:	f993 c00e 	ldrsb.w	ip, [r3, #14]
    a998:	4584      	cmp	ip, r0
    a99a:	dd19      	ble.n	a9d0 <z_impl_k_yield+0x7c>
	node->prev = successor->prev;
    a99c:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    a99e:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
    a9a2:	600a      	str	r2, [r1, #0]
	successor->prev = node;
    a9a4:	605a      	str	r2, [r3, #4]
					      _current);
			}
			update_cache(1);
    a9a6:	2001      	movs	r0, #1
    a9a8:	f7ff fcbc 	bl	a324 <update_cache>
	__asm__ volatile(
    a9ac:	f387 8811 	msr	BASEPRI, r7
    a9b0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    a9b4:	f04f 0320 	mov.w	r3, #32
    a9b8:	f3ef 8011 	mrs	r0, BASEPRI
    a9bc:	f383 8811 	msr	BASEPRI, r3
    a9c0:	f3bf 8f6f 	isb	sy
    a9c4:	9a01      	ldr	r2, [sp, #4]
    a9c6:	6833      	ldr	r3, [r6, #0]
    a9c8:	429a      	cmp	r2, r3
    a9ca:	d00d      	beq.n	a9e8 <z_impl_k_yield+0x94>
    a9cc:	f000 fb26 	bl	b01c <_StackCheckHandler>
	return (node == list->tail) ? NULL : node->next;
    a9d0:	4299      	cmp	r1, r3
    a9d2:	d002      	beq.n	a9da <z_impl_k_yield+0x86>
    a9d4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a9d6:	2b00      	cmp	r3, #0
    a9d8:	d1dc      	bne.n	a994 <z_impl_k_yield+0x40>
	node->prev = list->tail;
    a9da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    a9dc:	6053      	str	r3, [r2, #4]
	list->tail->next = node;
    a9de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	node->next = list;
    a9e0:	6015      	str	r5, [r2, #0]
	list->tail->next = node;
    a9e2:	601a      	str	r2, [r3, #0]
	list->tail = node;
    a9e4:	62e2      	str	r2, [r4, #44]	; 0x2c
    a9e6:	e7de      	b.n	a9a6 <z_impl_k_yield+0x52>
		}
	}
	z_swap_unlocked();
}
    a9e8:	b003      	add	sp, #12
    a9ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a9ee:	f7fc bb9b 	b.w	7128 <__swap>
    a9f2:	bf00      	nop
    a9f4:	200036b0 	.word	0x200036b0
    a9f8:	20001894 	.word	0x20001894
    a9fc:	0000b82c 	.word	0x0000b82c

0000aa00 <z_impl_k_sleep>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER0_SIMPLE_VOID(k_yield);
#endif

s32_t z_impl_k_sleep(s32_t duration)
{
    aa00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    aa04:	4d26      	ldr	r5, [pc, #152]	; (aaa0 <z_impl_k_sleep+0xa0>)
    aa06:	682b      	ldr	r3, [r5, #0]
    aa08:	9301      	str	r3, [sp, #4]
	__ASSERT(!z_is_in_isr(), "");

	K_DEBUG("thread %p for %d ns\n", _current, duration);

	/* wait of 0 ms is treated as a 'yield' */
	if (duration == 0) {
    aa0a:	4604      	mov	r4, r0
    aa0c:	b940      	cbnz	r0, aa20 <z_impl_k_sleep+0x20>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
    aa0e:	f7ff ffa1 	bl	a954 <z_impl_k_yield>
		return __ticks_to_ms(ticks);
	}
#endif

	return 0;
}
    aa12:	9a01      	ldr	r2, [sp, #4]
    aa14:	682b      	ldr	r3, [r5, #0]
    aa16:	429a      	cmp	r2, r3
    aa18:	4620      	mov	r0, r4
    aa1a:	d03d      	beq.n	aa98 <z_impl_k_sleep+0x98>
    aa1c:	f000 fafe 	bl	b01c <_StackCheckHandler>
    aa20:	4820      	ldr	r0, [pc, #128]	; (aaa4 <z_impl_k_sleep+0xa4>)
    aa22:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    aa26:	2100      	movs	r1, #0
    aa28:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    aa2c:	2300      	movs	r3, #0
    aa2e:	fbc6 0104 	smlal	r0, r1, r6, r4
    aa32:	f7f5 fb65 	bl	100 <__aeabi_ldivmod>
	ticks = _TICK_ALIGN + z_ms_to_ticks(duration);
    aa36:	1c47      	adds	r7, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
    aa38:	f000 fcb2 	bl	b3a0 <z_tick_get_32>
    aa3c:	183c      	adds	r4, r7, r0
    aa3e:	f04f 0320 	mov.w	r3, #32
    aa42:	f3ef 8811 	mrs	r8, BASEPRI
    aa46:	f383 8811 	msr	BASEPRI, r3
    aa4a:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    aa4e:	4e16      	ldr	r6, [pc, #88]	; (aaa8 <z_impl_k_sleep+0xa8>)
    aa50:	4b16      	ldr	r3, [pc, #88]	; (aaac <z_impl_k_sleep+0xac>)
    aa52:	68b0      	ldr	r0, [r6, #8]
    aa54:	6018      	str	r0, [r3, #0]
	z_remove_thread_from_ready_q(_current);
    aa56:	f7ff fdd3 	bl	a600 <z_remove_thread_from_ready_q>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    aa5a:	68b0      	ldr	r0, [r6, #8]
    aa5c:	4914      	ldr	r1, [pc, #80]	; (aab0 <z_impl_k_sleep+0xb0>)
    aa5e:	463a      	mov	r2, r7
    aa60:	3018      	adds	r0, #24
    aa62:	f000 fb5d 	bl	b120 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    aa66:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    aa68:	7b53      	ldrb	r3, [r2, #13]
    aa6a:	f043 0310 	orr.w	r3, r3, #16
    aa6e:	7353      	strb	r3, [r2, #13]
    aa70:	4640      	mov	r0, r8
    aa72:	f7fc fb59 	bl	7128 <__swap>
	ticks = expected_wakeup_time - z_tick_get_32();
    aa76:	f000 fc93 	bl	b3a0 <z_tick_get_32>
    aa7a:	1a20      	subs	r0, r4, r0
	if (ticks > 0) {
    aa7c:	2800      	cmp	r0, #0
    aa7e:	dd09      	ble.n	aa94 <z_impl_k_sleep+0x94>
{
#ifdef CONFIG_SYS_CLOCK_EXISTS

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	/* use 64-bit math to keep precision */
	return (u64_t)ticks * MSEC_PER_SEC / (u64_t)CONFIG_SYS_CLOCK_TICKS_PER_SEC;
    aa80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    aa84:	2264      	movs	r2, #100	; 0x64
    aa86:	2300      	movs	r3, #0
    aa88:	fb80 0101 	smull	r0, r1, r0, r1
    aa8c:	f7f5 fb88 	bl	1a0 <__aeabi_uldivmod>
    aa90:	4604      	mov	r4, r0
		return __ticks_to_ms(ticks);
    aa92:	e7be      	b.n	aa12 <z_impl_k_sleep+0x12>
	return 0;
    aa94:	2400      	movs	r4, #0
    aa96:	e7bc      	b.n	aa12 <z_impl_k_sleep+0x12>
}
    aa98:	b002      	add	sp, #8
    aa9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    aa9e:	bf00      	nop
    aaa0:	200036b0 	.word	0x200036b0
    aaa4:	0004ffff 	.word	0x0004ffff
    aaa8:	20001894 	.word	0x20001894
    aaac:	200018c4 	.word	0x200018c4
    aab0:	0000a44d 	.word	0x0000a44d

0000aab4 <z_impl_k_wakeup>:
	return z_impl_k_sleep(duration);
}
#endif

void z_impl_k_wakeup(k_tid_t thread)
{
    aab4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    aab6:	4d18      	ldr	r5, [pc, #96]	; (ab18 <z_impl_k_wakeup+0x64>)
    aab8:	682b      	ldr	r3, [r5, #0]
    aaba:	9301      	str	r3, [sp, #4]
	if (z_is_thread_pending(thread)) {
    aabc:	7b43      	ldrb	r3, [r0, #13]
    aabe:	079a      	lsls	r2, r3, #30
{
    aac0:	4604      	mov	r4, r0
	if (z_is_thread_pending(thread)) {
    aac2:	d423      	bmi.n	ab0c <z_impl_k_wakeup+0x58>
	return z_abort_timeout(&thread->base.timeout);
    aac4:	3018      	adds	r0, #24
    aac6:	f000 fb79 	bl	b1bc <z_abort_timeout>
		return;
	}

	if (z_abort_thread_timeout(thread) < 0) {
    aaca:	2800      	cmp	r0, #0
    aacc:	db1e      	blt.n	ab0c <z_impl_k_wakeup+0x58>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    aace:	7b63      	ldrb	r3, [r4, #13]
    aad0:	f023 0310 	bic.w	r3, r3, #16
    aad4:	7363      	strb	r3, [r4, #13]
	if (z_is_thread_ready(thread)) {
    aad6:	4620      	mov	r0, r4
    aad8:	f7ff fa8e 	bl	9ff8 <z_is_thread_ready>
    aadc:	b110      	cbz	r0, aae4 <z_impl_k_wakeup+0x30>
		z_add_thread_to_ready_q(thread);
    aade:	4620      	mov	r0, r4
    aae0:	f7ff fc72 	bl	a3c8 <z_add_thread_to_ready_q>
    aae4:	f3ef 8305 	mrs	r3, IPSR
    aae8:	2b0d      	cmp	r3, #13
    aaea:	d80f      	bhi.n	ab0c <z_impl_k_wakeup+0x58>
    aaec:	b11b      	cbz	r3, aaf6 <z_impl_k_wakeup+0x42>
    aaee:	4b0b      	ldr	r3, [pc, #44]	; (ab1c <z_impl_k_wakeup+0x68>)
    aaf0:	685b      	ldr	r3, [r3, #4]
    aaf2:	051b      	lsls	r3, r3, #20
    aaf4:	d50a      	bpl.n	ab0c <z_impl_k_wakeup+0x58>

	z_mark_thread_as_not_suspended(thread);
	z_ready_thread(thread);

	if (!z_is_in_isr()) {
		z_reschedule_unlocked();
    aaf6:	9a01      	ldr	r2, [sp, #4]
    aaf8:	682b      	ldr	r3, [r5, #0]
    aafa:	429a      	cmp	r2, r3
    aafc:	d001      	beq.n	ab02 <z_impl_k_wakeup+0x4e>

	if (IS_ENABLED(CONFIG_SMP) &&
	    !IS_ENABLED(CONFIG_SCHED_IPI_SUPPORTED)) {
		z_sched_ipi();
	}
}
    aafe:	f000 fa8d 	bl	b01c <_StackCheckHandler>
    ab02:	b003      	add	sp, #12
    ab04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		z_reschedule_unlocked();
    ab08:	f7ff bb70 	b.w	a1ec <z_reschedule_unlocked>
}
    ab0c:	9a01      	ldr	r2, [sp, #4]
    ab0e:	682b      	ldr	r3, [r5, #0]
    ab10:	429a      	cmp	r2, r3
    ab12:	d1f4      	bne.n	aafe <z_impl_k_wakeup+0x4a>
    ab14:	b003      	add	sp, #12
    ab16:	bd30      	pop	{r4, r5, pc}
    ab18:	200036b0 	.word	0x200036b0
    ab1c:	e000ed00 	.word	0xe000ed00

0000ab20 <z_impl_k_current_get>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_wakeup, K_OBJ_THREAD, k_tid_t);
#endif

k_tid_t z_impl_k_current_get(void)
{
    ab20:	b507      	push	{r0, r1, r2, lr}
    ab22:	4b07      	ldr	r3, [pc, #28]	; (ab40 <z_impl_k_current_get+0x20>)
    ab24:	681a      	ldr	r2, [r3, #0]
    ab26:	9201      	str	r2, [sp, #4]
	return _current;
}
    ab28:	4a06      	ldr	r2, [pc, #24]	; (ab44 <z_impl_k_current_get+0x24>)
    ab2a:	6890      	ldr	r0, [r2, #8]
    ab2c:	9a01      	ldr	r2, [sp, #4]
    ab2e:	681b      	ldr	r3, [r3, #0]
    ab30:	429a      	cmp	r2, r3
    ab32:	d001      	beq.n	ab38 <z_impl_k_current_get+0x18>
    ab34:	f000 fa72 	bl	b01c <_StackCheckHandler>
    ab38:	b003      	add	sp, #12
    ab3a:	f85d fb04 	ldr.w	pc, [sp], #4
    ab3e:	bf00      	nop
    ab40:	200036b0 	.word	0x200036b0
    ab44:	20001894 	.word	0x20001894

0000ab48 <z_impl_k_sem_init>:

#endif /* CONFIG_OBJECT_TRACING */

void z_impl_k_sem_init(struct k_sem *sem, unsigned int initial_count,
		      unsigned int limit)
{
    ab48:	b513      	push	{r0, r1, r4, lr}
    ab4a:	4b07      	ldr	r3, [pc, #28]	; (ab68 <z_impl_k_sem_init+0x20>)
    ab4c:	681c      	ldr	r4, [r3, #0]
    ab4e:	9401      	str	r4, [sp, #4]
	__ASSERT(limit != 0U, "limit cannot be zero");
	__ASSERT(initial_count <= limit, "count cannot be greater than limit");

	sys_trace_void(SYS_TRACE_ID_SEMA_INIT);
	sem->count = initial_count;
	sem->limit = limit;
    ab50:	e9c0 1202 	strd	r1, r2, [r0, #8]

	SYS_TRACING_OBJ_INIT(k_sem, sem);

	z_object_init(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_INIT);
}
    ab54:	9a01      	ldr	r2, [sp, #4]
    ab56:	681b      	ldr	r3, [r3, #0]
    ab58:	429a      	cmp	r2, r3
	list->tail = (sys_dnode_t *)list;
    ab5a:	e9c0 0000 	strd	r0, r0, [r0]
    ab5e:	d001      	beq.n	ab64 <z_impl_k_sem_init+0x1c>
    ab60:	f000 fa5c 	bl	b01c <_StackCheckHandler>
    ab64:	b002      	add	sp, #8
    ab66:	bd10      	pop	{r4, pc}
    ab68:	200036b0 	.word	0x200036b0

0000ab6c <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    ab6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ab6e:	4c16      	ldr	r4, [pc, #88]	; (abc8 <z_impl_k_sem_give+0x5c>)
    ab70:	6823      	ldr	r3, [r4, #0]
    ab72:	9301      	str	r3, [sp, #4]
    ab74:	4605      	mov	r5, r0
    ab76:	f04f 0320 	mov.w	r3, #32
    ab7a:	f3ef 8711 	mrs	r7, BASEPRI
    ab7e:	f383 8811 	msr	BASEPRI, r3
    ab82:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
    ab86:	f7ff fe6f 	bl	a868 <z_unpend_first_thread>
	if (thread != NULL) {
    ab8a:	4606      	mov	r6, r0
    ab8c:	b170      	cbz	r0, abac <z_impl_k_sem_give+0x40>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    ab8e:	7b43      	ldrb	r3, [r0, #13]
    ab90:	06db      	lsls	r3, r3, #27
    ab92:	d103      	bne.n	ab9c <z_impl_k_sem_give+0x30>
	if (z_is_thread_ready(thread)) {
    ab94:	6983      	ldr	r3, [r0, #24]
    ab96:	b90b      	cbnz	r3, ab9c <z_impl_k_sem_give+0x30>
		z_add_thread_to_ready_q(thread);
    ab98:	f7ff fc16 	bl	a3c8 <z_add_thread_to_ready_q>
    ab9c:	2300      	movs	r3, #0
    ab9e:	66b3      	str	r3, [r6, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
    aba0:	9a01      	ldr	r2, [sp, #4]
    aba2:	6823      	ldr	r3, [r4, #0]
    aba4:	429a      	cmp	r2, r3
    aba6:	d008      	beq.n	abba <z_impl_k_sem_give+0x4e>
    aba8:	f000 fa38 	bl	b01c <_StackCheckHandler>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
    abac:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    abb0:	429a      	cmp	r2, r3
    abb2:	bf18      	it	ne
    abb4:	3301      	addne	r3, #1
    abb6:	60ab      	str	r3, [r5, #8]
    abb8:	e7f2      	b.n	aba0 <z_impl_k_sem_give+0x34>
	z_reschedule(&lock, key);
    abba:	4804      	ldr	r0, [pc, #16]	; (abcc <z_impl_k_sem_give+0x60>)
    abbc:	4639      	mov	r1, r7
}
    abbe:	b003      	add	sp, #12
    abc0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	z_reschedule(&lock, key);
    abc4:	f7ff bad2 	b.w	a16c <z_reschedule>
    abc8:	200036b0 	.word	0x200036b0
    abcc:	20001bcc 	.word	0x20001bcc

0000abd0 <z_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
    abd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    abd2:	4602      	mov	r2, r0
    abd4:	4817      	ldr	r0, [pc, #92]	; (ac34 <z_impl_k_sem_take+0x64>)
    abd6:	460b      	mov	r3, r1
    abd8:	6801      	ldr	r1, [r0, #0]
    abda:	9101      	str	r1, [sp, #4]
    abdc:	f04f 0420 	mov.w	r4, #32
    abe0:	f3ef 8111 	mrs	r1, BASEPRI
    abe4:	f384 8811 	msr	BASEPRI, r4
    abe8:	f3bf 8f6f 	isb	sy
	__ASSERT(((z_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
    abec:	6894      	ldr	r4, [r2, #8]
    abee:	4605      	mov	r5, r0
    abf0:	b164      	cbz	r4, ac0c <z_impl_k_sem_take+0x3c>
		sem->count--;
    abf2:	3c01      	subs	r4, #1
    abf4:	6094      	str	r4, [r2, #8]
	__asm__ volatile(
    abf6:	f381 8811 	msr	BASEPRI, r1
    abfa:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
    abfe:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
    ac00:	9a01      	ldr	r2, [sp, #4]
    ac02:	682b      	ldr	r3, [r5, #0]
    ac04:	429a      	cmp	r2, r3
    ac06:	d10d      	bne.n	ac24 <z_impl_k_sem_take+0x54>
    ac08:	b003      	add	sp, #12
    ac0a:	bd30      	pop	{r4, r5, pc}
	if (timeout == K_NO_WAIT) {
    ac0c:	b933      	cbnz	r3, ac1c <z_impl_k_sem_take+0x4c>
    ac0e:	f381 8811 	msr	BASEPRI, r1
    ac12:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    ac16:	f06f 000f 	mvn.w	r0, #15
    ac1a:	e7f1      	b.n	ac00 <z_impl_k_sem_take+0x30>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    ac1c:	9c01      	ldr	r4, [sp, #4]
    ac1e:	6800      	ldr	r0, [r0, #0]
    ac20:	4284      	cmp	r4, r0
    ac22:	d001      	beq.n	ac28 <z_impl_k_sem_take+0x58>
}
    ac24:	f000 f9fa 	bl	b01c <_StackCheckHandler>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    ac28:	4803      	ldr	r0, [pc, #12]	; (ac38 <z_impl_k_sem_take+0x68>)
}
    ac2a:	b003      	add	sp, #12
    ac2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    ac30:	f7ff bd9a 	b.w	a768 <z_pend_curr>
    ac34:	200036b0 	.word	0x200036b0
    ac38:	20001bcc 	.word	0x20001bcc

0000ac3c <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
    ac3c:	b513      	push	{r0, r1, r4, lr}
    ac3e:	4c0c      	ldr	r4, [pc, #48]	; (ac70 <k_sys_work_q_init+0x34>)
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
    ac40:	490c      	ldr	r1, [pc, #48]	; (ac74 <k_sys_work_q_init+0x38>)
{
    ac42:	6823      	ldr	r3, [r4, #0]
    ac44:	9301      	str	r3, [sp, #4]
	k_work_q_start(&k_sys_work_q,
    ac46:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ac4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ac4e:	480a      	ldr	r0, [pc, #40]	; (ac78 <k_sys_work_q_init+0x3c>)
    ac50:	f000 f9b6 	bl	afc0 <k_work_q_start>
K_SYSCALL_DECLARE2(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, int, k_tid_t, thread_id, const char *, value)
    ac54:	4909      	ldr	r1, [pc, #36]	; (ac7c <k_sys_work_q_init+0x40>)
    ac56:	480a      	ldr	r0, [pc, #40]	; (ac80 <k_sys_work_q_init+0x44>)
    ac58:	f000 f860 	bl	ad1c <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
    ac5c:	9a01      	ldr	r2, [sp, #4]
    ac5e:	6823      	ldr	r3, [r4, #0]
    ac60:	429a      	cmp	r2, r3
    ac62:	f04f 0000 	mov.w	r0, #0
    ac66:	d001      	beq.n	ac6c <k_sys_work_q_init+0x30>
    ac68:	f000 f9d8 	bl	b01c <_StackCheckHandler>
    ac6c:	b002      	add	sp, #8
    ac6e:	bd10      	pop	{r4, pc}
    ac70:	200036b0 	.word	0x200036b0
    ac74:	20002e10 	.word	0x20002e10
    ac78:	200018d0 	.word	0x200018d0
    ac7c:	0000c4c5 	.word	0x0000c4c5
    ac80:	200018e0 	.word	0x200018e0

0000ac84 <z_is_thread_ready>:
{
    ac84:	b507      	push	{r0, r1, r2, lr}
    ac86:	4b0a      	ldr	r3, [pc, #40]	; (acb0 <z_is_thread_ready+0x2c>)
    ac88:	681a      	ldr	r2, [r3, #0]
    ac8a:	9201      	str	r2, [sp, #4]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    ac8c:	7b42      	ldrb	r2, [r0, #13]
    ac8e:	06d2      	lsls	r2, r2, #27
    ac90:	bf08      	it	eq
    ac92:	6980      	ldreq	r0, [r0, #24]
}
    ac94:	9a01      	ldr	r2, [sp, #4]
    ac96:	681b      	ldr	r3, [r3, #0]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    ac98:	bf06      	itte	eq
    ac9a:	fab0 f080 	clzeq	r0, r0
    ac9e:	0940      	lsreq	r0, r0, #5
    aca0:	2000      	movne	r0, #0
}
    aca2:	429a      	cmp	r2, r3
    aca4:	d001      	beq.n	acaa <z_is_thread_ready+0x26>
    aca6:	f000 f9b9 	bl	b01c <_StackCheckHandler>
    acaa:	b003      	add	sp, #12
    acac:	f85d fb04 	ldr.w	pc, [sp], #4
    acb0:	200036b0 	.word	0x200036b0

0000acb4 <k_is_in_isr>:
	k_spin_unlock(&lock, key);
#endif
}

bool k_is_in_isr(void)
{
    acb4:	b507      	push	{r0, r1, r2, lr}
    acb6:	4b0c      	ldr	r3, [pc, #48]	; (ace8 <k_is_in_isr+0x34>)
    acb8:	681a      	ldr	r2, [r3, #0]
    acba:	9201      	str	r2, [sp, #4]
    acbc:	f3ef 8005 	mrs	r0, IPSR
    acc0:	280d      	cmp	r0, #13
    acc2:	d80c      	bhi.n	acde <k_is_in_isr+0x2a>
    acc4:	b128      	cbz	r0, acd2 <k_is_in_isr+0x1e>
    acc6:	4a09      	ldr	r2, [pc, #36]	; (acec <k_is_in_isr+0x38>)
    acc8:	6850      	ldr	r0, [r2, #4]
    acca:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
    acce:	f3c0 20c0 	ubfx	r0, r0, #11, #1
	return z_is_in_isr();
}
    acd2:	9a01      	ldr	r2, [sp, #4]
    acd4:	681b      	ldr	r3, [r3, #0]
    acd6:	429a      	cmp	r2, r3
    acd8:	d003      	beq.n	ace2 <k_is_in_isr+0x2e>
    acda:	f000 f99f 	bl	b01c <_StackCheckHandler>
    acde:	2001      	movs	r0, #1
    ace0:	e7f7      	b.n	acd2 <k_is_in_isr+0x1e>
    ace2:	b003      	add	sp, #12
    ace4:	f85d fb04 	ldr.w	pc, [sp], #4
    ace8:	200036b0 	.word	0x200036b0
    acec:	e000ed00 	.word	0xe000ed00

0000acf0 <z_is_thread_essential>:
 * This routine indicates if the current thread is an essential system thread.
 *
 * Returns true if current thread is essential, false if it is not.
 */
bool z_is_thread_essential(void)
{
    acf0:	b507      	push	{r0, r1, r2, lr}
    acf2:	4b08      	ldr	r3, [pc, #32]	; (ad14 <z_is_thread_essential+0x24>)
    acf4:	681a      	ldr	r2, [r3, #0]
    acf6:	9201      	str	r2, [sp, #4]
	return (_current->base.user_options & K_ESSENTIAL) == K_ESSENTIAL;
    acf8:	4a07      	ldr	r2, [pc, #28]	; (ad18 <z_is_thread_essential+0x28>)
    acfa:	6892      	ldr	r2, [r2, #8]
    acfc:	7b10      	ldrb	r0, [r2, #12]
}
    acfe:	9a01      	ldr	r2, [sp, #4]
    ad00:	681b      	ldr	r3, [r3, #0]
    ad02:	429a      	cmp	r2, r3
    ad04:	f000 0001 	and.w	r0, r0, #1
    ad08:	d001      	beq.n	ad0e <z_is_thread_essential+0x1e>
    ad0a:	f000 f987 	bl	b01c <_StackCheckHandler>
    ad0e:	b003      	add	sp, #12
    ad10:	f85d fb04 	ldr.w	pc, [sp], #4
    ad14:	200036b0 	.word	0x200036b0
    ad18:	20001894 	.word	0x20001894

0000ad1c <z_impl_k_thread_name_set>:
	k_spin_unlock(&lock, key);
}
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
    ad1c:	b507      	push	{r0, r1, r2, lr}
    ad1e:	4b07      	ldr	r3, [pc, #28]	; (ad3c <z_impl_k_thread_name_set+0x20>)
    ad20:	681a      	ldr	r2, [r3, #0]
    ad22:	9201      	str	r2, [sp, #4]
#else
	ARG_UNUSED(thread);
	ARG_UNUSED(value);
	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    ad24:	9a01      	ldr	r2, [sp, #4]
    ad26:	681b      	ldr	r3, [r3, #0]
    ad28:	429a      	cmp	r2, r3
    ad2a:	f06f 0046 	mvn.w	r0, #70	; 0x46
    ad2e:	d001      	beq.n	ad34 <z_impl_k_thread_name_set+0x18>
    ad30:	f000 f974 	bl	b01c <_StackCheckHandler>
    ad34:	b003      	add	sp, #12
    ad36:	f85d fb04 	ldr.w	pc, [sp], #4
    ad3a:	bf00      	nop
    ad3c:	200036b0 	.word	0x200036b0

0000ad40 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
    ad40:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ad42:	4a18      	ldr	r2, [pc, #96]	; (ada4 <z_impl_k_thread_start+0x64>)
    ad44:	6813      	ldr	r3, [r2, #0]
    ad46:	9301      	str	r3, [sp, #4]
    ad48:	4604      	mov	r4, r0
	__asm__ volatile(
    ad4a:	f04f 0320 	mov.w	r3, #32
    ad4e:	f3ef 8511 	mrs	r5, BASEPRI
    ad52:	f383 8811 	msr	BASEPRI, r3
    ad56:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
    ad5a:	7b43      	ldrb	r3, [r0, #13]
    ad5c:	f013 0f04 	tst.w	r3, #4
    ad60:	4616      	mov	r6, r2
    ad62:	d109      	bne.n	ad78 <z_impl_k_thread_start+0x38>
	__asm__ volatile(
    ad64:	f385 8811 	msr	BASEPRI, r5
    ad68:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
    ad6c:	9901      	ldr	r1, [sp, #4]
    ad6e:	6813      	ldr	r3, [r2, #0]
    ad70:	4299      	cmp	r1, r3
    ad72:	d015      	beq.n	ada0 <z_impl_k_thread_start+0x60>
    ad74:	f000 f952 	bl	b01c <_StackCheckHandler>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    ad78:	f023 0304 	bic.w	r3, r3, #4
    ad7c:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
    ad7e:	f7ff ff81 	bl	ac84 <z_is_thread_ready>
    ad82:	b110      	cbz	r0, ad8a <z_impl_k_thread_start+0x4a>
		z_add_thread_to_ready_q(thread);
    ad84:	4620      	mov	r0, r4
    ad86:	f7ff fb1f 	bl	a3c8 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
    ad8a:	9a01      	ldr	r2, [sp, #4]
    ad8c:	6833      	ldr	r3, [r6, #0]
    ad8e:	429a      	cmp	r2, r3
    ad90:	d1f0      	bne.n	ad74 <z_impl_k_thread_start+0x34>
    ad92:	4805      	ldr	r0, [pc, #20]	; (ada8 <z_impl_k_thread_start+0x68>)
    ad94:	4629      	mov	r1, r5
}
    ad96:	b002      	add	sp, #8
    ad98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
    ad9c:	f7ff b9e6 	b.w	a16c <z_reschedule>
}
    ada0:	b002      	add	sp, #8
    ada2:	bd70      	pop	{r4, r5, r6, pc}
    ada4:	200036b0 	.word	0x200036b0
    ada8:	20001bcc 	.word	0x20001bcc

0000adac <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
    adac:	b570      	push	{r4, r5, r6, lr}
    adae:	4c0f      	ldr	r4, [pc, #60]	; (adec <z_setup_new_thread+0x40>)
    adb0:	b088      	sub	sp, #32
    adb2:	6826      	ldr	r6, [r4, #0]
    adb4:	9607      	str	r6, [sp, #28]
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	z_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    adb6:	9e10      	ldr	r6, [sp, #64]	; 0x40
    adb8:	9604      	str	r6, [sp, #16]
    adba:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    adbc:	9603      	str	r6, [sp, #12]
    adbe:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    adc0:	9602      	str	r6, [sp, #8]
    adc2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    adc4:	9601      	str	r6, [sp, #4]
    adc6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    adc8:	9600      	str	r6, [sp, #0]
{
    adca:	4605      	mov	r5, r0
	z_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    adcc:	f7fc fc40 	bl	7650 <z_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    add0:	4b07      	ldr	r3, [pc, #28]	; (adf0 <z_setup_new_thread+0x44>)
    add2:	689b      	ldr	r3, [r3, #8]
    add4:	b103      	cbz	r3, add8 <z_setup_new_thread+0x2c>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    add6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
    add8:	9a07      	ldr	r2, [sp, #28]
    adda:	662b      	str	r3, [r5, #96]	; 0x60
    addc:	6823      	ldr	r3, [r4, #0]
    adde:	429a      	cmp	r2, r3
    ade0:	d001      	beq.n	ade6 <z_setup_new_thread+0x3a>
    ade2:	f000 f91b 	bl	b01c <_StackCheckHandler>
    ade6:	b008      	add	sp, #32
    ade8:	bd70      	pop	{r4, r5, r6, pc}
    adea:	bf00      	nop
    adec:	200036b0 	.word	0x200036b0
    adf0:	20001894 	.word	0x20001894

0000adf4 <z_impl_k_thread_create>:
k_tid_t z_impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
    adf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    adf6:	4c1a      	ldr	r4, [pc, #104]	; (ae60 <z_impl_k_thread_create+0x6c>)
    adf8:	b089      	sub	sp, #36	; 0x24
    adfa:	6827      	ldr	r7, [r4, #0]
    adfc:	9707      	str	r7, [sp, #28]
#if defined(CONFIG_TEST) && defined(CONFIG_ARCH_HAS_USERSPACE) && !defined(CONFIG_USERSPACE)
	__ASSERT((options & K_USER) == 0,
		 "Platform is capable of user mode, and test thread created with K_USER option, but CONFIG_TEST_USERSPACE or CONFIG_USERSPACE is not set\n");
#endif

	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    adfe:	2700      	movs	r7, #0
    ae00:	9705      	str	r7, [sp, #20]
    ae02:	9f12      	ldr	r7, [sp, #72]	; 0x48
    ae04:	9704      	str	r7, [sp, #16]
    ae06:	9f11      	ldr	r7, [sp, #68]	; 0x44
    ae08:	9703      	str	r7, [sp, #12]
    ae0a:	9f10      	ldr	r7, [sp, #64]	; 0x40
    ae0c:	9702      	str	r7, [sp, #8]
    ae0e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
{
    ae10:	9e13      	ldr	r6, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    ae12:	9701      	str	r7, [sp, #4]
    ae14:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    ae16:	9700      	str	r7, [sp, #0]
{
    ae18:	4605      	mov	r5, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    ae1a:	f7ff ffc7 	bl	adac <z_setup_new_thread>
			  prio, options, NULL);

	if (delay != K_FOREVER) {
    ae1e:	1c73      	adds	r3, r6, #1
    ae20:	d003      	beq.n	ae2a <z_impl_k_thread_create+0x36>
	if (delay == 0) {
    ae22:	b94e      	cbnz	r6, ae38 <z_impl_k_thread_create+0x44>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread)
    ae24:	4628      	mov	r0, r5
    ae26:	f7ff ff8b 	bl	ad40 <z_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
    ae2a:	9a07      	ldr	r2, [sp, #28]
    ae2c:	6823      	ldr	r3, [r4, #0]
    ae2e:	429a      	cmp	r2, r3
    ae30:	4628      	mov	r0, r5
    ae32:	d013      	beq.n	ae5c <z_impl_k_thread_create+0x68>
    ae34:	f000 f8f2 	bl	b01c <_StackCheckHandler>
	return (s32_t)ceiling_fraction(
    ae38:	480a      	ldr	r0, [pc, #40]	; (ae64 <z_impl_k_thread_create+0x70>)
    ae3a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    ae3e:	2100      	movs	r1, #0
    ae40:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    ae44:	2300      	movs	r3, #0
    ae46:	fbc7 0106 	smlal	r0, r1, r7, r6
    ae4a:	f7f5 f959 	bl	100 <__aeabi_ldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    ae4e:	4906      	ldr	r1, [pc, #24]	; (ae68 <z_impl_k_thread_create+0x74>)
    ae50:	1c42      	adds	r2, r0, #1
    ae52:	f105 0018 	add.w	r0, r5, #24
    ae56:	f000 f963 	bl	b120 <z_add_timeout>
    ae5a:	e7e6      	b.n	ae2a <z_impl_k_thread_create+0x36>
    ae5c:	b009      	add	sp, #36	; 0x24
    ae5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ae60:	200036b0 	.word	0x200036b0
    ae64:	0004ffff 	.word	0x0004ffff
    ae68:	0000a44d 	.word	0x0000a44d

0000ae6c <z_thread_single_abort>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void z_thread_single_abort(struct k_thread *thread)
{
    ae6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ae6e:	4d14      	ldr	r5, [pc, #80]	; (aec0 <z_thread_single_abort+0x54>)
    ae70:	682a      	ldr	r2, [r5, #0]
    ae72:	9201      	str	r2, [sp, #4]
	if (thread->fn_abort != NULL) {
    ae74:	6d02      	ldr	r2, [r0, #80]	; 0x50
{
    ae76:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    ae78:	b102      	cbz	r2, ae7c <z_thread_single_abort+0x10>
		thread->fn_abort();
    ae7a:	4790      	blx	r2

	if (IS_ENABLED(CONFIG_SMP)) {
		z_sched_abort(thread);
	}

	if (z_is_thread_ready(thread)) {
    ae7c:	4620      	mov	r0, r4
    ae7e:	f7ff ff01 	bl	ac84 <z_is_thread_ready>
    ae82:	b160      	cbz	r0, ae9e <z_thread_single_abort+0x32>
		z_remove_thread_from_ready_q(thread);
    ae84:	4620      	mov	r0, r4
    ae86:	f7ff fbbb 	bl	a600 <z_remove_thread_from_ready_q>
		if (z_is_thread_timeout_active(thread)) {
			(void)z_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
    ae8a:	7b63      	ldrb	r3, [r4, #13]
	z_object_uninit(thread);

	/* Revoke permissions on thread's ID so that it may be recycled */
	z_thread_perms_all_clear(thread);
#endif
}
    ae8c:	9a01      	ldr	r2, [sp, #4]
	thread->base.thread_state |= _THREAD_DEAD;
    ae8e:	f043 0308 	orr.w	r3, r3, #8
    ae92:	7363      	strb	r3, [r4, #13]
}
    ae94:	682b      	ldr	r3, [r5, #0]
    ae96:	429a      	cmp	r2, r3
    ae98:	d00f      	beq.n	aeba <z_thread_single_abort+0x4e>
    ae9a:	f000 f8bf 	bl	b01c <_StackCheckHandler>
		if (z_is_thread_pending(thread)) {
    ae9e:	7b63      	ldrb	r3, [r4, #13]
    aea0:	079b      	lsls	r3, r3, #30
    aea2:	d502      	bpl.n	aeaa <z_thread_single_abort+0x3e>
			z_unpend_thread_no_timeout(thread);
    aea4:	4620      	mov	r0, r4
    aea6:	f7ff f93b 	bl	a120 <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
    aeaa:	69a3      	ldr	r3, [r4, #24]
    aeac:	2b00      	cmp	r3, #0
    aeae:	d0ec      	beq.n	ae8a <z_thread_single_abort+0x1e>
	return z_abort_timeout(&thread->base.timeout);
    aeb0:	f104 0018 	add.w	r0, r4, #24
    aeb4:	f000 f982 	bl	b1bc <z_abort_timeout>
    aeb8:	e7e7      	b.n	ae8a <z_thread_single_abort+0x1e>
}
    aeba:	b003      	add	sp, #12
    aebc:	bd30      	pop	{r4, r5, pc}
    aebe:	bf00      	nop
    aec0:	200036b0 	.word	0x200036b0

0000aec4 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    aec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aec8:	4d2d      	ldr	r5, [pc, #180]	; (af80 <z_init_static_threads+0xbc>)
	_FOREACH_STATIC_THREAD(thread_data) {
    aeca:	f8df 80c0 	ldr.w	r8, [pc, #192]	; af8c <z_init_static_threads+0xc8>
{
    aece:	682b      	ldr	r3, [r5, #0]
    aed0:	4e2c      	ldr	r6, [pc, #176]	; (af84 <z_init_static_threads+0xc0>)
    aed2:	b089      	sub	sp, #36	; 0x24
    aed4:	4647      	mov	r7, r8
    aed6:	9307      	str	r3, [sp, #28]
	_FOREACH_STATIC_THREAD(thread_data) {
    aed8:	4546      	cmp	r6, r8
    aeda:	f106 0430 	add.w	r4, r6, #48	; 0x30
    aede:	d310      	bcc.n	af02 <z_init_static_threads+0x3e>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    aee0:	f7ff f99e 	bl	a220 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    aee4:	4c27      	ldr	r4, [pc, #156]	; (af84 <z_init_static_threads+0xc0>)
    aee6:	f8df 80a8 	ldr.w	r8, [pc, #168]	; af90 <z_init_static_threads+0xcc>
    aeea:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
    aeee:	f04f 0900 	mov.w	r9, #0
    aef2:	42bc      	cmp	r4, r7
    aef4:	d322      	bcc.n	af3c <z_init_static_threads+0x78>
		if (thread_data->init_delay != K_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
    aef6:	9a07      	ldr	r2, [sp, #28]
    aef8:	682b      	ldr	r3, [r5, #0]
    aefa:	429a      	cmp	r2, r3
    aefc:	d03a      	beq.n	af74 <z_init_static_threads+0xb0>
    aefe:	f000 f88d 	bl	b01c <_StackCheckHandler>
		z_setup_new_thread(
    af02:	f854 3c04 	ldr.w	r3, [r4, #-4]
    af06:	9305      	str	r3, [sp, #20]
    af08:	f854 3c10 	ldr.w	r3, [r4, #-16]
    af0c:	9304      	str	r3, [sp, #16]
    af0e:	f854 3c14 	ldr.w	r3, [r4, #-20]
    af12:	9303      	str	r3, [sp, #12]
    af14:	f854 3c18 	ldr.w	r3, [r4, #-24]
    af18:	9302      	str	r3, [sp, #8]
    af1a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    af1e:	9301      	str	r3, [sp, #4]
    af20:	f854 3c20 	ldr.w	r3, [r4, #-32]
    af24:	9300      	str	r3, [sp, #0]
    af26:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    af2a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    af2e:	f7ff ff3d 	bl	adac <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    af32:	f854 3c30 	ldr.w	r3, [r4, #-48]
    af36:	64de      	str	r6, [r3, #76]	; 0x4c
    af38:	4626      	mov	r6, r4
    af3a:	e7cd      	b.n	aed8 <z_init_static_threads+0x14>
		if (thread_data->init_delay != K_FOREVER) {
    af3c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    af3e:	1c4b      	adds	r3, r1, #1
    af40:	d004      	beq.n	af4c <z_init_static_threads+0x88>
			schedule_new_thread(thread_data->init_thread,
    af42:	6826      	ldr	r6, [r4, #0]
	if (delay == 0) {
    af44:	b921      	cbnz	r1, af50 <z_init_static_threads+0x8c>
    af46:	4630      	mov	r0, r6
    af48:	f7ff fefa 	bl	ad40 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    af4c:	3430      	adds	r4, #48	; 0x30
    af4e:	e7d0      	b.n	aef2 <z_init_static_threads+0x2e>
    af50:	46c3      	mov	fp, r8
    af52:	46cc      	mov	ip, r9
    af54:	fbca bc01 	smlal	fp, ip, sl, r1
    af58:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    af5c:	2300      	movs	r3, #0
    af5e:	4658      	mov	r0, fp
    af60:	4661      	mov	r1, ip
    af62:	f7f5 f8cd 	bl	100 <__aeabi_ldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    af66:	4908      	ldr	r1, [pc, #32]	; (af88 <z_init_static_threads+0xc4>)
    af68:	1c42      	adds	r2, r0, #1
    af6a:	f106 0018 	add.w	r0, r6, #24
    af6e:	f000 f8d7 	bl	b120 <z_add_timeout>
    af72:	e7eb      	b.n	af4c <z_init_static_threads+0x88>
}
    af74:	b009      	add	sp, #36	; 0x24
    af76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
    af7a:	f7ff b9fd 	b.w	a378 <k_sched_unlock>
    af7e:	bf00      	nop
    af80:	200036b0 	.word	0x200036b0
    af84:	200077c0 	.word	0x200077c0
    af88:	0000a44d 	.word	0x0000a44d
    af8c:	200077c0 	.word	0x200077c0
    af90:	0004ffff 	.word	0x0004ffff

0000af94 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
    af94:	b537      	push	{r0, r1, r2, r4, r5, lr}
    af96:	4c09      	ldr	r4, [pc, #36]	; (afbc <z_init_thread_base+0x28>)
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    af98:	7303      	strb	r3, [r0, #12]
{
    af9a:	6825      	ldr	r5, [r4, #0]
    af9c:	9501      	str	r5, [sp, #4]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
    af9e:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
    afa0:	7342      	strb	r2, [r0, #13]
	thread_base->sched_locked = 0U;
    afa2:	73c3      	strb	r3, [r0, #15]

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    afa4:	9a01      	ldr	r2, [sp, #4]
	thread_base->prio = priority;
    afa6:	7381      	strb	r1, [r0, #14]
	node->prev = NULL;
    afa8:	e9c0 3306 	strd	r3, r3, [r0, #24]
}
    afac:	6823      	ldr	r3, [r4, #0]
    afae:	429a      	cmp	r2, r3
    afb0:	d001      	beq.n	afb6 <z_init_thread_base+0x22>
    afb2:	f000 f833 	bl	b01c <_StackCheckHandler>
    afb6:	b003      	add	sp, #12
    afb8:	bd30      	pop	{r4, r5, pc}
    afba:	bf00      	nop
    afbc:	200036b0 	.word	0x200036b0

0000afc0 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
    afc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    afc4:	4d12      	ldr	r5, [pc, #72]	; (b010 <k_work_q_start+0x50>)
    afc6:	b089      	sub	sp, #36	; 0x24
    afc8:	4606      	mov	r6, r0
    afca:	4699      	mov	r9, r3
    afcc:	682b      	ldr	r3, [r5, #0]
    afce:	9307      	str	r3, [sp, #28]
    afd0:	460f      	mov	r7, r1
    afd2:	4690      	mov	r8, r2
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
    afd4:	f106 0410 	add.w	r4, r6, #16
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue)
    afd8:	f7fe ffa8 	bl	9f2c <z_impl_k_queue_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
    afdc:	2000      	movs	r0, #0
    afde:	e9cd 0004 	strd	r0, r0, [sp, #16]
    afe2:	e9cd 0902 	strd	r0, r9, [sp, #8]
    afe6:	e9cd 6000 	strd	r6, r0, [sp]
    afea:	4b0a      	ldr	r3, [pc, #40]	; (b014 <k_work_q_start+0x54>)
    afec:	4642      	mov	r2, r8
    afee:	4639      	mov	r1, r7
    aff0:	4620      	mov	r0, r4
    aff2:	f7ff feff 	bl	adf4 <z_impl_k_thread_create>
K_SYSCALL_DECLARE2(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, int, k_tid_t, thread_id, const char *, value)
    aff6:	9a07      	ldr	r2, [sp, #28]
    aff8:	682b      	ldr	r3, [r5, #0]
    affa:	429a      	cmp	r2, r3
    affc:	d001      	beq.n	b002 <k_work_q_start+0x42>
    affe:	f000 f80d 	bl	b01c <_StackCheckHandler>
    b002:	4905      	ldr	r1, [pc, #20]	; (b018 <k_work_q_start+0x58>)
    b004:	4620      	mov	r0, r4
			work_q, NULL, NULL, prio, 0, 0);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
    b006:	b009      	add	sp, #36	; 0x24
    b008:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b00c:	f7ff be86 	b.w	ad1c <z_impl_k_thread_name_set>
    b010:	200036b0 	.word	0x200036b0
    b014:	000009e5 	.word	0x000009e5
    b018:	0000c4ce 	.word	0x0000c4ce

0000b01c <_StackCheckHandler>:
 * This function is invoked when a stack canary error is detected.
 *
 * @return Does not return
 */
void FUNC_NORETURN _StackCheckHandler(void)
{
    b01c:	4b04      	ldr	r3, [pc, #16]	; (b030 <_StackCheckHandler+0x14>)
    b01e:	b082      	sub	sp, #8
    b020:	681b      	ldr	r3, [r3, #0]
    b022:	9301      	str	r3, [sp, #4]
	/* Stack canary error is a software fatal condition; treat it as such.
	 */
	z_except_reason(_NANO_ERR_STACK_CHK_FAIL);
    b024:	4040      	eors	r0, r0
    b026:	f380 8811 	msr	BASEPRI, r0
    b02a:	f04f 0002 	mov.w	r0, #2
    b02e:	df02      	svc	2
    b030:	200036b0 	.word	0x200036b0

0000b034 <elapsed>:

	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
    b034:	b507      	push	{r0, r1, r2, lr}
    b036:	4b0d      	ldr	r3, [pc, #52]	; (b06c <elapsed+0x38>)
    b038:	681a      	ldr	r2, [r3, #0]
    b03a:	9201      	str	r2, [sp, #4]
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    b03c:	4a0c      	ldr	r2, [pc, #48]	; (b070 <elapsed+0x3c>)
    b03e:	6812      	ldr	r2, [r2, #0]
    b040:	b952      	cbnz	r2, b058 <elapsed+0x24>
    b042:	9a01      	ldr	r2, [sp, #4]
    b044:	681b      	ldr	r3, [r3, #0]
    b046:	429a      	cmp	r2, r3
    b048:	d001      	beq.n	b04e <elapsed+0x1a>
}
    b04a:	f7ff ffe7 	bl	b01c <_StackCheckHandler>
    b04e:	b003      	add	sp, #12
    b050:	f85d eb04 	ldr.w	lr, [sp], #4
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    b054:	f7fb bfec 	b.w	7030 <z_clock_elapsed>
}
    b058:	9a01      	ldr	r2, [sp, #4]
    b05a:	681b      	ldr	r3, [r3, #0]
    b05c:	429a      	cmp	r2, r3
    b05e:	f04f 0000 	mov.w	r0, #0
    b062:	d1f2      	bne.n	b04a <elapsed+0x16>
    b064:	b003      	add	sp, #12
    b066:	f85d fb04 	ldr.w	pc, [sp], #4
    b06a:	bf00      	nop
    b06c:	200036b0 	.word	0x200036b0
    b070:	2000194c 	.word	0x2000194c

0000b074 <remove_timeout>:
{
    b074:	b513      	push	{r0, r1, r4, lr}
    b076:	4a0e      	ldr	r2, [pc, #56]	; (b0b0 <remove_timeout+0x3c>)
    b078:	6813      	ldr	r3, [r2, #0]
    b07a:	9301      	str	r3, [sp, #4]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    b07c:	6803      	ldr	r3, [r0, #0]
    b07e:	b140      	cbz	r0, b092 <remove_timeout+0x1e>
    b080:	490c      	ldr	r1, [pc, #48]	; (b0b4 <remove_timeout+0x40>)
	return (node == list->tail) ? NULL : node->next;
    b082:	6849      	ldr	r1, [r1, #4]
    b084:	4288      	cmp	r0, r1
    b086:	d004      	beq.n	b092 <remove_timeout+0x1e>
	if (next(t) != NULL) {
    b088:	b11b      	cbz	r3, b092 <remove_timeout+0x1e>
		next(t)->dticks += t->dticks;
    b08a:	6899      	ldr	r1, [r3, #8]
    b08c:	6884      	ldr	r4, [r0, #8]
    b08e:	4421      	add	r1, r4
    b090:	6099      	str	r1, [r3, #8]
	node->prev->next = node->next;
    b092:	6841      	ldr	r1, [r0, #4]
    b094:	600b      	str	r3, [r1, #0]
	node->next->prev = node->prev;
    b096:	6059      	str	r1, [r3, #4]
	node->next = NULL;
    b098:	2300      	movs	r3, #0
}
    b09a:	9901      	ldr	r1, [sp, #4]
	node->prev = NULL;
    b09c:	e9c0 3300 	strd	r3, r3, [r0]
    b0a0:	6813      	ldr	r3, [r2, #0]
    b0a2:	4299      	cmp	r1, r3
    b0a4:	d001      	beq.n	b0aa <remove_timeout+0x36>
    b0a6:	f7ff ffb9 	bl	b01c <_StackCheckHandler>
    b0aa:	b002      	add	sp, #8
    b0ac:	bd10      	pop	{r4, pc}
    b0ae:	bf00      	nop
    b0b0:	200036b0 	.word	0x200036b0
    b0b4:	200036ec 	.word	0x200036ec

0000b0b8 <next_timeout>:

static s32_t next_timeout(void)
{
    b0b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    b0ba:	4e15      	ldr	r6, [pc, #84]	; (b110 <next_timeout+0x58>)
	return list->head == list;
    b0bc:	4b15      	ldr	r3, [pc, #84]	; (b114 <next_timeout+0x5c>)
    b0be:	6832      	ldr	r2, [r6, #0]
    b0c0:	9201      	str	r2, [sp, #4]
	int maxw = can_wait_forever ? K_FOREVER : INT_MAX;
    b0c2:	4a15      	ldr	r2, [pc, #84]	; (b118 <next_timeout+0x60>)
    b0c4:	681c      	ldr	r4, [r3, #0]
    b0c6:	7812      	ldrb	r2, [r2, #0]
    b0c8:	2a00      	cmp	r2, #0
    b0ca:	bf14      	ite	ne
    b0cc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    b0d0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b0d4:	429c      	cmp	r4, r3
    b0d6:	d00a      	beq.n	b0ee <next_timeout+0x36>
	struct _timeout *to = first();
	s32_t ret = to == NULL ? maxw : MAX(0, to->dticks - elapsed());
    b0d8:	b14c      	cbz	r4, b0ee <next_timeout+0x36>
    b0da:	68a5      	ldr	r5, [r4, #8]
    b0dc:	f7ff ffaa 	bl	b034 <elapsed>
    b0e0:	1a28      	subs	r0, r5, r0
    b0e2:	2800      	cmp	r0, #0
    b0e4:	db0f      	blt.n	b106 <next_timeout+0x4e>
    b0e6:	68a4      	ldr	r4, [r4, #8]
    b0e8:	f7ff ffa4 	bl	b034 <elapsed>
    b0ec:	1a20      	subs	r0, r4, r0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    b0ee:	4b0b      	ldr	r3, [pc, #44]	; (b11c <next_timeout+0x64>)
    b0f0:	691b      	ldr	r3, [r3, #16]
    b0f2:	b113      	cbz	r3, b0fa <next_timeout+0x42>
    b0f4:	4298      	cmp	r0, r3
    b0f6:	bfa8      	it	ge
    b0f8:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    b0fa:	9a01      	ldr	r2, [sp, #4]
    b0fc:	6833      	ldr	r3, [r6, #0]
    b0fe:	429a      	cmp	r2, r3
    b100:	d003      	beq.n	b10a <next_timeout+0x52>
    b102:	f7ff ff8b 	bl	b01c <_StackCheckHandler>
	s32_t ret = to == NULL ? maxw : MAX(0, to->dticks - elapsed());
    b106:	2000      	movs	r0, #0
    b108:	e7f1      	b.n	b0ee <next_timeout+0x36>
}
    b10a:	b002      	add	sp, #8
    b10c:	bd70      	pop	{r4, r5, r6, pc}
    b10e:	bf00      	nop
    b110:	200036b0 	.word	0x200036b0
    b114:	200036ec 	.word	0x200036ec
    b118:	20001bcc 	.word	0x20001bcc
    b11c:	20001894 	.word	0x20001894

0000b120 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
    b120:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b122:	4e24      	ldr	r6, [pc, #144]	; (b1b4 <z_add_timeout+0x94>)
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    b124:	60c1      	str	r1, [r0, #12]
{
    b126:	6833      	ldr	r3, [r6, #0]
    b128:	9301      	str	r3, [sp, #4]
    b12a:	4604      	mov	r4, r0
    b12c:	4617      	mov	r7, r2
	__asm__ volatile(
    b12e:	f04f 0320 	mov.w	r3, #32
    b132:	f3ef 8511 	mrs	r5, BASEPRI
    b136:	f383 8811 	msr	BASEPRI, r3
    b13a:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    b13e:	f7ff ff79 	bl	b034 <elapsed>
	return list->head == list;
    b142:	4b1d      	ldr	r3, [pc, #116]	; (b1b8 <z_add_timeout+0x98>)
    b144:	681a      	ldr	r2, [r3, #0]
    b146:	2f01      	cmp	r7, #1
    b148:	bfac      	ite	ge
    b14a:	19c0      	addge	r0, r0, r7
    b14c:	3001      	addlt	r0, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b14e:	429a      	cmp	r2, r3
    b150:	60a0      	str	r0, [r4, #8]
    b152:	d001      	beq.n	b158 <z_add_timeout+0x38>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    b154:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    b156:	b932      	cbnz	r2, b166 <z_add_timeout+0x46>
	node->prev = list->tail;
    b158:	685a      	ldr	r2, [r3, #4]
    b15a:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
    b15c:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    b15e:	6023      	str	r3, [r4, #0]
	list->tail->next = node;
    b160:	6014      	str	r4, [r2, #0]
	list->tail = node;
    b162:	605c      	str	r4, [r3, #4]
    b164:	e00a      	b.n	b17c <z_add_timeout+0x5c>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
    b166:	6890      	ldr	r0, [r2, #8]
    b168:	68a1      	ldr	r1, [r4, #8]
    b16a:	4288      	cmp	r0, r1
    b16c:	dd1a      	ble.n	b1a4 <z_add_timeout+0x84>
				t->dticks -= to->dticks;
    b16e:	1a41      	subs	r1, r0, r1
    b170:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
    b172:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    b174:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
    b178:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    b17a:	6054      	str	r4, [r2, #4]
	return list->head == list;
    b17c:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b17e:	429a      	cmp	r2, r3
    b180:	d006      	beq.n	b190 <z_add_timeout+0x70>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    b182:	4294      	cmp	r4, r2
    b184:	d104      	bne.n	b190 <z_add_timeout+0x70>
			z_clock_set_timeout(next_timeout(), false);
    b186:	f7ff ff97 	bl	b0b8 <next_timeout>
    b18a:	2100      	movs	r1, #0
    b18c:	f7fb ff08 	bl	6fa0 <z_clock_set_timeout>
	__asm__ volatile(
    b190:	f385 8811 	msr	BASEPRI, r5
    b194:	f3bf 8f6f 	isb	sy
		}
	}
}
    b198:	9a01      	ldr	r2, [sp, #4]
    b19a:	6833      	ldr	r3, [r6, #0]
    b19c:	429a      	cmp	r2, r3
    b19e:	d007      	beq.n	b1b0 <z_add_timeout+0x90>
    b1a0:	f7ff ff3c 	bl	b01c <_StackCheckHandler>
			to->dticks -= t->dticks;
    b1a4:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    b1a6:	42ba      	cmp	r2, r7
    b1a8:	60a1      	str	r1, [r4, #8]
    b1aa:	d0d5      	beq.n	b158 <z_add_timeout+0x38>
    b1ac:	6812      	ldr	r2, [r2, #0]
    b1ae:	e7d2      	b.n	b156 <z_add_timeout+0x36>
}
    b1b0:	b003      	add	sp, #12
    b1b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b1b4:	200036b0 	.word	0x200036b0
    b1b8:	200036ec 	.word	0x200036ec

0000b1bc <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    b1bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    b1be:	4c0f      	ldr	r4, [pc, #60]	; (b1fc <z_abort_timeout+0x40>)
    b1c0:	6821      	ldr	r1, [r4, #0]
    b1c2:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
    b1c4:	f04f 0120 	mov.w	r1, #32
    b1c8:	f3ef 8511 	mrs	r5, BASEPRI
    b1cc:	f381 8811 	msr	BASEPRI, r1
    b1d0:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    b1d4:	6802      	ldr	r2, [r0, #0]
    b1d6:	b162      	cbz	r2, b1f2 <z_abort_timeout+0x36>
			remove_timeout(to);
    b1d8:	f7ff ff4c 	bl	b074 <remove_timeout>
			ret = 0;
    b1dc:	2000      	movs	r0, #0
	__asm__ volatile(
    b1de:	f385 8811 	msr	BASEPRI, r5
    b1e2:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    b1e6:	9a01      	ldr	r2, [sp, #4]
    b1e8:	6823      	ldr	r3, [r4, #0]
    b1ea:	429a      	cmp	r2, r3
    b1ec:	d004      	beq.n	b1f8 <z_abort_timeout+0x3c>
    b1ee:	f7ff ff15 	bl	b01c <_StackCheckHandler>
	int ret = -EINVAL;
    b1f2:	f06f 0015 	mvn.w	r0, #21
    b1f6:	e7f2      	b.n	b1de <z_abort_timeout+0x22>
}
    b1f8:	b003      	add	sp, #12
    b1fa:	bd30      	pop	{r4, r5, pc}
    b1fc:	200036b0 	.word	0x200036b0

0000b200 <z_get_next_timeout_expiry>:

	return ticks - elapsed();
}

s32_t z_get_next_timeout_expiry(void)
{
    b200:	b537      	push	{r0, r1, r2, r4, r5, lr}
    b202:	4c0c      	ldr	r4, [pc, #48]	; (b234 <z_get_next_timeout_expiry+0x34>)
    b204:	6823      	ldr	r3, [r4, #0]
    b206:	9301      	str	r3, [sp, #4]
	__asm__ volatile(
    b208:	f04f 0320 	mov.w	r3, #32
    b20c:	f3ef 8511 	mrs	r5, BASEPRI
    b210:	f383 8811 	msr	BASEPRI, r3
    b214:	f3bf 8f6f 	isb	sy
	s32_t ret = K_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    b218:	f7ff ff4e 	bl	b0b8 <next_timeout>
	__asm__ volatile(
    b21c:	f385 8811 	msr	BASEPRI, r5
    b220:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    b224:	9a01      	ldr	r2, [sp, #4]
    b226:	6823      	ldr	r3, [r4, #0]
    b228:	429a      	cmp	r2, r3
    b22a:	d001      	beq.n	b230 <z_get_next_timeout_expiry+0x30>
    b22c:	f7ff fef6 	bl	b01c <_StackCheckHandler>
    b230:	b003      	add	sp, #12
    b232:	bd30      	pop	{r4, r5, pc}
    b234:	200036b0 	.word	0x200036b0

0000b238 <z_set_timeout_expiry>:

void z_set_timeout_expiry(s32_t ticks, bool idle)
{
    b238:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b23a:	4c11      	ldr	r4, [pc, #68]	; (b280 <z_set_timeout_expiry+0x48>)
    b23c:	6823      	ldr	r3, [r4, #0]
    b23e:	9301      	str	r3, [sp, #4]
    b240:	4605      	mov	r5, r0
    b242:	460f      	mov	r7, r1
	__asm__ volatile(
    b244:	f04f 0320 	mov.w	r3, #32
    b248:	f3ef 8611 	mrs	r6, BASEPRI
    b24c:	f383 8811 	msr	BASEPRI, r3
    b250:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
		int next = next_timeout();
    b254:	f7ff ff30 	bl	b0b8 <next_timeout>
		 * what we have.  Also don't try to set a timeout when
		 * one is about to expire: drivers have internal logic
		 * that will bump the timeout to the "next" tick if
		 * it's not considered to be settable as directed.
		 */
		if (sooner && !imminent) {
    b258:	42a8      	cmp	r0, r5
    b25a:	dd05      	ble.n	b268 <z_set_timeout_expiry+0x30>
    b25c:	2801      	cmp	r0, #1
    b25e:	dd03      	ble.n	b268 <z_set_timeout_expiry+0x30>
			z_clock_set_timeout(ticks, idle);
    b260:	4639      	mov	r1, r7
    b262:	4628      	mov	r0, r5
    b264:	f7fb fe9c 	bl	6fa0 <z_clock_set_timeout>
	__asm__ volatile(
    b268:	f386 8811 	msr	BASEPRI, r6
    b26c:	f3bf 8f6f 	isb	sy
		}
	}
}
    b270:	9a01      	ldr	r2, [sp, #4]
    b272:	6823      	ldr	r3, [r4, #0]
    b274:	429a      	cmp	r2, r3
    b276:	d001      	beq.n	b27c <z_set_timeout_expiry+0x44>
    b278:	f7ff fed0 	bl	b01c <_StackCheckHandler>
    b27c:	b003      	add	sp, #12
    b27e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b280:	200036b0 	.word	0x200036b0

0000b284 <z_clock_announce>:

void z_clock_announce(s32_t ticks)
{
    b284:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b288:	4f2c      	ldr	r7, [pc, #176]	; (b33c <z_clock_announce+0xb8>)
    b28a:	683b      	ldr	r3, [r7, #0]
    b28c:	9301      	str	r3, [sp, #4]
    b28e:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    b290:	f7ff f96c 	bl	a56c <z_time_slice>
	__asm__ volatile(
    b294:	f04f 0320 	mov.w	r3, #32
    b298:	f3ef 8511 	mrs	r5, BASEPRI
    b29c:	f383 8811 	msr	BASEPRI, r3
    b2a0:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    b2a4:	4e26      	ldr	r6, [pc, #152]	; (b340 <z_clock_announce+0xbc>)
    b2a6:	f8df 809c 	ldr.w	r8, [pc, #156]	; b344 <z_clock_announce+0xc0>
	return list->head == list;
    b2aa:	f8df 909c 	ldr.w	r9, [pc, #156]	; b348 <z_clock_announce+0xc4>
    b2ae:	6034      	str	r4, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    b2b0:	46c2      	mov	sl, r8
    b2b2:	f8d9 4000 	ldr.w	r4, [r9]
    b2b6:	6830      	ldr	r0, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b2b8:	454c      	cmp	r4, r9
    b2ba:	e9d8 bc00 	ldrd	fp, ip, [r8]
    b2be:	d005      	beq.n	b2cc <z_clock_announce+0x48>
    b2c0:	b124      	cbz	r4, b2cc <z_clock_announce+0x48>
    b2c2:	68a1      	ldr	r1, [r4, #8]
    b2c4:	4281      	cmp	r1, r0
    b2c6:	dd18      	ble.n	b2fa <z_clock_announce+0x76>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    b2c8:	1a09      	subs	r1, r1, r0
    b2ca:	60a1      	str	r1, [r4, #8]
	}

	curr_tick += announce_remaining;
    b2cc:	eb1b 0200 	adds.w	r2, fp, r0
    b2d0:	eb4c 73e0 	adc.w	r3, ip, r0, asr #31
	announce_remaining = 0;
    b2d4:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    b2d6:	e9ca 2300 	strd	r2, r3, [sl]
	announce_remaining = 0;
    b2da:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
    b2dc:	f7ff feec 	bl	b0b8 <next_timeout>
    b2e0:	4621      	mov	r1, r4
    b2e2:	f7fb fe5d 	bl	6fa0 <z_clock_set_timeout>
	__asm__ volatile(
    b2e6:	f385 8811 	msr	BASEPRI, r5
    b2ea:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    b2ee:	9a01      	ldr	r2, [sp, #4]
    b2f0:	683b      	ldr	r3, [r7, #0]
    b2f2:	429a      	cmp	r2, r3
    b2f4:	d01e      	beq.n	b334 <z_clock_announce+0xb0>
    b2f6:	f7ff fe91 	bl	b01c <_StackCheckHandler>
		curr_tick += dt;
    b2fa:	eb1b 0201 	adds.w	r2, fp, r1
    b2fe:	eb4c 73e1 	adc.w	r3, ip, r1, asr #31
    b302:	e9c8 2300 	strd	r2, r3, [r8]
		t->dticks = 0;
    b306:	2300      	movs	r3, #0
		announce_remaining -= dt;
    b308:	1a41      	subs	r1, r0, r1
		t->dticks = 0;
    b30a:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
    b30c:	4620      	mov	r0, r4
		announce_remaining -= dt;
    b30e:	6031      	str	r1, [r6, #0]
		remove_timeout(t);
    b310:	f7ff feb0 	bl	b074 <remove_timeout>
    b314:	f385 8811 	msr	BASEPRI, r5
    b318:	f3bf 8f6f 	isb	sy
		t->fn(t);
    b31c:	68e3      	ldr	r3, [r4, #12]
    b31e:	4620      	mov	r0, r4
    b320:	4798      	blx	r3
	__asm__ volatile(
    b322:	f04f 0320 	mov.w	r3, #32
    b326:	f3ef 8511 	mrs	r5, BASEPRI
    b32a:	f383 8811 	msr	BASEPRI, r3
    b32e:	f3bf 8f6f 	isb	sy
#endif

#ifdef SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    b332:	e7be      	b.n	b2b2 <z_clock_announce+0x2e>
}
    b334:	b003      	add	sp, #12
    b336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b33a:	bf00      	nop
    b33c:	200036b0 	.word	0x200036b0
    b340:	2000194c 	.word	0x2000194c
    b344:	20000000 	.word	0x20000000
    b348:	200036ec 	.word	0x200036ec

0000b34c <z_tick_get>:
{
	can_wait_forever = 1;
}

s64_t z_tick_get(void)
{
    b34c:	e92d 4833 	stmdb	sp!, {r0, r1, r4, r5, fp, lr}
    b350:	4c11      	ldr	r4, [pc, #68]	; (b398 <z_tick_get+0x4c>)
    b352:	6823      	ldr	r3, [r4, #0]
    b354:	9301      	str	r3, [sp, #4]
    b356:	f04f 0320 	mov.w	r3, #32
    b35a:	f3ef 8511 	mrs	r5, BASEPRI
    b35e:	f383 8811 	msr	BASEPRI, r3
    b362:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    b366:	f7fb fe63 	bl	7030 <z_clock_elapsed>
    b36a:	4b0c      	ldr	r3, [pc, #48]	; (b39c <z_tick_get+0x50>)
    b36c:	e9d3 2300 	ldrd	r2, r3, [r3]
    b370:	eb12 0b00 	adds.w	fp, r2, r0
    b374:	f143 0c00 	adc.w	ip, r3, #0
    b378:	4658      	mov	r0, fp
    b37a:	4661      	mov	r1, ip
	__asm__ volatile(
    b37c:	f385 8811 	msr	BASEPRI, r5
    b380:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    b384:	9a01      	ldr	r2, [sp, #4]
    b386:	6823      	ldr	r3, [r4, #0]
    b388:	429a      	cmp	r2, r3
    b38a:	d001      	beq.n	b390 <z_tick_get+0x44>
    b38c:	f7ff fe46 	bl	b01c <_StackCheckHandler>
    b390:	b002      	add	sp, #8
    b392:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
    b396:	bf00      	nop
    b398:	200036b0 	.word	0x200036b0
    b39c:	20000000 	.word	0x20000000

0000b3a0 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
    b3a0:	b513      	push	{r0, r1, r4, lr}
    b3a2:	4c06      	ldr	r4, [pc, #24]	; (b3bc <z_tick_get_32+0x1c>)
    b3a4:	6823      	ldr	r3, [r4, #0]
    b3a6:	9301      	str	r3, [sp, #4]
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
    b3a8:	f7ff ffd0 	bl	b34c <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
    b3ac:	9a01      	ldr	r2, [sp, #4]
    b3ae:	6823      	ldr	r3, [r4, #0]
    b3b0:	429a      	cmp	r2, r3
    b3b2:	d001      	beq.n	b3b8 <z_tick_get_32+0x18>
    b3b4:	f7ff fe32 	bl	b01c <_StackCheckHandler>
    b3b8:	b002      	add	sp, #8
    b3ba:	bd10      	pop	{r4, pc}
    b3bc:	200036b0 	.word	0x200036b0

0000b3c0 <_OffsetAbsSyms>:
/*
 * The final link step uses the symbol _OffsetAbsSyms to force the linkage of
 * offsets.o into the ELF image.
 */

GEN_ABS_SYM_BEGIN(_OffsetAbsSyms)
    b3c0:	b507      	push	{r0, r1, r2, lr}
    b3c2:	4b06      	ldr	r3, [pc, #24]	; (b3dc <_OffsetAbsSyms+0x1c>)
    b3c4:	681a      	ldr	r2, [r3, #0]
    b3c6:	9201      	str	r2, [sp, #4]
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
    b3c8:	9a01      	ldr	r2, [sp, #4]
    b3ca:	681b      	ldr	r3, [r3, #0]
    b3cc:	429a      	cmp	r2, r3
    b3ce:	d001      	beq.n	b3d4 <_OffsetAbsSyms+0x14>
    b3d0:	f7ff fe24 	bl	b01c <_StackCheckHandler>
    b3d4:	b003      	add	sp, #12
    b3d6:	f85d fb04 	ldr.w	pc, [sp], #4
    b3da:	bf00      	nop
    b3dc:	200036b0 	.word	0x200036b0
